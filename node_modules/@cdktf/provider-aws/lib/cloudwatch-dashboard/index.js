"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudwatchDashboard = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/cloudwatch_dashboard aws_cloudwatch_dashboard}
*/
class CloudwatchDashboard extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/cloudwatch_dashboard aws_cloudwatch_dashboard} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CloudwatchDashboardConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_cloudwatch_dashboard',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._dashboardBody = config.dashboardBody;
        this._dashboardName = config.dashboardName;
        this._id = config.id;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // dashboard_arn - computed: true, optional: false, required: false
    get dashboardArn() {
        return this.getStringAttribute('dashboard_arn');
    }
    get dashboardBody() {
        return this.getStringAttribute('dashboard_body');
    }
    set dashboardBody(value) {
        this._dashboardBody = value;
    }
    // Temporarily expose input value. Use with caution.
    get dashboardBodyInput() {
        return this._dashboardBody;
    }
    get dashboardName() {
        return this.getStringAttribute('dashboard_name');
    }
    set dashboardName(value) {
        this._dashboardName = value;
    }
    // Temporarily expose input value. Use with caution.
    get dashboardNameInput() {
        return this._dashboardName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            dashboard_body: cdktf.stringToTerraform(this._dashboardBody),
            dashboard_name: cdktf.stringToTerraform(this._dashboardName),
            id: cdktf.stringToTerraform(this._id),
        };
    }
}
exports.CloudwatchDashboard = CloudwatchDashboard;
_a = JSII_RTTI_SYMBOL_1;
CloudwatchDashboard[_a] = { fqn: "@cdktf/provider-aws.cloudwatchDashboard.CloudwatchDashboard", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
CloudwatchDashboard.tfResourceType = "aws_cloudwatch_dashboard";
//# sourceMappingURL=data:application/json;base64,