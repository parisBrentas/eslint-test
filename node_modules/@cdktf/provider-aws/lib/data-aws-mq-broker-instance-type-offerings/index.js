"use strict";
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsMqBrokerInstanceTypeOfferings = exports.DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsList = exports.DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsOutputReference = exports.dataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsToTerraform = exports.DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsAvailabilityZonesList = exports.DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsAvailabilityZonesOutputReference = exports.dataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsAvailabilityZonesToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsAvailabilityZonesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsAvailabilityZonesToTerraform = dataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsAvailabilityZonesToTerraform;
class DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsAvailabilityZonesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
}
exports.DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsAvailabilityZonesOutputReference = DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsAvailabilityZonesOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsAvailabilityZonesOutputReference[_a] = { fqn: "@cdktf/provider-aws.dataAwsMqBrokerInstanceTypeOfferings.DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsAvailabilityZonesOutputReference", version: "10.0.12" };
class DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsAvailabilityZonesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsAvailabilityZonesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsAvailabilityZonesList = DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsAvailabilityZonesList;
_b = JSII_RTTI_SYMBOL_1;
DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsAvailabilityZonesList[_b] = { fqn: "@cdktf/provider-aws.dataAwsMqBrokerInstanceTypeOfferings.DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsAvailabilityZonesList", version: "10.0.12" };
function dataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsToTerraform = dataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsToTerraform;
class DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // availability_zones - computed: true, optional: false, required: false
        this._availabilityZones = new DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsAvailabilityZonesList(this, "availability_zones", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    get availabilityZones() {
        return this._availabilityZones;
    }
    // engine_type - computed: true, optional: false, required: false
    get engineType() {
        return this.getStringAttribute('engine_type');
    }
    // host_instance_type - computed: true, optional: false, required: false
    get hostInstanceType() {
        return this.getStringAttribute('host_instance_type');
    }
    // storage_type - computed: true, optional: false, required: false
    get storageType() {
        return this.getStringAttribute('storage_type');
    }
    // supported_deployment_modes - computed: true, optional: false, required: false
    get supportedDeploymentModes() {
        return cdktf.Fn.tolist(this.getListAttribute('supported_deployment_modes'));
    }
    // supported_engine_versions - computed: true, optional: false, required: false
    get supportedEngineVersions() {
        return this.getListAttribute('supported_engine_versions');
    }
}
exports.DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsOutputReference = DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsOutputReference[_c] = { fqn: "@cdktf/provider-aws.dataAwsMqBrokerInstanceTypeOfferings.DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsOutputReference", version: "10.0.12" };
class DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsList = DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsList;
_d = JSII_RTTI_SYMBOL_1;
DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsList[_d] = { fqn: "@cdktf/provider-aws.dataAwsMqBrokerInstanceTypeOfferings.DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsList", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/d/mq_broker_instance_type_offerings aws_mq_broker_instance_type_offerings}
*/
class DataAwsMqBrokerInstanceTypeOfferings extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/d/mq_broker_instance_type_offerings aws_mq_broker_instance_type_offerings} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsMqBrokerInstanceTypeOfferingsConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'aws_mq_broker_instance_type_offerings',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // ==========
        // ATTRIBUTES
        // ==========
        // broker_instance_options - computed: true, optional: false, required: false
        this._brokerInstanceOptions = new DataAwsMqBrokerInstanceTypeOfferingsBrokerInstanceOptionsList(this, "broker_instance_options", false);
        this._engineType = config.engineType;
        this._hostInstanceType = config.hostInstanceType;
        this._id = config.id;
        this._storageType = config.storageType;
    }
    get brokerInstanceOptions() {
        return this._brokerInstanceOptions;
    }
    get engineType() {
        return this.getStringAttribute('engine_type');
    }
    set engineType(value) {
        this._engineType = value;
    }
    resetEngineType() {
        this._engineType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get engineTypeInput() {
        return this._engineType;
    }
    get hostInstanceType() {
        return this.getStringAttribute('host_instance_type');
    }
    set hostInstanceType(value) {
        this._hostInstanceType = value;
    }
    resetHostInstanceType() {
        this._hostInstanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostInstanceTypeInput() {
        return this._hostInstanceType;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get storageType() {
        return this.getStringAttribute('storage_type');
    }
    set storageType(value) {
        this._storageType = value;
    }
    resetStorageType() {
        this._storageType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageTypeInput() {
        return this._storageType;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            engine_type: cdktf.stringToTerraform(this._engineType),
            host_instance_type: cdktf.stringToTerraform(this._hostInstanceType),
            id: cdktf.stringToTerraform(this._id),
            storage_type: cdktf.stringToTerraform(this._storageType),
        };
    }
}
exports.DataAwsMqBrokerInstanceTypeOfferings = DataAwsMqBrokerInstanceTypeOfferings;
_e = JSII_RTTI_SYMBOL_1;
DataAwsMqBrokerInstanceTypeOfferings[_e] = { fqn: "@cdktf/provider-aws.dataAwsMqBrokerInstanceTypeOfferings.DataAwsMqBrokerInstanceTypeOfferings", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
DataAwsMqBrokerInstanceTypeOfferings.tfResourceType = "aws_mq_broker_instance_type_offerings";
//# sourceMappingURL=data:application/json;base64,