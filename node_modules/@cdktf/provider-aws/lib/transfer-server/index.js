"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferServer = exports.TransferServerWorkflowDetailsOutputReference = exports.transferServerWorkflowDetailsToTerraform = exports.TransferServerWorkflowDetailsOnUploadOutputReference = exports.transferServerWorkflowDetailsOnUploadToTerraform = exports.TransferServerEndpointDetailsOutputReference = exports.transferServerEndpointDetailsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function transferServerEndpointDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        address_allocation_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.addressAllocationIds),
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroupIds),
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.subnetIds),
        vpc_endpoint_id: cdktf.stringToTerraform(struct.vpcEndpointId),
        vpc_id: cdktf.stringToTerraform(struct.vpcId),
    };
}
exports.transferServerEndpointDetailsToTerraform = transferServerEndpointDetailsToTerraform;
class TransferServerEndpointDetailsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._addressAllocationIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.addressAllocationIds = this._addressAllocationIds;
        }
        if (this._securityGroupIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroupIds = this._securityGroupIds;
        }
        if (this._subnetIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetIds = this._subnetIds;
        }
        if (this._vpcEndpointId !== undefined) {
            hasAnyValues = true;
            internalValueResult.vpcEndpointId = this._vpcEndpointId;
        }
        if (this._vpcId !== undefined) {
            hasAnyValues = true;
            internalValueResult.vpcId = this._vpcId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._addressAllocationIds = undefined;
            this._securityGroupIds = undefined;
            this._subnetIds = undefined;
            this._vpcEndpointId = undefined;
            this._vpcId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._addressAllocationIds = value.addressAllocationIds;
            this._securityGroupIds = value.securityGroupIds;
            this._subnetIds = value.subnetIds;
            this._vpcEndpointId = value.vpcEndpointId;
            this._vpcId = value.vpcId;
        }
    }
    get addressAllocationIds() {
        return cdktf.Fn.tolist(this.getListAttribute('address_allocation_ids'));
    }
    set addressAllocationIds(value) {
        this._addressAllocationIds = value;
    }
    resetAddressAllocationIds() {
        this._addressAllocationIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get addressAllocationIdsInput() {
        return this._addressAllocationIds;
    }
    get securityGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('security_group_ids'));
    }
    set securityGroupIds(value) {
        this._securityGroupIds = value;
    }
    resetSecurityGroupIds() {
        this._securityGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupIdsInput() {
        return this._securityGroupIds;
    }
    get subnetIds() {
        return cdktf.Fn.tolist(this.getListAttribute('subnet_ids'));
    }
    set subnetIds(value) {
        this._subnetIds = value;
    }
    resetSubnetIds() {
        this._subnetIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdsInput() {
        return this._subnetIds;
    }
    get vpcEndpointId() {
        return this.getStringAttribute('vpc_endpoint_id');
    }
    set vpcEndpointId(value) {
        this._vpcEndpointId = value;
    }
    resetVpcEndpointId() {
        this._vpcEndpointId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcEndpointIdInput() {
        return this._vpcEndpointId;
    }
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
    set vpcId(value) {
        this._vpcId = value;
    }
    resetVpcId() {
        this._vpcId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcIdInput() {
        return this._vpcId;
    }
}
exports.TransferServerEndpointDetailsOutputReference = TransferServerEndpointDetailsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
TransferServerEndpointDetailsOutputReference[_a] = { fqn: "@cdktf/provider-aws.transferServer.TransferServerEndpointDetailsOutputReference", version: "10.0.12" };
function transferServerWorkflowDetailsOnUploadToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        execution_role: cdktf.stringToTerraform(struct.executionRole),
        workflow_id: cdktf.stringToTerraform(struct.workflowId),
    };
}
exports.transferServerWorkflowDetailsOnUploadToTerraform = transferServerWorkflowDetailsOnUploadToTerraform;
class TransferServerWorkflowDetailsOnUploadOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._executionRole !== undefined) {
            hasAnyValues = true;
            internalValueResult.executionRole = this._executionRole;
        }
        if (this._workflowId !== undefined) {
            hasAnyValues = true;
            internalValueResult.workflowId = this._workflowId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._executionRole = undefined;
            this._workflowId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._executionRole = value.executionRole;
            this._workflowId = value.workflowId;
        }
    }
    get executionRole() {
        return this.getStringAttribute('execution_role');
    }
    set executionRole(value) {
        this._executionRole = value;
    }
    // Temporarily expose input value. Use with caution.
    get executionRoleInput() {
        return this._executionRole;
    }
    get workflowId() {
        return this.getStringAttribute('workflow_id');
    }
    set workflowId(value) {
        this._workflowId = value;
    }
    // Temporarily expose input value. Use with caution.
    get workflowIdInput() {
        return this._workflowId;
    }
}
exports.TransferServerWorkflowDetailsOnUploadOutputReference = TransferServerWorkflowDetailsOnUploadOutputReference;
_b = JSII_RTTI_SYMBOL_1;
TransferServerWorkflowDetailsOnUploadOutputReference[_b] = { fqn: "@cdktf/provider-aws.transferServer.TransferServerWorkflowDetailsOnUploadOutputReference", version: "10.0.12" };
function transferServerWorkflowDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        on_upload: transferServerWorkflowDetailsOnUploadToTerraform(struct.onUpload),
    };
}
exports.transferServerWorkflowDetailsToTerraform = transferServerWorkflowDetailsToTerraform;
class TransferServerWorkflowDetailsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // on_upload - computed: false, optional: true, required: false
        this._onUpload = new TransferServerWorkflowDetailsOnUploadOutputReference(this, "on_upload");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._onUpload?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.onUpload = this._onUpload?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._onUpload.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._onUpload.internalValue = value.onUpload;
        }
    }
    get onUpload() {
        return this._onUpload;
    }
    putOnUpload(value) {
        this._onUpload.internalValue = value;
    }
    resetOnUpload() {
        this._onUpload.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onUploadInput() {
        return this._onUpload.internalValue;
    }
}
exports.TransferServerWorkflowDetailsOutputReference = TransferServerWorkflowDetailsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
TransferServerWorkflowDetailsOutputReference[_c] = { fqn: "@cdktf/provider-aws.transferServer.TransferServerWorkflowDetailsOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/transfer_server aws_transfer_server}
*/
class TransferServer extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/transfer_server aws_transfer_server} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options TransferServerConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'aws_transfer_server',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // endpoint_details - computed: false, optional: true, required: false
        this._endpointDetails = new TransferServerEndpointDetailsOutputReference(this, "endpoint_details");
        // workflow_details - computed: false, optional: true, required: false
        this._workflowDetails = new TransferServerWorkflowDetailsOutputReference(this, "workflow_details");
        this._certificate = config.certificate;
        this._directoryId = config.directoryId;
        this._domain = config.domain;
        this._endpointType = config.endpointType;
        this._forceDestroy = config.forceDestroy;
        this._function = config.function;
        this._hostKey = config.hostKey;
        this._id = config.id;
        this._identityProviderType = config.identityProviderType;
        this._invocationRole = config.invocationRole;
        this._loggingRole = config.loggingRole;
        this._postAuthenticationLoginBanner = config.postAuthenticationLoginBanner;
        this._preAuthenticationLoginBanner = config.preAuthenticationLoginBanner;
        this._protocols = config.protocols;
        this._securityPolicyName = config.securityPolicyName;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._url = config.url;
        this._endpointDetails.internalValue = config.endpointDetails;
        this._workflowDetails.internalValue = config.workflowDetails;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get certificate() {
        return this.getStringAttribute('certificate');
    }
    set certificate(value) {
        this._certificate = value;
    }
    resetCertificate() {
        this._certificate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certificateInput() {
        return this._certificate;
    }
    get directoryId() {
        return this.getStringAttribute('directory_id');
    }
    set directoryId(value) {
        this._directoryId = value;
    }
    resetDirectoryId() {
        this._directoryId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get directoryIdInput() {
        return this._directoryId;
    }
    get domain() {
        return this.getStringAttribute('domain');
    }
    set domain(value) {
        this._domain = value;
    }
    resetDomain() {
        this._domain = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainInput() {
        return this._domain;
    }
    // endpoint - computed: true, optional: false, required: false
    get endpoint() {
        return this.getStringAttribute('endpoint');
    }
    get endpointType() {
        return this.getStringAttribute('endpoint_type');
    }
    set endpointType(value) {
        this._endpointType = value;
    }
    resetEndpointType() {
        this._endpointType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endpointTypeInput() {
        return this._endpointType;
    }
    get forceDestroy() {
        return this.getBooleanAttribute('force_destroy');
    }
    set forceDestroy(value) {
        this._forceDestroy = value;
    }
    resetForceDestroy() {
        this._forceDestroy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forceDestroyInput() {
        return this._forceDestroy;
    }
    get function() {
        return this.getStringAttribute('function');
    }
    set function(value) {
        this._function = value;
    }
    resetFunction() {
        this._function = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get functionInput() {
        return this._function;
    }
    get hostKey() {
        return this.getStringAttribute('host_key');
    }
    set hostKey(value) {
        this._hostKey = value;
    }
    resetHostKey() {
        this._hostKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostKeyInput() {
        return this._hostKey;
    }
    // host_key_fingerprint - computed: true, optional: false, required: false
    get hostKeyFingerprint() {
        return this.getStringAttribute('host_key_fingerprint');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get identityProviderType() {
        return this.getStringAttribute('identity_provider_type');
    }
    set identityProviderType(value) {
        this._identityProviderType = value;
    }
    resetIdentityProviderType() {
        this._identityProviderType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityProviderTypeInput() {
        return this._identityProviderType;
    }
    get invocationRole() {
        return this.getStringAttribute('invocation_role');
    }
    set invocationRole(value) {
        this._invocationRole = value;
    }
    resetInvocationRole() {
        this._invocationRole = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get invocationRoleInput() {
        return this._invocationRole;
    }
    get loggingRole() {
        return this.getStringAttribute('logging_role');
    }
    set loggingRole(value) {
        this._loggingRole = value;
    }
    resetLoggingRole() {
        this._loggingRole = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingRoleInput() {
        return this._loggingRole;
    }
    get postAuthenticationLoginBanner() {
        return this.getStringAttribute('post_authentication_login_banner');
    }
    set postAuthenticationLoginBanner(value) {
        this._postAuthenticationLoginBanner = value;
    }
    resetPostAuthenticationLoginBanner() {
        this._postAuthenticationLoginBanner = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postAuthenticationLoginBannerInput() {
        return this._postAuthenticationLoginBanner;
    }
    get preAuthenticationLoginBanner() {
        return this.getStringAttribute('pre_authentication_login_banner');
    }
    set preAuthenticationLoginBanner(value) {
        this._preAuthenticationLoginBanner = value;
    }
    resetPreAuthenticationLoginBanner() {
        this._preAuthenticationLoginBanner = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preAuthenticationLoginBannerInput() {
        return this._preAuthenticationLoginBanner;
    }
    get protocols() {
        return cdktf.Fn.tolist(this.getListAttribute('protocols'));
    }
    set protocols(value) {
        this._protocols = value;
    }
    resetProtocols() {
        this._protocols = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get protocolsInput() {
        return this._protocols;
    }
    get securityPolicyName() {
        return this.getStringAttribute('security_policy_name');
    }
    set securityPolicyName(value) {
        this._securityPolicyName = value;
    }
    resetSecurityPolicyName() {
        this._securityPolicyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityPolicyNameInput() {
        return this._securityPolicyName;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get url() {
        return this.getStringAttribute('url');
    }
    set url(value) {
        this._url = value;
    }
    resetUrl() {
        this._url = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlInput() {
        return this._url;
    }
    get endpointDetails() {
        return this._endpointDetails;
    }
    putEndpointDetails(value) {
        this._endpointDetails.internalValue = value;
    }
    resetEndpointDetails() {
        this._endpointDetails.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endpointDetailsInput() {
        return this._endpointDetails.internalValue;
    }
    get workflowDetails() {
        return this._workflowDetails;
    }
    putWorkflowDetails(value) {
        this._workflowDetails.internalValue = value;
    }
    resetWorkflowDetails() {
        this._workflowDetails.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workflowDetailsInput() {
        return this._workflowDetails.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            certificate: cdktf.stringToTerraform(this._certificate),
            directory_id: cdktf.stringToTerraform(this._directoryId),
            domain: cdktf.stringToTerraform(this._domain),
            endpoint_type: cdktf.stringToTerraform(this._endpointType),
            force_destroy: cdktf.booleanToTerraform(this._forceDestroy),
            function: cdktf.stringToTerraform(this._function),
            host_key: cdktf.stringToTerraform(this._hostKey),
            id: cdktf.stringToTerraform(this._id),
            identity_provider_type: cdktf.stringToTerraform(this._identityProviderType),
            invocation_role: cdktf.stringToTerraform(this._invocationRole),
            logging_role: cdktf.stringToTerraform(this._loggingRole),
            post_authentication_login_banner: cdktf.stringToTerraform(this._postAuthenticationLoginBanner),
            pre_authentication_login_banner: cdktf.stringToTerraform(this._preAuthenticationLoginBanner),
            protocols: cdktf.listMapper(cdktf.stringToTerraform, false)(this._protocols),
            security_policy_name: cdktf.stringToTerraform(this._securityPolicyName),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            url: cdktf.stringToTerraform(this._url),
            endpoint_details: transferServerEndpointDetailsToTerraform(this._endpointDetails.internalValue),
            workflow_details: transferServerWorkflowDetailsToTerraform(this._workflowDetails.internalValue),
        };
    }
}
exports.TransferServer = TransferServer;
_d = JSII_RTTI_SYMBOL_1;
TransferServer[_d] = { fqn: "@cdktf/provider-aws.transferServer.TransferServer", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
TransferServer.tfResourceType = "aws_transfer_server";
//# sourceMappingURL=data:application/json;base64,