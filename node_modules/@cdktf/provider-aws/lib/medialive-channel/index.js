"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99, _100, _101, _102, _103, _104, _105, _106, _107, _108, _109, _110, _111;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MedialiveChannel = exports.MedialiveChannelVpcOutputReference = exports.medialiveChannelVpcToTerraform = exports.MedialiveChannelTimeoutsOutputReference = exports.medialiveChannelTimeoutsToTerraform = exports.MedialiveChannelMaintenanceOutputReference = exports.medialiveChannelMaintenanceToTerraform = exports.MedialiveChannelInputSpecificationOutputReference = exports.medialiveChannelInputSpecificationToTerraform = exports.MedialiveChannelInputAttachmentsList = exports.MedialiveChannelInputAttachmentsOutputReference = exports.medialiveChannelInputAttachmentsToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorList = exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorVideoSelectorOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorVideoSelectorToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettingsOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettingsToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsHlsInputSettingsOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsHlsInputSettingsToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorList = exports.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsAudioSelectorToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackList = exports.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionToTerraform = exports.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputReference = exports.medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionToTerraform = exports.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsOutputReference = exports.medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsToTerraform = exports.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionList = exports.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionOutputReference = exports.medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionToTerraform = exports.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputReference = exports.medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsToTerraform = exports.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputReference = exports.medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsToTerraform = exports.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputReference = exports.medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsToTerraform = exports.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference = exports.medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputReference = exports.medialiveChannelEncoderSettingsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsList = exports.MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsToTerraform = exports.MedialiveChannelEncoderSettingsTimecodeConfigOutputReference = exports.medialiveChannelEncoderSettingsTimecodeConfigToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsList = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsList = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsList = exports.MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList = exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList = exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList = exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsToTerraform = exports.MedialiveChannelDestinationsList = exports.MedialiveChannelDestinationsOutputReference = exports.medialiveChannelDestinationsToTerraform = exports.MedialiveChannelDestinationsSettingsList = exports.MedialiveChannelDestinationsSettingsOutputReference = exports.medialiveChannelDestinationsSettingsToTerraform = exports.MedialiveChannelDestinationsMultiplexSettingsOutputReference = exports.medialiveChannelDestinationsMultiplexSettingsToTerraform = exports.MedialiveChannelDestinationsMediaPackageSettingsList = exports.MedialiveChannelDestinationsMediaPackageSettingsOutputReference = exports.medialiveChannelDestinationsMediaPackageSettingsToTerraform = exports.MedialiveChannelCdiInputSpecificationOutputReference = exports.medialiveChannelCdiInputSpecificationToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function medialiveChannelCdiInputSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resolution: cdktf.stringToTerraform(struct.resolution),
    };
}
exports.medialiveChannelCdiInputSpecificationToTerraform = medialiveChannelCdiInputSpecificationToTerraform;
class MedialiveChannelCdiInputSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resolution !== undefined) {
            hasAnyValues = true;
            internalValueResult.resolution = this._resolution;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._resolution = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._resolution = value.resolution;
        }
    }
    get resolution() {
        return this.getStringAttribute('resolution');
    }
    set resolution(value) {
        this._resolution = value;
    }
    // Temporarily expose input value. Use with caution.
    get resolutionInput() {
        return this._resolution;
    }
}
exports.MedialiveChannelCdiInputSpecificationOutputReference = MedialiveChannelCdiInputSpecificationOutputReference;
_a = JSII_RTTI_SYMBOL_1;
MedialiveChannelCdiInputSpecificationOutputReference[_a] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelCdiInputSpecificationOutputReference", version: "10.0.12" };
function medialiveChannelDestinationsMediaPackageSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        channel_id: cdktf.stringToTerraform(struct.channelId),
    };
}
exports.medialiveChannelDestinationsMediaPackageSettingsToTerraform = medialiveChannelDestinationsMediaPackageSettingsToTerraform;
class MedialiveChannelDestinationsMediaPackageSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._channelId !== undefined) {
            hasAnyValues = true;
            internalValueResult.channelId = this._channelId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._channelId = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._channelId = value.channelId;
        }
    }
    get channelId() {
        return this.getStringAttribute('channel_id');
    }
    set channelId(value) {
        this._channelId = value;
    }
    // Temporarily expose input value. Use with caution.
    get channelIdInput() {
        return this._channelId;
    }
}
exports.MedialiveChannelDestinationsMediaPackageSettingsOutputReference = MedialiveChannelDestinationsMediaPackageSettingsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
MedialiveChannelDestinationsMediaPackageSettingsOutputReference[_b] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsMediaPackageSettingsOutputReference", version: "10.0.12" };
class MedialiveChannelDestinationsMediaPackageSettingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelDestinationsMediaPackageSettingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelDestinationsMediaPackageSettingsList = MedialiveChannelDestinationsMediaPackageSettingsList;
_c = JSII_RTTI_SYMBOL_1;
MedialiveChannelDestinationsMediaPackageSettingsList[_c] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsMediaPackageSettingsList", version: "10.0.12" };
function medialiveChannelDestinationsMultiplexSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        multiplex_id: cdktf.stringToTerraform(struct.multiplexId),
        program_name: cdktf.stringToTerraform(struct.programName),
    };
}
exports.medialiveChannelDestinationsMultiplexSettingsToTerraform = medialiveChannelDestinationsMultiplexSettingsToTerraform;
class MedialiveChannelDestinationsMultiplexSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._multiplexId !== undefined) {
            hasAnyValues = true;
            internalValueResult.multiplexId = this._multiplexId;
        }
        if (this._programName !== undefined) {
            hasAnyValues = true;
            internalValueResult.programName = this._programName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._multiplexId = undefined;
            this._programName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._multiplexId = value.multiplexId;
            this._programName = value.programName;
        }
    }
    get multiplexId() {
        return this.getStringAttribute('multiplex_id');
    }
    set multiplexId(value) {
        this._multiplexId = value;
    }
    // Temporarily expose input value. Use with caution.
    get multiplexIdInput() {
        return this._multiplexId;
    }
    get programName() {
        return this.getStringAttribute('program_name');
    }
    set programName(value) {
        this._programName = value;
    }
    // Temporarily expose input value. Use with caution.
    get programNameInput() {
        return this._programName;
    }
}
exports.MedialiveChannelDestinationsMultiplexSettingsOutputReference = MedialiveChannelDestinationsMultiplexSettingsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
MedialiveChannelDestinationsMultiplexSettingsOutputReference[_d] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsMultiplexSettingsOutputReference", version: "10.0.12" };
function medialiveChannelDestinationsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password_param: cdktf.stringToTerraform(struct.passwordParam),
        stream_name: cdktf.stringToTerraform(struct.streamName),
        url: cdktf.stringToTerraform(struct.url),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.medialiveChannelDestinationsSettingsToTerraform = medialiveChannelDestinationsSettingsToTerraform;
class MedialiveChannelDestinationsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._passwordParam !== undefined) {
            hasAnyValues = true;
            internalValueResult.passwordParam = this._passwordParam;
        }
        if (this._streamName !== undefined) {
            hasAnyValues = true;
            internalValueResult.streamName = this._streamName;
        }
        if (this._url !== undefined) {
            hasAnyValues = true;
            internalValueResult.url = this._url;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._passwordParam = undefined;
            this._streamName = undefined;
            this._url = undefined;
            this._username = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._passwordParam = value.passwordParam;
            this._streamName = value.streamName;
            this._url = value.url;
            this._username = value.username;
        }
    }
    get passwordParam() {
        return this.getStringAttribute('password_param');
    }
    set passwordParam(value) {
        this._passwordParam = value;
    }
    resetPasswordParam() {
        this._passwordParam = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordParamInput() {
        return this._passwordParam;
    }
    get streamName() {
        return this.getStringAttribute('stream_name');
    }
    set streamName(value) {
        this._streamName = value;
    }
    resetStreamName() {
        this._streamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streamNameInput() {
        return this._streamName;
    }
    get url() {
        return this.getStringAttribute('url');
    }
    set url(value) {
        this._url = value;
    }
    resetUrl() {
        this._url = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlInput() {
        return this._url;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    resetUsername() {
        this._username = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.MedialiveChannelDestinationsSettingsOutputReference = MedialiveChannelDestinationsSettingsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
MedialiveChannelDestinationsSettingsOutputReference[_e] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsSettingsOutputReference", version: "10.0.12" };
class MedialiveChannelDestinationsSettingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelDestinationsSettingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelDestinationsSettingsList = MedialiveChannelDestinationsSettingsList;
_f = JSII_RTTI_SYMBOL_1;
MedialiveChannelDestinationsSettingsList[_f] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsSettingsList", version: "10.0.12" };
function medialiveChannelDestinationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        id: cdktf.stringToTerraform(struct.id),
        media_package_settings: cdktf.listMapper(medialiveChannelDestinationsMediaPackageSettingsToTerraform, true)(struct.mediaPackageSettings),
        multiplex_settings: medialiveChannelDestinationsMultiplexSettingsToTerraform(struct.multiplexSettings),
        settings: cdktf.listMapper(medialiveChannelDestinationsSettingsToTerraform, true)(struct.settings),
    };
}
exports.medialiveChannelDestinationsToTerraform = medialiveChannelDestinationsToTerraform;
class MedialiveChannelDestinationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // media_package_settings - computed: false, optional: true, required: false
        this._mediaPackageSettings = new MedialiveChannelDestinationsMediaPackageSettingsList(this, "media_package_settings", true);
        // multiplex_settings - computed: false, optional: true, required: false
        this._multiplexSettings = new MedialiveChannelDestinationsMultiplexSettingsOutputReference(this, "multiplex_settings");
        // settings - computed: false, optional: true, required: false
        this._settings = new MedialiveChannelDestinationsSettingsList(this, "settings", true);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._id !== undefined) {
            hasAnyValues = true;
            internalValueResult.id = this._id;
        }
        if (this._mediaPackageSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mediaPackageSettings = this._mediaPackageSettings?.internalValue;
        }
        if (this._multiplexSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.multiplexSettings = this._multiplexSettings?.internalValue;
        }
        if (this._settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.settings = this._settings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._id = undefined;
            this._mediaPackageSettings.internalValue = undefined;
            this._multiplexSettings.internalValue = undefined;
            this._settings.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._id = value.id;
            this._mediaPackageSettings.internalValue = value.mediaPackageSettings;
            this._multiplexSettings.internalValue = value.multiplexSettings;
            this._settings.internalValue = value.settings;
        }
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get mediaPackageSettings() {
        return this._mediaPackageSettings;
    }
    putMediaPackageSettings(value) {
        this._mediaPackageSettings.internalValue = value;
    }
    resetMediaPackageSettings() {
        this._mediaPackageSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mediaPackageSettingsInput() {
        return this._mediaPackageSettings.internalValue;
    }
    get multiplexSettings() {
        return this._multiplexSettings;
    }
    putMultiplexSettings(value) {
        this._multiplexSettings.internalValue = value;
    }
    resetMultiplexSettings() {
        this._multiplexSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get multiplexSettingsInput() {
        return this._multiplexSettings.internalValue;
    }
    get settings() {
        return this._settings;
    }
    putSettings(value) {
        this._settings.internalValue = value;
    }
    resetSettings() {
        this._settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get settingsInput() {
        return this._settings.internalValue;
    }
}
exports.MedialiveChannelDestinationsOutputReference = MedialiveChannelDestinationsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
MedialiveChannelDestinationsOutputReference[_g] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsOutputReference", version: "10.0.12" };
class MedialiveChannelDestinationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelDestinationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelDestinationsList = MedialiveChannelDestinationsList;
_h = JSII_RTTI_SYMBOL_1;
MedialiveChannelDestinationsList[_h] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsList", version: "10.0.12" };
function medialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        algorithm: cdktf.stringToTerraform(struct.algorithm),
        algorithm_control: cdktf.stringToTerraform(struct.algorithmControl),
        target_lkfs: cdktf.numberToTerraform(struct.targetLkfs),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsToTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._algorithm !== undefined) {
            hasAnyValues = true;
            internalValueResult.algorithm = this._algorithm;
        }
        if (this._algorithmControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.algorithmControl = this._algorithmControl;
        }
        if (this._targetLkfs !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetLkfs = this._targetLkfs;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._algorithm = undefined;
            this._algorithmControl = undefined;
            this._targetLkfs = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._algorithm = value.algorithm;
            this._algorithmControl = value.algorithmControl;
            this._targetLkfs = value.targetLkfs;
        }
    }
    get algorithm() {
        return this.getStringAttribute('algorithm');
    }
    set algorithm(value) {
        this._algorithm = value;
    }
    resetAlgorithm() {
        this._algorithm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get algorithmInput() {
        return this._algorithm;
    }
    get algorithmControl() {
        return this.getStringAttribute('algorithm_control');
    }
    set algorithmControl(value) {
        this._algorithmControl = value;
    }
    resetAlgorithmControl() {
        this._algorithmControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get algorithmControlInput() {
        return this._algorithmControl;
    }
    get targetLkfs() {
        return this.getNumberAttribute('target_lkfs');
    }
    set targetLkfs(value) {
        this._targetLkfs = value;
    }
    resetTargetLkfs() {
        this._targetLkfs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetLkfsInput() {
        return this._targetLkfs;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference[_j] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cbet_check_digit_string: cdktf.stringToTerraform(struct.cbetCheckDigitString),
        cbet_stepaside: cdktf.stringToTerraform(struct.cbetStepaside),
        csid: cdktf.stringToTerraform(struct.csid),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsToTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cbetCheckDigitString !== undefined) {
            hasAnyValues = true;
            internalValueResult.cbetCheckDigitString = this._cbetCheckDigitString;
        }
        if (this._cbetStepaside !== undefined) {
            hasAnyValues = true;
            internalValueResult.cbetStepaside = this._cbetStepaside;
        }
        if (this._csid !== undefined) {
            hasAnyValues = true;
            internalValueResult.csid = this._csid;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cbetCheckDigitString = undefined;
            this._cbetStepaside = undefined;
            this._csid = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cbetCheckDigitString = value.cbetCheckDigitString;
            this._cbetStepaside = value.cbetStepaside;
            this._csid = value.csid;
        }
    }
    get cbetCheckDigitString() {
        return this.getStringAttribute('cbet_check_digit_string');
    }
    set cbetCheckDigitString(value) {
        this._cbetCheckDigitString = value;
    }
    // Temporarily expose input value. Use with caution.
    get cbetCheckDigitStringInput() {
        return this._cbetCheckDigitString;
    }
    get cbetStepaside() {
        return this.getStringAttribute('cbet_stepaside');
    }
    set cbetStepaside(value) {
        this._cbetStepaside = value;
    }
    // Temporarily expose input value. Use with caution.
    get cbetStepasideInput() {
        return this._cbetStepaside;
    }
    get csid() {
        return this.getStringAttribute('csid');
    }
    set csid(value) {
        this._csid = value;
    }
    // Temporarily expose input value. Use with caution.
    get csidInput() {
        return this._csid;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference[_k] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        check_digit_string: cdktf.stringToTerraform(struct.checkDigitString),
        sid: cdktf.numberToTerraform(struct.sid),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsToTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._checkDigitString !== undefined) {
            hasAnyValues = true;
            internalValueResult.checkDigitString = this._checkDigitString;
        }
        if (this._sid !== undefined) {
            hasAnyValues = true;
            internalValueResult.sid = this._sid;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._checkDigitString = undefined;
            this._sid = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._checkDigitString = value.checkDigitString;
            this._sid = value.sid;
        }
    }
    get checkDigitString() {
        return this.getStringAttribute('check_digit_string');
    }
    set checkDigitString(value) {
        this._checkDigitString = value;
    }
    // Temporarily expose input value. Use with caution.
    get checkDigitStringInput() {
        return this._checkDigitString;
    }
    get sid() {
        return this.getNumberAttribute('sid');
    }
    set sid(value) {
        this._sid = value;
    }
    // Temporarily expose input value. Use with caution.
    get sidInput() {
        return this._sid;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference[_l] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference", version: "10.0.12" };
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList;
_m = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList[_m] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList", version: "10.0.12" };
function medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nielsen_distribution_type: cdktf.stringToTerraform(struct.nielsenDistributionType),
        nielsen_cbet_settings: medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsToTerraform(struct.nielsenCbetSettings),
        nielsen_naes_ii_nw_settings: cdktf.listMapper(medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsToTerraform, true)(struct.nielsenNaesIiNwSettings),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsToTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // nielsen_cbet_settings - computed: false, optional: true, required: false
        this._nielsenCbetSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference(this, "nielsen_cbet_settings");
        // nielsen_naes_ii_nw_settings - computed: false, optional: true, required: false
        this._nielsenNaesIiNwSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList(this, "nielsen_naes_ii_nw_settings", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nielsenDistributionType !== undefined) {
            hasAnyValues = true;
            internalValueResult.nielsenDistributionType = this._nielsenDistributionType;
        }
        if (this._nielsenCbetSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nielsenCbetSettings = this._nielsenCbetSettings?.internalValue;
        }
        if (this._nielsenNaesIiNwSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nielsenNaesIiNwSettings = this._nielsenNaesIiNwSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nielsenDistributionType = undefined;
            this._nielsenCbetSettings.internalValue = undefined;
            this._nielsenNaesIiNwSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nielsenDistributionType = value.nielsenDistributionType;
            this._nielsenCbetSettings.internalValue = value.nielsenCbetSettings;
            this._nielsenNaesIiNwSettings.internalValue = value.nielsenNaesIiNwSettings;
        }
    }
    get nielsenDistributionType() {
        return this.getStringAttribute('nielsen_distribution_type');
    }
    set nielsenDistributionType(value) {
        this._nielsenDistributionType = value;
    }
    resetNielsenDistributionType() {
        this._nielsenDistributionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nielsenDistributionTypeInput() {
        return this._nielsenDistributionType;
    }
    get nielsenCbetSettings() {
        return this._nielsenCbetSettings;
    }
    putNielsenCbetSettings(value) {
        this._nielsenCbetSettings.internalValue = value;
    }
    resetNielsenCbetSettings() {
        this._nielsenCbetSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nielsenCbetSettingsInput() {
        return this._nielsenCbetSettings.internalValue;
    }
    get nielsenNaesIiNwSettings() {
        return this._nielsenNaesIiNwSettings;
    }
    putNielsenNaesIiNwSettings(value) {
        this._nielsenNaesIiNwSettings.internalValue = value;
    }
    resetNielsenNaesIiNwSettings() {
        this._nielsenNaesIiNwSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nielsenNaesIiNwSettingsInput() {
        return this._nielsenNaesIiNwSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference[_o] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nielsen_watermarks_settings: medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsToTerraform(struct.nielsenWatermarksSettings),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsToTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // nielsen_watermarks_settings - computed: false, optional: true, required: false
        this._nielsenWatermarksSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference(this, "nielsen_watermarks_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nielsenWatermarksSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nielsenWatermarksSettings = this._nielsenWatermarksSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nielsenWatermarksSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nielsenWatermarksSettings.internalValue = value.nielsenWatermarksSettings;
        }
    }
    get nielsenWatermarksSettings() {
        return this._nielsenWatermarksSettings;
    }
    putNielsenWatermarksSettings(value) {
        this._nielsenWatermarksSettings.internalValue = value;
    }
    resetNielsenWatermarksSettings() {
        this._nielsenWatermarksSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nielsenWatermarksSettingsInput() {
        return this._nielsenWatermarksSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference[_p] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bitrate: cdktf.numberToTerraform(struct.bitrate),
        coding_mode: cdktf.stringToTerraform(struct.codingMode),
        input_type: cdktf.stringToTerraform(struct.inputType),
        profile: cdktf.stringToTerraform(struct.profile),
        raw_format: cdktf.stringToTerraform(struct.rawFormat),
        sample_rate: cdktf.numberToTerraform(struct.sampleRate),
        spec: cdktf.stringToTerraform(struct.spec),
        vbr_quality: cdktf.stringToTerraform(struct.vbrQuality),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsToTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitrate = this._bitrate;
        }
        if (this._codingMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.codingMode = this._codingMode;
        }
        if (this._inputType !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputType = this._inputType;
        }
        if (this._profile !== undefined) {
            hasAnyValues = true;
            internalValueResult.profile = this._profile;
        }
        if (this._rawFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.rawFormat = this._rawFormat;
        }
        if (this._sampleRate !== undefined) {
            hasAnyValues = true;
            internalValueResult.sampleRate = this._sampleRate;
        }
        if (this._spec !== undefined) {
            hasAnyValues = true;
            internalValueResult.spec = this._spec;
        }
        if (this._vbrQuality !== undefined) {
            hasAnyValues = true;
            internalValueResult.vbrQuality = this._vbrQuality;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bitrate = undefined;
            this._codingMode = undefined;
            this._inputType = undefined;
            this._profile = undefined;
            this._rawFormat = undefined;
            this._sampleRate = undefined;
            this._spec = undefined;
            this._vbrQuality = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bitrate = value.bitrate;
            this._codingMode = value.codingMode;
            this._inputType = value.inputType;
            this._profile = value.profile;
            this._rawFormat = value.rawFormat;
            this._sampleRate = value.sampleRate;
            this._spec = value.spec;
            this._vbrQuality = value.vbrQuality;
        }
    }
    get bitrate() {
        return this.getNumberAttribute('bitrate');
    }
    set bitrate(value) {
        this._bitrate = value;
    }
    resetBitrate() {
        this._bitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitrateInput() {
        return this._bitrate;
    }
    get codingMode() {
        return this.getStringAttribute('coding_mode');
    }
    set codingMode(value) {
        this._codingMode = value;
    }
    resetCodingMode() {
        this._codingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codingModeInput() {
        return this._codingMode;
    }
    get inputType() {
        return this.getStringAttribute('input_type');
    }
    set inputType(value) {
        this._inputType = value;
    }
    resetInputType() {
        this._inputType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputTypeInput() {
        return this._inputType;
    }
    get profile() {
        return this.getStringAttribute('profile');
    }
    set profile(value) {
        this._profile = value;
    }
    resetProfile() {
        this._profile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get profileInput() {
        return this._profile;
    }
    get rawFormat() {
        return this.getStringAttribute('raw_format');
    }
    set rawFormat(value) {
        this._rawFormat = value;
    }
    resetRawFormat() {
        this._rawFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rawFormatInput() {
        return this._rawFormat;
    }
    get sampleRate() {
        return this.getNumberAttribute('sample_rate');
    }
    set sampleRate(value) {
        this._sampleRate = value;
    }
    resetSampleRate() {
        this._sampleRate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sampleRateInput() {
        return this._sampleRate;
    }
    get spec() {
        return this.getStringAttribute('spec');
    }
    set spec(value) {
        this._spec = value;
    }
    resetSpec() {
        this._spec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get specInput() {
        return this._spec;
    }
    get vbrQuality() {
        return this.getStringAttribute('vbr_quality');
    }
    set vbrQuality(value) {
        this._vbrQuality = value;
    }
    resetVbrQuality() {
        this._vbrQuality = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vbrQualityInput() {
        return this._vbrQuality;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference;
_q = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference[_q] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bitrate: cdktf.numberToTerraform(struct.bitrate),
        bitstream_mode: cdktf.stringToTerraform(struct.bitstreamMode),
        coding_mode: cdktf.stringToTerraform(struct.codingMode),
        dialnorm: cdktf.numberToTerraform(struct.dialnorm),
        drc_profile: cdktf.stringToTerraform(struct.drcProfile),
        lfe_filter: cdktf.stringToTerraform(struct.lfeFilter),
        metadata_control: cdktf.stringToTerraform(struct.metadataControl),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsToTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitrate = this._bitrate;
        }
        if (this._bitstreamMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitstreamMode = this._bitstreamMode;
        }
        if (this._codingMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.codingMode = this._codingMode;
        }
        if (this._dialnorm !== undefined) {
            hasAnyValues = true;
            internalValueResult.dialnorm = this._dialnorm;
        }
        if (this._drcProfile !== undefined) {
            hasAnyValues = true;
            internalValueResult.drcProfile = this._drcProfile;
        }
        if (this._lfeFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.lfeFilter = this._lfeFilter;
        }
        if (this._metadataControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadataControl = this._metadataControl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bitrate = undefined;
            this._bitstreamMode = undefined;
            this._codingMode = undefined;
            this._dialnorm = undefined;
            this._drcProfile = undefined;
            this._lfeFilter = undefined;
            this._metadataControl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bitrate = value.bitrate;
            this._bitstreamMode = value.bitstreamMode;
            this._codingMode = value.codingMode;
            this._dialnorm = value.dialnorm;
            this._drcProfile = value.drcProfile;
            this._lfeFilter = value.lfeFilter;
            this._metadataControl = value.metadataControl;
        }
    }
    get bitrate() {
        return this.getNumberAttribute('bitrate');
    }
    set bitrate(value) {
        this._bitrate = value;
    }
    resetBitrate() {
        this._bitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitrateInput() {
        return this._bitrate;
    }
    get bitstreamMode() {
        return this.getStringAttribute('bitstream_mode');
    }
    set bitstreamMode(value) {
        this._bitstreamMode = value;
    }
    resetBitstreamMode() {
        this._bitstreamMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitstreamModeInput() {
        return this._bitstreamMode;
    }
    get codingMode() {
        return this.getStringAttribute('coding_mode');
    }
    set codingMode(value) {
        this._codingMode = value;
    }
    resetCodingMode() {
        this._codingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codingModeInput() {
        return this._codingMode;
    }
    get dialnorm() {
        return this.getNumberAttribute('dialnorm');
    }
    set dialnorm(value) {
        this._dialnorm = value;
    }
    resetDialnorm() {
        this._dialnorm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dialnormInput() {
        return this._dialnorm;
    }
    get drcProfile() {
        return this.getStringAttribute('drc_profile');
    }
    set drcProfile(value) {
        this._drcProfile = value;
    }
    resetDrcProfile() {
        this._drcProfile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get drcProfileInput() {
        return this._drcProfile;
    }
    get lfeFilter() {
        return this.getStringAttribute('lfe_filter');
    }
    set lfeFilter(value) {
        this._lfeFilter = value;
    }
    resetLfeFilter() {
        this._lfeFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lfeFilterInput() {
        return this._lfeFilter;
    }
    get metadataControl() {
        return this.getStringAttribute('metadata_control');
    }
    set metadataControl(value) {
        this._metadataControl = value;
    }
    resetMetadataControl() {
        this._metadataControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataControlInput() {
        return this._metadataControl;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference;
_r = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference[_r] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        attenuation_control: cdktf.stringToTerraform(struct.attenuationControl),
        bitrate: cdktf.numberToTerraform(struct.bitrate),
        bitstream_mode: cdktf.stringToTerraform(struct.bitstreamMode),
        coding_mode: cdktf.stringToTerraform(struct.codingMode),
        dc_filter: cdktf.stringToTerraform(struct.dcFilter),
        dialnorm: cdktf.numberToTerraform(struct.dialnorm),
        drc_line: cdktf.stringToTerraform(struct.drcLine),
        drc_rf: cdktf.stringToTerraform(struct.drcRf),
        lfe_control: cdktf.stringToTerraform(struct.lfeControl),
        lfe_filter: cdktf.stringToTerraform(struct.lfeFilter),
        lo_ro_center_mix_level: cdktf.numberToTerraform(struct.loRoCenterMixLevel),
        lo_ro_surround_mix_level: cdktf.numberToTerraform(struct.loRoSurroundMixLevel),
        lt_rt_center_mix_level: cdktf.numberToTerraform(struct.ltRtCenterMixLevel),
        lt_rt_surround_mix_level: cdktf.numberToTerraform(struct.ltRtSurroundMixLevel),
        metadata_control: cdktf.stringToTerraform(struct.metadataControl),
        passthrough_control: cdktf.stringToTerraform(struct.passthroughControl),
        phase_control: cdktf.stringToTerraform(struct.phaseControl),
        stereo_downmix: cdktf.stringToTerraform(struct.stereoDownmix),
        surround_ex_mode: cdktf.stringToTerraform(struct.surroundExMode),
        surround_mode: cdktf.stringToTerraform(struct.surroundMode),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsToTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._attenuationControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.attenuationControl = this._attenuationControl;
        }
        if (this._bitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitrate = this._bitrate;
        }
        if (this._bitstreamMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitstreamMode = this._bitstreamMode;
        }
        if (this._codingMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.codingMode = this._codingMode;
        }
        if (this._dcFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.dcFilter = this._dcFilter;
        }
        if (this._dialnorm !== undefined) {
            hasAnyValues = true;
            internalValueResult.dialnorm = this._dialnorm;
        }
        if (this._drcLine !== undefined) {
            hasAnyValues = true;
            internalValueResult.drcLine = this._drcLine;
        }
        if (this._drcRf !== undefined) {
            hasAnyValues = true;
            internalValueResult.drcRf = this._drcRf;
        }
        if (this._lfeControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.lfeControl = this._lfeControl;
        }
        if (this._lfeFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.lfeFilter = this._lfeFilter;
        }
        if (this._loRoCenterMixLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.loRoCenterMixLevel = this._loRoCenterMixLevel;
        }
        if (this._loRoSurroundMixLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.loRoSurroundMixLevel = this._loRoSurroundMixLevel;
        }
        if (this._ltRtCenterMixLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.ltRtCenterMixLevel = this._ltRtCenterMixLevel;
        }
        if (this._ltRtSurroundMixLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.ltRtSurroundMixLevel = this._ltRtSurroundMixLevel;
        }
        if (this._metadataControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadataControl = this._metadataControl;
        }
        if (this._passthroughControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.passthroughControl = this._passthroughControl;
        }
        if (this._phaseControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.phaseControl = this._phaseControl;
        }
        if (this._stereoDownmix !== undefined) {
            hasAnyValues = true;
            internalValueResult.stereoDownmix = this._stereoDownmix;
        }
        if (this._surroundExMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.surroundExMode = this._surroundExMode;
        }
        if (this._surroundMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.surroundMode = this._surroundMode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._attenuationControl = undefined;
            this._bitrate = undefined;
            this._bitstreamMode = undefined;
            this._codingMode = undefined;
            this._dcFilter = undefined;
            this._dialnorm = undefined;
            this._drcLine = undefined;
            this._drcRf = undefined;
            this._lfeControl = undefined;
            this._lfeFilter = undefined;
            this._loRoCenterMixLevel = undefined;
            this._loRoSurroundMixLevel = undefined;
            this._ltRtCenterMixLevel = undefined;
            this._ltRtSurroundMixLevel = undefined;
            this._metadataControl = undefined;
            this._passthroughControl = undefined;
            this._phaseControl = undefined;
            this._stereoDownmix = undefined;
            this._surroundExMode = undefined;
            this._surroundMode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._attenuationControl = value.attenuationControl;
            this._bitrate = value.bitrate;
            this._bitstreamMode = value.bitstreamMode;
            this._codingMode = value.codingMode;
            this._dcFilter = value.dcFilter;
            this._dialnorm = value.dialnorm;
            this._drcLine = value.drcLine;
            this._drcRf = value.drcRf;
            this._lfeControl = value.lfeControl;
            this._lfeFilter = value.lfeFilter;
            this._loRoCenterMixLevel = value.loRoCenterMixLevel;
            this._loRoSurroundMixLevel = value.loRoSurroundMixLevel;
            this._ltRtCenterMixLevel = value.ltRtCenterMixLevel;
            this._ltRtSurroundMixLevel = value.ltRtSurroundMixLevel;
            this._metadataControl = value.metadataControl;
            this._passthroughControl = value.passthroughControl;
            this._phaseControl = value.phaseControl;
            this._stereoDownmix = value.stereoDownmix;
            this._surroundExMode = value.surroundExMode;
            this._surroundMode = value.surroundMode;
        }
    }
    get attenuationControl() {
        return this.getStringAttribute('attenuation_control');
    }
    set attenuationControl(value) {
        this._attenuationControl = value;
    }
    resetAttenuationControl() {
        this._attenuationControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get attenuationControlInput() {
        return this._attenuationControl;
    }
    get bitrate() {
        return this.getNumberAttribute('bitrate');
    }
    set bitrate(value) {
        this._bitrate = value;
    }
    resetBitrate() {
        this._bitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitrateInput() {
        return this._bitrate;
    }
    get bitstreamMode() {
        return this.getStringAttribute('bitstream_mode');
    }
    set bitstreamMode(value) {
        this._bitstreamMode = value;
    }
    resetBitstreamMode() {
        this._bitstreamMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitstreamModeInput() {
        return this._bitstreamMode;
    }
    get codingMode() {
        return this.getStringAttribute('coding_mode');
    }
    set codingMode(value) {
        this._codingMode = value;
    }
    resetCodingMode() {
        this._codingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codingModeInput() {
        return this._codingMode;
    }
    get dcFilter() {
        return this.getStringAttribute('dc_filter');
    }
    set dcFilter(value) {
        this._dcFilter = value;
    }
    resetDcFilter() {
        this._dcFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dcFilterInput() {
        return this._dcFilter;
    }
    get dialnorm() {
        return this.getNumberAttribute('dialnorm');
    }
    set dialnorm(value) {
        this._dialnorm = value;
    }
    resetDialnorm() {
        this._dialnorm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dialnormInput() {
        return this._dialnorm;
    }
    get drcLine() {
        return this.getStringAttribute('drc_line');
    }
    set drcLine(value) {
        this._drcLine = value;
    }
    resetDrcLine() {
        this._drcLine = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get drcLineInput() {
        return this._drcLine;
    }
    get drcRf() {
        return this.getStringAttribute('drc_rf');
    }
    set drcRf(value) {
        this._drcRf = value;
    }
    resetDrcRf() {
        this._drcRf = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get drcRfInput() {
        return this._drcRf;
    }
    get lfeControl() {
        return this.getStringAttribute('lfe_control');
    }
    set lfeControl(value) {
        this._lfeControl = value;
    }
    resetLfeControl() {
        this._lfeControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lfeControlInput() {
        return this._lfeControl;
    }
    get lfeFilter() {
        return this.getStringAttribute('lfe_filter');
    }
    set lfeFilter(value) {
        this._lfeFilter = value;
    }
    resetLfeFilter() {
        this._lfeFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lfeFilterInput() {
        return this._lfeFilter;
    }
    get loRoCenterMixLevel() {
        return this.getNumberAttribute('lo_ro_center_mix_level');
    }
    set loRoCenterMixLevel(value) {
        this._loRoCenterMixLevel = value;
    }
    resetLoRoCenterMixLevel() {
        this._loRoCenterMixLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loRoCenterMixLevelInput() {
        return this._loRoCenterMixLevel;
    }
    get loRoSurroundMixLevel() {
        return this.getNumberAttribute('lo_ro_surround_mix_level');
    }
    set loRoSurroundMixLevel(value) {
        this._loRoSurroundMixLevel = value;
    }
    resetLoRoSurroundMixLevel() {
        this._loRoSurroundMixLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loRoSurroundMixLevelInput() {
        return this._loRoSurroundMixLevel;
    }
    get ltRtCenterMixLevel() {
        return this.getNumberAttribute('lt_rt_center_mix_level');
    }
    set ltRtCenterMixLevel(value) {
        this._ltRtCenterMixLevel = value;
    }
    resetLtRtCenterMixLevel() {
        this._ltRtCenterMixLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ltRtCenterMixLevelInput() {
        return this._ltRtCenterMixLevel;
    }
    get ltRtSurroundMixLevel() {
        return this.getNumberAttribute('lt_rt_surround_mix_level');
    }
    set ltRtSurroundMixLevel(value) {
        this._ltRtSurroundMixLevel = value;
    }
    resetLtRtSurroundMixLevel() {
        this._ltRtSurroundMixLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ltRtSurroundMixLevelInput() {
        return this._ltRtSurroundMixLevel;
    }
    get metadataControl() {
        return this.getStringAttribute('metadata_control');
    }
    set metadataControl(value) {
        this._metadataControl = value;
    }
    resetMetadataControl() {
        this._metadataControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataControlInput() {
        return this._metadataControl;
    }
    get passthroughControl() {
        return this.getStringAttribute('passthrough_control');
    }
    set passthroughControl(value) {
        this._passthroughControl = value;
    }
    resetPassthroughControl() {
        this._passthroughControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passthroughControlInput() {
        return this._passthroughControl;
    }
    get phaseControl() {
        return this.getStringAttribute('phase_control');
    }
    set phaseControl(value) {
        this._phaseControl = value;
    }
    resetPhaseControl() {
        this._phaseControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get phaseControlInput() {
        return this._phaseControl;
    }
    get stereoDownmix() {
        return this.getStringAttribute('stereo_downmix');
    }
    set stereoDownmix(value) {
        this._stereoDownmix = value;
    }
    resetStereoDownmix() {
        this._stereoDownmix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stereoDownmixInput() {
        return this._stereoDownmix;
    }
    get surroundExMode() {
        return this.getStringAttribute('surround_ex_mode');
    }
    set surroundExMode(value) {
        this._surroundExMode = value;
    }
    resetSurroundExMode() {
        this._surroundExMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get surroundExModeInput() {
        return this._surroundExMode;
    }
    get surroundMode() {
        return this.getStringAttribute('surround_mode');
    }
    set surroundMode(value) {
        this._surroundMode = value;
    }
    resetSurroundMode() {
        this._surroundMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get surroundModeInput() {
        return this._surroundMode;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference;
_s = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference[_s] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bitrate: cdktf.numberToTerraform(struct.bitrate),
        coding_mode: cdktf.stringToTerraform(struct.codingMode),
        sample_rate: cdktf.numberToTerraform(struct.sampleRate),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsToTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitrate = this._bitrate;
        }
        if (this._codingMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.codingMode = this._codingMode;
        }
        if (this._sampleRate !== undefined) {
            hasAnyValues = true;
            internalValueResult.sampleRate = this._sampleRate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bitrate = undefined;
            this._codingMode = undefined;
            this._sampleRate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bitrate = value.bitrate;
            this._codingMode = value.codingMode;
            this._sampleRate = value.sampleRate;
        }
    }
    get bitrate() {
        return this.getNumberAttribute('bitrate');
    }
    set bitrate(value) {
        this._bitrate = value;
    }
    resetBitrate() {
        this._bitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitrateInput() {
        return this._bitrate;
    }
    get codingMode() {
        return this.getStringAttribute('coding_mode');
    }
    set codingMode(value) {
        this._codingMode = value;
    }
    resetCodingMode() {
        this._codingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codingModeInput() {
        return this._codingMode;
    }
    get sampleRate() {
        return this.getNumberAttribute('sample_rate');
    }
    set sampleRate(value) {
        this._sampleRate = value;
    }
    resetSampleRate() {
        this._sampleRate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sampleRateInput() {
        return this._sampleRate;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference;
_t = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference[_t] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bit_depth: cdktf.numberToTerraform(struct.bitDepth),
        coding_mode: cdktf.stringToTerraform(struct.codingMode),
        sample_rate: cdktf.numberToTerraform(struct.sampleRate),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsToTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bitDepth !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitDepth = this._bitDepth;
        }
        if (this._codingMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.codingMode = this._codingMode;
        }
        if (this._sampleRate !== undefined) {
            hasAnyValues = true;
            internalValueResult.sampleRate = this._sampleRate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bitDepth = undefined;
            this._codingMode = undefined;
            this._sampleRate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bitDepth = value.bitDepth;
            this._codingMode = value.codingMode;
            this._sampleRate = value.sampleRate;
        }
    }
    get bitDepth() {
        return this.getNumberAttribute('bit_depth');
    }
    set bitDepth(value) {
        this._bitDepth = value;
    }
    resetBitDepth() {
        this._bitDepth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitDepthInput() {
        return this._bitDepth;
    }
    get codingMode() {
        return this.getStringAttribute('coding_mode');
    }
    set codingMode(value) {
        this._codingMode = value;
    }
    resetCodingMode() {
        this._codingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codingModeInput() {
        return this._codingMode;
    }
    get sampleRate() {
        return this.getNumberAttribute('sample_rate');
    }
    set sampleRate(value) {
        this._sampleRate = value;
    }
    resetSampleRate() {
        this._sampleRate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sampleRateInput() {
        return this._sampleRate;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference;
_u = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference[_u] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        aac_settings: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsToTerraform(struct.aacSettings),
        ac3_settings: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsToTerraform(struct.ac3Settings),
        eac3_settings: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsToTerraform(struct.eac3Settings),
        mp2_settings: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsToTerraform(struct.mp2Settings),
        wav_settings: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsToTerraform(struct.wavSettings),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsToTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // aac_settings - computed: false, optional: true, required: false
        this._aacSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference(this, "aac_settings");
        // ac3_settings - computed: false, optional: true, required: false
        this._ac3Settings = new MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference(this, "ac3_settings");
        // eac3_settings - computed: false, optional: true, required: false
        this._eac3Settings = new MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference(this, "eac3_settings");
        // mp2_settings - computed: false, optional: true, required: false
        this._mp2Settings = new MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference(this, "mp2_settings");
        // wav_settings - computed: false, optional: true, required: false
        this._wavSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference(this, "wav_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._aacSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.aacSettings = this._aacSettings?.internalValue;
        }
        if (this._ac3Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ac3Settings = this._ac3Settings?.internalValue;
        }
        if (this._eac3Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.eac3Settings = this._eac3Settings?.internalValue;
        }
        if (this._mp2Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mp2Settings = this._mp2Settings?.internalValue;
        }
        if (this._wavSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.wavSettings = this._wavSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._aacSettings.internalValue = undefined;
            this._ac3Settings.internalValue = undefined;
            this._eac3Settings.internalValue = undefined;
            this._mp2Settings.internalValue = undefined;
            this._wavSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._aacSettings.internalValue = value.aacSettings;
            this._ac3Settings.internalValue = value.ac3Settings;
            this._eac3Settings.internalValue = value.eac3Settings;
            this._mp2Settings.internalValue = value.mp2Settings;
            this._wavSettings.internalValue = value.wavSettings;
        }
    }
    get aacSettings() {
        return this._aacSettings;
    }
    putAacSettings(value) {
        this._aacSettings.internalValue = value;
    }
    resetAacSettings() {
        this._aacSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aacSettingsInput() {
        return this._aacSettings.internalValue;
    }
    get ac3Settings() {
        return this._ac3Settings;
    }
    putAc3Settings(value) {
        this._ac3Settings.internalValue = value;
    }
    resetAc3Settings() {
        this._ac3Settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ac3SettingsInput() {
        return this._ac3Settings.internalValue;
    }
    get eac3Settings() {
        return this._eac3Settings;
    }
    putEac3Settings(value) {
        this._eac3Settings.internalValue = value;
    }
    resetEac3Settings() {
        this._eac3Settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eac3SettingsInput() {
        return this._eac3Settings.internalValue;
    }
    get mp2Settings() {
        return this._mp2Settings;
    }
    putMp2Settings(value) {
        this._mp2Settings.internalValue = value;
    }
    resetMp2Settings() {
        this._mp2Settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mp2SettingsInput() {
        return this._mp2Settings.internalValue;
    }
    get wavSettings() {
        return this._wavSettings;
    }
    putWavSettings(value) {
        this._wavSettings.internalValue = value;
    }
    resetWavSettings() {
        this._wavSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get wavSettingsInput() {
        return this._wavSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference;
_v = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference[_v] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        gain: cdktf.numberToTerraform(struct.gain),
        input_channel: cdktf.numberToTerraform(struct.inputChannel),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsToTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._gain !== undefined) {
            hasAnyValues = true;
            internalValueResult.gain = this._gain;
        }
        if (this._inputChannel !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputChannel = this._inputChannel;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._gain = undefined;
            this._inputChannel = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._gain = value.gain;
            this._inputChannel = value.inputChannel;
        }
    }
    get gain() {
        return this.getNumberAttribute('gain');
    }
    set gain(value) {
        this._gain = value;
    }
    // Temporarily expose input value. Use with caution.
    get gainInput() {
        return this._gain;
    }
    get inputChannel() {
        return this.getNumberAttribute('input_channel');
    }
    set inputChannel(value) {
        this._inputChannel = value;
    }
    // Temporarily expose input value. Use with caution.
    get inputChannelInput() {
        return this._inputChannel;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference;
_w = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference[_w] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference", version: "10.0.12" };
class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList = MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList;
_x = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList[_x] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList", version: "10.0.12" };
function medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        output_channel: cdktf.numberToTerraform(struct.outputChannel),
        input_channel_levels: cdktf.listMapper(medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsToTerraform, true)(struct.inputChannelLevels),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsToTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // input_channel_levels - computed: false, optional: false, required: true
        this._inputChannelLevels = new MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList(this, "input_channel_levels", true);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._outputChannel !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputChannel = this._outputChannel;
        }
        if (this._inputChannelLevels?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputChannelLevels = this._inputChannelLevels?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._outputChannel = undefined;
            this._inputChannelLevels.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._outputChannel = value.outputChannel;
            this._inputChannelLevels.internalValue = value.inputChannelLevels;
        }
    }
    get outputChannel() {
        return this.getNumberAttribute('output_channel');
    }
    set outputChannel(value) {
        this._outputChannel = value;
    }
    // Temporarily expose input value. Use with caution.
    get outputChannelInput() {
        return this._outputChannel;
    }
    get inputChannelLevels() {
        return this._inputChannelLevels;
    }
    putInputChannelLevels(value) {
        this._inputChannelLevels.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get inputChannelLevelsInput() {
        return this._inputChannelLevels.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference;
_y = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference[_y] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference", version: "10.0.12" };
class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList = MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList;
_z = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList[_z] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList", version: "10.0.12" };
function medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        channels_in: cdktf.numberToTerraform(struct.channelsIn),
        channels_out: cdktf.numberToTerraform(struct.channelsOut),
        channel_mappings: cdktf.listMapper(medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsToTerraform, true)(struct.channelMappings),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsToTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // channel_mappings - computed: false, optional: false, required: true
        this._channelMappings = new MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList(this, "channel_mappings", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._channelsIn !== undefined) {
            hasAnyValues = true;
            internalValueResult.channelsIn = this._channelsIn;
        }
        if (this._channelsOut !== undefined) {
            hasAnyValues = true;
            internalValueResult.channelsOut = this._channelsOut;
        }
        if (this._channelMappings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.channelMappings = this._channelMappings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._channelsIn = undefined;
            this._channelsOut = undefined;
            this._channelMappings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._channelsIn = value.channelsIn;
            this._channelsOut = value.channelsOut;
            this._channelMappings.internalValue = value.channelMappings;
        }
    }
    get channelsIn() {
        return this.getNumberAttribute('channels_in');
    }
    set channelsIn(value) {
        this._channelsIn = value;
    }
    resetChannelsIn() {
        this._channelsIn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get channelsInInput() {
        return this._channelsIn;
    }
    get channelsOut() {
        return this.getNumberAttribute('channels_out');
    }
    set channelsOut(value) {
        this._channelsOut = value;
    }
    resetChannelsOut() {
        this._channelsOut = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get channelsOutInput() {
        return this._channelsOut;
    }
    get channelMappings() {
        return this._channelMappings;
    }
    putChannelMappings(value) {
        this._channelMappings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get channelMappingsInput() {
        return this._channelMappings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference[_0] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsAudioDescriptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_selector_name: cdktf.stringToTerraform(struct.audioSelectorName),
        audio_type: cdktf.stringToTerraform(struct.audioType),
        audio_type_control: cdktf.stringToTerraform(struct.audioTypeControl),
        language_code: cdktf.stringToTerraform(struct.languageCode),
        language_code_control: cdktf.stringToTerraform(struct.languageCodeControl),
        name: cdktf.stringToTerraform(struct.name),
        stream_name: cdktf.stringToTerraform(struct.streamName),
        audio_normalization_settings: medialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsToTerraform(struct.audioNormalizationSettings),
        audio_watermark_settings: medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsToTerraform(struct.audioWatermarkSettings),
        codec_settings: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsToTerraform(struct.codecSettings),
        remix_settings: medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsToTerraform(struct.remixSettings),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsToTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // audio_normalization_settings - computed: false, optional: true, required: false
        this._audioNormalizationSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference(this, "audio_normalization_settings");
        // audio_watermark_settings - computed: false, optional: true, required: false
        this._audioWatermarkSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference(this, "audio_watermark_settings");
        // codec_settings - computed: false, optional: true, required: false
        this._codecSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference(this, "codec_settings");
        // remix_settings - computed: false, optional: true, required: false
        this._remixSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference(this, "remix_settings");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioSelectorName !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioSelectorName = this._audioSelectorName;
        }
        if (this._audioType !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioType = this._audioType;
        }
        if (this._audioTypeControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioTypeControl = this._audioTypeControl;
        }
        if (this._languageCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.languageCode = this._languageCode;
        }
        if (this._languageCodeControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.languageCodeControl = this._languageCodeControl;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._streamName !== undefined) {
            hasAnyValues = true;
            internalValueResult.streamName = this._streamName;
        }
        if (this._audioNormalizationSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioNormalizationSettings = this._audioNormalizationSettings?.internalValue;
        }
        if (this._audioWatermarkSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioWatermarkSettings = this._audioWatermarkSettings?.internalValue;
        }
        if (this._codecSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.codecSettings = this._codecSettings?.internalValue;
        }
        if (this._remixSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.remixSettings = this._remixSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._audioSelectorName = undefined;
            this._audioType = undefined;
            this._audioTypeControl = undefined;
            this._languageCode = undefined;
            this._languageCodeControl = undefined;
            this._name = undefined;
            this._streamName = undefined;
            this._audioNormalizationSettings.internalValue = undefined;
            this._audioWatermarkSettings.internalValue = undefined;
            this._codecSettings.internalValue = undefined;
            this._remixSettings.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._audioSelectorName = value.audioSelectorName;
            this._audioType = value.audioType;
            this._audioTypeControl = value.audioTypeControl;
            this._languageCode = value.languageCode;
            this._languageCodeControl = value.languageCodeControl;
            this._name = value.name;
            this._streamName = value.streamName;
            this._audioNormalizationSettings.internalValue = value.audioNormalizationSettings;
            this._audioWatermarkSettings.internalValue = value.audioWatermarkSettings;
            this._codecSettings.internalValue = value.codecSettings;
            this._remixSettings.internalValue = value.remixSettings;
        }
    }
    get audioSelectorName() {
        return this.getStringAttribute('audio_selector_name');
    }
    set audioSelectorName(value) {
        this._audioSelectorName = value;
    }
    // Temporarily expose input value. Use with caution.
    get audioSelectorNameInput() {
        return this._audioSelectorName;
    }
    get audioType() {
        return this.getStringAttribute('audio_type');
    }
    set audioType(value) {
        this._audioType = value;
    }
    resetAudioType() {
        this._audioType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioTypeInput() {
        return this._audioType;
    }
    get audioTypeControl() {
        return this.getStringAttribute('audio_type_control');
    }
    set audioTypeControl(value) {
        this._audioTypeControl = value;
    }
    resetAudioTypeControl() {
        this._audioTypeControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioTypeControlInput() {
        return this._audioTypeControl;
    }
    get languageCode() {
        return this.getStringAttribute('language_code');
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    resetLanguageCode() {
        this._languageCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get languageCodeInput() {
        return this._languageCode;
    }
    get languageCodeControl() {
        return this.getStringAttribute('language_code_control');
    }
    set languageCodeControl(value) {
        this._languageCodeControl = value;
    }
    resetLanguageCodeControl() {
        this._languageCodeControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get languageCodeControlInput() {
        return this._languageCodeControl;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get streamName() {
        return this.getStringAttribute('stream_name');
    }
    set streamName(value) {
        this._streamName = value;
    }
    resetStreamName() {
        this._streamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streamNameInput() {
        return this._streamName;
    }
    get audioNormalizationSettings() {
        return this._audioNormalizationSettings;
    }
    putAudioNormalizationSettings(value) {
        this._audioNormalizationSettings.internalValue = value;
    }
    resetAudioNormalizationSettings() {
        this._audioNormalizationSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioNormalizationSettingsInput() {
        return this._audioNormalizationSettings.internalValue;
    }
    get audioWatermarkSettings() {
        return this._audioWatermarkSettings;
    }
    putAudioWatermarkSettings(value) {
        this._audioWatermarkSettings.internalValue = value;
    }
    resetAudioWatermarkSettings() {
        this._audioWatermarkSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioWatermarkSettingsInput() {
        return this._audioWatermarkSettings.internalValue;
    }
    get codecSettings() {
        return this._codecSettings;
    }
    putCodecSettings(value) {
        this._codecSettings.internalValue = value;
    }
    resetCodecSettings() {
        this._codecSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codecSettingsInput() {
        return this._codecSettings.internalValue;
    }
    get remixSettings() {
        return this._remixSettings;
    }
    putRemixSettings(value) {
        this._remixSettings.internalValue = value;
    }
    resetRemixSettings() {
        this._remixSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get remixSettingsInput() {
        return this._remixSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference[_1] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference", version: "10.0.12" };
class MedialiveChannelEncoderSettingsAudioDescriptionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsList = MedialiveChannelEncoderSettingsAudioDescriptionsList;
_2 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsList[_2] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsList", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        canned_acl: cdktf.stringToTerraform(struct.cannedAcl),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cannedAcl !== undefined) {
            hasAnyValues = true;
            internalValueResult.cannedAcl = this._cannedAcl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cannedAcl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cannedAcl = value.cannedAcl;
        }
    }
    get cannedAcl() {
        return this.getStringAttribute('canned_acl');
    }
    set cannedAcl(value) {
        this._cannedAcl = value;
    }
    resetCannedAcl() {
        this._cannedAcl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cannedAclInput() {
        return this._cannedAcl;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference[_3] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        archive_s3_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsToTerraform(struct.archiveS3Settings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // archive_s3_settings - computed: false, optional: true, required: false
        this._archiveS3Settings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference(this, "archive_s3_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._archiveS3Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.archiveS3Settings = this._archiveS3Settings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._archiveS3Settings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._archiveS3Settings.internalValue = value.archiveS3Settings;
        }
    }
    get archiveS3Settings() {
        return this._archiveS3Settings;
    }
    putArchiveS3Settings(value) {
        this._archiveS3Settings.internalValue = value;
    }
    resetArchiveS3Settings() {
        this._archiveS3Settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get archiveS3SettingsInput() {
        return this._archiveS3Settings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference[_4] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_ref_id: cdktf.stringToTerraform(struct.destinationRefId),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationRefId !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationRefId = this._destinationRefId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationRefId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationRefId = value.destinationRefId;
        }
    }
    get destinationRefId() {
        return this.getStringAttribute('destination_ref_id');
    }
    set destinationRefId(value) {
        this._destinationRefId = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationRefIdInput() {
        return this._destinationRefId;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference[_5] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        rollover_interval: cdktf.numberToTerraform(struct.rolloverInterval),
        archive_cdn_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsToTerraform(struct.archiveCdnSettings),
        destination: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationToTerraform(struct.destination),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // archive_cdn_settings - computed: false, optional: true, required: false
        this._archiveCdnSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference(this, "archive_cdn_settings");
        // destination - computed: false, optional: false, required: true
        this._destination = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference(this, "destination");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._rolloverInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.rolloverInterval = this._rolloverInterval;
        }
        if (this._archiveCdnSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.archiveCdnSettings = this._archiveCdnSettings?.internalValue;
        }
        if (this._destination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._rolloverInterval = undefined;
            this._archiveCdnSettings.internalValue = undefined;
            this._destination.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._rolloverInterval = value.rolloverInterval;
            this._archiveCdnSettings.internalValue = value.archiveCdnSettings;
            this._destination.internalValue = value.destination;
        }
    }
    get rolloverInterval() {
        return this.getNumberAttribute('rollover_interval');
    }
    set rolloverInterval(value) {
        this._rolloverInterval = value;
    }
    resetRolloverInterval() {
        this._rolloverInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rolloverIntervalInput() {
        return this._rolloverInterval;
    }
    get archiveCdnSettings() {
        return this._archiveCdnSettings;
    }
    putArchiveCdnSettings(value) {
        this._archiveCdnSettings.internalValue = value;
    }
    resetArchiveCdnSettings() {
        this._archiveCdnSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get archiveCdnSettingsInput() {
        return this._archiveCdnSettings.internalValue;
    }
    get destination() {
        return this._destination;
    }
    putDestination(value) {
        this._destination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference[_6] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference", version: "10.0.12" };
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList;
_7 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList[_7] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_ref_id: cdktf.stringToTerraform(struct.destinationRefId),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationRefId !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationRefId = this._destinationRefId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationRefId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationRefId = value.destinationRefId;
        }
    }
    get destinationRefId() {
        return this.getStringAttribute('destination_ref_id');
    }
    set destinationRefId(value) {
        this._destinationRefId = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationRefIdInput() {
        return this._destinationRefId;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference[_8] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        canned_acl: cdktf.stringToTerraform(struct.cannedAcl),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cannedAcl !== undefined) {
            hasAnyValues = true;
            internalValueResult.cannedAcl = this._cannedAcl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cannedAcl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cannedAcl = value.cannedAcl;
        }
    }
    get cannedAcl() {
        return this.getStringAttribute('canned_acl');
    }
    set cannedAcl(value) {
        this._cannedAcl = value;
    }
    resetCannedAcl() {
        this._cannedAcl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cannedAclInput() {
        return this._cannedAcl;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference[_9] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        frame_capture_s3_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsToTerraform(struct.frameCaptureS3Settings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // frame_capture_s3_settings - computed: false, optional: true, required: false
        this._frameCaptureS3Settings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference(this, "frame_capture_s3_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._frameCaptureS3Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.frameCaptureS3Settings = this._frameCaptureS3Settings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._frameCaptureS3Settings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._frameCaptureS3Settings.internalValue = value.frameCaptureS3Settings;
        }
    }
    get frameCaptureS3Settings() {
        return this._frameCaptureS3Settings;
    }
    putFrameCaptureS3Settings(value) {
        this._frameCaptureS3Settings.internalValue = value;
    }
    resetFrameCaptureS3Settings() {
        this._frameCaptureS3Settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get frameCaptureS3SettingsInput() {
        return this._frameCaptureS3Settings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference[_10] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationToTerraform(struct.destination),
        frame_capture_cdn_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsToTerraform(struct.frameCaptureCdnSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // destination - computed: false, optional: false, required: true
        this._destination = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference(this, "destination");
        // frame_capture_cdn_settings - computed: false, optional: true, required: false
        this._frameCaptureCdnSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference(this, "frame_capture_cdn_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination?.internalValue;
        }
        if (this._frameCaptureCdnSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.frameCaptureCdnSettings = this._frameCaptureCdnSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destination.internalValue = undefined;
            this._frameCaptureCdnSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destination.internalValue = value.destination;
            this._frameCaptureCdnSettings.internalValue = value.frameCaptureCdnSettings;
        }
    }
    get destination() {
        return this._destination;
    }
    putDestination(value) {
        this._destination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination.internalValue;
    }
    get frameCaptureCdnSettings() {
        return this._frameCaptureCdnSettings;
    }
    putFrameCaptureCdnSettings(value) {
        this._frameCaptureCdnSettings.internalValue = value;
    }
    resetFrameCaptureCdnSettings() {
        this._frameCaptureCdnSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get frameCaptureCdnSettingsInput() {
        return this._frameCaptureCdnSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference[_11] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        caption_channel: cdktf.numberToTerraform(struct.captionChannel),
        language_code: cdktf.stringToTerraform(struct.languageCode),
        language_description: cdktf.stringToTerraform(struct.languageDescription),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._captionChannel !== undefined) {
            hasAnyValues = true;
            internalValueResult.captionChannel = this._captionChannel;
        }
        if (this._languageCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.languageCode = this._languageCode;
        }
        if (this._languageDescription !== undefined) {
            hasAnyValues = true;
            internalValueResult.languageDescription = this._languageDescription;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._captionChannel = undefined;
            this._languageCode = undefined;
            this._languageDescription = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._captionChannel = value.captionChannel;
            this._languageCode = value.languageCode;
            this._languageDescription = value.languageDescription;
        }
    }
    get captionChannel() {
        return this.getNumberAttribute('caption_channel');
    }
    set captionChannel(value) {
        this._captionChannel = value;
    }
    // Temporarily expose input value. Use with caution.
    get captionChannelInput() {
        return this._captionChannel;
    }
    get languageCode() {
        return this.getStringAttribute('language_code');
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    // Temporarily expose input value. Use with caution.
    get languageCodeInput() {
        return this._languageCode;
    }
    get languageDescription() {
        return this.getStringAttribute('language_description');
    }
    set languageDescription(value) {
        this._languageDescription = value;
    }
    // Temporarily expose input value. Use with caution.
    get languageDescriptionInput() {
        return this._languageDescription;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference[_12] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference", version: "10.0.12" };
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList;
_13 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList[_13] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_ref_id: cdktf.stringToTerraform(struct.destinationRefId),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationRefId !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationRefId = this._destinationRefId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationRefId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationRefId = value.destinationRefId;
        }
    }
    get destinationRefId() {
        return this.getStringAttribute('destination_ref_id');
    }
    set destinationRefId(value) {
        this._destinationRefId = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationRefIdInput() {
        return this._destinationRefId;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference[_14] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_retry_interval: cdktf.numberToTerraform(struct.connectionRetryInterval),
        filecache_duration: cdktf.numberToTerraform(struct.filecacheDuration),
        http_transfer_mode: cdktf.stringToTerraform(struct.httpTransferMode),
        num_retries: cdktf.numberToTerraform(struct.numRetries),
        restart_delay: cdktf.numberToTerraform(struct.restartDelay),
        salt: cdktf.stringToTerraform(struct.salt),
        token: cdktf.stringToTerraform(struct.token),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionRetryInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionRetryInterval = this._connectionRetryInterval;
        }
        if (this._filecacheDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.filecacheDuration = this._filecacheDuration;
        }
        if (this._httpTransferMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpTransferMode = this._httpTransferMode;
        }
        if (this._numRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRetries = this._numRetries;
        }
        if (this._restartDelay !== undefined) {
            hasAnyValues = true;
            internalValueResult.restartDelay = this._restartDelay;
        }
        if (this._salt !== undefined) {
            hasAnyValues = true;
            internalValueResult.salt = this._salt;
        }
        if (this._token !== undefined) {
            hasAnyValues = true;
            internalValueResult.token = this._token;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._connectionRetryInterval = undefined;
            this._filecacheDuration = undefined;
            this._httpTransferMode = undefined;
            this._numRetries = undefined;
            this._restartDelay = undefined;
            this._salt = undefined;
            this._token = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._connectionRetryInterval = value.connectionRetryInterval;
            this._filecacheDuration = value.filecacheDuration;
            this._httpTransferMode = value.httpTransferMode;
            this._numRetries = value.numRetries;
            this._restartDelay = value.restartDelay;
            this._salt = value.salt;
            this._token = value.token;
        }
    }
    get connectionRetryInterval() {
        return this.getNumberAttribute('connection_retry_interval');
    }
    set connectionRetryInterval(value) {
        this._connectionRetryInterval = value;
    }
    resetConnectionRetryInterval() {
        this._connectionRetryInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionRetryIntervalInput() {
        return this._connectionRetryInterval;
    }
    get filecacheDuration() {
        return this.getNumberAttribute('filecache_duration');
    }
    set filecacheDuration(value) {
        this._filecacheDuration = value;
    }
    resetFilecacheDuration() {
        this._filecacheDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filecacheDurationInput() {
        return this._filecacheDuration;
    }
    get httpTransferMode() {
        return this.getStringAttribute('http_transfer_mode');
    }
    set httpTransferMode(value) {
        this._httpTransferMode = value;
    }
    resetHttpTransferMode() {
        this._httpTransferMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpTransferModeInput() {
        return this._httpTransferMode;
    }
    get numRetries() {
        return this.getNumberAttribute('num_retries');
    }
    set numRetries(value) {
        this._numRetries = value;
    }
    resetNumRetries() {
        this._numRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numRetriesInput() {
        return this._numRetries;
    }
    get restartDelay() {
        return this.getNumberAttribute('restart_delay');
    }
    set restartDelay(value) {
        this._restartDelay = value;
    }
    resetRestartDelay() {
        this._restartDelay = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restartDelayInput() {
        return this._restartDelay;
    }
    get salt() {
        return this.getStringAttribute('salt');
    }
    set salt(value) {
        this._salt = value;
    }
    resetSalt() {
        this._salt = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get saltInput() {
        return this._salt;
    }
    get token() {
        return this.getStringAttribute('token');
    }
    set token(value) {
        this._token = value;
    }
    resetToken() {
        this._token = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tokenInput() {
        return this._token;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference[_15] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_retry_interval: cdktf.numberToTerraform(struct.connectionRetryInterval),
        filecache_duration: cdktf.numberToTerraform(struct.filecacheDuration),
        num_retries: cdktf.numberToTerraform(struct.numRetries),
        restart_delay: cdktf.numberToTerraform(struct.restartDelay),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionRetryInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionRetryInterval = this._connectionRetryInterval;
        }
        if (this._filecacheDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.filecacheDuration = this._filecacheDuration;
        }
        if (this._numRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRetries = this._numRetries;
        }
        if (this._restartDelay !== undefined) {
            hasAnyValues = true;
            internalValueResult.restartDelay = this._restartDelay;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._connectionRetryInterval = undefined;
            this._filecacheDuration = undefined;
            this._numRetries = undefined;
            this._restartDelay = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._connectionRetryInterval = value.connectionRetryInterval;
            this._filecacheDuration = value.filecacheDuration;
            this._numRetries = value.numRetries;
            this._restartDelay = value.restartDelay;
        }
    }
    get connectionRetryInterval() {
        return this.getNumberAttribute('connection_retry_interval');
    }
    set connectionRetryInterval(value) {
        this._connectionRetryInterval = value;
    }
    resetConnectionRetryInterval() {
        this._connectionRetryInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionRetryIntervalInput() {
        return this._connectionRetryInterval;
    }
    get filecacheDuration() {
        return this.getNumberAttribute('filecache_duration');
    }
    set filecacheDuration(value) {
        this._filecacheDuration = value;
    }
    resetFilecacheDuration() {
        this._filecacheDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filecacheDurationInput() {
        return this._filecacheDuration;
    }
    get numRetries() {
        return this.getNumberAttribute('num_retries');
    }
    set numRetries(value) {
        this._numRetries = value;
    }
    resetNumRetries() {
        this._numRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numRetriesInput() {
        return this._numRetries;
    }
    get restartDelay() {
        return this.getNumberAttribute('restart_delay');
    }
    set restartDelay(value) {
        this._restartDelay = value;
    }
    resetRestartDelay() {
        this._restartDelay = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restartDelayInput() {
        return this._restartDelay;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference[_16] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_retry_interval: cdktf.numberToTerraform(struct.connectionRetryInterval),
        filecache_duration: cdktf.numberToTerraform(struct.filecacheDuration),
        media_store_storage_class: cdktf.stringToTerraform(struct.mediaStoreStorageClass),
        num_retries: cdktf.numberToTerraform(struct.numRetries),
        restart_delay: cdktf.numberToTerraform(struct.restartDelay),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionRetryInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionRetryInterval = this._connectionRetryInterval;
        }
        if (this._filecacheDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.filecacheDuration = this._filecacheDuration;
        }
        if (this._mediaStoreStorageClass !== undefined) {
            hasAnyValues = true;
            internalValueResult.mediaStoreStorageClass = this._mediaStoreStorageClass;
        }
        if (this._numRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRetries = this._numRetries;
        }
        if (this._restartDelay !== undefined) {
            hasAnyValues = true;
            internalValueResult.restartDelay = this._restartDelay;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._connectionRetryInterval = undefined;
            this._filecacheDuration = undefined;
            this._mediaStoreStorageClass = undefined;
            this._numRetries = undefined;
            this._restartDelay = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._connectionRetryInterval = value.connectionRetryInterval;
            this._filecacheDuration = value.filecacheDuration;
            this._mediaStoreStorageClass = value.mediaStoreStorageClass;
            this._numRetries = value.numRetries;
            this._restartDelay = value.restartDelay;
        }
    }
    get connectionRetryInterval() {
        return this.getNumberAttribute('connection_retry_interval');
    }
    set connectionRetryInterval(value) {
        this._connectionRetryInterval = value;
    }
    resetConnectionRetryInterval() {
        this._connectionRetryInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionRetryIntervalInput() {
        return this._connectionRetryInterval;
    }
    get filecacheDuration() {
        return this.getNumberAttribute('filecache_duration');
    }
    set filecacheDuration(value) {
        this._filecacheDuration = value;
    }
    resetFilecacheDuration() {
        this._filecacheDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filecacheDurationInput() {
        return this._filecacheDuration;
    }
    get mediaStoreStorageClass() {
        return this.getStringAttribute('media_store_storage_class');
    }
    set mediaStoreStorageClass(value) {
        this._mediaStoreStorageClass = value;
    }
    resetMediaStoreStorageClass() {
        this._mediaStoreStorageClass = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mediaStoreStorageClassInput() {
        return this._mediaStoreStorageClass;
    }
    get numRetries() {
        return this.getNumberAttribute('num_retries');
    }
    set numRetries(value) {
        this._numRetries = value;
    }
    resetNumRetries() {
        this._numRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numRetriesInput() {
        return this._numRetries;
    }
    get restartDelay() {
        return this.getNumberAttribute('restart_delay');
    }
    set restartDelay(value) {
        this._restartDelay = value;
    }
    resetRestartDelay() {
        this._restartDelay = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restartDelayInput() {
        return this._restartDelay;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference;
_17 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference[_17] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        canned_acl: cdktf.stringToTerraform(struct.cannedAcl),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cannedAcl !== undefined) {
            hasAnyValues = true;
            internalValueResult.cannedAcl = this._cannedAcl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cannedAcl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cannedAcl = value.cannedAcl;
        }
    }
    get cannedAcl() {
        return this.getStringAttribute('canned_acl');
    }
    set cannedAcl(value) {
        this._cannedAcl = value;
    }
    resetCannedAcl() {
        this._cannedAcl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cannedAclInput() {
        return this._cannedAcl;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference[_18] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_retry_interval: cdktf.numberToTerraform(struct.connectionRetryInterval),
        filecache_duration: cdktf.numberToTerraform(struct.filecacheDuration),
        http_transfer_mode: cdktf.stringToTerraform(struct.httpTransferMode),
        num_retries: cdktf.numberToTerraform(struct.numRetries),
        restart_delay: cdktf.numberToTerraform(struct.restartDelay),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionRetryInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionRetryInterval = this._connectionRetryInterval;
        }
        if (this._filecacheDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.filecacheDuration = this._filecacheDuration;
        }
        if (this._httpTransferMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpTransferMode = this._httpTransferMode;
        }
        if (this._numRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRetries = this._numRetries;
        }
        if (this._restartDelay !== undefined) {
            hasAnyValues = true;
            internalValueResult.restartDelay = this._restartDelay;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._connectionRetryInterval = undefined;
            this._filecacheDuration = undefined;
            this._httpTransferMode = undefined;
            this._numRetries = undefined;
            this._restartDelay = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._connectionRetryInterval = value.connectionRetryInterval;
            this._filecacheDuration = value.filecacheDuration;
            this._httpTransferMode = value.httpTransferMode;
            this._numRetries = value.numRetries;
            this._restartDelay = value.restartDelay;
        }
    }
    get connectionRetryInterval() {
        return this.getNumberAttribute('connection_retry_interval');
    }
    set connectionRetryInterval(value) {
        this._connectionRetryInterval = value;
    }
    resetConnectionRetryInterval() {
        this._connectionRetryInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionRetryIntervalInput() {
        return this._connectionRetryInterval;
    }
    get filecacheDuration() {
        return this.getNumberAttribute('filecache_duration');
    }
    set filecacheDuration(value) {
        this._filecacheDuration = value;
    }
    resetFilecacheDuration() {
        this._filecacheDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filecacheDurationInput() {
        return this._filecacheDuration;
    }
    get httpTransferMode() {
        return this.getStringAttribute('http_transfer_mode');
    }
    set httpTransferMode(value) {
        this._httpTransferMode = value;
    }
    resetHttpTransferMode() {
        this._httpTransferMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpTransferModeInput() {
        return this._httpTransferMode;
    }
    get numRetries() {
        return this.getNumberAttribute('num_retries');
    }
    set numRetries(value) {
        this._numRetries = value;
    }
    resetNumRetries() {
        this._numRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numRetriesInput() {
        return this._numRetries;
    }
    get restartDelay() {
        return this.getNumberAttribute('restart_delay');
    }
    set restartDelay(value) {
        this._restartDelay = value;
    }
    resetRestartDelay() {
        this._restartDelay = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restartDelayInput() {
        return this._restartDelay;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference[_19] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hls_akamai_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsToTerraform(struct.hlsAkamaiSettings),
        hls_basic_put_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsToTerraform(struct.hlsBasicPutSettings),
        hls_media_store_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsToTerraform(struct.hlsMediaStoreSettings),
        hls_s3_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsToTerraform(struct.hlsS3Settings),
        hls_webdav_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsToTerraform(struct.hlsWebdavSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // hls_akamai_settings - computed: false, optional: true, required: false
        this._hlsAkamaiSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference(this, "hls_akamai_settings");
        // hls_basic_put_settings - computed: false, optional: true, required: false
        this._hlsBasicPutSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference(this, "hls_basic_put_settings");
        // hls_media_store_settings - computed: false, optional: true, required: false
        this._hlsMediaStoreSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference(this, "hls_media_store_settings");
        // hls_s3_settings - computed: false, optional: true, required: false
        this._hlsS3Settings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference(this, "hls_s3_settings");
        // hls_webdav_settings - computed: false, optional: true, required: false
        this._hlsWebdavSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference(this, "hls_webdav_settings");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hlsAkamaiSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsAkamaiSettings = this._hlsAkamaiSettings?.internalValue;
        }
        if (this._hlsBasicPutSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsBasicPutSettings = this._hlsBasicPutSettings?.internalValue;
        }
        if (this._hlsMediaStoreSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsMediaStoreSettings = this._hlsMediaStoreSettings?.internalValue;
        }
        if (this._hlsS3Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsS3Settings = this._hlsS3Settings?.internalValue;
        }
        if (this._hlsWebdavSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsWebdavSettings = this._hlsWebdavSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._hlsAkamaiSettings.internalValue = undefined;
            this._hlsBasicPutSettings.internalValue = undefined;
            this._hlsMediaStoreSettings.internalValue = undefined;
            this._hlsS3Settings.internalValue = undefined;
            this._hlsWebdavSettings.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._hlsAkamaiSettings.internalValue = value.hlsAkamaiSettings;
            this._hlsBasicPutSettings.internalValue = value.hlsBasicPutSettings;
            this._hlsMediaStoreSettings.internalValue = value.hlsMediaStoreSettings;
            this._hlsS3Settings.internalValue = value.hlsS3Settings;
            this._hlsWebdavSettings.internalValue = value.hlsWebdavSettings;
        }
    }
    get hlsAkamaiSettings() {
        return this._hlsAkamaiSettings;
    }
    putHlsAkamaiSettings(value) {
        this._hlsAkamaiSettings.internalValue = value;
    }
    resetHlsAkamaiSettings() {
        this._hlsAkamaiSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsAkamaiSettingsInput() {
        return this._hlsAkamaiSettings.internalValue;
    }
    get hlsBasicPutSettings() {
        return this._hlsBasicPutSettings;
    }
    putHlsBasicPutSettings(value) {
        this._hlsBasicPutSettings.internalValue = value;
    }
    resetHlsBasicPutSettings() {
        this._hlsBasicPutSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsBasicPutSettingsInput() {
        return this._hlsBasicPutSettings.internalValue;
    }
    get hlsMediaStoreSettings() {
        return this._hlsMediaStoreSettings;
    }
    putHlsMediaStoreSettings(value) {
        this._hlsMediaStoreSettings.internalValue = value;
    }
    resetHlsMediaStoreSettings() {
        this._hlsMediaStoreSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsMediaStoreSettingsInput() {
        return this._hlsMediaStoreSettings.internalValue;
    }
    get hlsS3Settings() {
        return this._hlsS3Settings;
    }
    putHlsS3Settings(value) {
        this._hlsS3Settings.internalValue = value;
    }
    resetHlsS3Settings() {
        this._hlsS3Settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsS3SettingsInput() {
        return this._hlsS3Settings.internalValue;
    }
    get hlsWebdavSettings() {
        return this._hlsWebdavSettings;
    }
    putHlsWebdavSettings(value) {
        this._hlsWebdavSettings.internalValue = value;
    }
    resetHlsWebdavSettings() {
        this._hlsWebdavSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsWebdavSettingsInput() {
        return this._hlsWebdavSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference[_20] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference", version: "10.0.12" };
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList;
_21 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList[_21] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ad_markers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.adMarkers),
        base_url_content: cdktf.stringToTerraform(struct.baseUrlContent),
        base_url_content1: cdktf.stringToTerraform(struct.baseUrlContent1),
        base_url_manifest: cdktf.stringToTerraform(struct.baseUrlManifest),
        base_url_manifest1: cdktf.stringToTerraform(struct.baseUrlManifest1),
        caption_language_setting: cdktf.stringToTerraform(struct.captionLanguageSetting),
        client_cache: cdktf.stringToTerraform(struct.clientCache),
        codec_specification: cdktf.stringToTerraform(struct.codecSpecification),
        constant_iv: cdktf.stringToTerraform(struct.constantIv),
        directory_structure: cdktf.stringToTerraform(struct.directoryStructure),
        discontinuity_tags: cdktf.stringToTerraform(struct.discontinuityTags),
        encryption_type: cdktf.stringToTerraform(struct.encryptionType),
        hls_id3_segment_tagging: cdktf.stringToTerraform(struct.hlsId3SegmentTagging),
        incomplete_segment_behavior: cdktf.stringToTerraform(struct.incompleteSegmentBehavior),
        index_n_segments: cdktf.numberToTerraform(struct.indexNSegments),
        input_loss_action: cdktf.stringToTerraform(struct.inputLossAction),
        iv_in_manifest: cdktf.stringToTerraform(struct.ivInManifest),
        iv_source: cdktf.stringToTerraform(struct.ivSource),
        keep_segment: cdktf.numberToTerraform(struct.keepSegment),
        key_format: cdktf.stringToTerraform(struct.keyFormat),
        key_format_versions: cdktf.stringToTerraform(struct.keyFormatVersions),
        manifest_compression: cdktf.stringToTerraform(struct.manifestCompression),
        manifest_duration_format: cdktf.stringToTerraform(struct.manifestDurationFormat),
        min_segment_length: cdktf.numberToTerraform(struct.minSegmentLength),
        mode: cdktf.stringToTerraform(struct.mode),
        program_date_time: cdktf.stringToTerraform(struct.programDateTime),
        program_date_time_clock: cdktf.stringToTerraform(struct.programDateTimeClock),
        program_date_time_period: cdktf.numberToTerraform(struct.programDateTimePeriod),
        redundant_manifest: cdktf.stringToTerraform(struct.redundantManifest),
        segment_length: cdktf.numberToTerraform(struct.segmentLength),
        segments_per_subdirectory: cdktf.numberToTerraform(struct.segmentsPerSubdirectory),
        stream_inf_resolution: cdktf.stringToTerraform(struct.streamInfResolution),
        time_metadata_id3_frame: cdktf.stringToTerraform(struct.timeMetadataId3Frame),
        timestamp_delta_milliseconds: cdktf.numberToTerraform(struct.timestampDeltaMilliseconds),
        ts_file_mode: cdktf.stringToTerraform(struct.tsFileMode),
        caption_language_mappings: cdktf.listMapper(medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsToTerraform, true)(struct.captionLanguageMappings),
        destination: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationToTerraform(struct.destination),
        hls_cdn_settings: cdktf.listMapper(medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsToTerraform, true)(struct.hlsCdnSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // caption_language_mappings - computed: false, optional: true, required: false
        this._captionLanguageMappings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList(this, "caption_language_mappings", true);
        // destination - computed: false, optional: false, required: true
        this._destination = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference(this, "destination");
        // hls_cdn_settings - computed: false, optional: true, required: false
        this._hlsCdnSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList(this, "hls_cdn_settings", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._adMarkers !== undefined) {
            hasAnyValues = true;
            internalValueResult.adMarkers = this._adMarkers;
        }
        if (this._baseUrlContent !== undefined) {
            hasAnyValues = true;
            internalValueResult.baseUrlContent = this._baseUrlContent;
        }
        if (this._baseUrlContent1 !== undefined) {
            hasAnyValues = true;
            internalValueResult.baseUrlContent1 = this._baseUrlContent1;
        }
        if (this._baseUrlManifest !== undefined) {
            hasAnyValues = true;
            internalValueResult.baseUrlManifest = this._baseUrlManifest;
        }
        if (this._baseUrlManifest1 !== undefined) {
            hasAnyValues = true;
            internalValueResult.baseUrlManifest1 = this._baseUrlManifest1;
        }
        if (this._captionLanguageSetting !== undefined) {
            hasAnyValues = true;
            internalValueResult.captionLanguageSetting = this._captionLanguageSetting;
        }
        if (this._clientCache !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientCache = this._clientCache;
        }
        if (this._codecSpecification !== undefined) {
            hasAnyValues = true;
            internalValueResult.codecSpecification = this._codecSpecification;
        }
        if (this._constantIv !== undefined) {
            hasAnyValues = true;
            internalValueResult.constantIv = this._constantIv;
        }
        if (this._directoryStructure !== undefined) {
            hasAnyValues = true;
            internalValueResult.directoryStructure = this._directoryStructure;
        }
        if (this._discontinuityTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.discontinuityTags = this._discontinuityTags;
        }
        if (this._encryptionType !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionType = this._encryptionType;
        }
        if (this._hlsId3SegmentTagging !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsId3SegmentTagging = this._hlsId3SegmentTagging;
        }
        if (this._incompleteSegmentBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.incompleteSegmentBehavior = this._incompleteSegmentBehavior;
        }
        if (this._indexNSegments !== undefined) {
            hasAnyValues = true;
            internalValueResult.indexNSegments = this._indexNSegments;
        }
        if (this._inputLossAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputLossAction = this._inputLossAction;
        }
        if (this._ivInManifest !== undefined) {
            hasAnyValues = true;
            internalValueResult.ivInManifest = this._ivInManifest;
        }
        if (this._ivSource !== undefined) {
            hasAnyValues = true;
            internalValueResult.ivSource = this._ivSource;
        }
        if (this._keepSegment !== undefined) {
            hasAnyValues = true;
            internalValueResult.keepSegment = this._keepSegment;
        }
        if (this._keyFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyFormat = this._keyFormat;
        }
        if (this._keyFormatVersions !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyFormatVersions = this._keyFormatVersions;
        }
        if (this._manifestCompression !== undefined) {
            hasAnyValues = true;
            internalValueResult.manifestCompression = this._manifestCompression;
        }
        if (this._manifestDurationFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.manifestDurationFormat = this._manifestDurationFormat;
        }
        if (this._minSegmentLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.minSegmentLength = this._minSegmentLength;
        }
        if (this._mode !== undefined) {
            hasAnyValues = true;
            internalValueResult.mode = this._mode;
        }
        if (this._programDateTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.programDateTime = this._programDateTime;
        }
        if (this._programDateTimeClock !== undefined) {
            hasAnyValues = true;
            internalValueResult.programDateTimeClock = this._programDateTimeClock;
        }
        if (this._programDateTimePeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.programDateTimePeriod = this._programDateTimePeriod;
        }
        if (this._redundantManifest !== undefined) {
            hasAnyValues = true;
            internalValueResult.redundantManifest = this._redundantManifest;
        }
        if (this._segmentLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentLength = this._segmentLength;
        }
        if (this._segmentsPerSubdirectory !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentsPerSubdirectory = this._segmentsPerSubdirectory;
        }
        if (this._streamInfResolution !== undefined) {
            hasAnyValues = true;
            internalValueResult.streamInfResolution = this._streamInfResolution;
        }
        if (this._timeMetadataId3Frame !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeMetadataId3Frame = this._timeMetadataId3Frame;
        }
        if (this._timestampDeltaMilliseconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.timestampDeltaMilliseconds = this._timestampDeltaMilliseconds;
        }
        if (this._tsFileMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.tsFileMode = this._tsFileMode;
        }
        if (this._captionLanguageMappings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.captionLanguageMappings = this._captionLanguageMappings?.internalValue;
        }
        if (this._destination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination?.internalValue;
        }
        if (this._hlsCdnSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsCdnSettings = this._hlsCdnSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._adMarkers = undefined;
            this._baseUrlContent = undefined;
            this._baseUrlContent1 = undefined;
            this._baseUrlManifest = undefined;
            this._baseUrlManifest1 = undefined;
            this._captionLanguageSetting = undefined;
            this._clientCache = undefined;
            this._codecSpecification = undefined;
            this._constantIv = undefined;
            this._directoryStructure = undefined;
            this._discontinuityTags = undefined;
            this._encryptionType = undefined;
            this._hlsId3SegmentTagging = undefined;
            this._incompleteSegmentBehavior = undefined;
            this._indexNSegments = undefined;
            this._inputLossAction = undefined;
            this._ivInManifest = undefined;
            this._ivSource = undefined;
            this._keepSegment = undefined;
            this._keyFormat = undefined;
            this._keyFormatVersions = undefined;
            this._manifestCompression = undefined;
            this._manifestDurationFormat = undefined;
            this._minSegmentLength = undefined;
            this._mode = undefined;
            this._programDateTime = undefined;
            this._programDateTimeClock = undefined;
            this._programDateTimePeriod = undefined;
            this._redundantManifest = undefined;
            this._segmentLength = undefined;
            this._segmentsPerSubdirectory = undefined;
            this._streamInfResolution = undefined;
            this._timeMetadataId3Frame = undefined;
            this._timestampDeltaMilliseconds = undefined;
            this._tsFileMode = undefined;
            this._captionLanguageMappings.internalValue = undefined;
            this._destination.internalValue = undefined;
            this._hlsCdnSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._adMarkers = value.adMarkers;
            this._baseUrlContent = value.baseUrlContent;
            this._baseUrlContent1 = value.baseUrlContent1;
            this._baseUrlManifest = value.baseUrlManifest;
            this._baseUrlManifest1 = value.baseUrlManifest1;
            this._captionLanguageSetting = value.captionLanguageSetting;
            this._clientCache = value.clientCache;
            this._codecSpecification = value.codecSpecification;
            this._constantIv = value.constantIv;
            this._directoryStructure = value.directoryStructure;
            this._discontinuityTags = value.discontinuityTags;
            this._encryptionType = value.encryptionType;
            this._hlsId3SegmentTagging = value.hlsId3SegmentTagging;
            this._incompleteSegmentBehavior = value.incompleteSegmentBehavior;
            this._indexNSegments = value.indexNSegments;
            this._inputLossAction = value.inputLossAction;
            this._ivInManifest = value.ivInManifest;
            this._ivSource = value.ivSource;
            this._keepSegment = value.keepSegment;
            this._keyFormat = value.keyFormat;
            this._keyFormatVersions = value.keyFormatVersions;
            this._manifestCompression = value.manifestCompression;
            this._manifestDurationFormat = value.manifestDurationFormat;
            this._minSegmentLength = value.minSegmentLength;
            this._mode = value.mode;
            this._programDateTime = value.programDateTime;
            this._programDateTimeClock = value.programDateTimeClock;
            this._programDateTimePeriod = value.programDateTimePeriod;
            this._redundantManifest = value.redundantManifest;
            this._segmentLength = value.segmentLength;
            this._segmentsPerSubdirectory = value.segmentsPerSubdirectory;
            this._streamInfResolution = value.streamInfResolution;
            this._timeMetadataId3Frame = value.timeMetadataId3Frame;
            this._timestampDeltaMilliseconds = value.timestampDeltaMilliseconds;
            this._tsFileMode = value.tsFileMode;
            this._captionLanguageMappings.internalValue = value.captionLanguageMappings;
            this._destination.internalValue = value.destination;
            this._hlsCdnSettings.internalValue = value.hlsCdnSettings;
        }
    }
    get adMarkers() {
        return this.getListAttribute('ad_markers');
    }
    set adMarkers(value) {
        this._adMarkers = value;
    }
    resetAdMarkers() {
        this._adMarkers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get adMarkersInput() {
        return this._adMarkers;
    }
    get baseUrlContent() {
        return this.getStringAttribute('base_url_content');
    }
    set baseUrlContent(value) {
        this._baseUrlContent = value;
    }
    resetBaseUrlContent() {
        this._baseUrlContent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get baseUrlContentInput() {
        return this._baseUrlContent;
    }
    get baseUrlContent1() {
        return this.getStringAttribute('base_url_content1');
    }
    set baseUrlContent1(value) {
        this._baseUrlContent1 = value;
    }
    resetBaseUrlContent1() {
        this._baseUrlContent1 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get baseUrlContent1Input() {
        return this._baseUrlContent1;
    }
    get baseUrlManifest() {
        return this.getStringAttribute('base_url_manifest');
    }
    set baseUrlManifest(value) {
        this._baseUrlManifest = value;
    }
    resetBaseUrlManifest() {
        this._baseUrlManifest = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get baseUrlManifestInput() {
        return this._baseUrlManifest;
    }
    get baseUrlManifest1() {
        return this.getStringAttribute('base_url_manifest1');
    }
    set baseUrlManifest1(value) {
        this._baseUrlManifest1 = value;
    }
    resetBaseUrlManifest1() {
        this._baseUrlManifest1 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get baseUrlManifest1Input() {
        return this._baseUrlManifest1;
    }
    get captionLanguageSetting() {
        return this.getStringAttribute('caption_language_setting');
    }
    set captionLanguageSetting(value) {
        this._captionLanguageSetting = value;
    }
    resetCaptionLanguageSetting() {
        this._captionLanguageSetting = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get captionLanguageSettingInput() {
        return this._captionLanguageSetting;
    }
    get clientCache() {
        return this.getStringAttribute('client_cache');
    }
    set clientCache(value) {
        this._clientCache = value;
    }
    resetClientCache() {
        this._clientCache = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientCacheInput() {
        return this._clientCache;
    }
    get codecSpecification() {
        return this.getStringAttribute('codec_specification');
    }
    set codecSpecification(value) {
        this._codecSpecification = value;
    }
    resetCodecSpecification() {
        this._codecSpecification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codecSpecificationInput() {
        return this._codecSpecification;
    }
    get constantIv() {
        return this.getStringAttribute('constant_iv');
    }
    set constantIv(value) {
        this._constantIv = value;
    }
    resetConstantIv() {
        this._constantIv = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get constantIvInput() {
        return this._constantIv;
    }
    get directoryStructure() {
        return this.getStringAttribute('directory_structure');
    }
    set directoryStructure(value) {
        this._directoryStructure = value;
    }
    resetDirectoryStructure() {
        this._directoryStructure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get directoryStructureInput() {
        return this._directoryStructure;
    }
    get discontinuityTags() {
        return this.getStringAttribute('discontinuity_tags');
    }
    set discontinuityTags(value) {
        this._discontinuityTags = value;
    }
    resetDiscontinuityTags() {
        this._discontinuityTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get discontinuityTagsInput() {
        return this._discontinuityTags;
    }
    get encryptionType() {
        return this.getStringAttribute('encryption_type');
    }
    set encryptionType(value) {
        this._encryptionType = value;
    }
    resetEncryptionType() {
        this._encryptionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionTypeInput() {
        return this._encryptionType;
    }
    get hlsId3SegmentTagging() {
        return this.getStringAttribute('hls_id3_segment_tagging');
    }
    set hlsId3SegmentTagging(value) {
        this._hlsId3SegmentTagging = value;
    }
    resetHlsId3SegmentTagging() {
        this._hlsId3SegmentTagging = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsId3SegmentTaggingInput() {
        return this._hlsId3SegmentTagging;
    }
    get incompleteSegmentBehavior() {
        return this.getStringAttribute('incomplete_segment_behavior');
    }
    set incompleteSegmentBehavior(value) {
        this._incompleteSegmentBehavior = value;
    }
    resetIncompleteSegmentBehavior() {
        this._incompleteSegmentBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get incompleteSegmentBehaviorInput() {
        return this._incompleteSegmentBehavior;
    }
    get indexNSegments() {
        return this.getNumberAttribute('index_n_segments');
    }
    set indexNSegments(value) {
        this._indexNSegments = value;
    }
    resetIndexNSegments() {
        this._indexNSegments = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get indexNSegmentsInput() {
        return this._indexNSegments;
    }
    get inputLossAction() {
        return this.getStringAttribute('input_loss_action');
    }
    set inputLossAction(value) {
        this._inputLossAction = value;
    }
    resetInputLossAction() {
        this._inputLossAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputLossActionInput() {
        return this._inputLossAction;
    }
    get ivInManifest() {
        return this.getStringAttribute('iv_in_manifest');
    }
    set ivInManifest(value) {
        this._ivInManifest = value;
    }
    resetIvInManifest() {
        this._ivInManifest = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ivInManifestInput() {
        return this._ivInManifest;
    }
    get ivSource() {
        return this.getStringAttribute('iv_source');
    }
    set ivSource(value) {
        this._ivSource = value;
    }
    resetIvSource() {
        this._ivSource = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ivSourceInput() {
        return this._ivSource;
    }
    get keepSegment() {
        return this.getNumberAttribute('keep_segment');
    }
    set keepSegment(value) {
        this._keepSegment = value;
    }
    resetKeepSegment() {
        this._keepSegment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keepSegmentInput() {
        return this._keepSegment;
    }
    get keyFormat() {
        return this.getStringAttribute('key_format');
    }
    set keyFormat(value) {
        this._keyFormat = value;
    }
    resetKeyFormat() {
        this._keyFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyFormatInput() {
        return this._keyFormat;
    }
    get keyFormatVersions() {
        return this.getStringAttribute('key_format_versions');
    }
    set keyFormatVersions(value) {
        this._keyFormatVersions = value;
    }
    resetKeyFormatVersions() {
        this._keyFormatVersions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyFormatVersionsInput() {
        return this._keyFormatVersions;
    }
    get manifestCompression() {
        return this.getStringAttribute('manifest_compression');
    }
    set manifestCompression(value) {
        this._manifestCompression = value;
    }
    resetManifestCompression() {
        this._manifestCompression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get manifestCompressionInput() {
        return this._manifestCompression;
    }
    get manifestDurationFormat() {
        return this.getStringAttribute('manifest_duration_format');
    }
    set manifestDurationFormat(value) {
        this._manifestDurationFormat = value;
    }
    resetManifestDurationFormat() {
        this._manifestDurationFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get manifestDurationFormatInput() {
        return this._manifestDurationFormat;
    }
    get minSegmentLength() {
        return this.getNumberAttribute('min_segment_length');
    }
    set minSegmentLength(value) {
        this._minSegmentLength = value;
    }
    resetMinSegmentLength() {
        this._minSegmentLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minSegmentLengthInput() {
        return this._minSegmentLength;
    }
    get mode() {
        return this.getStringAttribute('mode');
    }
    set mode(value) {
        this._mode = value;
    }
    resetMode() {
        this._mode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modeInput() {
        return this._mode;
    }
    get programDateTime() {
        return this.getStringAttribute('program_date_time');
    }
    set programDateTime(value) {
        this._programDateTime = value;
    }
    resetProgramDateTime() {
        this._programDateTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get programDateTimeInput() {
        return this._programDateTime;
    }
    get programDateTimeClock() {
        return this.getStringAttribute('program_date_time_clock');
    }
    set programDateTimeClock(value) {
        this._programDateTimeClock = value;
    }
    resetProgramDateTimeClock() {
        this._programDateTimeClock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get programDateTimeClockInput() {
        return this._programDateTimeClock;
    }
    get programDateTimePeriod() {
        return this.getNumberAttribute('program_date_time_period');
    }
    set programDateTimePeriod(value) {
        this._programDateTimePeriod = value;
    }
    resetProgramDateTimePeriod() {
        this._programDateTimePeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get programDateTimePeriodInput() {
        return this._programDateTimePeriod;
    }
    get redundantManifest() {
        return this.getStringAttribute('redundant_manifest');
    }
    set redundantManifest(value) {
        this._redundantManifest = value;
    }
    resetRedundantManifest() {
        this._redundantManifest = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redundantManifestInput() {
        return this._redundantManifest;
    }
    get segmentLength() {
        return this.getNumberAttribute('segment_length');
    }
    set segmentLength(value) {
        this._segmentLength = value;
    }
    resetSegmentLength() {
        this._segmentLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentLengthInput() {
        return this._segmentLength;
    }
    get segmentsPerSubdirectory() {
        return this.getNumberAttribute('segments_per_subdirectory');
    }
    set segmentsPerSubdirectory(value) {
        this._segmentsPerSubdirectory = value;
    }
    resetSegmentsPerSubdirectory() {
        this._segmentsPerSubdirectory = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentsPerSubdirectoryInput() {
        return this._segmentsPerSubdirectory;
    }
    get streamInfResolution() {
        return this.getStringAttribute('stream_inf_resolution');
    }
    set streamInfResolution(value) {
        this._streamInfResolution = value;
    }
    resetStreamInfResolution() {
        this._streamInfResolution = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streamInfResolutionInput() {
        return this._streamInfResolution;
    }
    get timeMetadataId3Frame() {
        return this.getStringAttribute('time_metadata_id3_frame');
    }
    set timeMetadataId3Frame(value) {
        this._timeMetadataId3Frame = value;
    }
    resetTimeMetadataId3Frame() {
        this._timeMetadataId3Frame = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeMetadataId3FrameInput() {
        return this._timeMetadataId3Frame;
    }
    get timestampDeltaMilliseconds() {
        return this.getNumberAttribute('timestamp_delta_milliseconds');
    }
    set timestampDeltaMilliseconds(value) {
        this._timestampDeltaMilliseconds = value;
    }
    resetTimestampDeltaMilliseconds() {
        this._timestampDeltaMilliseconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timestampDeltaMillisecondsInput() {
        return this._timestampDeltaMilliseconds;
    }
    get tsFileMode() {
        return this.getStringAttribute('ts_file_mode');
    }
    set tsFileMode(value) {
        this._tsFileMode = value;
    }
    resetTsFileMode() {
        this._tsFileMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tsFileModeInput() {
        return this._tsFileMode;
    }
    get captionLanguageMappings() {
        return this._captionLanguageMappings;
    }
    putCaptionLanguageMappings(value) {
        this._captionLanguageMappings.internalValue = value;
    }
    resetCaptionLanguageMappings() {
        this._captionLanguageMappings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get captionLanguageMappingsInput() {
        return this._captionLanguageMappings.internalValue;
    }
    get destination() {
        return this._destination;
    }
    putDestination(value) {
        this._destination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination.internalValue;
    }
    get hlsCdnSettings() {
        return this._hlsCdnSettings;
    }
    putHlsCdnSettings(value) {
        this._hlsCdnSettings.internalValue = value;
    }
    resetHlsCdnSettings() {
        this._hlsCdnSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsCdnSettingsInput() {
        return this._hlsCdnSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference;
_22 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference[_22] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_ref_id: cdktf.stringToTerraform(struct.destinationRefId),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationRefId !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationRefId = this._destinationRefId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationRefId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationRefId = value.destinationRefId;
        }
    }
    get destinationRefId() {
        return this.getStringAttribute('destination_ref_id');
    }
    set destinationRefId(value) {
        this._destinationRefId = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationRefIdInput() {
        return this._destinationRefId;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference[_23] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationToTerraform(struct.destination),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // destination - computed: false, optional: false, required: true
        this._destination = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference(this, "destination");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destination.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destination.internalValue = value.destination;
        }
    }
    get destination() {
        return this._destination;
    }
    putDestination(value) {
        this._destination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference;
_24 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference[_24] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_ref_id: cdktf.stringToTerraform(struct.destinationRefId),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationRefId !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationRefId = this._destinationRefId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationRefId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationRefId = value.destinationRefId;
        }
    }
    get destinationRefId() {
        return this.getStringAttribute('destination_ref_id');
    }
    set destinationRefId(value) {
        this._destinationRefId = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationRefIdInput() {
        return this._destinationRefId;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference;
_25 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference[_25] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        acquisition_point_id: cdktf.stringToTerraform(struct.acquisitionPointId),
        audio_only_timecodec_control: cdktf.stringToTerraform(struct.audioOnlyTimecodecControl),
        certificate_mode: cdktf.stringToTerraform(struct.certificateMode),
        connection_retry_interval: cdktf.numberToTerraform(struct.connectionRetryInterval),
        event_id: cdktf.numberToTerraform(struct.eventId),
        event_id_mode: cdktf.stringToTerraform(struct.eventIdMode),
        event_stop_behavior: cdktf.stringToTerraform(struct.eventStopBehavior),
        filecache_duration: cdktf.numberToTerraform(struct.filecacheDuration),
        fragment_length: cdktf.numberToTerraform(struct.fragmentLength),
        input_loss_action: cdktf.stringToTerraform(struct.inputLossAction),
        num_retries: cdktf.numberToTerraform(struct.numRetries),
        restart_delay: cdktf.numberToTerraform(struct.restartDelay),
        segmentation_mode: cdktf.stringToTerraform(struct.segmentationMode),
        send_delay_ms: cdktf.numberToTerraform(struct.sendDelayMs),
        sparse_track_type: cdktf.stringToTerraform(struct.sparseTrackType),
        stream_manifest_behavior: cdktf.stringToTerraform(struct.streamManifestBehavior),
        timestamp_offset: cdktf.stringToTerraform(struct.timestampOffset),
        timestamp_offset_mode: cdktf.stringToTerraform(struct.timestampOffsetMode),
        destination: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationToTerraform(struct.destination),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // destination - computed: false, optional: false, required: true
        this._destination = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference(this, "destination");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._acquisitionPointId !== undefined) {
            hasAnyValues = true;
            internalValueResult.acquisitionPointId = this._acquisitionPointId;
        }
        if (this._audioOnlyTimecodecControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioOnlyTimecodecControl = this._audioOnlyTimecodecControl;
        }
        if (this._certificateMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificateMode = this._certificateMode;
        }
        if (this._connectionRetryInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionRetryInterval = this._connectionRetryInterval;
        }
        if (this._eventId !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventId = this._eventId;
        }
        if (this._eventIdMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventIdMode = this._eventIdMode;
        }
        if (this._eventStopBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventStopBehavior = this._eventStopBehavior;
        }
        if (this._filecacheDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.filecacheDuration = this._filecacheDuration;
        }
        if (this._fragmentLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.fragmentLength = this._fragmentLength;
        }
        if (this._inputLossAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputLossAction = this._inputLossAction;
        }
        if (this._numRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRetries = this._numRetries;
        }
        if (this._restartDelay !== undefined) {
            hasAnyValues = true;
            internalValueResult.restartDelay = this._restartDelay;
        }
        if (this._segmentationMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentationMode = this._segmentationMode;
        }
        if (this._sendDelayMs !== undefined) {
            hasAnyValues = true;
            internalValueResult.sendDelayMs = this._sendDelayMs;
        }
        if (this._sparseTrackType !== undefined) {
            hasAnyValues = true;
            internalValueResult.sparseTrackType = this._sparseTrackType;
        }
        if (this._streamManifestBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.streamManifestBehavior = this._streamManifestBehavior;
        }
        if (this._timestampOffset !== undefined) {
            hasAnyValues = true;
            internalValueResult.timestampOffset = this._timestampOffset;
        }
        if (this._timestampOffsetMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.timestampOffsetMode = this._timestampOffsetMode;
        }
        if (this._destination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._acquisitionPointId = undefined;
            this._audioOnlyTimecodecControl = undefined;
            this._certificateMode = undefined;
            this._connectionRetryInterval = undefined;
            this._eventId = undefined;
            this._eventIdMode = undefined;
            this._eventStopBehavior = undefined;
            this._filecacheDuration = undefined;
            this._fragmentLength = undefined;
            this._inputLossAction = undefined;
            this._numRetries = undefined;
            this._restartDelay = undefined;
            this._segmentationMode = undefined;
            this._sendDelayMs = undefined;
            this._sparseTrackType = undefined;
            this._streamManifestBehavior = undefined;
            this._timestampOffset = undefined;
            this._timestampOffsetMode = undefined;
            this._destination.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._acquisitionPointId = value.acquisitionPointId;
            this._audioOnlyTimecodecControl = value.audioOnlyTimecodecControl;
            this._certificateMode = value.certificateMode;
            this._connectionRetryInterval = value.connectionRetryInterval;
            this._eventId = value.eventId;
            this._eventIdMode = value.eventIdMode;
            this._eventStopBehavior = value.eventStopBehavior;
            this._filecacheDuration = value.filecacheDuration;
            this._fragmentLength = value.fragmentLength;
            this._inputLossAction = value.inputLossAction;
            this._numRetries = value.numRetries;
            this._restartDelay = value.restartDelay;
            this._segmentationMode = value.segmentationMode;
            this._sendDelayMs = value.sendDelayMs;
            this._sparseTrackType = value.sparseTrackType;
            this._streamManifestBehavior = value.streamManifestBehavior;
            this._timestampOffset = value.timestampOffset;
            this._timestampOffsetMode = value.timestampOffsetMode;
            this._destination.internalValue = value.destination;
        }
    }
    get acquisitionPointId() {
        return this.getStringAttribute('acquisition_point_id');
    }
    set acquisitionPointId(value) {
        this._acquisitionPointId = value;
    }
    resetAcquisitionPointId() {
        this._acquisitionPointId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acquisitionPointIdInput() {
        return this._acquisitionPointId;
    }
    get audioOnlyTimecodecControl() {
        return this.getStringAttribute('audio_only_timecodec_control');
    }
    set audioOnlyTimecodecControl(value) {
        this._audioOnlyTimecodecControl = value;
    }
    resetAudioOnlyTimecodecControl() {
        this._audioOnlyTimecodecControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioOnlyTimecodecControlInput() {
        return this._audioOnlyTimecodecControl;
    }
    get certificateMode() {
        return this.getStringAttribute('certificate_mode');
    }
    set certificateMode(value) {
        this._certificateMode = value;
    }
    resetCertificateMode() {
        this._certificateMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certificateModeInput() {
        return this._certificateMode;
    }
    get connectionRetryInterval() {
        return this.getNumberAttribute('connection_retry_interval');
    }
    set connectionRetryInterval(value) {
        this._connectionRetryInterval = value;
    }
    resetConnectionRetryInterval() {
        this._connectionRetryInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionRetryIntervalInput() {
        return this._connectionRetryInterval;
    }
    get eventId() {
        return this.getNumberAttribute('event_id');
    }
    set eventId(value) {
        this._eventId = value;
    }
    resetEventId() {
        this._eventId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventIdInput() {
        return this._eventId;
    }
    get eventIdMode() {
        return this.getStringAttribute('event_id_mode');
    }
    set eventIdMode(value) {
        this._eventIdMode = value;
    }
    resetEventIdMode() {
        this._eventIdMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventIdModeInput() {
        return this._eventIdMode;
    }
    get eventStopBehavior() {
        return this.getStringAttribute('event_stop_behavior');
    }
    set eventStopBehavior(value) {
        this._eventStopBehavior = value;
    }
    resetEventStopBehavior() {
        this._eventStopBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventStopBehaviorInput() {
        return this._eventStopBehavior;
    }
    get filecacheDuration() {
        return this.getNumberAttribute('filecache_duration');
    }
    set filecacheDuration(value) {
        this._filecacheDuration = value;
    }
    resetFilecacheDuration() {
        this._filecacheDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filecacheDurationInput() {
        return this._filecacheDuration;
    }
    get fragmentLength() {
        return this.getNumberAttribute('fragment_length');
    }
    set fragmentLength(value) {
        this._fragmentLength = value;
    }
    resetFragmentLength() {
        this._fragmentLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fragmentLengthInput() {
        return this._fragmentLength;
    }
    get inputLossAction() {
        return this.getStringAttribute('input_loss_action');
    }
    set inputLossAction(value) {
        this._inputLossAction = value;
    }
    resetInputLossAction() {
        this._inputLossAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputLossActionInput() {
        return this._inputLossAction;
    }
    get numRetries() {
        return this.getNumberAttribute('num_retries');
    }
    set numRetries(value) {
        this._numRetries = value;
    }
    resetNumRetries() {
        this._numRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numRetriesInput() {
        return this._numRetries;
    }
    get restartDelay() {
        return this.getNumberAttribute('restart_delay');
    }
    set restartDelay(value) {
        this._restartDelay = value;
    }
    resetRestartDelay() {
        this._restartDelay = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restartDelayInput() {
        return this._restartDelay;
    }
    get segmentationMode() {
        return this.getStringAttribute('segmentation_mode');
    }
    set segmentationMode(value) {
        this._segmentationMode = value;
    }
    resetSegmentationMode() {
        this._segmentationMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentationModeInput() {
        return this._segmentationMode;
    }
    get sendDelayMs() {
        return this.getNumberAttribute('send_delay_ms');
    }
    set sendDelayMs(value) {
        this._sendDelayMs = value;
    }
    resetSendDelayMs() {
        this._sendDelayMs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sendDelayMsInput() {
        return this._sendDelayMs;
    }
    get sparseTrackType() {
        return this.getStringAttribute('sparse_track_type');
    }
    set sparseTrackType(value) {
        this._sparseTrackType = value;
    }
    resetSparseTrackType() {
        this._sparseTrackType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sparseTrackTypeInput() {
        return this._sparseTrackType;
    }
    get streamManifestBehavior() {
        return this.getStringAttribute('stream_manifest_behavior');
    }
    set streamManifestBehavior(value) {
        this._streamManifestBehavior = value;
    }
    resetStreamManifestBehavior() {
        this._streamManifestBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streamManifestBehaviorInput() {
        return this._streamManifestBehavior;
    }
    get timestampOffset() {
        return this.getStringAttribute('timestamp_offset');
    }
    set timestampOffset(value) {
        this._timestampOffset = value;
    }
    resetTimestampOffset() {
        this._timestampOffset = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timestampOffsetInput() {
        return this._timestampOffset;
    }
    get timestampOffsetMode() {
        return this.getStringAttribute('timestamp_offset_mode');
    }
    set timestampOffsetMode(value) {
        this._timestampOffsetMode = value;
    }
    resetTimestampOffsetMode() {
        this._timestampOffsetMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timestampOffsetModeInput() {
        return this._timestampOffsetMode;
    }
    get destination() {
        return this._destination;
    }
    putDestination(value) {
        this._destination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference;
_26 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference[_26] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference[_27] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ad_markers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.adMarkers),
        authentication_scheme: cdktf.stringToTerraform(struct.authenticationScheme),
        cache_full_behavior: cdktf.stringToTerraform(struct.cacheFullBehavior),
        cache_length: cdktf.numberToTerraform(struct.cacheLength),
        caption_data: cdktf.stringToTerraform(struct.captionData),
        input_loss_action: cdktf.stringToTerraform(struct.inputLossAction),
        restart_delay: cdktf.numberToTerraform(struct.restartDelay),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._adMarkers !== undefined) {
            hasAnyValues = true;
            internalValueResult.adMarkers = this._adMarkers;
        }
        if (this._authenticationScheme !== undefined) {
            hasAnyValues = true;
            internalValueResult.authenticationScheme = this._authenticationScheme;
        }
        if (this._cacheFullBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.cacheFullBehavior = this._cacheFullBehavior;
        }
        if (this._cacheLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.cacheLength = this._cacheLength;
        }
        if (this._captionData !== undefined) {
            hasAnyValues = true;
            internalValueResult.captionData = this._captionData;
        }
        if (this._inputLossAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputLossAction = this._inputLossAction;
        }
        if (this._restartDelay !== undefined) {
            hasAnyValues = true;
            internalValueResult.restartDelay = this._restartDelay;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._adMarkers = undefined;
            this._authenticationScheme = undefined;
            this._cacheFullBehavior = undefined;
            this._cacheLength = undefined;
            this._captionData = undefined;
            this._inputLossAction = undefined;
            this._restartDelay = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._adMarkers = value.adMarkers;
            this._authenticationScheme = value.authenticationScheme;
            this._cacheFullBehavior = value.cacheFullBehavior;
            this._cacheLength = value.cacheLength;
            this._captionData = value.captionData;
            this._inputLossAction = value.inputLossAction;
            this._restartDelay = value.restartDelay;
        }
    }
    get adMarkers() {
        return this.getListAttribute('ad_markers');
    }
    set adMarkers(value) {
        this._adMarkers = value;
    }
    resetAdMarkers() {
        this._adMarkers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get adMarkersInput() {
        return this._adMarkers;
    }
    get authenticationScheme() {
        return this.getStringAttribute('authentication_scheme');
    }
    set authenticationScheme(value) {
        this._authenticationScheme = value;
    }
    resetAuthenticationScheme() {
        this._authenticationScheme = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authenticationSchemeInput() {
        return this._authenticationScheme;
    }
    get cacheFullBehavior() {
        return this.getStringAttribute('cache_full_behavior');
    }
    set cacheFullBehavior(value) {
        this._cacheFullBehavior = value;
    }
    resetCacheFullBehavior() {
        this._cacheFullBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cacheFullBehaviorInput() {
        return this._cacheFullBehavior;
    }
    get cacheLength() {
        return this.getNumberAttribute('cache_length');
    }
    set cacheLength(value) {
        this._cacheLength = value;
    }
    resetCacheLength() {
        this._cacheLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cacheLengthInput() {
        return this._cacheLength;
    }
    get captionData() {
        return this.getStringAttribute('caption_data');
    }
    set captionData(value) {
        this._captionData = value;
    }
    resetCaptionData() {
        this._captionData = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get captionDataInput() {
        return this._captionData;
    }
    get inputLossAction() {
        return this.getStringAttribute('input_loss_action');
    }
    set inputLossAction(value) {
        this._inputLossAction = value;
    }
    resetInputLossAction() {
        this._inputLossAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputLossActionInput() {
        return this._inputLossAction;
    }
    get restartDelay() {
        return this.getNumberAttribute('restart_delay');
    }
    set restartDelay(value) {
        this._restartDelay = value;
    }
    resetRestartDelay() {
        this._restartDelay = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restartDelayInput() {
        return this._restartDelay;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference;
_28 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference[_28] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        input_loss_action: cdktf.stringToTerraform(struct.inputLossAction),
        timed_metadata_id3_frame: cdktf.stringToTerraform(struct.timedMetadataId3Frame),
        timed_metadata_id3_period: cdktf.numberToTerraform(struct.timedMetadataId3Period),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._inputLossAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputLossAction = this._inputLossAction;
        }
        if (this._timedMetadataId3Frame !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataId3Frame = this._timedMetadataId3Frame;
        }
        if (this._timedMetadataId3Period !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataId3Period = this._timedMetadataId3Period;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._inputLossAction = undefined;
            this._timedMetadataId3Frame = undefined;
            this._timedMetadataId3Period = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._inputLossAction = value.inputLossAction;
            this._timedMetadataId3Frame = value.timedMetadataId3Frame;
            this._timedMetadataId3Period = value.timedMetadataId3Period;
        }
    }
    get inputLossAction() {
        return this.getStringAttribute('input_loss_action');
    }
    set inputLossAction(value) {
        this._inputLossAction = value;
    }
    resetInputLossAction() {
        this._inputLossAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputLossActionInput() {
        return this._inputLossAction;
    }
    get timedMetadataId3Frame() {
        return this.getStringAttribute('timed_metadata_id3_frame');
    }
    set timedMetadataId3Frame(value) {
        this._timedMetadataId3Frame = value;
    }
    resetTimedMetadataId3Frame() {
        this._timedMetadataId3Frame = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataId3FrameInput() {
        return this._timedMetadataId3Frame;
    }
    get timedMetadataId3Period() {
        return this.getNumberAttribute('timed_metadata_id3_period');
    }
    set timedMetadataId3Period(value) {
        this._timedMetadataId3Period = value;
    }
    resetTimedMetadataId3Period() {
        this._timedMetadataId3Period = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataId3PeriodInput() {
        return this._timedMetadataId3Period;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference;
_29 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference[_29] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        archive_group_settings: cdktf.listMapper(medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsToTerraform, true)(struct.archiveGroupSettings),
        frame_capture_group_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsToTerraform(struct.frameCaptureGroupSettings),
        hls_group_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsToTerraform(struct.hlsGroupSettings),
        media_package_group_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsToTerraform(struct.mediaPackageGroupSettings),
        ms_smooth_group_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsToTerraform(struct.msSmoothGroupSettings),
        multiplex_group_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsToTerraform(struct.multiplexGroupSettings),
        rtmp_group_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsToTerraform(struct.rtmpGroupSettings),
        udp_group_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsToTerraform(struct.udpGroupSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // archive_group_settings - computed: false, optional: true, required: false
        this._archiveGroupSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList(this, "archive_group_settings", false);
        // frame_capture_group_settings - computed: false, optional: true, required: false
        this._frameCaptureGroupSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference(this, "frame_capture_group_settings");
        // hls_group_settings - computed: false, optional: true, required: false
        this._hlsGroupSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference(this, "hls_group_settings");
        // media_package_group_settings - computed: false, optional: true, required: false
        this._mediaPackageGroupSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference(this, "media_package_group_settings");
        // ms_smooth_group_settings - computed: false, optional: true, required: false
        this._msSmoothGroupSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference(this, "ms_smooth_group_settings");
        // multiplex_group_settings - computed: false, optional: true, required: false
        this._multiplexGroupSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference(this, "multiplex_group_settings");
        // rtmp_group_settings - computed: false, optional: true, required: false
        this._rtmpGroupSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference(this, "rtmp_group_settings");
        // udp_group_settings - computed: false, optional: true, required: false
        this._udpGroupSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference(this, "udp_group_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._archiveGroupSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.archiveGroupSettings = this._archiveGroupSettings?.internalValue;
        }
        if (this._frameCaptureGroupSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.frameCaptureGroupSettings = this._frameCaptureGroupSettings?.internalValue;
        }
        if (this._hlsGroupSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsGroupSettings = this._hlsGroupSettings?.internalValue;
        }
        if (this._mediaPackageGroupSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mediaPackageGroupSettings = this._mediaPackageGroupSettings?.internalValue;
        }
        if (this._msSmoothGroupSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.msSmoothGroupSettings = this._msSmoothGroupSettings?.internalValue;
        }
        if (this._multiplexGroupSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.multiplexGroupSettings = this._multiplexGroupSettings?.internalValue;
        }
        if (this._rtmpGroupSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rtmpGroupSettings = this._rtmpGroupSettings?.internalValue;
        }
        if (this._udpGroupSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.udpGroupSettings = this._udpGroupSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._archiveGroupSettings.internalValue = undefined;
            this._frameCaptureGroupSettings.internalValue = undefined;
            this._hlsGroupSettings.internalValue = undefined;
            this._mediaPackageGroupSettings.internalValue = undefined;
            this._msSmoothGroupSettings.internalValue = undefined;
            this._multiplexGroupSettings.internalValue = undefined;
            this._rtmpGroupSettings.internalValue = undefined;
            this._udpGroupSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._archiveGroupSettings.internalValue = value.archiveGroupSettings;
            this._frameCaptureGroupSettings.internalValue = value.frameCaptureGroupSettings;
            this._hlsGroupSettings.internalValue = value.hlsGroupSettings;
            this._mediaPackageGroupSettings.internalValue = value.mediaPackageGroupSettings;
            this._msSmoothGroupSettings.internalValue = value.msSmoothGroupSettings;
            this._multiplexGroupSettings.internalValue = value.multiplexGroupSettings;
            this._rtmpGroupSettings.internalValue = value.rtmpGroupSettings;
            this._udpGroupSettings.internalValue = value.udpGroupSettings;
        }
    }
    get archiveGroupSettings() {
        return this._archiveGroupSettings;
    }
    putArchiveGroupSettings(value) {
        this._archiveGroupSettings.internalValue = value;
    }
    resetArchiveGroupSettings() {
        this._archiveGroupSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get archiveGroupSettingsInput() {
        return this._archiveGroupSettings.internalValue;
    }
    get frameCaptureGroupSettings() {
        return this._frameCaptureGroupSettings;
    }
    putFrameCaptureGroupSettings(value) {
        this._frameCaptureGroupSettings.internalValue = value;
    }
    resetFrameCaptureGroupSettings() {
        this._frameCaptureGroupSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get frameCaptureGroupSettingsInput() {
        return this._frameCaptureGroupSettings.internalValue;
    }
    get hlsGroupSettings() {
        return this._hlsGroupSettings;
    }
    putHlsGroupSettings(value) {
        this._hlsGroupSettings.internalValue = value;
    }
    resetHlsGroupSettings() {
        this._hlsGroupSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsGroupSettingsInput() {
        return this._hlsGroupSettings.internalValue;
    }
    get mediaPackageGroupSettings() {
        return this._mediaPackageGroupSettings;
    }
    putMediaPackageGroupSettings(value) {
        this._mediaPackageGroupSettings.internalValue = value;
    }
    resetMediaPackageGroupSettings() {
        this._mediaPackageGroupSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mediaPackageGroupSettingsInput() {
        return this._mediaPackageGroupSettings.internalValue;
    }
    get msSmoothGroupSettings() {
        return this._msSmoothGroupSettings;
    }
    putMsSmoothGroupSettings(value) {
        this._msSmoothGroupSettings.internalValue = value;
    }
    resetMsSmoothGroupSettings() {
        this._msSmoothGroupSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get msSmoothGroupSettingsInput() {
        return this._msSmoothGroupSettings.internalValue;
    }
    get multiplexGroupSettings() {
        return this._multiplexGroupSettings;
    }
    putMultiplexGroupSettings(value) {
        this._multiplexGroupSettings.internalValue = value;
    }
    resetMultiplexGroupSettings() {
        this._multiplexGroupSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get multiplexGroupSettingsInput() {
        return this._multiplexGroupSettings.internalValue;
    }
    get rtmpGroupSettings() {
        return this._rtmpGroupSettings;
    }
    putRtmpGroupSettings(value) {
        this._rtmpGroupSettings.internalValue = value;
    }
    resetRtmpGroupSettings() {
        this._rtmpGroupSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rtmpGroupSettingsInput() {
        return this._rtmpGroupSettings.internalValue;
    }
    get udpGroupSettings() {
        return this._udpGroupSettings;
    }
    putUdpGroupSettings(value) {
        this._udpGroupSettings.internalValue = value;
    }
    resetUdpGroupSettings() {
        this._udpGroupSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get udpGroupSettingsInput() {
        return this._udpGroupSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference;
_30 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference[_30] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        network_id: cdktf.numberToTerraform(struct.networkId),
        network_name: cdktf.stringToTerraform(struct.networkName),
        rep_interval: cdktf.numberToTerraform(struct.repInterval),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._networkId !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkId = this._networkId;
        }
        if (this._networkName !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkName = this._networkName;
        }
        if (this._repInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.repInterval = this._repInterval;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._networkId = undefined;
            this._networkName = undefined;
            this._repInterval = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._networkId = value.networkId;
            this._networkName = value.networkName;
            this._repInterval = value.repInterval;
        }
    }
    get networkId() {
        return this.getNumberAttribute('network_id');
    }
    set networkId(value) {
        this._networkId = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkIdInput() {
        return this._networkId;
    }
    get networkName() {
        return this.getStringAttribute('network_name');
    }
    set networkName(value) {
        this._networkName = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkNameInput() {
        return this._networkName;
    }
    get repInterval() {
        return this.getNumberAttribute('rep_interval');
    }
    set repInterval(value) {
        this._repInterval = value;
    }
    resetRepInterval() {
        this._repInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repIntervalInput() {
        return this._repInterval;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference;
_31 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference[_31] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        output_sdt: cdktf.stringToTerraform(struct.outputSdt),
        rep_interval: cdktf.numberToTerraform(struct.repInterval),
        service_name: cdktf.stringToTerraform(struct.serviceName),
        service_provider_name: cdktf.stringToTerraform(struct.serviceProviderName),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._outputSdt !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputSdt = this._outputSdt;
        }
        if (this._repInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.repInterval = this._repInterval;
        }
        if (this._serviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceName = this._serviceName;
        }
        if (this._serviceProviderName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceProviderName = this._serviceProviderName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._outputSdt = undefined;
            this._repInterval = undefined;
            this._serviceName = undefined;
            this._serviceProviderName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._outputSdt = value.outputSdt;
            this._repInterval = value.repInterval;
            this._serviceName = value.serviceName;
            this._serviceProviderName = value.serviceProviderName;
        }
    }
    get outputSdt() {
        return this.getStringAttribute('output_sdt');
    }
    set outputSdt(value) {
        this._outputSdt = value;
    }
    resetOutputSdt() {
        this._outputSdt = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputSdtInput() {
        return this._outputSdt;
    }
    get repInterval() {
        return this.getNumberAttribute('rep_interval');
    }
    set repInterval(value) {
        this._repInterval = value;
    }
    resetRepInterval() {
        this._repInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repIntervalInput() {
        return this._repInterval;
    }
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
    set serviceName(value) {
        this._serviceName = value;
    }
    resetServiceName() {
        this._serviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNameInput() {
        return this._serviceName;
    }
    get serviceProviderName() {
        return this.getStringAttribute('service_provider_name');
    }
    set serviceProviderName(value) {
        this._serviceProviderName = value;
    }
    resetServiceProviderName() {
        this._serviceProviderName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceProviderNameInput() {
        return this._serviceProviderName;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference;
_32 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference[_32] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        rep_interval: cdktf.numberToTerraform(struct.repInterval),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._repInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.repInterval = this._repInterval;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._repInterval = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._repInterval = value.repInterval;
        }
    }
    get repInterval() {
        return this.getNumberAttribute('rep_interval');
    }
    set repInterval(value) {
        this._repInterval = value;
    }
    resetRepInterval() {
        this._repInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repIntervalInput() {
        return this._repInterval;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference;
_33 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference[_33] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        absent_input_audio_behavior: cdktf.stringToTerraform(struct.absentInputAudioBehavior),
        arib: cdktf.stringToTerraform(struct.arib),
        arib_captions_pid: cdktf.stringToTerraform(struct.aribCaptionsPid),
        arib_captions_pid_control: cdktf.stringToTerraform(struct.aribCaptionsPidControl),
        audio_buffer_model: cdktf.stringToTerraform(struct.audioBufferModel),
        audio_frames_per_pes: cdktf.numberToTerraform(struct.audioFramesPerPes),
        audio_pids: cdktf.stringToTerraform(struct.audioPids),
        audio_stream_type: cdktf.stringToTerraform(struct.audioStreamType),
        bitrate: cdktf.numberToTerraform(struct.bitrate),
        buffer_model: cdktf.stringToTerraform(struct.bufferModel),
        cc_descriptor: cdktf.stringToTerraform(struct.ccDescriptor),
        dvb_sub_pids: cdktf.stringToTerraform(struct.dvbSubPids),
        dvb_teletext_pid: cdktf.stringToTerraform(struct.dvbTeletextPid),
        ebif: cdktf.stringToTerraform(struct.ebif),
        ebp_audio_interval: cdktf.stringToTerraform(struct.ebpAudioInterval),
        ebp_lookahead_ms: cdktf.numberToTerraform(struct.ebpLookaheadMs),
        ebp_placement: cdktf.stringToTerraform(struct.ebpPlacement),
        ecm_pid: cdktf.stringToTerraform(struct.ecmPid),
        es_rate_in_pes: cdktf.stringToTerraform(struct.esRateInPes),
        etv_platform_pid: cdktf.stringToTerraform(struct.etvPlatformPid),
        etv_signal_pid: cdktf.stringToTerraform(struct.etvSignalPid),
        fragment_time: cdktf.numberToTerraform(struct.fragmentTime),
        klv: cdktf.stringToTerraform(struct.klv),
        klv_data_pids: cdktf.stringToTerraform(struct.klvDataPids),
        nielsen_id3_behavior: cdktf.stringToTerraform(struct.nielsenId3Behavior),
        null_packet_bitrate: cdktf.numberToTerraform(struct.nullPacketBitrate),
        pat_interval: cdktf.numberToTerraform(struct.patInterval),
        pcr_control: cdktf.stringToTerraform(struct.pcrControl),
        pcr_period: cdktf.numberToTerraform(struct.pcrPeriod),
        pcr_pid: cdktf.stringToTerraform(struct.pcrPid),
        pmt_interval: cdktf.numberToTerraform(struct.pmtInterval),
        pmt_pid: cdktf.stringToTerraform(struct.pmtPid),
        program_num: cdktf.numberToTerraform(struct.programNum),
        rate_mode: cdktf.stringToTerraform(struct.rateMode),
        scte27_pids: cdktf.stringToTerraform(struct.scte27Pids),
        scte35_control: cdktf.stringToTerraform(struct.scte35Control),
        scte35_pid: cdktf.stringToTerraform(struct.scte35Pid),
        segmentation_markers: cdktf.stringToTerraform(struct.segmentationMarkers),
        segmentation_style: cdktf.stringToTerraform(struct.segmentationStyle),
        segmentation_time: cdktf.numberToTerraform(struct.segmentationTime),
        timed_metadata_behavior: cdktf.stringToTerraform(struct.timedMetadataBehavior),
        timed_metadata_pid: cdktf.stringToTerraform(struct.timedMetadataPid),
        transport_stream_id: cdktf.numberToTerraform(struct.transportStreamId),
        video_pid: cdktf.stringToTerraform(struct.videoPid),
        dvb_nit_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform(struct.dvbNitSettings),
        dvb_sdt_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform(struct.dvbSdtSettings),
        dvb_tdt_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform(struct.dvbTdtSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // dvb_nit_settings - computed: false, optional: true, required: false
        this._dvbNitSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference(this, "dvb_nit_settings");
        // dvb_sdt_settings - computed: false, optional: true, required: false
        this._dvbSdtSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference(this, "dvb_sdt_settings");
        // dvb_tdt_settings - computed: false, optional: true, required: false
        this._dvbTdtSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference(this, "dvb_tdt_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._absentInputAudioBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.absentInputAudioBehavior = this._absentInputAudioBehavior;
        }
        if (this._arib !== undefined) {
            hasAnyValues = true;
            internalValueResult.arib = this._arib;
        }
        if (this._aribCaptionsPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.aribCaptionsPid = this._aribCaptionsPid;
        }
        if (this._aribCaptionsPidControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.aribCaptionsPidControl = this._aribCaptionsPidControl;
        }
        if (this._audioBufferModel !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioBufferModel = this._audioBufferModel;
        }
        if (this._audioFramesPerPes !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioFramesPerPes = this._audioFramesPerPes;
        }
        if (this._audioPids !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioPids = this._audioPids;
        }
        if (this._audioStreamType !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioStreamType = this._audioStreamType;
        }
        if (this._bitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitrate = this._bitrate;
        }
        if (this._bufferModel !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferModel = this._bufferModel;
        }
        if (this._ccDescriptor !== undefined) {
            hasAnyValues = true;
            internalValueResult.ccDescriptor = this._ccDescriptor;
        }
        if (this._dvbSubPids !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbSubPids = this._dvbSubPids;
        }
        if (this._dvbTeletextPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbTeletextPid = this._dvbTeletextPid;
        }
        if (this._ebif !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebif = this._ebif;
        }
        if (this._ebpAudioInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebpAudioInterval = this._ebpAudioInterval;
        }
        if (this._ebpLookaheadMs !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebpLookaheadMs = this._ebpLookaheadMs;
        }
        if (this._ebpPlacement !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebpPlacement = this._ebpPlacement;
        }
        if (this._ecmPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.ecmPid = this._ecmPid;
        }
        if (this._esRateInPes !== undefined) {
            hasAnyValues = true;
            internalValueResult.esRateInPes = this._esRateInPes;
        }
        if (this._etvPlatformPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.etvPlatformPid = this._etvPlatformPid;
        }
        if (this._etvSignalPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.etvSignalPid = this._etvSignalPid;
        }
        if (this._fragmentTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.fragmentTime = this._fragmentTime;
        }
        if (this._klv !== undefined) {
            hasAnyValues = true;
            internalValueResult.klv = this._klv;
        }
        if (this._klvDataPids !== undefined) {
            hasAnyValues = true;
            internalValueResult.klvDataPids = this._klvDataPids;
        }
        if (this._nielsenId3Behavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.nielsenId3Behavior = this._nielsenId3Behavior;
        }
        if (this._nullPacketBitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.nullPacketBitrate = this._nullPacketBitrate;
        }
        if (this._patInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.patInterval = this._patInterval;
        }
        if (this._pcrControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.pcrControl = this._pcrControl;
        }
        if (this._pcrPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.pcrPeriod = this._pcrPeriod;
        }
        if (this._pcrPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.pcrPid = this._pcrPid;
        }
        if (this._pmtInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.pmtInterval = this._pmtInterval;
        }
        if (this._pmtPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.pmtPid = this._pmtPid;
        }
        if (this._programNum !== undefined) {
            hasAnyValues = true;
            internalValueResult.programNum = this._programNum;
        }
        if (this._rateMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.rateMode = this._rateMode;
        }
        if (this._scte27Pids !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte27Pids = this._scte27Pids;
        }
        if (this._scte35Control !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte35Control = this._scte35Control;
        }
        if (this._scte35Pid !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte35Pid = this._scte35Pid;
        }
        if (this._segmentationMarkers !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentationMarkers = this._segmentationMarkers;
        }
        if (this._segmentationStyle !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentationStyle = this._segmentationStyle;
        }
        if (this._segmentationTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentationTime = this._segmentationTime;
        }
        if (this._timedMetadataBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataBehavior = this._timedMetadataBehavior;
        }
        if (this._timedMetadataPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataPid = this._timedMetadataPid;
        }
        if (this._transportStreamId !== undefined) {
            hasAnyValues = true;
            internalValueResult.transportStreamId = this._transportStreamId;
        }
        if (this._videoPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.videoPid = this._videoPid;
        }
        if (this._dvbNitSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbNitSettings = this._dvbNitSettings?.internalValue;
        }
        if (this._dvbSdtSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbSdtSettings = this._dvbSdtSettings?.internalValue;
        }
        if (this._dvbTdtSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbTdtSettings = this._dvbTdtSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._absentInputAudioBehavior = undefined;
            this._arib = undefined;
            this._aribCaptionsPid = undefined;
            this._aribCaptionsPidControl = undefined;
            this._audioBufferModel = undefined;
            this._audioFramesPerPes = undefined;
            this._audioPids = undefined;
            this._audioStreamType = undefined;
            this._bitrate = undefined;
            this._bufferModel = undefined;
            this._ccDescriptor = undefined;
            this._dvbSubPids = undefined;
            this._dvbTeletextPid = undefined;
            this._ebif = undefined;
            this._ebpAudioInterval = undefined;
            this._ebpLookaheadMs = undefined;
            this._ebpPlacement = undefined;
            this._ecmPid = undefined;
            this._esRateInPes = undefined;
            this._etvPlatformPid = undefined;
            this._etvSignalPid = undefined;
            this._fragmentTime = undefined;
            this._klv = undefined;
            this._klvDataPids = undefined;
            this._nielsenId3Behavior = undefined;
            this._nullPacketBitrate = undefined;
            this._patInterval = undefined;
            this._pcrControl = undefined;
            this._pcrPeriod = undefined;
            this._pcrPid = undefined;
            this._pmtInterval = undefined;
            this._pmtPid = undefined;
            this._programNum = undefined;
            this._rateMode = undefined;
            this._scte27Pids = undefined;
            this._scte35Control = undefined;
            this._scte35Pid = undefined;
            this._segmentationMarkers = undefined;
            this._segmentationStyle = undefined;
            this._segmentationTime = undefined;
            this._timedMetadataBehavior = undefined;
            this._timedMetadataPid = undefined;
            this._transportStreamId = undefined;
            this._videoPid = undefined;
            this._dvbNitSettings.internalValue = undefined;
            this._dvbSdtSettings.internalValue = undefined;
            this._dvbTdtSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._absentInputAudioBehavior = value.absentInputAudioBehavior;
            this._arib = value.arib;
            this._aribCaptionsPid = value.aribCaptionsPid;
            this._aribCaptionsPidControl = value.aribCaptionsPidControl;
            this._audioBufferModel = value.audioBufferModel;
            this._audioFramesPerPes = value.audioFramesPerPes;
            this._audioPids = value.audioPids;
            this._audioStreamType = value.audioStreamType;
            this._bitrate = value.bitrate;
            this._bufferModel = value.bufferModel;
            this._ccDescriptor = value.ccDescriptor;
            this._dvbSubPids = value.dvbSubPids;
            this._dvbTeletextPid = value.dvbTeletextPid;
            this._ebif = value.ebif;
            this._ebpAudioInterval = value.ebpAudioInterval;
            this._ebpLookaheadMs = value.ebpLookaheadMs;
            this._ebpPlacement = value.ebpPlacement;
            this._ecmPid = value.ecmPid;
            this._esRateInPes = value.esRateInPes;
            this._etvPlatformPid = value.etvPlatformPid;
            this._etvSignalPid = value.etvSignalPid;
            this._fragmentTime = value.fragmentTime;
            this._klv = value.klv;
            this._klvDataPids = value.klvDataPids;
            this._nielsenId3Behavior = value.nielsenId3Behavior;
            this._nullPacketBitrate = value.nullPacketBitrate;
            this._patInterval = value.patInterval;
            this._pcrControl = value.pcrControl;
            this._pcrPeriod = value.pcrPeriod;
            this._pcrPid = value.pcrPid;
            this._pmtInterval = value.pmtInterval;
            this._pmtPid = value.pmtPid;
            this._programNum = value.programNum;
            this._rateMode = value.rateMode;
            this._scte27Pids = value.scte27Pids;
            this._scte35Control = value.scte35Control;
            this._scte35Pid = value.scte35Pid;
            this._segmentationMarkers = value.segmentationMarkers;
            this._segmentationStyle = value.segmentationStyle;
            this._segmentationTime = value.segmentationTime;
            this._timedMetadataBehavior = value.timedMetadataBehavior;
            this._timedMetadataPid = value.timedMetadataPid;
            this._transportStreamId = value.transportStreamId;
            this._videoPid = value.videoPid;
            this._dvbNitSettings.internalValue = value.dvbNitSettings;
            this._dvbSdtSettings.internalValue = value.dvbSdtSettings;
            this._dvbTdtSettings.internalValue = value.dvbTdtSettings;
        }
    }
    get absentInputAudioBehavior() {
        return this.getStringAttribute('absent_input_audio_behavior');
    }
    set absentInputAudioBehavior(value) {
        this._absentInputAudioBehavior = value;
    }
    resetAbsentInputAudioBehavior() {
        this._absentInputAudioBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get absentInputAudioBehaviorInput() {
        return this._absentInputAudioBehavior;
    }
    get arib() {
        return this.getStringAttribute('arib');
    }
    set arib(value) {
        this._arib = value;
    }
    resetArib() {
        this._arib = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aribInput() {
        return this._arib;
    }
    get aribCaptionsPid() {
        return this.getStringAttribute('arib_captions_pid');
    }
    set aribCaptionsPid(value) {
        this._aribCaptionsPid = value;
    }
    resetAribCaptionsPid() {
        this._aribCaptionsPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aribCaptionsPidInput() {
        return this._aribCaptionsPid;
    }
    get aribCaptionsPidControl() {
        return this.getStringAttribute('arib_captions_pid_control');
    }
    set aribCaptionsPidControl(value) {
        this._aribCaptionsPidControl = value;
    }
    resetAribCaptionsPidControl() {
        this._aribCaptionsPidControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aribCaptionsPidControlInput() {
        return this._aribCaptionsPidControl;
    }
    get audioBufferModel() {
        return this.getStringAttribute('audio_buffer_model');
    }
    set audioBufferModel(value) {
        this._audioBufferModel = value;
    }
    resetAudioBufferModel() {
        this._audioBufferModel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioBufferModelInput() {
        return this._audioBufferModel;
    }
    get audioFramesPerPes() {
        return this.getNumberAttribute('audio_frames_per_pes');
    }
    set audioFramesPerPes(value) {
        this._audioFramesPerPes = value;
    }
    resetAudioFramesPerPes() {
        this._audioFramesPerPes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioFramesPerPesInput() {
        return this._audioFramesPerPes;
    }
    get audioPids() {
        return this.getStringAttribute('audio_pids');
    }
    set audioPids(value) {
        this._audioPids = value;
    }
    resetAudioPids() {
        this._audioPids = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioPidsInput() {
        return this._audioPids;
    }
    get audioStreamType() {
        return this.getStringAttribute('audio_stream_type');
    }
    set audioStreamType(value) {
        this._audioStreamType = value;
    }
    resetAudioStreamType() {
        this._audioStreamType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioStreamTypeInput() {
        return this._audioStreamType;
    }
    get bitrate() {
        return this.getNumberAttribute('bitrate');
    }
    set bitrate(value) {
        this._bitrate = value;
    }
    resetBitrate() {
        this._bitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitrateInput() {
        return this._bitrate;
    }
    get bufferModel() {
        return this.getStringAttribute('buffer_model');
    }
    set bufferModel(value) {
        this._bufferModel = value;
    }
    resetBufferModel() {
        this._bufferModel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferModelInput() {
        return this._bufferModel;
    }
    get ccDescriptor() {
        return this.getStringAttribute('cc_descriptor');
    }
    set ccDescriptor(value) {
        this._ccDescriptor = value;
    }
    resetCcDescriptor() {
        this._ccDescriptor = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ccDescriptorInput() {
        return this._ccDescriptor;
    }
    get dvbSubPids() {
        return this.getStringAttribute('dvb_sub_pids');
    }
    set dvbSubPids(value) {
        this._dvbSubPids = value;
    }
    resetDvbSubPids() {
        this._dvbSubPids = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbSubPidsInput() {
        return this._dvbSubPids;
    }
    get dvbTeletextPid() {
        return this.getStringAttribute('dvb_teletext_pid');
    }
    set dvbTeletextPid(value) {
        this._dvbTeletextPid = value;
    }
    resetDvbTeletextPid() {
        this._dvbTeletextPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbTeletextPidInput() {
        return this._dvbTeletextPid;
    }
    get ebif() {
        return this.getStringAttribute('ebif');
    }
    set ebif(value) {
        this._ebif = value;
    }
    resetEbif() {
        this._ebif = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebifInput() {
        return this._ebif;
    }
    get ebpAudioInterval() {
        return this.getStringAttribute('ebp_audio_interval');
    }
    set ebpAudioInterval(value) {
        this._ebpAudioInterval = value;
    }
    resetEbpAudioInterval() {
        this._ebpAudioInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebpAudioIntervalInput() {
        return this._ebpAudioInterval;
    }
    get ebpLookaheadMs() {
        return this.getNumberAttribute('ebp_lookahead_ms');
    }
    set ebpLookaheadMs(value) {
        this._ebpLookaheadMs = value;
    }
    resetEbpLookaheadMs() {
        this._ebpLookaheadMs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebpLookaheadMsInput() {
        return this._ebpLookaheadMs;
    }
    get ebpPlacement() {
        return this.getStringAttribute('ebp_placement');
    }
    set ebpPlacement(value) {
        this._ebpPlacement = value;
    }
    resetEbpPlacement() {
        this._ebpPlacement = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebpPlacementInput() {
        return this._ebpPlacement;
    }
    get ecmPid() {
        return this.getStringAttribute('ecm_pid');
    }
    set ecmPid(value) {
        this._ecmPid = value;
    }
    resetEcmPid() {
        this._ecmPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ecmPidInput() {
        return this._ecmPid;
    }
    get esRateInPes() {
        return this.getStringAttribute('es_rate_in_pes');
    }
    set esRateInPes(value) {
        this._esRateInPes = value;
    }
    resetEsRateInPes() {
        this._esRateInPes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get esRateInPesInput() {
        return this._esRateInPes;
    }
    get etvPlatformPid() {
        return this.getStringAttribute('etv_platform_pid');
    }
    set etvPlatformPid(value) {
        this._etvPlatformPid = value;
    }
    resetEtvPlatformPid() {
        this._etvPlatformPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get etvPlatformPidInput() {
        return this._etvPlatformPid;
    }
    get etvSignalPid() {
        return this.getStringAttribute('etv_signal_pid');
    }
    set etvSignalPid(value) {
        this._etvSignalPid = value;
    }
    resetEtvSignalPid() {
        this._etvSignalPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get etvSignalPidInput() {
        return this._etvSignalPid;
    }
    get fragmentTime() {
        return this.getNumberAttribute('fragment_time');
    }
    set fragmentTime(value) {
        this._fragmentTime = value;
    }
    resetFragmentTime() {
        this._fragmentTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fragmentTimeInput() {
        return this._fragmentTime;
    }
    get klv() {
        return this.getStringAttribute('klv');
    }
    set klv(value) {
        this._klv = value;
    }
    resetKlv() {
        this._klv = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get klvInput() {
        return this._klv;
    }
    get klvDataPids() {
        return this.getStringAttribute('klv_data_pids');
    }
    set klvDataPids(value) {
        this._klvDataPids = value;
    }
    resetKlvDataPids() {
        this._klvDataPids = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get klvDataPidsInput() {
        return this._klvDataPids;
    }
    get nielsenId3Behavior() {
        return this.getStringAttribute('nielsen_id3_behavior');
    }
    set nielsenId3Behavior(value) {
        this._nielsenId3Behavior = value;
    }
    resetNielsenId3Behavior() {
        this._nielsenId3Behavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nielsenId3BehaviorInput() {
        return this._nielsenId3Behavior;
    }
    get nullPacketBitrate() {
        return this.getNumberAttribute('null_packet_bitrate');
    }
    set nullPacketBitrate(value) {
        this._nullPacketBitrate = value;
    }
    resetNullPacketBitrate() {
        this._nullPacketBitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nullPacketBitrateInput() {
        return this._nullPacketBitrate;
    }
    get patInterval() {
        return this.getNumberAttribute('pat_interval');
    }
    set patInterval(value) {
        this._patInterval = value;
    }
    resetPatInterval() {
        this._patInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get patIntervalInput() {
        return this._patInterval;
    }
    get pcrControl() {
        return this.getStringAttribute('pcr_control');
    }
    set pcrControl(value) {
        this._pcrControl = value;
    }
    resetPcrControl() {
        this._pcrControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pcrControlInput() {
        return this._pcrControl;
    }
    get pcrPeriod() {
        return this.getNumberAttribute('pcr_period');
    }
    set pcrPeriod(value) {
        this._pcrPeriod = value;
    }
    resetPcrPeriod() {
        this._pcrPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pcrPeriodInput() {
        return this._pcrPeriod;
    }
    get pcrPid() {
        return this.getStringAttribute('pcr_pid');
    }
    set pcrPid(value) {
        this._pcrPid = value;
    }
    resetPcrPid() {
        this._pcrPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pcrPidInput() {
        return this._pcrPid;
    }
    get pmtInterval() {
        return this.getNumberAttribute('pmt_interval');
    }
    set pmtInterval(value) {
        this._pmtInterval = value;
    }
    resetPmtInterval() {
        this._pmtInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pmtIntervalInput() {
        return this._pmtInterval;
    }
    get pmtPid() {
        return this.getStringAttribute('pmt_pid');
    }
    set pmtPid(value) {
        this._pmtPid = value;
    }
    resetPmtPid() {
        this._pmtPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pmtPidInput() {
        return this._pmtPid;
    }
    get programNum() {
        return this.getNumberAttribute('program_num');
    }
    set programNum(value) {
        this._programNum = value;
    }
    resetProgramNum() {
        this._programNum = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get programNumInput() {
        return this._programNum;
    }
    get rateMode() {
        return this.getStringAttribute('rate_mode');
    }
    set rateMode(value) {
        this._rateMode = value;
    }
    resetRateMode() {
        this._rateMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rateModeInput() {
        return this._rateMode;
    }
    get scte27Pids() {
        return this.getStringAttribute('scte27_pids');
    }
    set scte27Pids(value) {
        this._scte27Pids = value;
    }
    resetScte27Pids() {
        this._scte27Pids = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte27PidsInput() {
        return this._scte27Pids;
    }
    get scte35Control() {
        return this.getStringAttribute('scte35_control');
    }
    set scte35Control(value) {
        this._scte35Control = value;
    }
    resetScte35Control() {
        this._scte35Control = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte35ControlInput() {
        return this._scte35Control;
    }
    get scte35Pid() {
        return this.getStringAttribute('scte35_pid');
    }
    set scte35Pid(value) {
        this._scte35Pid = value;
    }
    resetScte35Pid() {
        this._scte35Pid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte35PidInput() {
        return this._scte35Pid;
    }
    get segmentationMarkers() {
        return this.getStringAttribute('segmentation_markers');
    }
    set segmentationMarkers(value) {
        this._segmentationMarkers = value;
    }
    resetSegmentationMarkers() {
        this._segmentationMarkers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentationMarkersInput() {
        return this._segmentationMarkers;
    }
    get segmentationStyle() {
        return this.getStringAttribute('segmentation_style');
    }
    set segmentationStyle(value) {
        this._segmentationStyle = value;
    }
    resetSegmentationStyle() {
        this._segmentationStyle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentationStyleInput() {
        return this._segmentationStyle;
    }
    get segmentationTime() {
        return this.getNumberAttribute('segmentation_time');
    }
    set segmentationTime(value) {
        this._segmentationTime = value;
    }
    resetSegmentationTime() {
        this._segmentationTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentationTimeInput() {
        return this._segmentationTime;
    }
    get timedMetadataBehavior() {
        return this.getStringAttribute('timed_metadata_behavior');
    }
    set timedMetadataBehavior(value) {
        this._timedMetadataBehavior = value;
    }
    resetTimedMetadataBehavior() {
        this._timedMetadataBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataBehaviorInput() {
        return this._timedMetadataBehavior;
    }
    get timedMetadataPid() {
        return this.getStringAttribute('timed_metadata_pid');
    }
    set timedMetadataPid(value) {
        this._timedMetadataPid = value;
    }
    resetTimedMetadataPid() {
        this._timedMetadataPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataPidInput() {
        return this._timedMetadataPid;
    }
    get transportStreamId() {
        return this.getNumberAttribute('transport_stream_id');
    }
    set transportStreamId(value) {
        this._transportStreamId = value;
    }
    resetTransportStreamId() {
        this._transportStreamId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transportStreamIdInput() {
        return this._transportStreamId;
    }
    get videoPid() {
        return this.getStringAttribute('video_pid');
    }
    set videoPid(value) {
        this._videoPid = value;
    }
    resetVideoPid() {
        this._videoPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get videoPidInput() {
        return this._videoPid;
    }
    get dvbNitSettings() {
        return this._dvbNitSettings;
    }
    putDvbNitSettings(value) {
        this._dvbNitSettings.internalValue = value;
    }
    resetDvbNitSettings() {
        this._dvbNitSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbNitSettingsInput() {
        return this._dvbNitSettings.internalValue;
    }
    get dvbSdtSettings() {
        return this._dvbSdtSettings;
    }
    putDvbSdtSettings(value) {
        this._dvbSdtSettings.internalValue = value;
    }
    resetDvbSdtSettings() {
        this._dvbSdtSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbSdtSettingsInput() {
        return this._dvbSdtSettings.internalValue;
    }
    get dvbTdtSettings() {
        return this._dvbTdtSettings;
    }
    putDvbTdtSettings(value) {
        this._dvbTdtSettings.internalValue = value;
    }
    resetDvbTdtSettings() {
        this._dvbTdtSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbTdtSettingsInput() {
        return this._dvbTdtSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference;
_34 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference[_34] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference;
_35 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference[_35] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        m2ts_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsToTerraform(struct.m2TsSettings),
        raw_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsToTerraform(struct.rawSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // m2ts_settings - computed: false, optional: true, required: false
        this._m2TsSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference(this, "m2ts_settings");
        // raw_settings - computed: false, optional: true, required: false
        this._rawSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference(this, "raw_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._m2TsSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.m2TsSettings = this._m2TsSettings?.internalValue;
        }
        if (this._rawSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rawSettings = this._rawSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._m2TsSettings.internalValue = undefined;
            this._rawSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._m2TsSettings.internalValue = value.m2TsSettings;
            this._rawSettings.internalValue = value.rawSettings;
        }
    }
    get m2TsSettings() {
        return this._m2TsSettings;
    }
    putM2TsSettings(value) {
        this._m2TsSettings.internalValue = value;
    }
    resetM2TsSettings() {
        this._m2TsSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get m2TsSettingsInput() {
        return this._m2TsSettings.internalValue;
    }
    get rawSettings() {
        return this._rawSettings;
    }
    putRawSettings(value) {
        this._rawSettings.internalValue = value;
    }
    resetRawSettings() {
        this._rawSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rawSettingsInput() {
        return this._rawSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference;
_36 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference[_36] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        extension: cdktf.stringToTerraform(struct.extension),
        name_modifier: cdktf.stringToTerraform(struct.nameModifier),
        container_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsToTerraform(struct.containerSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // container_settings - computed: false, optional: true, required: false
        this._containerSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference(this, "container_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._extension !== undefined) {
            hasAnyValues = true;
            internalValueResult.extension = this._extension;
        }
        if (this._nameModifier !== undefined) {
            hasAnyValues = true;
            internalValueResult.nameModifier = this._nameModifier;
        }
        if (this._containerSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerSettings = this._containerSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._extension = undefined;
            this._nameModifier = undefined;
            this._containerSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._extension = value.extension;
            this._nameModifier = value.nameModifier;
            this._containerSettings.internalValue = value.containerSettings;
        }
    }
    get extension() {
        return this.getStringAttribute('extension');
    }
    set extension(value) {
        this._extension = value;
    }
    resetExtension() {
        this._extension = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get extensionInput() {
        return this._extension;
    }
    get nameModifier() {
        return this.getStringAttribute('name_modifier');
    }
    set nameModifier(value) {
        this._nameModifier = value;
    }
    resetNameModifier() {
        this._nameModifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameModifierInput() {
        return this._nameModifier;
    }
    get containerSettings() {
        return this._containerSettings;
    }
    putContainerSettings(value) {
        this._containerSettings.internalValue = value;
    }
    resetContainerSettings() {
        this._containerSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerSettingsInput() {
        return this._containerSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference;
_37 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference[_37] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name_modifier: cdktf.stringToTerraform(struct.nameModifier),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nameModifier !== undefined) {
            hasAnyValues = true;
            internalValueResult.nameModifier = this._nameModifier;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nameModifier = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nameModifier = value.nameModifier;
        }
    }
    get nameModifier() {
        return this.getStringAttribute('name_modifier');
    }
    set nameModifier(value) {
        this._nameModifier = value;
    }
    resetNameModifier() {
        this._nameModifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameModifierInput() {
        return this._nameModifier;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference;
_38 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference[_38] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password_param: cdktf.stringToTerraform(struct.passwordParam),
        uri: cdktf.stringToTerraform(struct.uri),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._passwordParam !== undefined) {
            hasAnyValues = true;
            internalValueResult.passwordParam = this._passwordParam;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._passwordParam = undefined;
            this._uri = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._passwordParam = value.passwordParam;
            this._uri = value.uri;
            this._username = value.username;
        }
    }
    get passwordParam() {
        return this.getStringAttribute('password_param');
    }
    set passwordParam(value) {
        this._passwordParam = value;
    }
    resetPasswordParam() {
        this._passwordParam = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordParamInput() {
        return this._passwordParam;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    resetUsername() {
        this._username = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference;
_39 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference[_39] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_group_id: cdktf.stringToTerraform(struct.audioGroupId),
        audio_track_type: cdktf.stringToTerraform(struct.audioTrackType),
        segment_type: cdktf.stringToTerraform(struct.segmentType),
        audio_only_image: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageToTerraform(struct.audioOnlyImage),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // audio_only_image - computed: false, optional: true, required: false
        this._audioOnlyImage = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference(this, "audio_only_image");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioGroupId !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioGroupId = this._audioGroupId;
        }
        if (this._audioTrackType !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioTrackType = this._audioTrackType;
        }
        if (this._segmentType !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentType = this._segmentType;
        }
        if (this._audioOnlyImage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioOnlyImage = this._audioOnlyImage?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioGroupId = undefined;
            this._audioTrackType = undefined;
            this._segmentType = undefined;
            this._audioOnlyImage.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioGroupId = value.audioGroupId;
            this._audioTrackType = value.audioTrackType;
            this._segmentType = value.segmentType;
            this._audioOnlyImage.internalValue = value.audioOnlyImage;
        }
    }
    get audioGroupId() {
        return this.getStringAttribute('audio_group_id');
    }
    set audioGroupId(value) {
        this._audioGroupId = value;
    }
    resetAudioGroupId() {
        this._audioGroupId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioGroupIdInput() {
        return this._audioGroupId;
    }
    get audioTrackType() {
        return this.getStringAttribute('audio_track_type');
    }
    set audioTrackType(value) {
        this._audioTrackType = value;
    }
    resetAudioTrackType() {
        this._audioTrackType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioTrackTypeInput() {
        return this._audioTrackType;
    }
    get segmentType() {
        return this.getStringAttribute('segment_type');
    }
    set segmentType(value) {
        this._segmentType = value;
    }
    resetSegmentType() {
        this._segmentType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentTypeInput() {
        return this._segmentType;
    }
    get audioOnlyImage() {
        return this._audioOnlyImage;
    }
    putAudioOnlyImage(value) {
        this._audioOnlyImage.internalValue = value;
    }
    resetAudioOnlyImage() {
        this._audioOnlyImage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioOnlyImageInput() {
        return this._audioOnlyImage.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference;
_40 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference[_40] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_rendition_sets: cdktf.stringToTerraform(struct.audioRenditionSets),
        nielsen_id3_behavior: cdktf.stringToTerraform(struct.nielsenId3Behavior),
        timed_metadata_behavior: cdktf.stringToTerraform(struct.timedMetadataBehavior),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioRenditionSets !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioRenditionSets = this._audioRenditionSets;
        }
        if (this._nielsenId3Behavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.nielsenId3Behavior = this._nielsenId3Behavior;
        }
        if (this._timedMetadataBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataBehavior = this._timedMetadataBehavior;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioRenditionSets = undefined;
            this._nielsenId3Behavior = undefined;
            this._timedMetadataBehavior = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioRenditionSets = value.audioRenditionSets;
            this._nielsenId3Behavior = value.nielsenId3Behavior;
            this._timedMetadataBehavior = value.timedMetadataBehavior;
        }
    }
    get audioRenditionSets() {
        return this.getStringAttribute('audio_rendition_sets');
    }
    set audioRenditionSets(value) {
        this._audioRenditionSets = value;
    }
    resetAudioRenditionSets() {
        this._audioRenditionSets = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioRenditionSetsInput() {
        return this._audioRenditionSets;
    }
    get nielsenId3Behavior() {
        return this.getStringAttribute('nielsen_id3_behavior');
    }
    set nielsenId3Behavior(value) {
        this._nielsenId3Behavior = value;
    }
    resetNielsenId3Behavior() {
        this._nielsenId3Behavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nielsenId3BehaviorInput() {
        return this._nielsenId3Behavior;
    }
    get timedMetadataBehavior() {
        return this.getStringAttribute('timed_metadata_behavior');
    }
    set timedMetadataBehavior(value) {
        this._timedMetadataBehavior = value;
    }
    resetTimedMetadataBehavior() {
        this._timedMetadataBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataBehaviorInput() {
        return this._timedMetadataBehavior;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference;
_41 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference[_41] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference;
_42 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference[_42] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_frames_per_pes: cdktf.numberToTerraform(struct.audioFramesPerPes),
        audio_pids: cdktf.stringToTerraform(struct.audioPids),
        ecm_pid: cdktf.stringToTerraform(struct.ecmPid),
        nielsen_id3_behavior: cdktf.stringToTerraform(struct.nielsenId3Behavior),
        pat_interval: cdktf.numberToTerraform(struct.patInterval),
        pcr_control: cdktf.stringToTerraform(struct.pcrControl),
        pcr_period: cdktf.numberToTerraform(struct.pcrPeriod),
        pcr_pid: cdktf.stringToTerraform(struct.pcrPid),
        pmt_interval: cdktf.numberToTerraform(struct.pmtInterval),
        pmt_pid: cdktf.stringToTerraform(struct.pmtPid),
        program_num: cdktf.numberToTerraform(struct.programNum),
        scte35_behavior: cdktf.stringToTerraform(struct.scte35Behavior),
        scte35_pid: cdktf.stringToTerraform(struct.scte35Pid),
        timed_metadata_behavior: cdktf.stringToTerraform(struct.timedMetadataBehavior),
        timed_metadata_pid: cdktf.stringToTerraform(struct.timedMetadataPid),
        transport_stream_id: cdktf.numberToTerraform(struct.transportStreamId),
        video_pid: cdktf.stringToTerraform(struct.videoPid),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioFramesPerPes !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioFramesPerPes = this._audioFramesPerPes;
        }
        if (this._audioPids !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioPids = this._audioPids;
        }
        if (this._ecmPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.ecmPid = this._ecmPid;
        }
        if (this._nielsenId3Behavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.nielsenId3Behavior = this._nielsenId3Behavior;
        }
        if (this._patInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.patInterval = this._patInterval;
        }
        if (this._pcrControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.pcrControl = this._pcrControl;
        }
        if (this._pcrPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.pcrPeriod = this._pcrPeriod;
        }
        if (this._pcrPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.pcrPid = this._pcrPid;
        }
        if (this._pmtInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.pmtInterval = this._pmtInterval;
        }
        if (this._pmtPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.pmtPid = this._pmtPid;
        }
        if (this._programNum !== undefined) {
            hasAnyValues = true;
            internalValueResult.programNum = this._programNum;
        }
        if (this._scte35Behavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte35Behavior = this._scte35Behavior;
        }
        if (this._scte35Pid !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte35Pid = this._scte35Pid;
        }
        if (this._timedMetadataBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataBehavior = this._timedMetadataBehavior;
        }
        if (this._timedMetadataPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataPid = this._timedMetadataPid;
        }
        if (this._transportStreamId !== undefined) {
            hasAnyValues = true;
            internalValueResult.transportStreamId = this._transportStreamId;
        }
        if (this._videoPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.videoPid = this._videoPid;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioFramesPerPes = undefined;
            this._audioPids = undefined;
            this._ecmPid = undefined;
            this._nielsenId3Behavior = undefined;
            this._patInterval = undefined;
            this._pcrControl = undefined;
            this._pcrPeriod = undefined;
            this._pcrPid = undefined;
            this._pmtInterval = undefined;
            this._pmtPid = undefined;
            this._programNum = undefined;
            this._scte35Behavior = undefined;
            this._scte35Pid = undefined;
            this._timedMetadataBehavior = undefined;
            this._timedMetadataPid = undefined;
            this._transportStreamId = undefined;
            this._videoPid = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioFramesPerPes = value.audioFramesPerPes;
            this._audioPids = value.audioPids;
            this._ecmPid = value.ecmPid;
            this._nielsenId3Behavior = value.nielsenId3Behavior;
            this._patInterval = value.patInterval;
            this._pcrControl = value.pcrControl;
            this._pcrPeriod = value.pcrPeriod;
            this._pcrPid = value.pcrPid;
            this._pmtInterval = value.pmtInterval;
            this._pmtPid = value.pmtPid;
            this._programNum = value.programNum;
            this._scte35Behavior = value.scte35Behavior;
            this._scte35Pid = value.scte35Pid;
            this._timedMetadataBehavior = value.timedMetadataBehavior;
            this._timedMetadataPid = value.timedMetadataPid;
            this._transportStreamId = value.transportStreamId;
            this._videoPid = value.videoPid;
        }
    }
    get audioFramesPerPes() {
        return this.getNumberAttribute('audio_frames_per_pes');
    }
    set audioFramesPerPes(value) {
        this._audioFramesPerPes = value;
    }
    resetAudioFramesPerPes() {
        this._audioFramesPerPes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioFramesPerPesInput() {
        return this._audioFramesPerPes;
    }
    get audioPids() {
        return this.getStringAttribute('audio_pids');
    }
    set audioPids(value) {
        this._audioPids = value;
    }
    resetAudioPids() {
        this._audioPids = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioPidsInput() {
        return this._audioPids;
    }
    get ecmPid() {
        return this.getStringAttribute('ecm_pid');
    }
    set ecmPid(value) {
        this._ecmPid = value;
    }
    resetEcmPid() {
        this._ecmPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ecmPidInput() {
        return this._ecmPid;
    }
    get nielsenId3Behavior() {
        return this.getStringAttribute('nielsen_id3_behavior');
    }
    set nielsenId3Behavior(value) {
        this._nielsenId3Behavior = value;
    }
    resetNielsenId3Behavior() {
        this._nielsenId3Behavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nielsenId3BehaviorInput() {
        return this._nielsenId3Behavior;
    }
    get patInterval() {
        return this.getNumberAttribute('pat_interval');
    }
    set patInterval(value) {
        this._patInterval = value;
    }
    resetPatInterval() {
        this._patInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get patIntervalInput() {
        return this._patInterval;
    }
    get pcrControl() {
        return this.getStringAttribute('pcr_control');
    }
    set pcrControl(value) {
        this._pcrControl = value;
    }
    resetPcrControl() {
        this._pcrControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pcrControlInput() {
        return this._pcrControl;
    }
    get pcrPeriod() {
        return this.getNumberAttribute('pcr_period');
    }
    set pcrPeriod(value) {
        this._pcrPeriod = value;
    }
    resetPcrPeriod() {
        this._pcrPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pcrPeriodInput() {
        return this._pcrPeriod;
    }
    get pcrPid() {
        return this.getStringAttribute('pcr_pid');
    }
    set pcrPid(value) {
        this._pcrPid = value;
    }
    resetPcrPid() {
        this._pcrPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pcrPidInput() {
        return this._pcrPid;
    }
    get pmtInterval() {
        return this.getNumberAttribute('pmt_interval');
    }
    set pmtInterval(value) {
        this._pmtInterval = value;
    }
    resetPmtInterval() {
        this._pmtInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pmtIntervalInput() {
        return this._pmtInterval;
    }
    get pmtPid() {
        return this.getStringAttribute('pmt_pid');
    }
    set pmtPid(value) {
        this._pmtPid = value;
    }
    resetPmtPid() {
        this._pmtPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pmtPidInput() {
        return this._pmtPid;
    }
    get programNum() {
        return this.getNumberAttribute('program_num');
    }
    set programNum(value) {
        this._programNum = value;
    }
    resetProgramNum() {
        this._programNum = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get programNumInput() {
        return this._programNum;
    }
    get scte35Behavior() {
        return this.getStringAttribute('scte35_behavior');
    }
    set scte35Behavior(value) {
        this._scte35Behavior = value;
    }
    resetScte35Behavior() {
        this._scte35Behavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte35BehaviorInput() {
        return this._scte35Behavior;
    }
    get scte35Pid() {
        return this.getStringAttribute('scte35_pid');
    }
    set scte35Pid(value) {
        this._scte35Pid = value;
    }
    resetScte35Pid() {
        this._scte35Pid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte35PidInput() {
        return this._scte35Pid;
    }
    get timedMetadataBehavior() {
        return this.getStringAttribute('timed_metadata_behavior');
    }
    set timedMetadataBehavior(value) {
        this._timedMetadataBehavior = value;
    }
    resetTimedMetadataBehavior() {
        this._timedMetadataBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataBehaviorInput() {
        return this._timedMetadataBehavior;
    }
    get timedMetadataPid() {
        return this.getStringAttribute('timed_metadata_pid');
    }
    set timedMetadataPid(value) {
        this._timedMetadataPid = value;
    }
    resetTimedMetadataPid() {
        this._timedMetadataPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataPidInput() {
        return this._timedMetadataPid;
    }
    get transportStreamId() {
        return this.getNumberAttribute('transport_stream_id');
    }
    set transportStreamId(value) {
        this._transportStreamId = value;
    }
    resetTransportStreamId() {
        this._transportStreamId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transportStreamIdInput() {
        return this._transportStreamId;
    }
    get videoPid() {
        return this.getStringAttribute('video_pid');
    }
    set videoPid(value) {
        this._videoPid = value;
    }
    resetVideoPid() {
        this._videoPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get videoPidInput() {
        return this._videoPid;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference;
_43 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference[_43] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_rendition_sets: cdktf.stringToTerraform(struct.audioRenditionSets),
        m3u8_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsToTerraform(struct.m3U8Settings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // m3u8_settings - computed: false, optional: false, required: true
        this._m3U8Settings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference(this, "m3u8_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioRenditionSets !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioRenditionSets = this._audioRenditionSets;
        }
        if (this._m3U8Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.m3U8Settings = this._m3U8Settings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioRenditionSets = undefined;
            this._m3U8Settings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioRenditionSets = value.audioRenditionSets;
            this._m3U8Settings.internalValue = value.m3U8Settings;
        }
    }
    get audioRenditionSets() {
        return this.getStringAttribute('audio_rendition_sets');
    }
    set audioRenditionSets(value) {
        this._audioRenditionSets = value;
    }
    resetAudioRenditionSets() {
        this._audioRenditionSets = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioRenditionSetsInput() {
        return this._audioRenditionSets;
    }
    get m3U8Settings() {
        return this._m3U8Settings;
    }
    putM3U8Settings(value) {
        this._m3U8Settings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get m3U8SettingsInput() {
        return this._m3U8Settings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference;
_44 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference[_44] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_only_hls_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsToTerraform(struct.audioOnlyHlsSettings),
        fmp4_hls_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsToTerraform(struct.fmp4HlsSettings),
        frame_capture_hls_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsToTerraform(struct.frameCaptureHlsSettings),
        standard_hls_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsToTerraform(struct.standardHlsSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // audio_only_hls_settings - computed: false, optional: true, required: false
        this._audioOnlyHlsSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference(this, "audio_only_hls_settings");
        // fmp4_hls_settings - computed: false, optional: true, required: false
        this._fmp4HlsSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference(this, "fmp4_hls_settings");
        // frame_capture_hls_settings - computed: false, optional: true, required: false
        this._frameCaptureHlsSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference(this, "frame_capture_hls_settings");
        // standard_hls_settings - computed: false, optional: true, required: false
        this._standardHlsSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference(this, "standard_hls_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioOnlyHlsSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioOnlyHlsSettings = this._audioOnlyHlsSettings?.internalValue;
        }
        if (this._fmp4HlsSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fmp4HlsSettings = this._fmp4HlsSettings?.internalValue;
        }
        if (this._frameCaptureHlsSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.frameCaptureHlsSettings = this._frameCaptureHlsSettings?.internalValue;
        }
        if (this._standardHlsSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.standardHlsSettings = this._standardHlsSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioOnlyHlsSettings.internalValue = undefined;
            this._fmp4HlsSettings.internalValue = undefined;
            this._frameCaptureHlsSettings.internalValue = undefined;
            this._standardHlsSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioOnlyHlsSettings.internalValue = value.audioOnlyHlsSettings;
            this._fmp4HlsSettings.internalValue = value.fmp4HlsSettings;
            this._frameCaptureHlsSettings.internalValue = value.frameCaptureHlsSettings;
            this._standardHlsSettings.internalValue = value.standardHlsSettings;
        }
    }
    get audioOnlyHlsSettings() {
        return this._audioOnlyHlsSettings;
    }
    putAudioOnlyHlsSettings(value) {
        this._audioOnlyHlsSettings.internalValue = value;
    }
    resetAudioOnlyHlsSettings() {
        this._audioOnlyHlsSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioOnlyHlsSettingsInput() {
        return this._audioOnlyHlsSettings.internalValue;
    }
    get fmp4HlsSettings() {
        return this._fmp4HlsSettings;
    }
    putFmp4HlsSettings(value) {
        this._fmp4HlsSettings.internalValue = value;
    }
    resetFmp4HlsSettings() {
        this._fmp4HlsSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fmp4HlsSettingsInput() {
        return this._fmp4HlsSettings.internalValue;
    }
    get frameCaptureHlsSettings() {
        return this._frameCaptureHlsSettings;
    }
    putFrameCaptureHlsSettings(value) {
        this._frameCaptureHlsSettings.internalValue = value;
    }
    resetFrameCaptureHlsSettings() {
        this._frameCaptureHlsSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get frameCaptureHlsSettingsInput() {
        return this._frameCaptureHlsSettings.internalValue;
    }
    get standardHlsSettings() {
        return this._standardHlsSettings;
    }
    putStandardHlsSettings(value) {
        this._standardHlsSettings.internalValue = value;
    }
    resetStandardHlsSettings() {
        this._standardHlsSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get standardHlsSettingsInput() {
        return this._standardHlsSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference;
_45 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference[_45] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        h265_packaging_type: cdktf.stringToTerraform(struct.h265PackagingType),
        name_modifier: cdktf.stringToTerraform(struct.nameModifier),
        segment_modifier: cdktf.stringToTerraform(struct.segmentModifier),
        hls_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsToTerraform(struct.hlsSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // hls_settings - computed: false, optional: false, required: true
        this._hlsSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference(this, "hls_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._h265PackagingType !== undefined) {
            hasAnyValues = true;
            internalValueResult.h265PackagingType = this._h265PackagingType;
        }
        if (this._nameModifier !== undefined) {
            hasAnyValues = true;
            internalValueResult.nameModifier = this._nameModifier;
        }
        if (this._segmentModifier !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentModifier = this._segmentModifier;
        }
        if (this._hlsSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsSettings = this._hlsSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._h265PackagingType = undefined;
            this._nameModifier = undefined;
            this._segmentModifier = undefined;
            this._hlsSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._h265PackagingType = value.h265PackagingType;
            this._nameModifier = value.nameModifier;
            this._segmentModifier = value.segmentModifier;
            this._hlsSettings.internalValue = value.hlsSettings;
        }
    }
    get h265PackagingType() {
        return this.getStringAttribute('h265_packaging_type');
    }
    set h265PackagingType(value) {
        this._h265PackagingType = value;
    }
    resetH265PackagingType() {
        this._h265PackagingType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get h265PackagingTypeInput() {
        return this._h265PackagingType;
    }
    get nameModifier() {
        return this.getStringAttribute('name_modifier');
    }
    set nameModifier(value) {
        this._nameModifier = value;
    }
    resetNameModifier() {
        this._nameModifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameModifierInput() {
        return this._nameModifier;
    }
    get segmentModifier() {
        return this.getStringAttribute('segment_modifier');
    }
    set segmentModifier(value) {
        this._segmentModifier = value;
    }
    resetSegmentModifier() {
        this._segmentModifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentModifierInput() {
        return this._segmentModifier;
    }
    get hlsSettings() {
        return this._hlsSettings;
    }
    putHlsSettings(value) {
        this._hlsSettings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get hlsSettingsInput() {
        return this._hlsSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference;
_46 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference[_46] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference;
_47 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference[_47] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        h265_packaging_type: cdktf.stringToTerraform(struct.h265PackagingType),
        name_modifier: cdktf.stringToTerraform(struct.nameModifier),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._h265PackagingType !== undefined) {
            hasAnyValues = true;
            internalValueResult.h265PackagingType = this._h265PackagingType;
        }
        if (this._nameModifier !== undefined) {
            hasAnyValues = true;
            internalValueResult.nameModifier = this._nameModifier;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._h265PackagingType = undefined;
            this._nameModifier = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._h265PackagingType = value.h265PackagingType;
            this._nameModifier = value.nameModifier;
        }
    }
    get h265PackagingType() {
        return this.getStringAttribute('h265_packaging_type');
    }
    set h265PackagingType(value) {
        this._h265PackagingType = value;
    }
    resetH265PackagingType() {
        this._h265PackagingType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get h265PackagingTypeInput() {
        return this._h265PackagingType;
    }
    get nameModifier() {
        return this.getStringAttribute('name_modifier');
    }
    set nameModifier(value) {
        this._nameModifier = value;
    }
    resetNameModifier() {
        this._nameModifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameModifierInput() {
        return this._nameModifier;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference;
_48 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference[_48] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_ref_id: cdktf.stringToTerraform(struct.destinationRefId),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationRefId !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationRefId = this._destinationRefId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationRefId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationRefId = value.destinationRefId;
        }
    }
    get destinationRefId() {
        return this.getStringAttribute('destination_ref_id');
    }
    set destinationRefId(value) {
        this._destinationRefId = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationRefIdInput() {
        return this._destinationRefId;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference;
_49 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference[_49] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationToTerraform(struct.destination),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // destination - computed: false, optional: false, required: true
        this._destination = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference(this, "destination");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destination.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destination.internalValue = value.destination;
        }
    }
    get destination() {
        return this._destination;
    }
    putDestination(value) {
        this._destination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference;
_50 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference[_50] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_ref_id: cdktf.stringToTerraform(struct.destinationRefId),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationRefId !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationRefId = this._destinationRefId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationRefId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationRefId = value.destinationRefId;
        }
    }
    get destinationRefId() {
        return this.getStringAttribute('destination_ref_id');
    }
    set destinationRefId(value) {
        this._destinationRefId = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationRefIdInput() {
        return this._destinationRefId;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference;
_51 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference[_51] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        certficate_mode: cdktf.stringToTerraform(struct.certficateMode),
        connection_retry_interval: cdktf.numberToTerraform(struct.connectionRetryInterval),
        num_retries: cdktf.numberToTerraform(struct.numRetries),
        destination: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationToTerraform(struct.destination),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // destination - computed: false, optional: false, required: true
        this._destination = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference(this, "destination");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certficateMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.certficateMode = this._certficateMode;
        }
        if (this._connectionRetryInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionRetryInterval = this._connectionRetryInterval;
        }
        if (this._numRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRetries = this._numRetries;
        }
        if (this._destination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._certficateMode = undefined;
            this._connectionRetryInterval = undefined;
            this._numRetries = undefined;
            this._destination.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._certficateMode = value.certficateMode;
            this._connectionRetryInterval = value.connectionRetryInterval;
            this._numRetries = value.numRetries;
            this._destination.internalValue = value.destination;
        }
    }
    get certficateMode() {
        return this.getStringAttribute('certficate_mode');
    }
    set certficateMode(value) {
        this._certficateMode = value;
    }
    resetCertficateMode() {
        this._certficateMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certficateModeInput() {
        return this._certficateMode;
    }
    get connectionRetryInterval() {
        return this.getNumberAttribute('connection_retry_interval');
    }
    set connectionRetryInterval(value) {
        this._connectionRetryInterval = value;
    }
    resetConnectionRetryInterval() {
        this._connectionRetryInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionRetryIntervalInput() {
        return this._connectionRetryInterval;
    }
    get numRetries() {
        return this.getNumberAttribute('num_retries');
    }
    set numRetries(value) {
        this._numRetries = value;
    }
    resetNumRetries() {
        this._numRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numRetriesInput() {
        return this._numRetries;
    }
    get destination() {
        return this._destination;
    }
    putDestination(value) {
        this._destination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference;
_52 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference[_52] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        network_id: cdktf.numberToTerraform(struct.networkId),
        network_name: cdktf.stringToTerraform(struct.networkName),
        rep_interval: cdktf.numberToTerraform(struct.repInterval),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._networkId !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkId = this._networkId;
        }
        if (this._networkName !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkName = this._networkName;
        }
        if (this._repInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.repInterval = this._repInterval;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._networkId = undefined;
            this._networkName = undefined;
            this._repInterval = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._networkId = value.networkId;
            this._networkName = value.networkName;
            this._repInterval = value.repInterval;
        }
    }
    get networkId() {
        return this.getNumberAttribute('network_id');
    }
    set networkId(value) {
        this._networkId = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkIdInput() {
        return this._networkId;
    }
    get networkName() {
        return this.getStringAttribute('network_name');
    }
    set networkName(value) {
        this._networkName = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkNameInput() {
        return this._networkName;
    }
    get repInterval() {
        return this.getNumberAttribute('rep_interval');
    }
    set repInterval(value) {
        this._repInterval = value;
    }
    resetRepInterval() {
        this._repInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repIntervalInput() {
        return this._repInterval;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference;
_53 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference[_53] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        output_sdt: cdktf.stringToTerraform(struct.outputSdt),
        rep_interval: cdktf.numberToTerraform(struct.repInterval),
        service_name: cdktf.stringToTerraform(struct.serviceName),
        service_provider_name: cdktf.stringToTerraform(struct.serviceProviderName),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._outputSdt !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputSdt = this._outputSdt;
        }
        if (this._repInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.repInterval = this._repInterval;
        }
        if (this._serviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceName = this._serviceName;
        }
        if (this._serviceProviderName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceProviderName = this._serviceProviderName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._outputSdt = undefined;
            this._repInterval = undefined;
            this._serviceName = undefined;
            this._serviceProviderName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._outputSdt = value.outputSdt;
            this._repInterval = value.repInterval;
            this._serviceName = value.serviceName;
            this._serviceProviderName = value.serviceProviderName;
        }
    }
    get outputSdt() {
        return this.getStringAttribute('output_sdt');
    }
    set outputSdt(value) {
        this._outputSdt = value;
    }
    resetOutputSdt() {
        this._outputSdt = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputSdtInput() {
        return this._outputSdt;
    }
    get repInterval() {
        return this.getNumberAttribute('rep_interval');
    }
    set repInterval(value) {
        this._repInterval = value;
    }
    resetRepInterval() {
        this._repInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repIntervalInput() {
        return this._repInterval;
    }
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
    set serviceName(value) {
        this._serviceName = value;
    }
    resetServiceName() {
        this._serviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNameInput() {
        return this._serviceName;
    }
    get serviceProviderName() {
        return this.getStringAttribute('service_provider_name');
    }
    set serviceProviderName(value) {
        this._serviceProviderName = value;
    }
    resetServiceProviderName() {
        this._serviceProviderName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceProviderNameInput() {
        return this._serviceProviderName;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference;
_54 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference[_54] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        rep_interval: cdktf.numberToTerraform(struct.repInterval),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._repInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.repInterval = this._repInterval;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._repInterval = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._repInterval = value.repInterval;
        }
    }
    get repInterval() {
        return this.getNumberAttribute('rep_interval');
    }
    set repInterval(value) {
        this._repInterval = value;
    }
    resetRepInterval() {
        this._repInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repIntervalInput() {
        return this._repInterval;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference;
_55 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference[_55] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        absent_input_audio_behavior: cdktf.stringToTerraform(struct.absentInputAudioBehavior),
        arib: cdktf.stringToTerraform(struct.arib),
        arib_captions_pid: cdktf.stringToTerraform(struct.aribCaptionsPid),
        arib_captions_pid_control: cdktf.stringToTerraform(struct.aribCaptionsPidControl),
        audio_buffer_model: cdktf.stringToTerraform(struct.audioBufferModel),
        audio_frames_per_pes: cdktf.numberToTerraform(struct.audioFramesPerPes),
        audio_pids: cdktf.stringToTerraform(struct.audioPids),
        audio_stream_type: cdktf.stringToTerraform(struct.audioStreamType),
        bitrate: cdktf.numberToTerraform(struct.bitrate),
        buffer_model: cdktf.stringToTerraform(struct.bufferModel),
        cc_descriptor: cdktf.stringToTerraform(struct.ccDescriptor),
        dvb_sub_pids: cdktf.stringToTerraform(struct.dvbSubPids),
        dvb_teletext_pid: cdktf.stringToTerraform(struct.dvbTeletextPid),
        ebif: cdktf.stringToTerraform(struct.ebif),
        ebp_audio_interval: cdktf.stringToTerraform(struct.ebpAudioInterval),
        ebp_lookahead_ms: cdktf.numberToTerraform(struct.ebpLookaheadMs),
        ebp_placement: cdktf.stringToTerraform(struct.ebpPlacement),
        ecm_pid: cdktf.stringToTerraform(struct.ecmPid),
        es_rate_in_pes: cdktf.stringToTerraform(struct.esRateInPes),
        etv_platform_pid: cdktf.stringToTerraform(struct.etvPlatformPid),
        etv_signal_pid: cdktf.stringToTerraform(struct.etvSignalPid),
        fragment_time: cdktf.numberToTerraform(struct.fragmentTime),
        klv: cdktf.stringToTerraform(struct.klv),
        klv_data_pids: cdktf.stringToTerraform(struct.klvDataPids),
        nielsen_id3_behavior: cdktf.stringToTerraform(struct.nielsenId3Behavior),
        null_packet_bitrate: cdktf.numberToTerraform(struct.nullPacketBitrate),
        pat_interval: cdktf.numberToTerraform(struct.patInterval),
        pcr_control: cdktf.stringToTerraform(struct.pcrControl),
        pcr_period: cdktf.numberToTerraform(struct.pcrPeriod),
        pcr_pid: cdktf.stringToTerraform(struct.pcrPid),
        pmt_interval: cdktf.numberToTerraform(struct.pmtInterval),
        pmt_pid: cdktf.stringToTerraform(struct.pmtPid),
        program_num: cdktf.numberToTerraform(struct.programNum),
        rate_mode: cdktf.stringToTerraform(struct.rateMode),
        scte27_pids: cdktf.stringToTerraform(struct.scte27Pids),
        scte35_control: cdktf.stringToTerraform(struct.scte35Control),
        scte35_pid: cdktf.stringToTerraform(struct.scte35Pid),
        segmentation_markers: cdktf.stringToTerraform(struct.segmentationMarkers),
        segmentation_style: cdktf.stringToTerraform(struct.segmentationStyle),
        segmentation_time: cdktf.numberToTerraform(struct.segmentationTime),
        timed_metadata_behavior: cdktf.stringToTerraform(struct.timedMetadataBehavior),
        timed_metadata_pid: cdktf.stringToTerraform(struct.timedMetadataPid),
        transport_stream_id: cdktf.numberToTerraform(struct.transportStreamId),
        video_pid: cdktf.stringToTerraform(struct.videoPid),
        dvb_nit_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform(struct.dvbNitSettings),
        dvb_sdt_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform(struct.dvbSdtSettings),
        dvb_tdt_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform(struct.dvbTdtSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // dvb_nit_settings - computed: false, optional: true, required: false
        this._dvbNitSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference(this, "dvb_nit_settings");
        // dvb_sdt_settings - computed: false, optional: true, required: false
        this._dvbSdtSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference(this, "dvb_sdt_settings");
        // dvb_tdt_settings - computed: false, optional: true, required: false
        this._dvbTdtSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference(this, "dvb_tdt_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._absentInputAudioBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.absentInputAudioBehavior = this._absentInputAudioBehavior;
        }
        if (this._arib !== undefined) {
            hasAnyValues = true;
            internalValueResult.arib = this._arib;
        }
        if (this._aribCaptionsPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.aribCaptionsPid = this._aribCaptionsPid;
        }
        if (this._aribCaptionsPidControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.aribCaptionsPidControl = this._aribCaptionsPidControl;
        }
        if (this._audioBufferModel !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioBufferModel = this._audioBufferModel;
        }
        if (this._audioFramesPerPes !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioFramesPerPes = this._audioFramesPerPes;
        }
        if (this._audioPids !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioPids = this._audioPids;
        }
        if (this._audioStreamType !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioStreamType = this._audioStreamType;
        }
        if (this._bitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitrate = this._bitrate;
        }
        if (this._bufferModel !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferModel = this._bufferModel;
        }
        if (this._ccDescriptor !== undefined) {
            hasAnyValues = true;
            internalValueResult.ccDescriptor = this._ccDescriptor;
        }
        if (this._dvbSubPids !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbSubPids = this._dvbSubPids;
        }
        if (this._dvbTeletextPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbTeletextPid = this._dvbTeletextPid;
        }
        if (this._ebif !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebif = this._ebif;
        }
        if (this._ebpAudioInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebpAudioInterval = this._ebpAudioInterval;
        }
        if (this._ebpLookaheadMs !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebpLookaheadMs = this._ebpLookaheadMs;
        }
        if (this._ebpPlacement !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebpPlacement = this._ebpPlacement;
        }
        if (this._ecmPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.ecmPid = this._ecmPid;
        }
        if (this._esRateInPes !== undefined) {
            hasAnyValues = true;
            internalValueResult.esRateInPes = this._esRateInPes;
        }
        if (this._etvPlatformPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.etvPlatformPid = this._etvPlatformPid;
        }
        if (this._etvSignalPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.etvSignalPid = this._etvSignalPid;
        }
        if (this._fragmentTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.fragmentTime = this._fragmentTime;
        }
        if (this._klv !== undefined) {
            hasAnyValues = true;
            internalValueResult.klv = this._klv;
        }
        if (this._klvDataPids !== undefined) {
            hasAnyValues = true;
            internalValueResult.klvDataPids = this._klvDataPids;
        }
        if (this._nielsenId3Behavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.nielsenId3Behavior = this._nielsenId3Behavior;
        }
        if (this._nullPacketBitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.nullPacketBitrate = this._nullPacketBitrate;
        }
        if (this._patInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.patInterval = this._patInterval;
        }
        if (this._pcrControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.pcrControl = this._pcrControl;
        }
        if (this._pcrPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.pcrPeriod = this._pcrPeriod;
        }
        if (this._pcrPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.pcrPid = this._pcrPid;
        }
        if (this._pmtInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.pmtInterval = this._pmtInterval;
        }
        if (this._pmtPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.pmtPid = this._pmtPid;
        }
        if (this._programNum !== undefined) {
            hasAnyValues = true;
            internalValueResult.programNum = this._programNum;
        }
        if (this._rateMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.rateMode = this._rateMode;
        }
        if (this._scte27Pids !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte27Pids = this._scte27Pids;
        }
        if (this._scte35Control !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte35Control = this._scte35Control;
        }
        if (this._scte35Pid !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte35Pid = this._scte35Pid;
        }
        if (this._segmentationMarkers !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentationMarkers = this._segmentationMarkers;
        }
        if (this._segmentationStyle !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentationStyle = this._segmentationStyle;
        }
        if (this._segmentationTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentationTime = this._segmentationTime;
        }
        if (this._timedMetadataBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataBehavior = this._timedMetadataBehavior;
        }
        if (this._timedMetadataPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataPid = this._timedMetadataPid;
        }
        if (this._transportStreamId !== undefined) {
            hasAnyValues = true;
            internalValueResult.transportStreamId = this._transportStreamId;
        }
        if (this._videoPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.videoPid = this._videoPid;
        }
        if (this._dvbNitSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbNitSettings = this._dvbNitSettings?.internalValue;
        }
        if (this._dvbSdtSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbSdtSettings = this._dvbSdtSettings?.internalValue;
        }
        if (this._dvbTdtSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbTdtSettings = this._dvbTdtSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._absentInputAudioBehavior = undefined;
            this._arib = undefined;
            this._aribCaptionsPid = undefined;
            this._aribCaptionsPidControl = undefined;
            this._audioBufferModel = undefined;
            this._audioFramesPerPes = undefined;
            this._audioPids = undefined;
            this._audioStreamType = undefined;
            this._bitrate = undefined;
            this._bufferModel = undefined;
            this._ccDescriptor = undefined;
            this._dvbSubPids = undefined;
            this._dvbTeletextPid = undefined;
            this._ebif = undefined;
            this._ebpAudioInterval = undefined;
            this._ebpLookaheadMs = undefined;
            this._ebpPlacement = undefined;
            this._ecmPid = undefined;
            this._esRateInPes = undefined;
            this._etvPlatformPid = undefined;
            this._etvSignalPid = undefined;
            this._fragmentTime = undefined;
            this._klv = undefined;
            this._klvDataPids = undefined;
            this._nielsenId3Behavior = undefined;
            this._nullPacketBitrate = undefined;
            this._patInterval = undefined;
            this._pcrControl = undefined;
            this._pcrPeriod = undefined;
            this._pcrPid = undefined;
            this._pmtInterval = undefined;
            this._pmtPid = undefined;
            this._programNum = undefined;
            this._rateMode = undefined;
            this._scte27Pids = undefined;
            this._scte35Control = undefined;
            this._scte35Pid = undefined;
            this._segmentationMarkers = undefined;
            this._segmentationStyle = undefined;
            this._segmentationTime = undefined;
            this._timedMetadataBehavior = undefined;
            this._timedMetadataPid = undefined;
            this._transportStreamId = undefined;
            this._videoPid = undefined;
            this._dvbNitSettings.internalValue = undefined;
            this._dvbSdtSettings.internalValue = undefined;
            this._dvbTdtSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._absentInputAudioBehavior = value.absentInputAudioBehavior;
            this._arib = value.arib;
            this._aribCaptionsPid = value.aribCaptionsPid;
            this._aribCaptionsPidControl = value.aribCaptionsPidControl;
            this._audioBufferModel = value.audioBufferModel;
            this._audioFramesPerPes = value.audioFramesPerPes;
            this._audioPids = value.audioPids;
            this._audioStreamType = value.audioStreamType;
            this._bitrate = value.bitrate;
            this._bufferModel = value.bufferModel;
            this._ccDescriptor = value.ccDescriptor;
            this._dvbSubPids = value.dvbSubPids;
            this._dvbTeletextPid = value.dvbTeletextPid;
            this._ebif = value.ebif;
            this._ebpAudioInterval = value.ebpAudioInterval;
            this._ebpLookaheadMs = value.ebpLookaheadMs;
            this._ebpPlacement = value.ebpPlacement;
            this._ecmPid = value.ecmPid;
            this._esRateInPes = value.esRateInPes;
            this._etvPlatformPid = value.etvPlatformPid;
            this._etvSignalPid = value.etvSignalPid;
            this._fragmentTime = value.fragmentTime;
            this._klv = value.klv;
            this._klvDataPids = value.klvDataPids;
            this._nielsenId3Behavior = value.nielsenId3Behavior;
            this._nullPacketBitrate = value.nullPacketBitrate;
            this._patInterval = value.patInterval;
            this._pcrControl = value.pcrControl;
            this._pcrPeriod = value.pcrPeriod;
            this._pcrPid = value.pcrPid;
            this._pmtInterval = value.pmtInterval;
            this._pmtPid = value.pmtPid;
            this._programNum = value.programNum;
            this._rateMode = value.rateMode;
            this._scte27Pids = value.scte27Pids;
            this._scte35Control = value.scte35Control;
            this._scte35Pid = value.scte35Pid;
            this._segmentationMarkers = value.segmentationMarkers;
            this._segmentationStyle = value.segmentationStyle;
            this._segmentationTime = value.segmentationTime;
            this._timedMetadataBehavior = value.timedMetadataBehavior;
            this._timedMetadataPid = value.timedMetadataPid;
            this._transportStreamId = value.transportStreamId;
            this._videoPid = value.videoPid;
            this._dvbNitSettings.internalValue = value.dvbNitSettings;
            this._dvbSdtSettings.internalValue = value.dvbSdtSettings;
            this._dvbTdtSettings.internalValue = value.dvbTdtSettings;
        }
    }
    get absentInputAudioBehavior() {
        return this.getStringAttribute('absent_input_audio_behavior');
    }
    set absentInputAudioBehavior(value) {
        this._absentInputAudioBehavior = value;
    }
    resetAbsentInputAudioBehavior() {
        this._absentInputAudioBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get absentInputAudioBehaviorInput() {
        return this._absentInputAudioBehavior;
    }
    get arib() {
        return this.getStringAttribute('arib');
    }
    set arib(value) {
        this._arib = value;
    }
    resetArib() {
        this._arib = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aribInput() {
        return this._arib;
    }
    get aribCaptionsPid() {
        return this.getStringAttribute('arib_captions_pid');
    }
    set aribCaptionsPid(value) {
        this._aribCaptionsPid = value;
    }
    resetAribCaptionsPid() {
        this._aribCaptionsPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aribCaptionsPidInput() {
        return this._aribCaptionsPid;
    }
    get aribCaptionsPidControl() {
        return this.getStringAttribute('arib_captions_pid_control');
    }
    set aribCaptionsPidControl(value) {
        this._aribCaptionsPidControl = value;
    }
    resetAribCaptionsPidControl() {
        this._aribCaptionsPidControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aribCaptionsPidControlInput() {
        return this._aribCaptionsPidControl;
    }
    get audioBufferModel() {
        return this.getStringAttribute('audio_buffer_model');
    }
    set audioBufferModel(value) {
        this._audioBufferModel = value;
    }
    resetAudioBufferModel() {
        this._audioBufferModel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioBufferModelInput() {
        return this._audioBufferModel;
    }
    get audioFramesPerPes() {
        return this.getNumberAttribute('audio_frames_per_pes');
    }
    set audioFramesPerPes(value) {
        this._audioFramesPerPes = value;
    }
    resetAudioFramesPerPes() {
        this._audioFramesPerPes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioFramesPerPesInput() {
        return this._audioFramesPerPes;
    }
    get audioPids() {
        return this.getStringAttribute('audio_pids');
    }
    set audioPids(value) {
        this._audioPids = value;
    }
    resetAudioPids() {
        this._audioPids = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioPidsInput() {
        return this._audioPids;
    }
    get audioStreamType() {
        return this.getStringAttribute('audio_stream_type');
    }
    set audioStreamType(value) {
        this._audioStreamType = value;
    }
    resetAudioStreamType() {
        this._audioStreamType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioStreamTypeInput() {
        return this._audioStreamType;
    }
    get bitrate() {
        return this.getNumberAttribute('bitrate');
    }
    set bitrate(value) {
        this._bitrate = value;
    }
    resetBitrate() {
        this._bitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitrateInput() {
        return this._bitrate;
    }
    get bufferModel() {
        return this.getStringAttribute('buffer_model');
    }
    set bufferModel(value) {
        this._bufferModel = value;
    }
    resetBufferModel() {
        this._bufferModel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferModelInput() {
        return this._bufferModel;
    }
    get ccDescriptor() {
        return this.getStringAttribute('cc_descriptor');
    }
    set ccDescriptor(value) {
        this._ccDescriptor = value;
    }
    resetCcDescriptor() {
        this._ccDescriptor = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ccDescriptorInput() {
        return this._ccDescriptor;
    }
    get dvbSubPids() {
        return this.getStringAttribute('dvb_sub_pids');
    }
    set dvbSubPids(value) {
        this._dvbSubPids = value;
    }
    resetDvbSubPids() {
        this._dvbSubPids = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbSubPidsInput() {
        return this._dvbSubPids;
    }
    get dvbTeletextPid() {
        return this.getStringAttribute('dvb_teletext_pid');
    }
    set dvbTeletextPid(value) {
        this._dvbTeletextPid = value;
    }
    resetDvbTeletextPid() {
        this._dvbTeletextPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbTeletextPidInput() {
        return this._dvbTeletextPid;
    }
    get ebif() {
        return this.getStringAttribute('ebif');
    }
    set ebif(value) {
        this._ebif = value;
    }
    resetEbif() {
        this._ebif = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebifInput() {
        return this._ebif;
    }
    get ebpAudioInterval() {
        return this.getStringAttribute('ebp_audio_interval');
    }
    set ebpAudioInterval(value) {
        this._ebpAudioInterval = value;
    }
    resetEbpAudioInterval() {
        this._ebpAudioInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebpAudioIntervalInput() {
        return this._ebpAudioInterval;
    }
    get ebpLookaheadMs() {
        return this.getNumberAttribute('ebp_lookahead_ms');
    }
    set ebpLookaheadMs(value) {
        this._ebpLookaheadMs = value;
    }
    resetEbpLookaheadMs() {
        this._ebpLookaheadMs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebpLookaheadMsInput() {
        return this._ebpLookaheadMs;
    }
    get ebpPlacement() {
        return this.getStringAttribute('ebp_placement');
    }
    set ebpPlacement(value) {
        this._ebpPlacement = value;
    }
    resetEbpPlacement() {
        this._ebpPlacement = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebpPlacementInput() {
        return this._ebpPlacement;
    }
    get ecmPid() {
        return this.getStringAttribute('ecm_pid');
    }
    set ecmPid(value) {
        this._ecmPid = value;
    }
    resetEcmPid() {
        this._ecmPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ecmPidInput() {
        return this._ecmPid;
    }
    get esRateInPes() {
        return this.getStringAttribute('es_rate_in_pes');
    }
    set esRateInPes(value) {
        this._esRateInPes = value;
    }
    resetEsRateInPes() {
        this._esRateInPes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get esRateInPesInput() {
        return this._esRateInPes;
    }
    get etvPlatformPid() {
        return this.getStringAttribute('etv_platform_pid');
    }
    set etvPlatformPid(value) {
        this._etvPlatformPid = value;
    }
    resetEtvPlatformPid() {
        this._etvPlatformPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get etvPlatformPidInput() {
        return this._etvPlatformPid;
    }
    get etvSignalPid() {
        return this.getStringAttribute('etv_signal_pid');
    }
    set etvSignalPid(value) {
        this._etvSignalPid = value;
    }
    resetEtvSignalPid() {
        this._etvSignalPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get etvSignalPidInput() {
        return this._etvSignalPid;
    }
    get fragmentTime() {
        return this.getNumberAttribute('fragment_time');
    }
    set fragmentTime(value) {
        this._fragmentTime = value;
    }
    resetFragmentTime() {
        this._fragmentTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fragmentTimeInput() {
        return this._fragmentTime;
    }
    get klv() {
        return this.getStringAttribute('klv');
    }
    set klv(value) {
        this._klv = value;
    }
    resetKlv() {
        this._klv = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get klvInput() {
        return this._klv;
    }
    get klvDataPids() {
        return this.getStringAttribute('klv_data_pids');
    }
    set klvDataPids(value) {
        this._klvDataPids = value;
    }
    resetKlvDataPids() {
        this._klvDataPids = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get klvDataPidsInput() {
        return this._klvDataPids;
    }
    get nielsenId3Behavior() {
        return this.getStringAttribute('nielsen_id3_behavior');
    }
    set nielsenId3Behavior(value) {
        this._nielsenId3Behavior = value;
    }
    resetNielsenId3Behavior() {
        this._nielsenId3Behavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nielsenId3BehaviorInput() {
        return this._nielsenId3Behavior;
    }
    get nullPacketBitrate() {
        return this.getNumberAttribute('null_packet_bitrate');
    }
    set nullPacketBitrate(value) {
        this._nullPacketBitrate = value;
    }
    resetNullPacketBitrate() {
        this._nullPacketBitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nullPacketBitrateInput() {
        return this._nullPacketBitrate;
    }
    get patInterval() {
        return this.getNumberAttribute('pat_interval');
    }
    set patInterval(value) {
        this._patInterval = value;
    }
    resetPatInterval() {
        this._patInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get patIntervalInput() {
        return this._patInterval;
    }
    get pcrControl() {
        return this.getStringAttribute('pcr_control');
    }
    set pcrControl(value) {
        this._pcrControl = value;
    }
    resetPcrControl() {
        this._pcrControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pcrControlInput() {
        return this._pcrControl;
    }
    get pcrPeriod() {
        return this.getNumberAttribute('pcr_period');
    }
    set pcrPeriod(value) {
        this._pcrPeriod = value;
    }
    resetPcrPeriod() {
        this._pcrPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pcrPeriodInput() {
        return this._pcrPeriod;
    }
    get pcrPid() {
        return this.getStringAttribute('pcr_pid');
    }
    set pcrPid(value) {
        this._pcrPid = value;
    }
    resetPcrPid() {
        this._pcrPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pcrPidInput() {
        return this._pcrPid;
    }
    get pmtInterval() {
        return this.getNumberAttribute('pmt_interval');
    }
    set pmtInterval(value) {
        this._pmtInterval = value;
    }
    resetPmtInterval() {
        this._pmtInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pmtIntervalInput() {
        return this._pmtInterval;
    }
    get pmtPid() {
        return this.getStringAttribute('pmt_pid');
    }
    set pmtPid(value) {
        this._pmtPid = value;
    }
    resetPmtPid() {
        this._pmtPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pmtPidInput() {
        return this._pmtPid;
    }
    get programNum() {
        return this.getNumberAttribute('program_num');
    }
    set programNum(value) {
        this._programNum = value;
    }
    resetProgramNum() {
        this._programNum = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get programNumInput() {
        return this._programNum;
    }
    get rateMode() {
        return this.getStringAttribute('rate_mode');
    }
    set rateMode(value) {
        this._rateMode = value;
    }
    resetRateMode() {
        this._rateMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rateModeInput() {
        return this._rateMode;
    }
    get scte27Pids() {
        return this.getStringAttribute('scte27_pids');
    }
    set scte27Pids(value) {
        this._scte27Pids = value;
    }
    resetScte27Pids() {
        this._scte27Pids = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte27PidsInput() {
        return this._scte27Pids;
    }
    get scte35Control() {
        return this.getStringAttribute('scte35_control');
    }
    set scte35Control(value) {
        this._scte35Control = value;
    }
    resetScte35Control() {
        this._scte35Control = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte35ControlInput() {
        return this._scte35Control;
    }
    get scte35Pid() {
        return this.getStringAttribute('scte35_pid');
    }
    set scte35Pid(value) {
        this._scte35Pid = value;
    }
    resetScte35Pid() {
        this._scte35Pid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte35PidInput() {
        return this._scte35Pid;
    }
    get segmentationMarkers() {
        return this.getStringAttribute('segmentation_markers');
    }
    set segmentationMarkers(value) {
        this._segmentationMarkers = value;
    }
    resetSegmentationMarkers() {
        this._segmentationMarkers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentationMarkersInput() {
        return this._segmentationMarkers;
    }
    get segmentationStyle() {
        return this.getStringAttribute('segmentation_style');
    }
    set segmentationStyle(value) {
        this._segmentationStyle = value;
    }
    resetSegmentationStyle() {
        this._segmentationStyle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentationStyleInput() {
        return this._segmentationStyle;
    }
    get segmentationTime() {
        return this.getNumberAttribute('segmentation_time');
    }
    set segmentationTime(value) {
        this._segmentationTime = value;
    }
    resetSegmentationTime() {
        this._segmentationTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentationTimeInput() {
        return this._segmentationTime;
    }
    get timedMetadataBehavior() {
        return this.getStringAttribute('timed_metadata_behavior');
    }
    set timedMetadataBehavior(value) {
        this._timedMetadataBehavior = value;
    }
    resetTimedMetadataBehavior() {
        this._timedMetadataBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataBehaviorInput() {
        return this._timedMetadataBehavior;
    }
    get timedMetadataPid() {
        return this.getStringAttribute('timed_metadata_pid');
    }
    set timedMetadataPid(value) {
        this._timedMetadataPid = value;
    }
    resetTimedMetadataPid() {
        this._timedMetadataPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataPidInput() {
        return this._timedMetadataPid;
    }
    get transportStreamId() {
        return this.getNumberAttribute('transport_stream_id');
    }
    set transportStreamId(value) {
        this._transportStreamId = value;
    }
    resetTransportStreamId() {
        this._transportStreamId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transportStreamIdInput() {
        return this._transportStreamId;
    }
    get videoPid() {
        return this.getStringAttribute('video_pid');
    }
    set videoPid(value) {
        this._videoPid = value;
    }
    resetVideoPid() {
        this._videoPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get videoPidInput() {
        return this._videoPid;
    }
    get dvbNitSettings() {
        return this._dvbNitSettings;
    }
    putDvbNitSettings(value) {
        this._dvbNitSettings.internalValue = value;
    }
    resetDvbNitSettings() {
        this._dvbNitSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbNitSettingsInput() {
        return this._dvbNitSettings.internalValue;
    }
    get dvbSdtSettings() {
        return this._dvbSdtSettings;
    }
    putDvbSdtSettings(value) {
        this._dvbSdtSettings.internalValue = value;
    }
    resetDvbSdtSettings() {
        this._dvbSdtSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbSdtSettingsInput() {
        return this._dvbSdtSettings.internalValue;
    }
    get dvbTdtSettings() {
        return this._dvbTdtSettings;
    }
    putDvbTdtSettings(value) {
        this._dvbTdtSettings.internalValue = value;
    }
    resetDvbTdtSettings() {
        this._dvbTdtSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbTdtSettingsInput() {
        return this._dvbTdtSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference;
_56 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference[_56] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        m2ts_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsToTerraform(struct.m2TsSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // m2ts_settings - computed: false, optional: true, required: false
        this._m2TsSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference(this, "m2ts_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._m2TsSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.m2TsSettings = this._m2TsSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._m2TsSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._m2TsSettings.internalValue = value.m2TsSettings;
        }
    }
    get m2TsSettings() {
        return this._m2TsSettings;
    }
    putM2TsSettings(value) {
        this._m2TsSettings.internalValue = value;
    }
    resetM2TsSettings() {
        this._m2TsSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get m2TsSettingsInput() {
        return this._m2TsSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference;
_57 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference[_57] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_ref_id: cdktf.stringToTerraform(struct.destinationRefId),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationRefId !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationRefId = this._destinationRefId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationRefId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationRefId = value.destinationRefId;
        }
    }
    get destinationRefId() {
        return this.getStringAttribute('destination_ref_id');
    }
    set destinationRefId(value) {
        this._destinationRefId = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationRefIdInput() {
        return this._destinationRefId;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference;
_58 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference[_58] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        column_depth: cdktf.numberToTerraform(struct.columnDepth),
        include_fec: cdktf.stringToTerraform(struct.includeFec),
        row_length: cdktf.numberToTerraform(struct.rowLength),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._columnDepth !== undefined) {
            hasAnyValues = true;
            internalValueResult.columnDepth = this._columnDepth;
        }
        if (this._includeFec !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeFec = this._includeFec;
        }
        if (this._rowLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.rowLength = this._rowLength;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._columnDepth = undefined;
            this._includeFec = undefined;
            this._rowLength = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._columnDepth = value.columnDepth;
            this._includeFec = value.includeFec;
            this._rowLength = value.rowLength;
        }
    }
    get columnDepth() {
        return this.getNumberAttribute('column_depth');
    }
    set columnDepth(value) {
        this._columnDepth = value;
    }
    resetColumnDepth() {
        this._columnDepth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnDepthInput() {
        return this._columnDepth;
    }
    get includeFec() {
        return this.getStringAttribute('include_fec');
    }
    set includeFec(value) {
        this._includeFec = value;
    }
    resetIncludeFec() {
        this._includeFec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeFecInput() {
        return this._includeFec;
    }
    get rowLength() {
        return this.getNumberAttribute('row_length');
    }
    set rowLength(value) {
        this._rowLength = value;
    }
    resetRowLength() {
        this._rowLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rowLengthInput() {
        return this._rowLength;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference;
_59 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference[_59] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        buffer_msec: cdktf.numberToTerraform(struct.bufferMsec),
        container_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsToTerraform(struct.containerSettings),
        destination: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationToTerraform(struct.destination),
        fec_output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsToTerraform(struct.fecOutputSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // container_settings - computed: false, optional: false, required: true
        this._containerSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference(this, "container_settings");
        // destination - computed: false, optional: false, required: true
        this._destination = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference(this, "destination");
        // fec_output_settings - computed: false, optional: true, required: false
        this._fecOutputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference(this, "fec_output_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bufferMsec !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferMsec = this._bufferMsec;
        }
        if (this._containerSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerSettings = this._containerSettings?.internalValue;
        }
        if (this._destination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination?.internalValue;
        }
        if (this._fecOutputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fecOutputSettings = this._fecOutputSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bufferMsec = undefined;
            this._containerSettings.internalValue = undefined;
            this._destination.internalValue = undefined;
            this._fecOutputSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bufferMsec = value.bufferMsec;
            this._containerSettings.internalValue = value.containerSettings;
            this._destination.internalValue = value.destination;
            this._fecOutputSettings.internalValue = value.fecOutputSettings;
        }
    }
    get bufferMsec() {
        return this.getNumberAttribute('buffer_msec');
    }
    set bufferMsec(value) {
        this._bufferMsec = value;
    }
    resetBufferMsec() {
        this._bufferMsec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferMsecInput() {
        return this._bufferMsec;
    }
    get containerSettings() {
        return this._containerSettings;
    }
    putContainerSettings(value) {
        this._containerSettings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get containerSettingsInput() {
        return this._containerSettings.internalValue;
    }
    get destination() {
        return this._destination;
    }
    putDestination(value) {
        this._destination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination.internalValue;
    }
    get fecOutputSettings() {
        return this._fecOutputSettings;
    }
    putFecOutputSettings(value) {
        this._fecOutputSettings.internalValue = value;
    }
    resetFecOutputSettings() {
        this._fecOutputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fecOutputSettingsInput() {
        return this._fecOutputSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference;
_60 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference[_60] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        archive_output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsToTerraform(struct.archiveOutputSettings),
        frame_capture_output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsToTerraform(struct.frameCaptureOutputSettings),
        hls_output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsToTerraform(struct.hlsOutputSettings),
        media_package_output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsToTerraform(struct.mediaPackageOutputSettings),
        ms_smooth_output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsToTerraform(struct.msSmoothOutputSettings),
        multiplex_output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsToTerraform(struct.multiplexOutputSettings),
        rtmp_output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsToTerraform(struct.rtmpOutputSettings),
        udp_output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsToTerraform(struct.udpOutputSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // archive_output_settings - computed: false, optional: true, required: false
        this._archiveOutputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference(this, "archive_output_settings");
        // frame_capture_output_settings - computed: false, optional: true, required: false
        this._frameCaptureOutputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference(this, "frame_capture_output_settings");
        // hls_output_settings - computed: false, optional: true, required: false
        this._hlsOutputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference(this, "hls_output_settings");
        // media_package_output_settings - computed: false, optional: true, required: false
        this._mediaPackageOutputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference(this, "media_package_output_settings");
        // ms_smooth_output_settings - computed: false, optional: true, required: false
        this._msSmoothOutputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference(this, "ms_smooth_output_settings");
        // multiplex_output_settings - computed: false, optional: true, required: false
        this._multiplexOutputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference(this, "multiplex_output_settings");
        // rtmp_output_settings - computed: false, optional: true, required: false
        this._rtmpOutputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference(this, "rtmp_output_settings");
        // udp_output_settings - computed: false, optional: true, required: false
        this._udpOutputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference(this, "udp_output_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._archiveOutputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.archiveOutputSettings = this._archiveOutputSettings?.internalValue;
        }
        if (this._frameCaptureOutputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.frameCaptureOutputSettings = this._frameCaptureOutputSettings?.internalValue;
        }
        if (this._hlsOutputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsOutputSettings = this._hlsOutputSettings?.internalValue;
        }
        if (this._mediaPackageOutputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mediaPackageOutputSettings = this._mediaPackageOutputSettings?.internalValue;
        }
        if (this._msSmoothOutputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.msSmoothOutputSettings = this._msSmoothOutputSettings?.internalValue;
        }
        if (this._multiplexOutputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.multiplexOutputSettings = this._multiplexOutputSettings?.internalValue;
        }
        if (this._rtmpOutputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rtmpOutputSettings = this._rtmpOutputSettings?.internalValue;
        }
        if (this._udpOutputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.udpOutputSettings = this._udpOutputSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._archiveOutputSettings.internalValue = undefined;
            this._frameCaptureOutputSettings.internalValue = undefined;
            this._hlsOutputSettings.internalValue = undefined;
            this._mediaPackageOutputSettings.internalValue = undefined;
            this._msSmoothOutputSettings.internalValue = undefined;
            this._multiplexOutputSettings.internalValue = undefined;
            this._rtmpOutputSettings.internalValue = undefined;
            this._udpOutputSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._archiveOutputSettings.internalValue = value.archiveOutputSettings;
            this._frameCaptureOutputSettings.internalValue = value.frameCaptureOutputSettings;
            this._hlsOutputSettings.internalValue = value.hlsOutputSettings;
            this._mediaPackageOutputSettings.internalValue = value.mediaPackageOutputSettings;
            this._msSmoothOutputSettings.internalValue = value.msSmoothOutputSettings;
            this._multiplexOutputSettings.internalValue = value.multiplexOutputSettings;
            this._rtmpOutputSettings.internalValue = value.rtmpOutputSettings;
            this._udpOutputSettings.internalValue = value.udpOutputSettings;
        }
    }
    get archiveOutputSettings() {
        return this._archiveOutputSettings;
    }
    putArchiveOutputSettings(value) {
        this._archiveOutputSettings.internalValue = value;
    }
    resetArchiveOutputSettings() {
        this._archiveOutputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get archiveOutputSettingsInput() {
        return this._archiveOutputSettings.internalValue;
    }
    get frameCaptureOutputSettings() {
        return this._frameCaptureOutputSettings;
    }
    putFrameCaptureOutputSettings(value) {
        this._frameCaptureOutputSettings.internalValue = value;
    }
    resetFrameCaptureOutputSettings() {
        this._frameCaptureOutputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get frameCaptureOutputSettingsInput() {
        return this._frameCaptureOutputSettings.internalValue;
    }
    get hlsOutputSettings() {
        return this._hlsOutputSettings;
    }
    putHlsOutputSettings(value) {
        this._hlsOutputSettings.internalValue = value;
    }
    resetHlsOutputSettings() {
        this._hlsOutputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsOutputSettingsInput() {
        return this._hlsOutputSettings.internalValue;
    }
    get mediaPackageOutputSettings() {
        return this._mediaPackageOutputSettings;
    }
    putMediaPackageOutputSettings(value) {
        this._mediaPackageOutputSettings.internalValue = value;
    }
    resetMediaPackageOutputSettings() {
        this._mediaPackageOutputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mediaPackageOutputSettingsInput() {
        return this._mediaPackageOutputSettings.internalValue;
    }
    get msSmoothOutputSettings() {
        return this._msSmoothOutputSettings;
    }
    putMsSmoothOutputSettings(value) {
        this._msSmoothOutputSettings.internalValue = value;
    }
    resetMsSmoothOutputSettings() {
        this._msSmoothOutputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get msSmoothOutputSettingsInput() {
        return this._msSmoothOutputSettings.internalValue;
    }
    get multiplexOutputSettings() {
        return this._multiplexOutputSettings;
    }
    putMultiplexOutputSettings(value) {
        this._multiplexOutputSettings.internalValue = value;
    }
    resetMultiplexOutputSettings() {
        this._multiplexOutputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get multiplexOutputSettingsInput() {
        return this._multiplexOutputSettings.internalValue;
    }
    get rtmpOutputSettings() {
        return this._rtmpOutputSettings;
    }
    putRtmpOutputSettings(value) {
        this._rtmpOutputSettings.internalValue = value;
    }
    resetRtmpOutputSettings() {
        this._rtmpOutputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rtmpOutputSettingsInput() {
        return this._rtmpOutputSettings.internalValue;
    }
    get udpOutputSettings() {
        return this._udpOutputSettings;
    }
    putUdpOutputSettings(value) {
        this._udpOutputSettings.internalValue = value;
    }
    resetUdpOutputSettings() {
        this._udpOutputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get udpOutputSettingsInput() {
        return this._udpOutputSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference;
_61 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference[_61] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_description_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.audioDescriptionNames),
        caption_description_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.captionDescriptionNames),
        output_name: cdktf.stringToTerraform(struct.outputName),
        video_description_name: cdktf.stringToTerraform(struct.videoDescriptionName),
        output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsToTerraform(struct.outputSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // output_settings - computed: false, optional: false, required: true
        this._outputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference(this, "output_settings");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioDescriptionNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioDescriptionNames = this._audioDescriptionNames;
        }
        if (this._captionDescriptionNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.captionDescriptionNames = this._captionDescriptionNames;
        }
        if (this._outputName !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputName = this._outputName;
        }
        if (this._videoDescriptionName !== undefined) {
            hasAnyValues = true;
            internalValueResult.videoDescriptionName = this._videoDescriptionName;
        }
        if (this._outputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputSettings = this._outputSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._audioDescriptionNames = undefined;
            this._captionDescriptionNames = undefined;
            this._outputName = undefined;
            this._videoDescriptionName = undefined;
            this._outputSettings.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._audioDescriptionNames = value.audioDescriptionNames;
            this._captionDescriptionNames = value.captionDescriptionNames;
            this._outputName = value.outputName;
            this._videoDescriptionName = value.videoDescriptionName;
            this._outputSettings.internalValue = value.outputSettings;
        }
    }
    get audioDescriptionNames() {
        return cdktf.Fn.tolist(this.getListAttribute('audio_description_names'));
    }
    set audioDescriptionNames(value) {
        this._audioDescriptionNames = value;
    }
    resetAudioDescriptionNames() {
        this._audioDescriptionNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioDescriptionNamesInput() {
        return this._audioDescriptionNames;
    }
    get captionDescriptionNames() {
        return cdktf.Fn.tolist(this.getListAttribute('caption_description_names'));
    }
    set captionDescriptionNames(value) {
        this._captionDescriptionNames = value;
    }
    resetCaptionDescriptionNames() {
        this._captionDescriptionNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get captionDescriptionNamesInput() {
        return this._captionDescriptionNames;
    }
    get outputName() {
        return this.getStringAttribute('output_name');
    }
    set outputName(value) {
        this._outputName = value;
    }
    resetOutputName() {
        this._outputName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputNameInput() {
        return this._outputName;
    }
    get videoDescriptionName() {
        return this.getStringAttribute('video_description_name');
    }
    set videoDescriptionName(value) {
        this._videoDescriptionName = value;
    }
    resetVideoDescriptionName() {
        this._videoDescriptionName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get videoDescriptionNameInput() {
        return this._videoDescriptionName;
    }
    get outputSettings() {
        return this._outputSettings;
    }
    putOutputSettings(value) {
        this._outputSettings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get outputSettingsInput() {
        return this._outputSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference;
_62 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference[_62] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference", version: "10.0.12" };
class MedialiveChannelEncoderSettingsOutputGroupsOutputsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsList = MedialiveChannelEncoderSettingsOutputGroupsOutputsList;
_63 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsList[_63] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsList", version: "10.0.12" };
function medialiveChannelEncoderSettingsOutputGroupsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        output_group_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsToTerraform(struct.outputGroupSettings),
        outputs: cdktf.listMapper(medialiveChannelEncoderSettingsOutputGroupsOutputsToTerraform, true)(struct.outputs),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsToTerraform = medialiveChannelEncoderSettingsOutputGroupsToTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // output_group_settings - computed: false, optional: false, required: true
        this._outputGroupSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference(this, "output_group_settings");
        // outputs - computed: false, optional: false, required: true
        this._outputs = new MedialiveChannelEncoderSettingsOutputGroupsOutputsList(this, "outputs", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._outputGroupSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputGroupSettings = this._outputGroupSettings?.internalValue;
        }
        if (this._outputs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputs = this._outputs?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._outputGroupSettings.internalValue = undefined;
            this._outputs.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._outputGroupSettings.internalValue = value.outputGroupSettings;
            this._outputs.internalValue = value.outputs;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get outputGroupSettings() {
        return this._outputGroupSettings;
    }
    putOutputGroupSettings(value) {
        this._outputGroupSettings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get outputGroupSettingsInput() {
        return this._outputGroupSettings.internalValue;
    }
    get outputs() {
        return this._outputs;
    }
    putOutputs(value) {
        this._outputs.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get outputsInput() {
        return this._outputs.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputReference;
_64 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputReference[_64] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputReference", version: "10.0.12" };
class MedialiveChannelEncoderSettingsOutputGroupsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsOutputGroupsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsList = MedialiveChannelEncoderSettingsOutputGroupsList;
_65 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsList[_65] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsList", version: "10.0.12" };
function medialiveChannelEncoderSettingsTimecodeConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        source: cdktf.stringToTerraform(struct.source),
        sync_threshold: cdktf.numberToTerraform(struct.syncThreshold),
    };
}
exports.medialiveChannelEncoderSettingsTimecodeConfigToTerraform = medialiveChannelEncoderSettingsTimecodeConfigToTerraform;
class MedialiveChannelEncoderSettingsTimecodeConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._source !== undefined) {
            hasAnyValues = true;
            internalValueResult.source = this._source;
        }
        if (this._syncThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.syncThreshold = this._syncThreshold;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._source = undefined;
            this._syncThreshold = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._source = value.source;
            this._syncThreshold = value.syncThreshold;
        }
    }
    get source() {
        return this.getStringAttribute('source');
    }
    set source(value) {
        this._source = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceInput() {
        return this._source;
    }
    get syncThreshold() {
        return this.getNumberAttribute('sync_threshold');
    }
    set syncThreshold(value) {
        this._syncThreshold = value;
    }
    resetSyncThreshold() {
        this._syncThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncThresholdInput() {
        return this._syncThreshold;
    }
}
exports.MedialiveChannelEncoderSettingsTimecodeConfigOutputReference = MedialiveChannelEncoderSettingsTimecodeConfigOutputReference;
_66 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsTimecodeConfigOutputReference[_66] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsTimecodeConfigOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        capture_interval: cdktf.numberToTerraform(struct.captureInterval),
        capture_interval_units: cdktf.stringToTerraform(struct.captureIntervalUnits),
    };
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsToTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._captureInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.captureInterval = this._captureInterval;
        }
        if (this._captureIntervalUnits !== undefined) {
            hasAnyValues = true;
            internalValueResult.captureIntervalUnits = this._captureIntervalUnits;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._captureInterval = undefined;
            this._captureIntervalUnits = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._captureInterval = value.captureInterval;
            this._captureIntervalUnits = value.captureIntervalUnits;
        }
    }
    get captureInterval() {
        return this.getNumberAttribute('capture_interval');
    }
    set captureInterval(value) {
        this._captureInterval = value;
    }
    resetCaptureInterval() {
        this._captureInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get captureIntervalInput() {
        return this._captureInterval;
    }
    get captureIntervalUnits() {
        return this.getStringAttribute('capture_interval_units');
    }
    set captureIntervalUnits(value) {
        this._captureIntervalUnits = value;
    }
    resetCaptureIntervalUnits() {
        this._captureIntervalUnits = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get captureIntervalUnitsInput() {
        return this._captureIntervalUnits;
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference;
_67 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference[_67] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        post_filter_sharpening: cdktf.stringToTerraform(struct.postFilterSharpening),
        strength: cdktf.stringToTerraform(struct.strength),
    };
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsToTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._postFilterSharpening !== undefined) {
            hasAnyValues = true;
            internalValueResult.postFilterSharpening = this._postFilterSharpening;
        }
        if (this._strength !== undefined) {
            hasAnyValues = true;
            internalValueResult.strength = this._strength;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._postFilterSharpening = undefined;
            this._strength = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._postFilterSharpening = value.postFilterSharpening;
            this._strength = value.strength;
        }
    }
    get postFilterSharpening() {
        return this.getStringAttribute('post_filter_sharpening');
    }
    set postFilterSharpening(value) {
        this._postFilterSharpening = value;
    }
    resetPostFilterSharpening() {
        this._postFilterSharpening = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postFilterSharpeningInput() {
        return this._postFilterSharpening;
    }
    get strength() {
        return this.getStringAttribute('strength');
    }
    set strength(value) {
        this._strength = value;
    }
    resetStrength() {
        this._strength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get strengthInput() {
        return this._strength;
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference;
_68 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference[_68] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        temporal_filter_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsToTerraform(struct.temporalFilterSettings),
    };
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsToTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // temporal_filter_settings - computed: false, optional: true, required: false
        this._temporalFilterSettings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference(this, "temporal_filter_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._temporalFilterSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.temporalFilterSettings = this._temporalFilterSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._temporalFilterSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._temporalFilterSettings.internalValue = value.temporalFilterSettings;
        }
    }
    get temporalFilterSettings() {
        return this._temporalFilterSettings;
    }
    putTemporalFilterSettings(value) {
        this._temporalFilterSettings.internalValue = value;
    }
    resetTemporalFilterSettings() {
        this._temporalFilterSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get temporalFilterSettingsInput() {
        return this._temporalFilterSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference;
_69 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference[_69] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        adaptive_quantization: cdktf.stringToTerraform(struct.adaptiveQuantization),
        afd_signaling: cdktf.stringToTerraform(struct.afdSignaling),
        bitrate: cdktf.numberToTerraform(struct.bitrate),
        buf_fill_pct: cdktf.numberToTerraform(struct.bufFillPct),
        buf_size: cdktf.numberToTerraform(struct.bufSize),
        color_metadata: cdktf.stringToTerraform(struct.colorMetadata),
        entropy_encoding: cdktf.stringToTerraform(struct.entropyEncoding),
        fixed_afd: cdktf.stringToTerraform(struct.fixedAfd),
        flicker_aq: cdktf.stringToTerraform(struct.flickerAq),
        force_field_pictures: cdktf.stringToTerraform(struct.forceFieldPictures),
        framerate_control: cdktf.stringToTerraform(struct.framerateControl),
        framerate_denominator: cdktf.numberToTerraform(struct.framerateDenominator),
        gop_b_reference: cdktf.stringToTerraform(struct.gopBReference),
        gop_closed_cadence: cdktf.numberToTerraform(struct.gopClosedCadence),
        gop_num_b_frames: cdktf.numberToTerraform(struct.gopNumBFrames),
        gop_size: cdktf.numberToTerraform(struct.gopSize),
        gop_size_units: cdktf.stringToTerraform(struct.gopSizeUnits),
        level: cdktf.stringToTerraform(struct.level),
        look_ahead_rate_control: cdktf.stringToTerraform(struct.lookAheadRateControl),
        max_bitrate: cdktf.numberToTerraform(struct.maxBitrate),
        min_i_interval: cdktf.numberToTerraform(struct.minIInterval),
        num_ref_frames: cdktf.numberToTerraform(struct.numRefFrames),
        par_control: cdktf.stringToTerraform(struct.parControl),
        par_denominator: cdktf.numberToTerraform(struct.parDenominator),
        par_numerator: cdktf.numberToTerraform(struct.parNumerator),
        profile: cdktf.stringToTerraform(struct.profile),
        quality_level: cdktf.stringToTerraform(struct.qualityLevel),
        qvbr_quality_level: cdktf.numberToTerraform(struct.qvbrQualityLevel),
        rate_control_mode: cdktf.stringToTerraform(struct.rateControlMode),
        scan_type: cdktf.stringToTerraform(struct.scanType),
        scene_change_detect: cdktf.stringToTerraform(struct.sceneChangeDetect),
        slices: cdktf.numberToTerraform(struct.slices),
        softness: cdktf.numberToTerraform(struct.softness),
        spatial_aq: cdktf.stringToTerraform(struct.spatialAq),
        subgop_length: cdktf.stringToTerraform(struct.subgopLength),
        syntax: cdktf.stringToTerraform(struct.syntax),
        temporal_aq: cdktf.stringToTerraform(struct.temporalAq),
        timecode_insertion: cdktf.stringToTerraform(struct.timecodeInsertion),
        filter_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsToTerraform(struct.filterSettings),
    };
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsToTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // filter_settings - computed: false, optional: true, required: false
        this._filterSettings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference(this, "filter_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._adaptiveQuantization !== undefined) {
            hasAnyValues = true;
            internalValueResult.adaptiveQuantization = this._adaptiveQuantization;
        }
        if (this._afdSignaling !== undefined) {
            hasAnyValues = true;
            internalValueResult.afdSignaling = this._afdSignaling;
        }
        if (this._bitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitrate = this._bitrate;
        }
        if (this._bufFillPct !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufFillPct = this._bufFillPct;
        }
        if (this._bufSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufSize = this._bufSize;
        }
        if (this._colorMetadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.colorMetadata = this._colorMetadata;
        }
        if (this._entropyEncoding !== undefined) {
            hasAnyValues = true;
            internalValueResult.entropyEncoding = this._entropyEncoding;
        }
        if (this._fixedAfd !== undefined) {
            hasAnyValues = true;
            internalValueResult.fixedAfd = this._fixedAfd;
        }
        if (this._flickerAq !== undefined) {
            hasAnyValues = true;
            internalValueResult.flickerAq = this._flickerAq;
        }
        if (this._forceFieldPictures !== undefined) {
            hasAnyValues = true;
            internalValueResult.forceFieldPictures = this._forceFieldPictures;
        }
        if (this._framerateControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.framerateControl = this._framerateControl;
        }
        if (this._framerateDenominator !== undefined) {
            hasAnyValues = true;
            internalValueResult.framerateDenominator = this._framerateDenominator;
        }
        if (this._gopBReference !== undefined) {
            hasAnyValues = true;
            internalValueResult.gopBReference = this._gopBReference;
        }
        if (this._gopClosedCadence !== undefined) {
            hasAnyValues = true;
            internalValueResult.gopClosedCadence = this._gopClosedCadence;
        }
        if (this._gopNumBFrames !== undefined) {
            hasAnyValues = true;
            internalValueResult.gopNumBFrames = this._gopNumBFrames;
        }
        if (this._gopSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.gopSize = this._gopSize;
        }
        if (this._gopSizeUnits !== undefined) {
            hasAnyValues = true;
            internalValueResult.gopSizeUnits = this._gopSizeUnits;
        }
        if (this._level !== undefined) {
            hasAnyValues = true;
            internalValueResult.level = this._level;
        }
        if (this._lookAheadRateControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.lookAheadRateControl = this._lookAheadRateControl;
        }
        if (this._maxBitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxBitrate = this._maxBitrate;
        }
        if (this._minIInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.minIInterval = this._minIInterval;
        }
        if (this._numRefFrames !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRefFrames = this._numRefFrames;
        }
        if (this._parControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.parControl = this._parControl;
        }
        if (this._parDenominator !== undefined) {
            hasAnyValues = true;
            internalValueResult.parDenominator = this._parDenominator;
        }
        if (this._parNumerator !== undefined) {
            hasAnyValues = true;
            internalValueResult.parNumerator = this._parNumerator;
        }
        if (this._profile !== undefined) {
            hasAnyValues = true;
            internalValueResult.profile = this._profile;
        }
        if (this._qualityLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.qualityLevel = this._qualityLevel;
        }
        if (this._qvbrQualityLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.qvbrQualityLevel = this._qvbrQualityLevel;
        }
        if (this._rateControlMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.rateControlMode = this._rateControlMode;
        }
        if (this._scanType !== undefined) {
            hasAnyValues = true;
            internalValueResult.scanType = this._scanType;
        }
        if (this._sceneChangeDetect !== undefined) {
            hasAnyValues = true;
            internalValueResult.sceneChangeDetect = this._sceneChangeDetect;
        }
        if (this._slices !== undefined) {
            hasAnyValues = true;
            internalValueResult.slices = this._slices;
        }
        if (this._softness !== undefined) {
            hasAnyValues = true;
            internalValueResult.softness = this._softness;
        }
        if (this._spatialAq !== undefined) {
            hasAnyValues = true;
            internalValueResult.spatialAq = this._spatialAq;
        }
        if (this._subgopLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.subgopLength = this._subgopLength;
        }
        if (this._syntax !== undefined) {
            hasAnyValues = true;
            internalValueResult.syntax = this._syntax;
        }
        if (this._temporalAq !== undefined) {
            hasAnyValues = true;
            internalValueResult.temporalAq = this._temporalAq;
        }
        if (this._timecodeInsertion !== undefined) {
            hasAnyValues = true;
            internalValueResult.timecodeInsertion = this._timecodeInsertion;
        }
        if (this._filterSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.filterSettings = this._filterSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._adaptiveQuantization = undefined;
            this._afdSignaling = undefined;
            this._bitrate = undefined;
            this._bufFillPct = undefined;
            this._bufSize = undefined;
            this._colorMetadata = undefined;
            this._entropyEncoding = undefined;
            this._fixedAfd = undefined;
            this._flickerAq = undefined;
            this._forceFieldPictures = undefined;
            this._framerateControl = undefined;
            this._framerateDenominator = undefined;
            this._gopBReference = undefined;
            this._gopClosedCadence = undefined;
            this._gopNumBFrames = undefined;
            this._gopSize = undefined;
            this._gopSizeUnits = undefined;
            this._level = undefined;
            this._lookAheadRateControl = undefined;
            this._maxBitrate = undefined;
            this._minIInterval = undefined;
            this._numRefFrames = undefined;
            this._parControl = undefined;
            this._parDenominator = undefined;
            this._parNumerator = undefined;
            this._profile = undefined;
            this._qualityLevel = undefined;
            this._qvbrQualityLevel = undefined;
            this._rateControlMode = undefined;
            this._scanType = undefined;
            this._sceneChangeDetect = undefined;
            this._slices = undefined;
            this._softness = undefined;
            this._spatialAq = undefined;
            this._subgopLength = undefined;
            this._syntax = undefined;
            this._temporalAq = undefined;
            this._timecodeInsertion = undefined;
            this._filterSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._adaptiveQuantization = value.adaptiveQuantization;
            this._afdSignaling = value.afdSignaling;
            this._bitrate = value.bitrate;
            this._bufFillPct = value.bufFillPct;
            this._bufSize = value.bufSize;
            this._colorMetadata = value.colorMetadata;
            this._entropyEncoding = value.entropyEncoding;
            this._fixedAfd = value.fixedAfd;
            this._flickerAq = value.flickerAq;
            this._forceFieldPictures = value.forceFieldPictures;
            this._framerateControl = value.framerateControl;
            this._framerateDenominator = value.framerateDenominator;
            this._gopBReference = value.gopBReference;
            this._gopClosedCadence = value.gopClosedCadence;
            this._gopNumBFrames = value.gopNumBFrames;
            this._gopSize = value.gopSize;
            this._gopSizeUnits = value.gopSizeUnits;
            this._level = value.level;
            this._lookAheadRateControl = value.lookAheadRateControl;
            this._maxBitrate = value.maxBitrate;
            this._minIInterval = value.minIInterval;
            this._numRefFrames = value.numRefFrames;
            this._parControl = value.parControl;
            this._parDenominator = value.parDenominator;
            this._parNumerator = value.parNumerator;
            this._profile = value.profile;
            this._qualityLevel = value.qualityLevel;
            this._qvbrQualityLevel = value.qvbrQualityLevel;
            this._rateControlMode = value.rateControlMode;
            this._scanType = value.scanType;
            this._sceneChangeDetect = value.sceneChangeDetect;
            this._slices = value.slices;
            this._softness = value.softness;
            this._spatialAq = value.spatialAq;
            this._subgopLength = value.subgopLength;
            this._syntax = value.syntax;
            this._temporalAq = value.temporalAq;
            this._timecodeInsertion = value.timecodeInsertion;
            this._filterSettings.internalValue = value.filterSettings;
        }
    }
    get adaptiveQuantization() {
        return this.getStringAttribute('adaptive_quantization');
    }
    set adaptiveQuantization(value) {
        this._adaptiveQuantization = value;
    }
    resetAdaptiveQuantization() {
        this._adaptiveQuantization = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get adaptiveQuantizationInput() {
        return this._adaptiveQuantization;
    }
    get afdSignaling() {
        return this.getStringAttribute('afd_signaling');
    }
    set afdSignaling(value) {
        this._afdSignaling = value;
    }
    resetAfdSignaling() {
        this._afdSignaling = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get afdSignalingInput() {
        return this._afdSignaling;
    }
    get bitrate() {
        return this.getNumberAttribute('bitrate');
    }
    set bitrate(value) {
        this._bitrate = value;
    }
    resetBitrate() {
        this._bitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitrateInput() {
        return this._bitrate;
    }
    get bufFillPct() {
        return this.getNumberAttribute('buf_fill_pct');
    }
    set bufFillPct(value) {
        this._bufFillPct = value;
    }
    resetBufFillPct() {
        this._bufFillPct = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufFillPctInput() {
        return this._bufFillPct;
    }
    get bufSize() {
        return this.getNumberAttribute('buf_size');
    }
    set bufSize(value) {
        this._bufSize = value;
    }
    resetBufSize() {
        this._bufSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufSizeInput() {
        return this._bufSize;
    }
    get colorMetadata() {
        return this.getStringAttribute('color_metadata');
    }
    set colorMetadata(value) {
        this._colorMetadata = value;
    }
    resetColorMetadata() {
        this._colorMetadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get colorMetadataInput() {
        return this._colorMetadata;
    }
    get entropyEncoding() {
        return this.getStringAttribute('entropy_encoding');
    }
    set entropyEncoding(value) {
        this._entropyEncoding = value;
    }
    resetEntropyEncoding() {
        this._entropyEncoding = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get entropyEncodingInput() {
        return this._entropyEncoding;
    }
    get fixedAfd() {
        return this.getStringAttribute('fixed_afd');
    }
    set fixedAfd(value) {
        this._fixedAfd = value;
    }
    resetFixedAfd() {
        this._fixedAfd = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fixedAfdInput() {
        return this._fixedAfd;
    }
    get flickerAq() {
        return this.getStringAttribute('flicker_aq');
    }
    set flickerAq(value) {
        this._flickerAq = value;
    }
    resetFlickerAq() {
        this._flickerAq = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get flickerAqInput() {
        return this._flickerAq;
    }
    get forceFieldPictures() {
        return this.getStringAttribute('force_field_pictures');
    }
    set forceFieldPictures(value) {
        this._forceFieldPictures = value;
    }
    resetForceFieldPictures() {
        this._forceFieldPictures = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forceFieldPicturesInput() {
        return this._forceFieldPictures;
    }
    get framerateControl() {
        return this.getStringAttribute('framerate_control');
    }
    set framerateControl(value) {
        this._framerateControl = value;
    }
    resetFramerateControl() {
        this._framerateControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get framerateControlInput() {
        return this._framerateControl;
    }
    get framerateDenominator() {
        return this.getNumberAttribute('framerate_denominator');
    }
    set framerateDenominator(value) {
        this._framerateDenominator = value;
    }
    resetFramerateDenominator() {
        this._framerateDenominator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get framerateDenominatorInput() {
        return this._framerateDenominator;
    }
    get gopBReference() {
        return this.getStringAttribute('gop_b_reference');
    }
    set gopBReference(value) {
        this._gopBReference = value;
    }
    resetGopBReference() {
        this._gopBReference = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gopBReferenceInput() {
        return this._gopBReference;
    }
    get gopClosedCadence() {
        return this.getNumberAttribute('gop_closed_cadence');
    }
    set gopClosedCadence(value) {
        this._gopClosedCadence = value;
    }
    resetGopClosedCadence() {
        this._gopClosedCadence = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gopClosedCadenceInput() {
        return this._gopClosedCadence;
    }
    get gopNumBFrames() {
        return this.getNumberAttribute('gop_num_b_frames');
    }
    set gopNumBFrames(value) {
        this._gopNumBFrames = value;
    }
    resetGopNumBFrames() {
        this._gopNumBFrames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gopNumBFramesInput() {
        return this._gopNumBFrames;
    }
    get gopSize() {
        return this.getNumberAttribute('gop_size');
    }
    set gopSize(value) {
        this._gopSize = value;
    }
    resetGopSize() {
        this._gopSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gopSizeInput() {
        return this._gopSize;
    }
    get gopSizeUnits() {
        return this.getStringAttribute('gop_size_units');
    }
    set gopSizeUnits(value) {
        this._gopSizeUnits = value;
    }
    resetGopSizeUnits() {
        this._gopSizeUnits = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gopSizeUnitsInput() {
        return this._gopSizeUnits;
    }
    get level() {
        return this.getStringAttribute('level');
    }
    set level(value) {
        this._level = value;
    }
    resetLevel() {
        this._level = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get levelInput() {
        return this._level;
    }
    get lookAheadRateControl() {
        return this.getStringAttribute('look_ahead_rate_control');
    }
    set lookAheadRateControl(value) {
        this._lookAheadRateControl = value;
    }
    resetLookAheadRateControl() {
        this._lookAheadRateControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lookAheadRateControlInput() {
        return this._lookAheadRateControl;
    }
    get maxBitrate() {
        return this.getNumberAttribute('max_bitrate');
    }
    set maxBitrate(value) {
        this._maxBitrate = value;
    }
    resetMaxBitrate() {
        this._maxBitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxBitrateInput() {
        return this._maxBitrate;
    }
    get minIInterval() {
        return this.getNumberAttribute('min_i_interval');
    }
    set minIInterval(value) {
        this._minIInterval = value;
    }
    resetMinIInterval() {
        this._minIInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minIIntervalInput() {
        return this._minIInterval;
    }
    get numRefFrames() {
        return this.getNumberAttribute('num_ref_frames');
    }
    set numRefFrames(value) {
        this._numRefFrames = value;
    }
    resetNumRefFrames() {
        this._numRefFrames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numRefFramesInput() {
        return this._numRefFrames;
    }
    get parControl() {
        return this.getStringAttribute('par_control');
    }
    set parControl(value) {
        this._parControl = value;
    }
    resetParControl() {
        this._parControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parControlInput() {
        return this._parControl;
    }
    get parDenominator() {
        return this.getNumberAttribute('par_denominator');
    }
    set parDenominator(value) {
        this._parDenominator = value;
    }
    resetParDenominator() {
        this._parDenominator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parDenominatorInput() {
        return this._parDenominator;
    }
    get parNumerator() {
        return this.getNumberAttribute('par_numerator');
    }
    set parNumerator(value) {
        this._parNumerator = value;
    }
    resetParNumerator() {
        this._parNumerator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parNumeratorInput() {
        return this._parNumerator;
    }
    get profile() {
        return this.getStringAttribute('profile');
    }
    set profile(value) {
        this._profile = value;
    }
    resetProfile() {
        this._profile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get profileInput() {
        return this._profile;
    }
    get qualityLevel() {
        return this.getStringAttribute('quality_level');
    }
    set qualityLevel(value) {
        this._qualityLevel = value;
    }
    resetQualityLevel() {
        this._qualityLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get qualityLevelInput() {
        return this._qualityLevel;
    }
    get qvbrQualityLevel() {
        return this.getNumberAttribute('qvbr_quality_level');
    }
    set qvbrQualityLevel(value) {
        this._qvbrQualityLevel = value;
    }
    resetQvbrQualityLevel() {
        this._qvbrQualityLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get qvbrQualityLevelInput() {
        return this._qvbrQualityLevel;
    }
    get rateControlMode() {
        return this.getStringAttribute('rate_control_mode');
    }
    set rateControlMode(value) {
        this._rateControlMode = value;
    }
    resetRateControlMode() {
        this._rateControlMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rateControlModeInput() {
        return this._rateControlMode;
    }
    get scanType() {
        return this.getStringAttribute('scan_type');
    }
    set scanType(value) {
        this._scanType = value;
    }
    resetScanType() {
        this._scanType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scanTypeInput() {
        return this._scanType;
    }
    get sceneChangeDetect() {
        return this.getStringAttribute('scene_change_detect');
    }
    set sceneChangeDetect(value) {
        this._sceneChangeDetect = value;
    }
    resetSceneChangeDetect() {
        this._sceneChangeDetect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sceneChangeDetectInput() {
        return this._sceneChangeDetect;
    }
    get slices() {
        return this.getNumberAttribute('slices');
    }
    set slices(value) {
        this._slices = value;
    }
    resetSlices() {
        this._slices = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get slicesInput() {
        return this._slices;
    }
    get softness() {
        return this.getNumberAttribute('softness');
    }
    set softness(value) {
        this._softness = value;
    }
    resetSoftness() {
        this._softness = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get softnessInput() {
        return this._softness;
    }
    get spatialAq() {
        return this.getStringAttribute('spatial_aq');
    }
    set spatialAq(value) {
        this._spatialAq = value;
    }
    resetSpatialAq() {
        this._spatialAq = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spatialAqInput() {
        return this._spatialAq;
    }
    get subgopLength() {
        return this.getStringAttribute('subgop_length');
    }
    set subgopLength(value) {
        this._subgopLength = value;
    }
    resetSubgopLength() {
        this._subgopLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subgopLengthInput() {
        return this._subgopLength;
    }
    get syntax() {
        return this.getStringAttribute('syntax');
    }
    set syntax(value) {
        this._syntax = value;
    }
    resetSyntax() {
        this._syntax = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syntaxInput() {
        return this._syntax;
    }
    get temporalAq() {
        return this.getStringAttribute('temporal_aq');
    }
    set temporalAq(value) {
        this._temporalAq = value;
    }
    resetTemporalAq() {
        this._temporalAq = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get temporalAqInput() {
        return this._temporalAq;
    }
    get timecodeInsertion() {
        return this.getStringAttribute('timecode_insertion');
    }
    set timecodeInsertion(value) {
        this._timecodeInsertion = value;
    }
    resetTimecodeInsertion() {
        this._timecodeInsertion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timecodeInsertionInput() {
        return this._timecodeInsertion;
    }
    get filterSettings() {
        return this._filterSettings;
    }
    putFilterSettings(value) {
        this._filterSettings.internalValue = value;
    }
    resetFilterSettings() {
        this._filterSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterSettingsInput() {
        return this._filterSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference;
_70 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference[_70] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        frame_capture_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsToTerraform(struct.frameCaptureSettings),
        h_264_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsToTerraform(struct.h264Settings),
    };
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsToTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // frame_capture_settings - computed: false, optional: true, required: false
        this._frameCaptureSettings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference(this, "frame_capture_settings");
        // h_264_settings - computed: false, optional: true, required: false
        this._h264Settings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference(this, "h_264_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._frameCaptureSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.frameCaptureSettings = this._frameCaptureSettings?.internalValue;
        }
        if (this._h264Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.h264Settings = this._h264Settings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._frameCaptureSettings.internalValue = undefined;
            this._h264Settings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._frameCaptureSettings.internalValue = value.frameCaptureSettings;
            this._h264Settings.internalValue = value.h264Settings;
        }
    }
    get frameCaptureSettings() {
        return this._frameCaptureSettings;
    }
    putFrameCaptureSettings(value) {
        this._frameCaptureSettings.internalValue = value;
    }
    resetFrameCaptureSettings() {
        this._frameCaptureSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get frameCaptureSettingsInput() {
        return this._frameCaptureSettings.internalValue;
    }
    get h264Settings() {
        return this._h264Settings;
    }
    putH264Settings(value) {
        this._h264Settings.internalValue = value;
    }
    resetH264Settings() {
        this._h264Settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get h264SettingsInput() {
        return this._h264Settings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference;
_71 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference[_71] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference", version: "10.0.12" };
function medialiveChannelEncoderSettingsVideoDescriptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        height: cdktf.numberToTerraform(struct.height),
        name: cdktf.stringToTerraform(struct.name),
        respond_to_afd: cdktf.stringToTerraform(struct.respondToAfd),
        scaling_behavior: cdktf.stringToTerraform(struct.scalingBehavior),
        sharpness: cdktf.numberToTerraform(struct.sharpness),
        width: cdktf.numberToTerraform(struct.width),
        codec_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsToTerraform(struct.codecSettings),
    };
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsToTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // codec_settings - computed: false, optional: true, required: false
        this._codecSettings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference(this, "codec_settings");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._height !== undefined) {
            hasAnyValues = true;
            internalValueResult.height = this._height;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._respondToAfd !== undefined) {
            hasAnyValues = true;
            internalValueResult.respondToAfd = this._respondToAfd;
        }
        if (this._scalingBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.scalingBehavior = this._scalingBehavior;
        }
        if (this._sharpness !== undefined) {
            hasAnyValues = true;
            internalValueResult.sharpness = this._sharpness;
        }
        if (this._width !== undefined) {
            hasAnyValues = true;
            internalValueResult.width = this._width;
        }
        if (this._codecSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.codecSettings = this._codecSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._height = undefined;
            this._name = undefined;
            this._respondToAfd = undefined;
            this._scalingBehavior = undefined;
            this._sharpness = undefined;
            this._width = undefined;
            this._codecSettings.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._height = value.height;
            this._name = value.name;
            this._respondToAfd = value.respondToAfd;
            this._scalingBehavior = value.scalingBehavior;
            this._sharpness = value.sharpness;
            this._width = value.width;
            this._codecSettings.internalValue = value.codecSettings;
        }
    }
    get height() {
        return this.getNumberAttribute('height');
    }
    set height(value) {
        this._height = value;
    }
    resetHeight() {
        this._height = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get heightInput() {
        return this._height;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get respondToAfd() {
        return this.getStringAttribute('respond_to_afd');
    }
    set respondToAfd(value) {
        this._respondToAfd = value;
    }
    resetRespondToAfd() {
        this._respondToAfd = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get respondToAfdInput() {
        return this._respondToAfd;
    }
    get scalingBehavior() {
        return this.getStringAttribute('scaling_behavior');
    }
    set scalingBehavior(value) {
        this._scalingBehavior = value;
    }
    resetScalingBehavior() {
        this._scalingBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scalingBehaviorInput() {
        return this._scalingBehavior;
    }
    get sharpness() {
        return this.getNumberAttribute('sharpness');
    }
    set sharpness(value) {
        this._sharpness = value;
    }
    resetSharpness() {
        this._sharpness = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sharpnessInput() {
        return this._sharpness;
    }
    get width() {
        return this.getNumberAttribute('width');
    }
    set width(value) {
        this._width = value;
    }
    resetWidth() {
        this._width = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get widthInput() {
        return this._width;
    }
    get codecSettings() {
        return this._codecSettings;
    }
    putCodecSettings(value) {
        this._codecSettings.internalValue = value;
    }
    resetCodecSettings() {
        this._codecSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codecSettingsInput() {
        return this._codecSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference;
_72 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference[_72] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference", version: "10.0.12" };
class MedialiveChannelEncoderSettingsVideoDescriptionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsList = MedialiveChannelEncoderSettingsVideoDescriptionsList;
_73 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsList[_73] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsList", version: "10.0.12" };
function medialiveChannelEncoderSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_descriptions: cdktf.listMapper(medialiveChannelEncoderSettingsAudioDescriptionsToTerraform, true)(struct.audioDescriptions),
        output_groups: cdktf.listMapper(medialiveChannelEncoderSettingsOutputGroupsToTerraform, true)(struct.outputGroups),
        timecode_config: medialiveChannelEncoderSettingsTimecodeConfigToTerraform(struct.timecodeConfig),
        video_descriptions: cdktf.listMapper(medialiveChannelEncoderSettingsVideoDescriptionsToTerraform, true)(struct.videoDescriptions),
    };
}
exports.medialiveChannelEncoderSettingsToTerraform = medialiveChannelEncoderSettingsToTerraform;
class MedialiveChannelEncoderSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // audio_descriptions - computed: false, optional: true, required: false
        this._audioDescriptions = new MedialiveChannelEncoderSettingsAudioDescriptionsList(this, "audio_descriptions", true);
        // output_groups - computed: false, optional: false, required: true
        this._outputGroups = new MedialiveChannelEncoderSettingsOutputGroupsList(this, "output_groups", false);
        // timecode_config - computed: false, optional: false, required: true
        this._timecodeConfig = new MedialiveChannelEncoderSettingsTimecodeConfigOutputReference(this, "timecode_config");
        // video_descriptions - computed: false, optional: true, required: false
        this._videoDescriptions = new MedialiveChannelEncoderSettingsVideoDescriptionsList(this, "video_descriptions", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioDescriptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioDescriptions = this._audioDescriptions?.internalValue;
        }
        if (this._outputGroups?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputGroups = this._outputGroups?.internalValue;
        }
        if (this._timecodeConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timecodeConfig = this._timecodeConfig?.internalValue;
        }
        if (this._videoDescriptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.videoDescriptions = this._videoDescriptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioDescriptions.internalValue = undefined;
            this._outputGroups.internalValue = undefined;
            this._timecodeConfig.internalValue = undefined;
            this._videoDescriptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioDescriptions.internalValue = value.audioDescriptions;
            this._outputGroups.internalValue = value.outputGroups;
            this._timecodeConfig.internalValue = value.timecodeConfig;
            this._videoDescriptions.internalValue = value.videoDescriptions;
        }
    }
    get audioDescriptions() {
        return this._audioDescriptions;
    }
    putAudioDescriptions(value) {
        this._audioDescriptions.internalValue = value;
    }
    resetAudioDescriptions() {
        this._audioDescriptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioDescriptionsInput() {
        return this._audioDescriptions.internalValue;
    }
    get outputGroups() {
        return this._outputGroups;
    }
    putOutputGroups(value) {
        this._outputGroups.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get outputGroupsInput() {
        return this._outputGroups.internalValue;
    }
    get timecodeConfig() {
        return this._timecodeConfig;
    }
    putTimecodeConfig(value) {
        this._timecodeConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get timecodeConfigInput() {
        return this._timecodeConfig.internalValue;
    }
    get videoDescriptions() {
        return this._videoDescriptions;
    }
    putVideoDescriptions(value) {
        this._videoDescriptions.internalValue = value;
    }
    resetVideoDescriptions() {
        this._videoDescriptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get videoDescriptionsInput() {
        return this._videoDescriptions.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputReference = MedialiveChannelEncoderSettingsOutputReference;
_74 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputReference[_74] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_selector_name: cdktf.stringToTerraform(struct.audioSelectorName),
        audio_silence_threshold_msec: cdktf.numberToTerraform(struct.audioSilenceThresholdMsec),
    };
}
exports.medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsToTerraform = medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsToTerraform;
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioSelectorName !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioSelectorName = this._audioSelectorName;
        }
        if (this._audioSilenceThresholdMsec !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioSilenceThresholdMsec = this._audioSilenceThresholdMsec;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioSelectorName = undefined;
            this._audioSilenceThresholdMsec = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioSelectorName = value.audioSelectorName;
            this._audioSilenceThresholdMsec = value.audioSilenceThresholdMsec;
        }
    }
    get audioSelectorName() {
        return this.getStringAttribute('audio_selector_name');
    }
    set audioSelectorName(value) {
        this._audioSelectorName = value;
    }
    // Temporarily expose input value. Use with caution.
    get audioSelectorNameInput() {
        return this._audioSelectorName;
    }
    get audioSilenceThresholdMsec() {
        return this.getNumberAttribute('audio_silence_threshold_msec');
    }
    set audioSilenceThresholdMsec(value) {
        this._audioSilenceThresholdMsec = value;
    }
    resetAudioSilenceThresholdMsec() {
        this._audioSilenceThresholdMsec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioSilenceThresholdMsecInput() {
        return this._audioSilenceThresholdMsec;
    }
}
exports.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference;
_75 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference[_75] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        input_loss_threshold_msec: cdktf.numberToTerraform(struct.inputLossThresholdMsec),
    };
}
exports.medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsToTerraform = medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsToTerraform;
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._inputLossThresholdMsec !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputLossThresholdMsec = this._inputLossThresholdMsec;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._inputLossThresholdMsec = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._inputLossThresholdMsec = value.inputLossThresholdMsec;
        }
    }
    get inputLossThresholdMsec() {
        return this.getNumberAttribute('input_loss_threshold_msec');
    }
    set inputLossThresholdMsec(value) {
        this._inputLossThresholdMsec = value;
    }
    resetInputLossThresholdMsec() {
        this._inputLossThresholdMsec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputLossThresholdMsecInput() {
        return this._inputLossThresholdMsec;
    }
}
exports.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputReference = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputReference;
_76 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputReference[_76] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        black_detect_threshold: cdktf.numberToTerraform(struct.blackDetectThreshold),
        video_black_threshold_msec: cdktf.numberToTerraform(struct.videoBlackThresholdMsec),
    };
}
exports.medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsToTerraform = medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsToTerraform;
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._blackDetectThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.blackDetectThreshold = this._blackDetectThreshold;
        }
        if (this._videoBlackThresholdMsec !== undefined) {
            hasAnyValues = true;
            internalValueResult.videoBlackThresholdMsec = this._videoBlackThresholdMsec;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._blackDetectThreshold = undefined;
            this._videoBlackThresholdMsec = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._blackDetectThreshold = value.blackDetectThreshold;
            this._videoBlackThresholdMsec = value.videoBlackThresholdMsec;
        }
    }
    get blackDetectThreshold() {
        return this.getNumberAttribute('black_detect_threshold');
    }
    set blackDetectThreshold(value) {
        this._blackDetectThreshold = value;
    }
    resetBlackDetectThreshold() {
        this._blackDetectThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get blackDetectThresholdInput() {
        return this._blackDetectThreshold;
    }
    get videoBlackThresholdMsec() {
        return this.getNumberAttribute('video_black_threshold_msec');
    }
    set videoBlackThresholdMsec(value) {
        this._videoBlackThresholdMsec = value;
    }
    resetVideoBlackThresholdMsec() {
        this._videoBlackThresholdMsec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get videoBlackThresholdMsecInput() {
        return this._videoBlackThresholdMsec;
    }
}
exports.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputReference = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputReference;
_77 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputReference[_77] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_silence_settings: medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsToTerraform(struct.audioSilenceSettings),
        input_loss_settings: medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsToTerraform(struct.inputLossSettings),
        video_black_settings: medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsToTerraform(struct.videoBlackSettings),
    };
}
exports.medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsToTerraform = medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsToTerraform;
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // audio_silence_settings - computed: false, optional: true, required: false
        this._audioSilenceSettings = new MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference(this, "audio_silence_settings");
        // input_loss_settings - computed: false, optional: true, required: false
        this._inputLossSettings = new MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputReference(this, "input_loss_settings");
        // video_black_settings - computed: false, optional: true, required: false
        this._videoBlackSettings = new MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputReference(this, "video_black_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioSilenceSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioSilenceSettings = this._audioSilenceSettings?.internalValue;
        }
        if (this._inputLossSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputLossSettings = this._inputLossSettings?.internalValue;
        }
        if (this._videoBlackSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.videoBlackSettings = this._videoBlackSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioSilenceSettings.internalValue = undefined;
            this._inputLossSettings.internalValue = undefined;
            this._videoBlackSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioSilenceSettings.internalValue = value.audioSilenceSettings;
            this._inputLossSettings.internalValue = value.inputLossSettings;
            this._videoBlackSettings.internalValue = value.videoBlackSettings;
        }
    }
    get audioSilenceSettings() {
        return this._audioSilenceSettings;
    }
    putAudioSilenceSettings(value) {
        this._audioSilenceSettings.internalValue = value;
    }
    resetAudioSilenceSettings() {
        this._audioSilenceSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioSilenceSettingsInput() {
        return this._audioSilenceSettings.internalValue;
    }
    get inputLossSettings() {
        return this._inputLossSettings;
    }
    putInputLossSettings(value) {
        this._inputLossSettings.internalValue = value;
    }
    resetInputLossSettings() {
        this._inputLossSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputLossSettingsInput() {
        return this._inputLossSettings.internalValue;
    }
    get videoBlackSettings() {
        return this._videoBlackSettings;
    }
    putVideoBlackSettings(value) {
        this._videoBlackSettings.internalValue = value;
    }
    resetVideoBlackSettings() {
        this._videoBlackSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get videoBlackSettingsInput() {
        return this._videoBlackSettings.internalValue;
    }
}
exports.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputReference = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputReference;
_78 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputReference[_78] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        failover_condition_settings: medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsToTerraform(struct.failoverConditionSettings),
    };
}
exports.medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionToTerraform = medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionToTerraform;
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // failover_condition_settings - computed: false, optional: true, required: false
        this._failoverConditionSettings = new MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputReference(this, "failover_condition_settings");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._failoverConditionSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.failoverConditionSettings = this._failoverConditionSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._failoverConditionSettings.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._failoverConditionSettings.internalValue = value.failoverConditionSettings;
        }
    }
    get failoverConditionSettings() {
        return this._failoverConditionSettings;
    }
    putFailoverConditionSettings(value) {
        this._failoverConditionSettings.internalValue = value;
    }
    resetFailoverConditionSettings() {
        this._failoverConditionSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get failoverConditionSettingsInput() {
        return this._failoverConditionSettings.internalValue;
    }
}
exports.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionOutputReference = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionOutputReference;
_79 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionOutputReference[_79] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionOutputReference", version: "10.0.12" };
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionList = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionList;
_80 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionList[_80] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionList", version: "10.0.12" };
function medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        error_clear_time_msec: cdktf.numberToTerraform(struct.errorClearTimeMsec),
        input_preference: cdktf.stringToTerraform(struct.inputPreference),
        secondary_input_id: cdktf.stringToTerraform(struct.secondaryInputId),
        failover_condition: cdktf.listMapper(medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionToTerraform, true)(struct.failoverCondition),
    };
}
exports.medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsToTerraform = medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsToTerraform;
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // failover_condition - computed: false, optional: true, required: false
        this._failoverCondition = new MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionList(this, "failover_condition", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._errorClearTimeMsec !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorClearTimeMsec = this._errorClearTimeMsec;
        }
        if (this._inputPreference !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputPreference = this._inputPreference;
        }
        if (this._secondaryInputId !== undefined) {
            hasAnyValues = true;
            internalValueResult.secondaryInputId = this._secondaryInputId;
        }
        if (this._failoverCondition?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.failoverCondition = this._failoverCondition?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._errorClearTimeMsec = undefined;
            this._inputPreference = undefined;
            this._secondaryInputId = undefined;
            this._failoverCondition.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._errorClearTimeMsec = value.errorClearTimeMsec;
            this._inputPreference = value.inputPreference;
            this._secondaryInputId = value.secondaryInputId;
            this._failoverCondition.internalValue = value.failoverCondition;
        }
    }
    get errorClearTimeMsec() {
        return this.getNumberAttribute('error_clear_time_msec');
    }
    set errorClearTimeMsec(value) {
        this._errorClearTimeMsec = value;
    }
    resetErrorClearTimeMsec() {
        this._errorClearTimeMsec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorClearTimeMsecInput() {
        return this._errorClearTimeMsec;
    }
    get inputPreference() {
        return this.getStringAttribute('input_preference');
    }
    set inputPreference(value) {
        this._inputPreference = value;
    }
    resetInputPreference() {
        this._inputPreference = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputPreferenceInput() {
        return this._inputPreference;
    }
    get secondaryInputId() {
        return this.getStringAttribute('secondary_input_id');
    }
    set secondaryInputId(value) {
        this._secondaryInputId = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondaryInputIdInput() {
        return this._secondaryInputId;
    }
    get failoverCondition() {
        return this._failoverCondition;
    }
    putFailoverCondition(value) {
        this._failoverCondition.internalValue = value;
    }
    resetFailoverCondition() {
        this._failoverCondition.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get failoverConditionInput() {
        return this._failoverCondition.internalValue;
    }
}
exports.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsOutputReference = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsOutputReference;
_81 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsOutputReference[_81] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        group_id: cdktf.stringToTerraform(struct.groupId),
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionToTerraform = medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._groupId !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupId = this._groupId;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._groupId = undefined;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._groupId = value.groupId;
            this._name = value.name;
        }
    }
    get groupId() {
        return this.getStringAttribute('group_id');
    }
    set groupId(value) {
        this._groupId = value;
    }
    // Temporarily expose input value. Use with caution.
    get groupIdInput() {
        return this._groupId;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputReference = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputReference;
_82 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputReference[_82] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        language_code: cdktf.stringToTerraform(struct.languageCode),
        language_selection_policy: cdktf.stringToTerraform(struct.languageSelectionPolicy),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionToTerraform = medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._languageCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.languageCode = this._languageCode;
        }
        if (this._languageSelectionPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.languageSelectionPolicy = this._languageSelectionPolicy;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._languageCode = undefined;
            this._languageSelectionPolicy = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._languageCode = value.languageCode;
            this._languageSelectionPolicy = value.languageSelectionPolicy;
        }
    }
    get languageCode() {
        return this.getStringAttribute('language_code');
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    // Temporarily expose input value. Use with caution.
    get languageCodeInput() {
        return this._languageCode;
    }
    get languageSelectionPolicy() {
        return this.getStringAttribute('language_selection_policy');
    }
    set languageSelectionPolicy(value) {
        this._languageSelectionPolicy = value;
    }
    resetLanguageSelectionPolicy() {
        this._languageSelectionPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get languageSelectionPolicyInput() {
        return this._languageSelectionPolicy;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputReference = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputReference;
_83 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputReference[_83] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        pid: cdktf.numberToTerraform(struct.pid),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionToTerraform = medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._pid !== undefined) {
            hasAnyValues = true;
            internalValueResult.pid = this._pid;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._pid = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._pid = value.pid;
        }
    }
    get pid() {
        return this.getNumberAttribute('pid');
    }
    set pid(value) {
        this._pid = value;
    }
    // Temporarily expose input value. Use with caution.
    get pidInput() {
        return this._pid;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputReference = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputReference;
_84 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputReference[_84] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        track: cdktf.numberToTerraform(struct.track),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackToTerraform = medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._track !== undefined) {
            hasAnyValues = true;
            internalValueResult.track = this._track;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._track = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._track = value.track;
        }
    }
    get track() {
        return this.getNumberAttribute('track');
    }
    set track(value) {
        this._track = value;
    }
    // Temporarily expose input value. Use with caution.
    get trackInput() {
        return this._track;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutputReference = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutputReference;
_85 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutputReference[_85] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutputReference", version: "10.0.12" };
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackList = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackList;
_86 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackList[_86] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackList", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        track: cdktf.listMapper(medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackToTerraform, true)(struct.track),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionToTerraform = medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // track - computed: false, optional: false, required: true
        this._track = new MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrackList(this, "track", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._track?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.track = this._track?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._track.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._track.internalValue = value.track;
        }
    }
    get track() {
        return this._track;
    }
    putTrack(value) {
        this._track.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get trackInput() {
        return this._track.internalValue;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputReference = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputReference;
_87 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputReference[_87] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_hls_rendition_selection: medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionToTerraform(struct.audioHlsRenditionSelection),
        audio_language_selection: medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionToTerraform(struct.audioLanguageSelection),
        audio_pid_selection: medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionToTerraform(struct.audioPidSelection),
        audio_track_selection: medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionToTerraform(struct.audioTrackSelection),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsToTerraform = medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // audio_hls_rendition_selection - computed: false, optional: true, required: false
        this._audioHlsRenditionSelection = new MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputReference(this, "audio_hls_rendition_selection");
        // audio_language_selection - computed: false, optional: true, required: false
        this._audioLanguageSelection = new MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputReference(this, "audio_language_selection");
        // audio_pid_selection - computed: false, optional: true, required: false
        this._audioPidSelection = new MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputReference(this, "audio_pid_selection");
        // audio_track_selection - computed: false, optional: true, required: false
        this._audioTrackSelection = new MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputReference(this, "audio_track_selection");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioHlsRenditionSelection?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioHlsRenditionSelection = this._audioHlsRenditionSelection?.internalValue;
        }
        if (this._audioLanguageSelection?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioLanguageSelection = this._audioLanguageSelection?.internalValue;
        }
        if (this._audioPidSelection?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioPidSelection = this._audioPidSelection?.internalValue;
        }
        if (this._audioTrackSelection?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioTrackSelection = this._audioTrackSelection?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioHlsRenditionSelection.internalValue = undefined;
            this._audioLanguageSelection.internalValue = undefined;
            this._audioPidSelection.internalValue = undefined;
            this._audioTrackSelection.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioHlsRenditionSelection.internalValue = value.audioHlsRenditionSelection;
            this._audioLanguageSelection.internalValue = value.audioLanguageSelection;
            this._audioPidSelection.internalValue = value.audioPidSelection;
            this._audioTrackSelection.internalValue = value.audioTrackSelection;
        }
    }
    get audioHlsRenditionSelection() {
        return this._audioHlsRenditionSelection;
    }
    putAudioHlsRenditionSelection(value) {
        this._audioHlsRenditionSelection.internalValue = value;
    }
    resetAudioHlsRenditionSelection() {
        this._audioHlsRenditionSelection.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioHlsRenditionSelectionInput() {
        return this._audioHlsRenditionSelection.internalValue;
    }
    get audioLanguageSelection() {
        return this._audioLanguageSelection;
    }
    putAudioLanguageSelection(value) {
        this._audioLanguageSelection.internalValue = value;
    }
    resetAudioLanguageSelection() {
        this._audioLanguageSelection.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioLanguageSelectionInput() {
        return this._audioLanguageSelection.internalValue;
    }
    get audioPidSelection() {
        return this._audioPidSelection;
    }
    putAudioPidSelection(value) {
        this._audioPidSelection.internalValue = value;
    }
    resetAudioPidSelection() {
        this._audioPidSelection.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioPidSelectionInput() {
        return this._audioPidSelection.internalValue;
    }
    get audioTrackSelection() {
        return this._audioTrackSelection;
    }
    putAudioTrackSelection(value) {
        this._audioTrackSelection.internalValue = value;
    }
    resetAudioTrackSelection() {
        this._audioTrackSelection.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioTrackSelectionInput() {
        return this._audioTrackSelection.internalValue;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsOutputReference = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsOutputReference;
_88 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsOutputReference[_88] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsAudioSelectorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        selector_settings: medialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsToTerraform(struct.selectorSettings),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsAudioSelectorToTerraform = medialiveChannelInputAttachmentsInputSettingsAudioSelectorToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // selector_settings - computed: false, optional: true, required: false
        this._selectorSettings = new MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsOutputReference(this, "selector_settings");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._selectorSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.selectorSettings = this._selectorSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._selectorSettings.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._selectorSettings.internalValue = value.selectorSettings;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get selectorSettings() {
        return this._selectorSettings;
    }
    putSelectorSettings(value) {
        this._selectorSettings.internalValue = value;
    }
    resetSelectorSettings() {
        this._selectorSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get selectorSettingsInput() {
        return this._selectorSettings.internalValue;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorOutputReference = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorOutputReference;
_89 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsAudioSelectorOutputReference[_89] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorOutputReference", version: "10.0.12" };
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelInputAttachmentsInputSettingsAudioSelectorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorList = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorList;
_90 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsAudioSelectorList[_90] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorList", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsHlsInputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bandwidth: cdktf.numberToTerraform(struct.bandwidth),
        buffer_segments: cdktf.numberToTerraform(struct.bufferSegments),
        retries: cdktf.numberToTerraform(struct.retries),
        retry_interval: cdktf.numberToTerraform(struct.retryInterval),
        scte_35_source: cdktf.stringToTerraform(struct.scte35Source),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsHlsInputSettingsToTerraform = medialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsHlsInputSettingsToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsHlsInputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bandwidth !== undefined) {
            hasAnyValues = true;
            internalValueResult.bandwidth = this._bandwidth;
        }
        if (this._bufferSegments !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferSegments = this._bufferSegments;
        }
        if (this._retries !== undefined) {
            hasAnyValues = true;
            internalValueResult.retries = this._retries;
        }
        if (this._retryInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryInterval = this._retryInterval;
        }
        if (this._scte35Source !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte35Source = this._scte35Source;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bandwidth = undefined;
            this._bufferSegments = undefined;
            this._retries = undefined;
            this._retryInterval = undefined;
            this._scte35Source = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bandwidth = value.bandwidth;
            this._bufferSegments = value.bufferSegments;
            this._retries = value.retries;
            this._retryInterval = value.retryInterval;
            this._scte35Source = value.scte35Source;
        }
    }
    get bandwidth() {
        return this.getNumberAttribute('bandwidth');
    }
    set bandwidth(value) {
        this._bandwidth = value;
    }
    resetBandwidth() {
        this._bandwidth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bandwidthInput() {
        return this._bandwidth;
    }
    get bufferSegments() {
        return this.getNumberAttribute('buffer_segments');
    }
    set bufferSegments(value) {
        this._bufferSegments = value;
    }
    resetBufferSegments() {
        this._bufferSegments = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferSegmentsInput() {
        return this._bufferSegments;
    }
    get retries() {
        return this.getNumberAttribute('retries');
    }
    set retries(value) {
        this._retries = value;
    }
    resetRetries() {
        this._retries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retriesInput() {
        return this._retries;
    }
    get retryInterval() {
        return this.getNumberAttribute('retry_interval');
    }
    set retryInterval(value) {
        this._retryInterval = value;
    }
    resetRetryInterval() {
        this._retryInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryIntervalInput() {
        return this._retryInterval;
    }
    get scte35Source() {
        return this.getStringAttribute('scte_35_source');
    }
    set scte35Source(value) {
        this._scte35Source = value;
    }
    resetScte35Source() {
        this._scte35Source = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte35SourceInput() {
        return this._scte35Source;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsHlsInputSettingsOutputReference = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsHlsInputSettingsOutputReference;
_91 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsHlsInputSettingsOutputReference[_91] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsHlsInputSettingsOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        server_validation: cdktf.stringToTerraform(struct.serverValidation),
        hls_input_settings: medialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsHlsInputSettingsToTerraform(struct.hlsInputSettings),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsToTerraform = medialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // hls_input_settings - computed: false, optional: true, required: false
        this._hlsInputSettings = new MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsHlsInputSettingsOutputReference(this, "hls_input_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._serverValidation !== undefined) {
            hasAnyValues = true;
            internalValueResult.serverValidation = this._serverValidation;
        }
        if (this._hlsInputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsInputSettings = this._hlsInputSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._serverValidation = undefined;
            this._hlsInputSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._serverValidation = value.serverValidation;
            this._hlsInputSettings.internalValue = value.hlsInputSettings;
        }
    }
    get serverValidation() {
        return this.getStringAttribute('server_validation');
    }
    set serverValidation(value) {
        this._serverValidation = value;
    }
    resetServerValidation() {
        this._serverValidation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverValidationInput() {
        return this._serverValidation;
    }
    get hlsInputSettings() {
        return this._hlsInputSettings;
    }
    putHlsInputSettings(value) {
        this._hlsInputSettings.internalValue = value;
    }
    resetHlsInputSettings() {
        this._hlsInputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsInputSettingsInput() {
        return this._hlsInputSettings.internalValue;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsOutputReference = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsOutputReference;
_92 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsOutputReference[_92] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        source_ancillary_channel_number: cdktf.numberToTerraform(struct.sourceAncillaryChannelNumber),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsToTerraform = medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sourceAncillaryChannelNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceAncillaryChannelNumber = this._sourceAncillaryChannelNumber;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sourceAncillaryChannelNumber = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sourceAncillaryChannelNumber = value.sourceAncillaryChannelNumber;
        }
    }
    get sourceAncillaryChannelNumber() {
        return this.getNumberAttribute('source_ancillary_channel_number');
    }
    set sourceAncillaryChannelNumber(value) {
        this._sourceAncillaryChannelNumber = value;
    }
    resetSourceAncillaryChannelNumber() {
        this._sourceAncillaryChannelNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceAncillaryChannelNumberInput() {
        return this._sourceAncillaryChannelNumber;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputReference = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputReference;
_93 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputReference[_93] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ocr_language: cdktf.stringToTerraform(struct.ocrLanguage),
        pid: cdktf.numberToTerraform(struct.pid),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettingsToTerraform = medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettingsToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ocrLanguage !== undefined) {
            hasAnyValues = true;
            internalValueResult.ocrLanguage = this._ocrLanguage;
        }
        if (this._pid !== undefined) {
            hasAnyValues = true;
            internalValueResult.pid = this._pid;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._ocrLanguage = undefined;
            this._pid = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._ocrLanguage = value.ocrLanguage;
            this._pid = value.pid;
        }
    }
    get ocrLanguage() {
        return this.getStringAttribute('ocr_language');
    }
    set ocrLanguage(value) {
        this._ocrLanguage = value;
    }
    resetOcrLanguage() {
        this._ocrLanguage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ocrLanguageInput() {
        return this._ocrLanguage;
    }
    get pid() {
        return this.getNumberAttribute('pid');
    }
    set pid(value) {
        this._pid = value;
    }
    resetPid() {
        this._pid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pidInput() {
        return this._pid;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettingsOutputReference = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettingsOutputReference;
_94 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettingsOutputReference[_94] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettingsOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        convert_608_to_708: cdktf.stringToTerraform(struct.convert608To708),
        scte_20_detection: cdktf.stringToTerraform(struct.scte20Detection),
        source_608_channel_number: cdktf.numberToTerraform(struct.source608ChannelNumber),
        source_608_track_number: cdktf.numberToTerraform(struct.source608TrackNumber),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsToTerraform = medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._convert608To708 !== undefined) {
            hasAnyValues = true;
            internalValueResult.convert608To708 = this._convert608To708;
        }
        if (this._scte20Detection !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte20Detection = this._scte20Detection;
        }
        if (this._source608ChannelNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.source608ChannelNumber = this._source608ChannelNumber;
        }
        if (this._source608TrackNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.source608TrackNumber = this._source608TrackNumber;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._convert608To708 = undefined;
            this._scte20Detection = undefined;
            this._source608ChannelNumber = undefined;
            this._source608TrackNumber = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._convert608To708 = value.convert608To708;
            this._scte20Detection = value.scte20Detection;
            this._source608ChannelNumber = value.source608ChannelNumber;
            this._source608TrackNumber = value.source608TrackNumber;
        }
    }
    get convert608To708() {
        return this.getStringAttribute('convert_608_to_708');
    }
    set convert608To708(value) {
        this._convert608To708 = value;
    }
    resetConvert608To708() {
        this._convert608To708 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get convert608To708Input() {
        return this._convert608To708;
    }
    get scte20Detection() {
        return this.getStringAttribute('scte_20_detection');
    }
    set scte20Detection(value) {
        this._scte20Detection = value;
    }
    resetScte20Detection() {
        this._scte20Detection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte20DetectionInput() {
        return this._scte20Detection;
    }
    get source608ChannelNumber() {
        return this.getNumberAttribute('source_608_channel_number');
    }
    set source608ChannelNumber(value) {
        this._source608ChannelNumber = value;
    }
    resetSource608ChannelNumber() {
        this._source608ChannelNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get source608ChannelNumberInput() {
        return this._source608ChannelNumber;
    }
    get source608TrackNumber() {
        return this.getNumberAttribute('source_608_track_number');
    }
    set source608TrackNumber(value) {
        this._source608TrackNumber = value;
    }
    resetSource608TrackNumber() {
        this._source608TrackNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get source608TrackNumberInput() {
        return this._source608TrackNumber;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputReference = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputReference;
_95 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputReference[_95] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        convert_608_to_708: cdktf.stringToTerraform(struct.convert608To708),
        source_608_channel_number: cdktf.numberToTerraform(struct.source608ChannelNumber),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsToTerraform = medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._convert608To708 !== undefined) {
            hasAnyValues = true;
            internalValueResult.convert608To708 = this._convert608To708;
        }
        if (this._source608ChannelNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.source608ChannelNumber = this._source608ChannelNumber;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._convert608To708 = undefined;
            this._source608ChannelNumber = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._convert608To708 = value.convert608To708;
            this._source608ChannelNumber = value.source608ChannelNumber;
        }
    }
    get convert608To708() {
        return this.getStringAttribute('convert_608_to_708');
    }
    set convert608To708(value) {
        this._convert608To708 = value;
    }
    resetConvert608To708() {
        this._convert608To708 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get convert608To708Input() {
        return this._convert608To708;
    }
    get source608ChannelNumber() {
        return this.getNumberAttribute('source_608_channel_number');
    }
    set source608ChannelNumber(value) {
        this._source608ChannelNumber = value;
    }
    resetSource608ChannelNumber() {
        this._source608ChannelNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get source608ChannelNumberInput() {
        return this._source608ChannelNumber;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputReference = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputReference;
_96 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputReference[_96] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ocr_language: cdktf.stringToTerraform(struct.ocrLanguage),
        pid: cdktf.numberToTerraform(struct.pid),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsToTerraform = medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ocrLanguage !== undefined) {
            hasAnyValues = true;
            internalValueResult.ocrLanguage = this._ocrLanguage;
        }
        if (this._pid !== undefined) {
            hasAnyValues = true;
            internalValueResult.pid = this._pid;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._ocrLanguage = undefined;
            this._pid = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._ocrLanguage = value.ocrLanguage;
            this._pid = value.pid;
        }
    }
    get ocrLanguage() {
        return this.getStringAttribute('ocr_language');
    }
    set ocrLanguage(value) {
        this._ocrLanguage = value;
    }
    resetOcrLanguage() {
        this._ocrLanguage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ocrLanguageInput() {
        return this._ocrLanguage;
    }
    get pid() {
        return this.getNumberAttribute('pid');
    }
    set pid(value) {
        this._pid = value;
    }
    resetPid() {
        this._pid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pidInput() {
        return this._pid;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputReference = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputReference;
_97 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputReference[_97] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        height: cdktf.numberToTerraform(struct.height),
        left_offset: cdktf.numberToTerraform(struct.leftOffset),
        top_offset: cdktf.numberToTerraform(struct.topOffset),
        width: cdktf.numberToTerraform(struct.width),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleToTerraform = medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._height !== undefined) {
            hasAnyValues = true;
            internalValueResult.height = this._height;
        }
        if (this._leftOffset !== undefined) {
            hasAnyValues = true;
            internalValueResult.leftOffset = this._leftOffset;
        }
        if (this._topOffset !== undefined) {
            hasAnyValues = true;
            internalValueResult.topOffset = this._topOffset;
        }
        if (this._width !== undefined) {
            hasAnyValues = true;
            internalValueResult.width = this._width;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._height = undefined;
            this._leftOffset = undefined;
            this._topOffset = undefined;
            this._width = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._height = value.height;
            this._leftOffset = value.leftOffset;
            this._topOffset = value.topOffset;
            this._width = value.width;
        }
    }
    get height() {
        return this.getNumberAttribute('height');
    }
    set height(value) {
        this._height = value;
    }
    // Temporarily expose input value. Use with caution.
    get heightInput() {
        return this._height;
    }
    get leftOffset() {
        return this.getNumberAttribute('left_offset');
    }
    set leftOffset(value) {
        this._leftOffset = value;
    }
    // Temporarily expose input value. Use with caution.
    get leftOffsetInput() {
        return this._leftOffset;
    }
    get topOffset() {
        return this.getNumberAttribute('top_offset');
    }
    set topOffset(value) {
        this._topOffset = value;
    }
    // Temporarily expose input value. Use with caution.
    get topOffsetInput() {
        return this._topOffset;
    }
    get width() {
        return this.getNumberAttribute('width');
    }
    set width(value) {
        this._width = value;
    }
    // Temporarily expose input value. Use with caution.
    get widthInput() {
        return this._width;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputReference = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputReference;
_98 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputReference[_98] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        page_number: cdktf.stringToTerraform(struct.pageNumber),
        output_rectangle: medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleToTerraform(struct.outputRectangle),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsToTerraform = medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // output_rectangle - computed: false, optional: true, required: false
        this._outputRectangle = new MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputReference(this, "output_rectangle");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._pageNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.pageNumber = this._pageNumber;
        }
        if (this._outputRectangle?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputRectangle = this._outputRectangle?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._pageNumber = undefined;
            this._outputRectangle.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._pageNumber = value.pageNumber;
            this._outputRectangle.internalValue = value.outputRectangle;
        }
    }
    get pageNumber() {
        return this.getStringAttribute('page_number');
    }
    set pageNumber(value) {
        this._pageNumber = value;
    }
    resetPageNumber() {
        this._pageNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pageNumberInput() {
        return this._pageNumber;
    }
    get outputRectangle() {
        return this._outputRectangle;
    }
    putOutputRectangle(value) {
        this._outputRectangle.internalValue = value;
    }
    resetOutputRectangle() {
        this._outputRectangle.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputRectangleInput() {
        return this._outputRectangle.internalValue;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputReference = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputReference;
_99 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputReference[_99] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ancillary_source_settings: medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsToTerraform(struct.ancillarySourceSettings),
        dvb_tdt_settings: medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettingsToTerraform(struct.dvbTdtSettings),
        embedded_source_settings: medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsToTerraform(struct.embeddedSourceSettings),
        scte_20_source_settings: medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsToTerraform(struct.scte20SourceSettings),
        scte_27_source_settings: medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsToTerraform(struct.scte27SourceSettings),
        teletext_source_settings: medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsToTerraform(struct.teletextSourceSettings),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsToTerraform = medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // ancillary_source_settings - computed: false, optional: true, required: false
        this._ancillarySourceSettings = new MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputReference(this, "ancillary_source_settings");
        // dvb_tdt_settings - computed: false, optional: true, required: false
        this._dvbTdtSettings = new MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettingsOutputReference(this, "dvb_tdt_settings");
        // embedded_source_settings - computed: false, optional: true, required: false
        this._embeddedSourceSettings = new MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputReference(this, "embedded_source_settings");
        // scte_20_source_settings - computed: false, optional: true, required: false
        this._scte20SourceSettings = new MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputReference(this, "scte_20_source_settings");
        // scte_27_source_settings - computed: false, optional: true, required: false
        this._scte27SourceSettings = new MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputReference(this, "scte_27_source_settings");
        // teletext_source_settings - computed: false, optional: true, required: false
        this._teletextSourceSettings = new MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputReference(this, "teletext_source_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ancillarySourceSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ancillarySourceSettings = this._ancillarySourceSettings?.internalValue;
        }
        if (this._dvbTdtSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbTdtSettings = this._dvbTdtSettings?.internalValue;
        }
        if (this._embeddedSourceSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.embeddedSourceSettings = this._embeddedSourceSettings?.internalValue;
        }
        if (this._scte20SourceSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte20SourceSettings = this._scte20SourceSettings?.internalValue;
        }
        if (this._scte27SourceSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte27SourceSettings = this._scte27SourceSettings?.internalValue;
        }
        if (this._teletextSourceSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.teletextSourceSettings = this._teletextSourceSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._ancillarySourceSettings.internalValue = undefined;
            this._dvbTdtSettings.internalValue = undefined;
            this._embeddedSourceSettings.internalValue = undefined;
            this._scte20SourceSettings.internalValue = undefined;
            this._scte27SourceSettings.internalValue = undefined;
            this._teletextSourceSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._ancillarySourceSettings.internalValue = value.ancillarySourceSettings;
            this._dvbTdtSettings.internalValue = value.dvbTdtSettings;
            this._embeddedSourceSettings.internalValue = value.embeddedSourceSettings;
            this._scte20SourceSettings.internalValue = value.scte20SourceSettings;
            this._scte27SourceSettings.internalValue = value.scte27SourceSettings;
            this._teletextSourceSettings.internalValue = value.teletextSourceSettings;
        }
    }
    get ancillarySourceSettings() {
        return this._ancillarySourceSettings;
    }
    putAncillarySourceSettings(value) {
        this._ancillarySourceSettings.internalValue = value;
    }
    resetAncillarySourceSettings() {
        this._ancillarySourceSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ancillarySourceSettingsInput() {
        return this._ancillarySourceSettings.internalValue;
    }
    get dvbTdtSettings() {
        return this._dvbTdtSettings;
    }
    putDvbTdtSettings(value) {
        this._dvbTdtSettings.internalValue = value;
    }
    resetDvbTdtSettings() {
        this._dvbTdtSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbTdtSettingsInput() {
        return this._dvbTdtSettings.internalValue;
    }
    get embeddedSourceSettings() {
        return this._embeddedSourceSettings;
    }
    putEmbeddedSourceSettings(value) {
        this._embeddedSourceSettings.internalValue = value;
    }
    resetEmbeddedSourceSettings() {
        this._embeddedSourceSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get embeddedSourceSettingsInput() {
        return this._embeddedSourceSettings.internalValue;
    }
    get scte20SourceSettings() {
        return this._scte20SourceSettings;
    }
    putScte20SourceSettings(value) {
        this._scte20SourceSettings.internalValue = value;
    }
    resetScte20SourceSettings() {
        this._scte20SourceSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte20SourceSettingsInput() {
        return this._scte20SourceSettings.internalValue;
    }
    get scte27SourceSettings() {
        return this._scte27SourceSettings;
    }
    putScte27SourceSettings(value) {
        this._scte27SourceSettings.internalValue = value;
    }
    resetScte27SourceSettings() {
        this._scte27SourceSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte27SourceSettingsInput() {
        return this._scte27SourceSettings.internalValue;
    }
    get teletextSourceSettings() {
        return this._teletextSourceSettings;
    }
    putTeletextSourceSettings(value) {
        this._teletextSourceSettings.internalValue = value;
    }
    resetTeletextSourceSettings() {
        this._teletextSourceSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get teletextSourceSettingsInput() {
        return this._teletextSourceSettings.internalValue;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsOutputReference = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsOutputReference;
_100 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsOutputReference[_100] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsCaptionSelectorVideoSelectorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        color_space: cdktf.stringToTerraform(struct.colorSpace),
        color_space_usage: cdktf.stringToTerraform(struct.colorSpaceUsage),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorVideoSelectorToTerraform = medialiveChannelInputAttachmentsInputSettingsCaptionSelectorVideoSelectorToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorVideoSelectorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._colorSpace !== undefined) {
            hasAnyValues = true;
            internalValueResult.colorSpace = this._colorSpace;
        }
        if (this._colorSpaceUsage !== undefined) {
            hasAnyValues = true;
            internalValueResult.colorSpaceUsage = this._colorSpaceUsage;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._colorSpace = undefined;
            this._colorSpaceUsage = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._colorSpace = value.colorSpace;
            this._colorSpaceUsage = value.colorSpaceUsage;
        }
    }
    get colorSpace() {
        return this.getStringAttribute('color_space');
    }
    set colorSpace(value) {
        this._colorSpace = value;
    }
    resetColorSpace() {
        this._colorSpace = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get colorSpaceInput() {
        return this._colorSpace;
    }
    get colorSpaceUsage() {
        return this.getStringAttribute('color_space_usage');
    }
    set colorSpaceUsage(value) {
        this._colorSpaceUsage = value;
    }
    resetColorSpaceUsage() {
        this._colorSpaceUsage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get colorSpaceUsageInput() {
        return this._colorSpaceUsage;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorVideoSelectorOutputReference = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorVideoSelectorOutputReference;
_101 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorVideoSelectorOutputReference[_101] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorVideoSelectorOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsCaptionSelectorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        deblock_filter: cdktf.stringToTerraform(struct.deblockFilter),
        denoise_filter: cdktf.stringToTerraform(struct.denoiseFilter),
        filter_strength: cdktf.numberToTerraform(struct.filterStrength),
        input_filter: cdktf.stringToTerraform(struct.inputFilter),
        language_code: cdktf.stringToTerraform(struct.languageCode),
        name: cdktf.stringToTerraform(struct.name),
        scte_35_pid: cdktf.numberToTerraform(struct.scte35Pid),
        smpte_2038_data_preference: cdktf.stringToTerraform(struct.smpte2038DataPreference),
        source_end_behavior: cdktf.stringToTerraform(struct.sourceEndBehavior),
        network_input_settings: medialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsToTerraform(struct.networkInputSettings),
        selector_settings: medialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsToTerraform(struct.selectorSettings),
        video_selector: medialiveChannelInputAttachmentsInputSettingsCaptionSelectorVideoSelectorToTerraform(struct.videoSelector),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsCaptionSelectorToTerraform = medialiveChannelInputAttachmentsInputSettingsCaptionSelectorToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // network_input_settings - computed: false, optional: true, required: false
        this._networkInputSettings = new MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorNetworkInputSettingsOutputReference(this, "network_input_settings");
        // selector_settings - computed: false, optional: true, required: false
        this._selectorSettings = new MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsOutputReference(this, "selector_settings");
        // video_selector - computed: false, optional: true, required: false
        this._videoSelector = new MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorVideoSelectorOutputReference(this, "video_selector");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deblockFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.deblockFilter = this._deblockFilter;
        }
        if (this._denoiseFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.denoiseFilter = this._denoiseFilter;
        }
        if (this._filterStrength !== undefined) {
            hasAnyValues = true;
            internalValueResult.filterStrength = this._filterStrength;
        }
        if (this._inputFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputFilter = this._inputFilter;
        }
        if (this._languageCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.languageCode = this._languageCode;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._scte35Pid !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte35Pid = this._scte35Pid;
        }
        if (this._smpte2038DataPreference !== undefined) {
            hasAnyValues = true;
            internalValueResult.smpte2038DataPreference = this._smpte2038DataPreference;
        }
        if (this._sourceEndBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceEndBehavior = this._sourceEndBehavior;
        }
        if (this._networkInputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkInputSettings = this._networkInputSettings?.internalValue;
        }
        if (this._selectorSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.selectorSettings = this._selectorSettings?.internalValue;
        }
        if (this._videoSelector?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.videoSelector = this._videoSelector?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._deblockFilter = undefined;
            this._denoiseFilter = undefined;
            this._filterStrength = undefined;
            this._inputFilter = undefined;
            this._languageCode = undefined;
            this._name = undefined;
            this._scte35Pid = undefined;
            this._smpte2038DataPreference = undefined;
            this._sourceEndBehavior = undefined;
            this._networkInputSettings.internalValue = undefined;
            this._selectorSettings.internalValue = undefined;
            this._videoSelector.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._deblockFilter = value.deblockFilter;
            this._denoiseFilter = value.denoiseFilter;
            this._filterStrength = value.filterStrength;
            this._inputFilter = value.inputFilter;
            this._languageCode = value.languageCode;
            this._name = value.name;
            this._scte35Pid = value.scte35Pid;
            this._smpte2038DataPreference = value.smpte2038DataPreference;
            this._sourceEndBehavior = value.sourceEndBehavior;
            this._networkInputSettings.internalValue = value.networkInputSettings;
            this._selectorSettings.internalValue = value.selectorSettings;
            this._videoSelector.internalValue = value.videoSelector;
        }
    }
    get deblockFilter() {
        return this.getStringAttribute('deblock_filter');
    }
    set deblockFilter(value) {
        this._deblockFilter = value;
    }
    resetDeblockFilter() {
        this._deblockFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deblockFilterInput() {
        return this._deblockFilter;
    }
    get denoiseFilter() {
        return this.getStringAttribute('denoise_filter');
    }
    set denoiseFilter(value) {
        this._denoiseFilter = value;
    }
    resetDenoiseFilter() {
        this._denoiseFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get denoiseFilterInput() {
        return this._denoiseFilter;
    }
    get filterStrength() {
        return this.getNumberAttribute('filter_strength');
    }
    set filterStrength(value) {
        this._filterStrength = value;
    }
    resetFilterStrength() {
        this._filterStrength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterStrengthInput() {
        return this._filterStrength;
    }
    get inputFilter() {
        return this.getStringAttribute('input_filter');
    }
    set inputFilter(value) {
        this._inputFilter = value;
    }
    resetInputFilter() {
        this._inputFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputFilterInput() {
        return this._inputFilter;
    }
    get languageCode() {
        return this.getStringAttribute('language_code');
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    resetLanguageCode() {
        this._languageCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get languageCodeInput() {
        return this._languageCode;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get scte35Pid() {
        return this.getNumberAttribute('scte_35_pid');
    }
    set scte35Pid(value) {
        this._scte35Pid = value;
    }
    resetScte35Pid() {
        this._scte35Pid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte35PidInput() {
        return this._scte35Pid;
    }
    get smpte2038DataPreference() {
        return this.getStringAttribute('smpte_2038_data_preference');
    }
    set smpte2038DataPreference(value) {
        this._smpte2038DataPreference = value;
    }
    resetSmpte2038DataPreference() {
        this._smpte2038DataPreference = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get smpte2038DataPreferenceInput() {
        return this._smpte2038DataPreference;
    }
    get sourceEndBehavior() {
        return this.getStringAttribute('source_end_behavior');
    }
    set sourceEndBehavior(value) {
        this._sourceEndBehavior = value;
    }
    resetSourceEndBehavior() {
        this._sourceEndBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceEndBehaviorInput() {
        return this._sourceEndBehavior;
    }
    get networkInputSettings() {
        return this._networkInputSettings;
    }
    putNetworkInputSettings(value) {
        this._networkInputSettings.internalValue = value;
    }
    resetNetworkInputSettings() {
        this._networkInputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInputSettingsInput() {
        return this._networkInputSettings.internalValue;
    }
    get selectorSettings() {
        return this._selectorSettings;
    }
    putSelectorSettings(value) {
        this._selectorSettings.internalValue = value;
    }
    resetSelectorSettings() {
        this._selectorSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get selectorSettingsInput() {
        return this._selectorSettings.internalValue;
    }
    get videoSelector() {
        return this._videoSelector;
    }
    putVideoSelector(value) {
        this._videoSelector.internalValue = value;
    }
    resetVideoSelector() {
        this._videoSelector.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get videoSelectorInput() {
        return this._videoSelector.internalValue;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorOutputReference = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorOutputReference;
_102 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorOutputReference[_102] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorOutputReference", version: "10.0.12" };
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorList = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorList;
_103 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorList[_103] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorList", version: "10.0.12" };
function medialiveChannelInputAttachmentsInputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_selector: cdktf.listMapper(medialiveChannelInputAttachmentsInputSettingsAudioSelectorToTerraform, true)(struct.audioSelector),
        caption_selector: cdktf.listMapper(medialiveChannelInputAttachmentsInputSettingsCaptionSelectorToTerraform, true)(struct.captionSelector),
    };
}
exports.medialiveChannelInputAttachmentsInputSettingsToTerraform = medialiveChannelInputAttachmentsInputSettingsToTerraform;
class MedialiveChannelInputAttachmentsInputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // audio_selector - computed: false, optional: true, required: false
        this._audioSelector = new MedialiveChannelInputAttachmentsInputSettingsAudioSelectorList(this, "audio_selector", false);
        // caption_selector - computed: false, optional: true, required: false
        this._captionSelector = new MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorList(this, "caption_selector", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioSelector?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioSelector = this._audioSelector?.internalValue;
        }
        if (this._captionSelector?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.captionSelector = this._captionSelector?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioSelector.internalValue = undefined;
            this._captionSelector.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioSelector.internalValue = value.audioSelector;
            this._captionSelector.internalValue = value.captionSelector;
        }
    }
    get audioSelector() {
        return this._audioSelector;
    }
    putAudioSelector(value) {
        this._audioSelector.internalValue = value;
    }
    resetAudioSelector() {
        this._audioSelector.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioSelectorInput() {
        return this._audioSelector.internalValue;
    }
    get captionSelector() {
        return this._captionSelector;
    }
    putCaptionSelector(value) {
        this._captionSelector.internalValue = value;
    }
    resetCaptionSelector() {
        this._captionSelector.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get captionSelectorInput() {
        return this._captionSelector.internalValue;
    }
}
exports.MedialiveChannelInputAttachmentsInputSettingsOutputReference = MedialiveChannelInputAttachmentsInputSettingsOutputReference;
_104 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsInputSettingsOutputReference[_104] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsOutputReference", version: "10.0.12" };
function medialiveChannelInputAttachmentsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        input_attachment_name: cdktf.stringToTerraform(struct.inputAttachmentName),
        input_id: cdktf.stringToTerraform(struct.inputId),
        automatic_input_failover_settings: medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsToTerraform(struct.automaticInputFailoverSettings),
        input_settings: medialiveChannelInputAttachmentsInputSettingsToTerraform(struct.inputSettings),
    };
}
exports.medialiveChannelInputAttachmentsToTerraform = medialiveChannelInputAttachmentsToTerraform;
class MedialiveChannelInputAttachmentsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // automatic_input_failover_settings - computed: false, optional: true, required: false
        this._automaticInputFailoverSettings = new MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsOutputReference(this, "automatic_input_failover_settings");
        // input_settings - computed: false, optional: true, required: false
        this._inputSettings = new MedialiveChannelInputAttachmentsInputSettingsOutputReference(this, "input_settings");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._inputAttachmentName !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputAttachmentName = this._inputAttachmentName;
        }
        if (this._inputId !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputId = this._inputId;
        }
        if (this._automaticInputFailoverSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.automaticInputFailoverSettings = this._automaticInputFailoverSettings?.internalValue;
        }
        if (this._inputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputSettings = this._inputSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._inputAttachmentName = undefined;
            this._inputId = undefined;
            this._automaticInputFailoverSettings.internalValue = undefined;
            this._inputSettings.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._inputAttachmentName = value.inputAttachmentName;
            this._inputId = value.inputId;
            this._automaticInputFailoverSettings.internalValue = value.automaticInputFailoverSettings;
            this._inputSettings.internalValue = value.inputSettings;
        }
    }
    get inputAttachmentName() {
        return this.getStringAttribute('input_attachment_name');
    }
    set inputAttachmentName(value) {
        this._inputAttachmentName = value;
    }
    // Temporarily expose input value. Use with caution.
    get inputAttachmentNameInput() {
        return this._inputAttachmentName;
    }
    get inputId() {
        return this.getStringAttribute('input_id');
    }
    set inputId(value) {
        this._inputId = value;
    }
    // Temporarily expose input value. Use with caution.
    get inputIdInput() {
        return this._inputId;
    }
    get automaticInputFailoverSettings() {
        return this._automaticInputFailoverSettings;
    }
    putAutomaticInputFailoverSettings(value) {
        this._automaticInputFailoverSettings.internalValue = value;
    }
    resetAutomaticInputFailoverSettings() {
        this._automaticInputFailoverSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get automaticInputFailoverSettingsInput() {
        return this._automaticInputFailoverSettings.internalValue;
    }
    get inputSettings() {
        return this._inputSettings;
    }
    putInputSettings(value) {
        this._inputSettings.internalValue = value;
    }
    resetInputSettings() {
        this._inputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputSettingsInput() {
        return this._inputSettings.internalValue;
    }
}
exports.MedialiveChannelInputAttachmentsOutputReference = MedialiveChannelInputAttachmentsOutputReference;
_105 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsOutputReference[_105] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsOutputReference", version: "10.0.12" };
class MedialiveChannelInputAttachmentsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelInputAttachmentsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelInputAttachmentsList = MedialiveChannelInputAttachmentsList;
_106 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsList[_106] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsList", version: "10.0.12" };
function medialiveChannelInputSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        codec: cdktf.stringToTerraform(struct.codec),
        input_resolution: cdktf.stringToTerraform(struct.inputResolution),
        maximum_bitrate: cdktf.stringToTerraform(struct.maximumBitrate),
    };
}
exports.medialiveChannelInputSpecificationToTerraform = medialiveChannelInputSpecificationToTerraform;
class MedialiveChannelInputSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._codec !== undefined) {
            hasAnyValues = true;
            internalValueResult.codec = this._codec;
        }
        if (this._inputResolution !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputResolution = this._inputResolution;
        }
        if (this._maximumBitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.maximumBitrate = this._maximumBitrate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._codec = undefined;
            this._inputResolution = undefined;
            this._maximumBitrate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._codec = value.codec;
            this._inputResolution = value.inputResolution;
            this._maximumBitrate = value.maximumBitrate;
        }
    }
    get codec() {
        return this.getStringAttribute('codec');
    }
    set codec(value) {
        this._codec = value;
    }
    // Temporarily expose input value. Use with caution.
    get codecInput() {
        return this._codec;
    }
    get inputResolution() {
        return this.getStringAttribute('input_resolution');
    }
    set inputResolution(value) {
        this._inputResolution = value;
    }
    // Temporarily expose input value. Use with caution.
    get inputResolutionInput() {
        return this._inputResolution;
    }
    get maximumBitrate() {
        return this.getStringAttribute('maximum_bitrate');
    }
    set maximumBitrate(value) {
        this._maximumBitrate = value;
    }
    // Temporarily expose input value. Use with caution.
    get maximumBitrateInput() {
        return this._maximumBitrate;
    }
}
exports.MedialiveChannelInputSpecificationOutputReference = MedialiveChannelInputSpecificationOutputReference;
_107 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputSpecificationOutputReference[_107] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputSpecificationOutputReference", version: "10.0.12" };
function medialiveChannelMaintenanceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        maintenance_day: cdktf.stringToTerraform(struct.maintenanceDay),
        maintenance_start_time: cdktf.stringToTerraform(struct.maintenanceStartTime),
    };
}
exports.medialiveChannelMaintenanceToTerraform = medialiveChannelMaintenanceToTerraform;
class MedialiveChannelMaintenanceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maintenanceDay !== undefined) {
            hasAnyValues = true;
            internalValueResult.maintenanceDay = this._maintenanceDay;
        }
        if (this._maintenanceStartTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.maintenanceStartTime = this._maintenanceStartTime;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maintenanceDay = undefined;
            this._maintenanceStartTime = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maintenanceDay = value.maintenanceDay;
            this._maintenanceStartTime = value.maintenanceStartTime;
        }
    }
    get maintenanceDay() {
        return this.getStringAttribute('maintenance_day');
    }
    set maintenanceDay(value) {
        this._maintenanceDay = value;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceDayInput() {
        return this._maintenanceDay;
    }
    get maintenanceStartTime() {
        return this.getStringAttribute('maintenance_start_time');
    }
    set maintenanceStartTime(value) {
        this._maintenanceStartTime = value;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceStartTimeInput() {
        return this._maintenanceStartTime;
    }
}
exports.MedialiveChannelMaintenanceOutputReference = MedialiveChannelMaintenanceOutputReference;
_108 = JSII_RTTI_SYMBOL_1;
MedialiveChannelMaintenanceOutputReference[_108] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelMaintenanceOutputReference", version: "10.0.12" };
function medialiveChannelTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.medialiveChannelTimeoutsToTerraform = medialiveChannelTimeoutsToTerraform;
class MedialiveChannelTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.MedialiveChannelTimeoutsOutputReference = MedialiveChannelTimeoutsOutputReference;
_109 = JSII_RTTI_SYMBOL_1;
MedialiveChannelTimeoutsOutputReference[_109] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelTimeoutsOutputReference", version: "10.0.12" };
function medialiveChannelVpcToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        public_address_allocation_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.publicAddressAllocationIds),
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroupIds),
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.subnetIds),
    };
}
exports.medialiveChannelVpcToTerraform = medialiveChannelVpcToTerraform;
class MedialiveChannelVpcOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._publicAddressAllocationIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.publicAddressAllocationIds = this._publicAddressAllocationIds;
        }
        if (this._securityGroupIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroupIds = this._securityGroupIds;
        }
        if (this._subnetIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetIds = this._subnetIds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._publicAddressAllocationIds = undefined;
            this._securityGroupIds = undefined;
            this._subnetIds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._publicAddressAllocationIds = value.publicAddressAllocationIds;
            this._securityGroupIds = value.securityGroupIds;
            this._subnetIds = value.subnetIds;
        }
    }
    // availability_zones - computed: true, optional: false, required: false
    get availabilityZones() {
        return this.getListAttribute('availability_zones');
    }
    get publicAddressAllocationIds() {
        return this.getListAttribute('public_address_allocation_ids');
    }
    set publicAddressAllocationIds(value) {
        this._publicAddressAllocationIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get publicAddressAllocationIdsInput() {
        return this._publicAddressAllocationIds;
    }
    get securityGroupIds() {
        return this.getListAttribute('security_group_ids');
    }
    set securityGroupIds(value) {
        this._securityGroupIds = value;
    }
    resetSecurityGroupIds() {
        this._securityGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupIdsInput() {
        return this._securityGroupIds;
    }
    get subnetIds() {
        return this.getListAttribute('subnet_ids');
    }
    set subnetIds(value) {
        this._subnetIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdsInput() {
        return this._subnetIds;
    }
}
exports.MedialiveChannelVpcOutputReference = MedialiveChannelVpcOutputReference;
_110 = JSII_RTTI_SYMBOL_1;
MedialiveChannelVpcOutputReference[_110] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelVpcOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel aws_medialive_channel}
*/
class MedialiveChannel extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/medialive_channel aws_medialive_channel} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MedialiveChannelConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_medialive_channel',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // cdi_input_specification - computed: false, optional: true, required: false
        this._cdiInputSpecification = new MedialiveChannelCdiInputSpecificationOutputReference(this, "cdi_input_specification");
        // destinations - computed: false, optional: false, required: true
        this._destinations = new MedialiveChannelDestinationsList(this, "destinations", true);
        // encoder_settings - computed: false, optional: false, required: true
        this._encoderSettings = new MedialiveChannelEncoderSettingsOutputReference(this, "encoder_settings");
        // input_attachments - computed: false, optional: false, required: true
        this._inputAttachments = new MedialiveChannelInputAttachmentsList(this, "input_attachments", true);
        // input_specification - computed: false, optional: false, required: true
        this._inputSpecification = new MedialiveChannelInputSpecificationOutputReference(this, "input_specification");
        // maintenance - computed: false, optional: true, required: false
        this._maintenance = new MedialiveChannelMaintenanceOutputReference(this, "maintenance");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new MedialiveChannelTimeoutsOutputReference(this, "timeouts");
        // vpc - computed: false, optional: true, required: false
        this._vpc = new MedialiveChannelVpcOutputReference(this, "vpc");
        this._channelClass = config.channelClass;
        this._id = config.id;
        this._logLevel = config.logLevel;
        this._name = config.name;
        this._roleArn = config.roleArn;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._cdiInputSpecification.internalValue = config.cdiInputSpecification;
        this._destinations.internalValue = config.destinations;
        this._encoderSettings.internalValue = config.encoderSettings;
        this._inputAttachments.internalValue = config.inputAttachments;
        this._inputSpecification.internalValue = config.inputSpecification;
        this._maintenance.internalValue = config.maintenance;
        this._timeouts.internalValue = config.timeouts;
        this._vpc.internalValue = config.vpc;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get channelClass() {
        return this.getStringAttribute('channel_class');
    }
    set channelClass(value) {
        this._channelClass = value;
    }
    // Temporarily expose input value. Use with caution.
    get channelClassInput() {
        return this._channelClass;
    }
    // channel_id - computed: true, optional: false, required: false
    get channelId() {
        return this.getStringAttribute('channel_id');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get logLevel() {
        return this.getStringAttribute('log_level');
    }
    set logLevel(value) {
        this._logLevel = value;
    }
    resetLogLevel() {
        this._logLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logLevelInput() {
        return this._logLevel;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    resetRoleArn() {
        this._roleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get cdiInputSpecification() {
        return this._cdiInputSpecification;
    }
    putCdiInputSpecification(value) {
        this._cdiInputSpecification.internalValue = value;
    }
    resetCdiInputSpecification() {
        this._cdiInputSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cdiInputSpecificationInput() {
        return this._cdiInputSpecification.internalValue;
    }
    get destinations() {
        return this._destinations;
    }
    putDestinations(value) {
        this._destinations.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationsInput() {
        return this._destinations.internalValue;
    }
    get encoderSettings() {
        return this._encoderSettings;
    }
    putEncoderSettings(value) {
        this._encoderSettings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get encoderSettingsInput() {
        return this._encoderSettings.internalValue;
    }
    get inputAttachments() {
        return this._inputAttachments;
    }
    putInputAttachments(value) {
        this._inputAttachments.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get inputAttachmentsInput() {
        return this._inputAttachments.internalValue;
    }
    get inputSpecification() {
        return this._inputSpecification;
    }
    putInputSpecification(value) {
        this._inputSpecification.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get inputSpecificationInput() {
        return this._inputSpecification.internalValue;
    }
    get maintenance() {
        return this._maintenance;
    }
    putMaintenance(value) {
        this._maintenance.internalValue = value;
    }
    resetMaintenance() {
        this._maintenance.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceInput() {
        return this._maintenance.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get vpc() {
        return this._vpc;
    }
    putVpc(value) {
        this._vpc.internalValue = value;
    }
    resetVpc() {
        this._vpc.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcInput() {
        return this._vpc.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            channel_class: cdktf.stringToTerraform(this._channelClass),
            id: cdktf.stringToTerraform(this._id),
            log_level: cdktf.stringToTerraform(this._logLevel),
            name: cdktf.stringToTerraform(this._name),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            cdi_input_specification: medialiveChannelCdiInputSpecificationToTerraform(this._cdiInputSpecification.internalValue),
            destinations: cdktf.listMapper(medialiveChannelDestinationsToTerraform, true)(this._destinations.internalValue),
            encoder_settings: medialiveChannelEncoderSettingsToTerraform(this._encoderSettings.internalValue),
            input_attachments: cdktf.listMapper(medialiveChannelInputAttachmentsToTerraform, true)(this._inputAttachments.internalValue),
            input_specification: medialiveChannelInputSpecificationToTerraform(this._inputSpecification.internalValue),
            maintenance: medialiveChannelMaintenanceToTerraform(this._maintenance.internalValue),
            timeouts: medialiveChannelTimeoutsToTerraform(this._timeouts.internalValue),
            vpc: medialiveChannelVpcToTerraform(this._vpc.internalValue),
        };
    }
}
exports.MedialiveChannel = MedialiveChannel;
_111 = JSII_RTTI_SYMBOL_1;
MedialiveChannel[_111] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannel", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
MedialiveChannel.tfResourceType = "aws_medialive_channel";
//# sourceMappingURL=data:application/json;base64,