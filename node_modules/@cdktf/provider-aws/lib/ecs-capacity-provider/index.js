"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EcsCapacityProvider = exports.EcsCapacityProviderAutoScalingGroupProviderOutputReference = exports.ecsCapacityProviderAutoScalingGroupProviderToTerraform = exports.EcsCapacityProviderAutoScalingGroupProviderManagedScalingOutputReference = exports.ecsCapacityProviderAutoScalingGroupProviderManagedScalingToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function ecsCapacityProviderAutoScalingGroupProviderManagedScalingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_warmup_period: cdktf.numberToTerraform(struct.instanceWarmupPeriod),
        maximum_scaling_step_size: cdktf.numberToTerraform(struct.maximumScalingStepSize),
        minimum_scaling_step_size: cdktf.numberToTerraform(struct.minimumScalingStepSize),
        status: cdktf.stringToTerraform(struct.status),
        target_capacity: cdktf.numberToTerraform(struct.targetCapacity),
    };
}
exports.ecsCapacityProviderAutoScalingGroupProviderManagedScalingToTerraform = ecsCapacityProviderAutoScalingGroupProviderManagedScalingToTerraform;
class EcsCapacityProviderAutoScalingGroupProviderManagedScalingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceWarmupPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceWarmupPeriod = this._instanceWarmupPeriod;
        }
        if (this._maximumScalingStepSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.maximumScalingStepSize = this._maximumScalingStepSize;
        }
        if (this._minimumScalingStepSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.minimumScalingStepSize = this._minimumScalingStepSize;
        }
        if (this._status !== undefined) {
            hasAnyValues = true;
            internalValueResult.status = this._status;
        }
        if (this._targetCapacity !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetCapacity = this._targetCapacity;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceWarmupPeriod = undefined;
            this._maximumScalingStepSize = undefined;
            this._minimumScalingStepSize = undefined;
            this._status = undefined;
            this._targetCapacity = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceWarmupPeriod = value.instanceWarmupPeriod;
            this._maximumScalingStepSize = value.maximumScalingStepSize;
            this._minimumScalingStepSize = value.minimumScalingStepSize;
            this._status = value.status;
            this._targetCapacity = value.targetCapacity;
        }
    }
    get instanceWarmupPeriod() {
        return this.getNumberAttribute('instance_warmup_period');
    }
    set instanceWarmupPeriod(value) {
        this._instanceWarmupPeriod = value;
    }
    resetInstanceWarmupPeriod() {
        this._instanceWarmupPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceWarmupPeriodInput() {
        return this._instanceWarmupPeriod;
    }
    get maximumScalingStepSize() {
        return this.getNumberAttribute('maximum_scaling_step_size');
    }
    set maximumScalingStepSize(value) {
        this._maximumScalingStepSize = value;
    }
    resetMaximumScalingStepSize() {
        this._maximumScalingStepSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maximumScalingStepSizeInput() {
        return this._maximumScalingStepSize;
    }
    get minimumScalingStepSize() {
        return this.getNumberAttribute('minimum_scaling_step_size');
    }
    set minimumScalingStepSize(value) {
        this._minimumScalingStepSize = value;
    }
    resetMinimumScalingStepSize() {
        this._minimumScalingStepSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minimumScalingStepSizeInput() {
        return this._minimumScalingStepSize;
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
    get targetCapacity() {
        return this.getNumberAttribute('target_capacity');
    }
    set targetCapacity(value) {
        this._targetCapacity = value;
    }
    resetTargetCapacity() {
        this._targetCapacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetCapacityInput() {
        return this._targetCapacity;
    }
}
exports.EcsCapacityProviderAutoScalingGroupProviderManagedScalingOutputReference = EcsCapacityProviderAutoScalingGroupProviderManagedScalingOutputReference;
_a = JSII_RTTI_SYMBOL_1;
EcsCapacityProviderAutoScalingGroupProviderManagedScalingOutputReference[_a] = { fqn: "@cdktf/provider-aws.ecsCapacityProvider.EcsCapacityProviderAutoScalingGroupProviderManagedScalingOutputReference", version: "10.0.12" };
function ecsCapacityProviderAutoScalingGroupProviderToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_scaling_group_arn: cdktf.stringToTerraform(struct.autoScalingGroupArn),
        managed_termination_protection: cdktf.stringToTerraform(struct.managedTerminationProtection),
        managed_scaling: ecsCapacityProviderAutoScalingGroupProviderManagedScalingToTerraform(struct.managedScaling),
    };
}
exports.ecsCapacityProviderAutoScalingGroupProviderToTerraform = ecsCapacityProviderAutoScalingGroupProviderToTerraform;
class EcsCapacityProviderAutoScalingGroupProviderOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // managed_scaling - computed: false, optional: true, required: false
        this._managedScaling = new EcsCapacityProviderAutoScalingGroupProviderManagedScalingOutputReference(this, "managed_scaling");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoScalingGroupArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoScalingGroupArn = this._autoScalingGroupArn;
        }
        if (this._managedTerminationProtection !== undefined) {
            hasAnyValues = true;
            internalValueResult.managedTerminationProtection = this._managedTerminationProtection;
        }
        if (this._managedScaling?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.managedScaling = this._managedScaling?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoScalingGroupArn = undefined;
            this._managedTerminationProtection = undefined;
            this._managedScaling.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoScalingGroupArn = value.autoScalingGroupArn;
            this._managedTerminationProtection = value.managedTerminationProtection;
            this._managedScaling.internalValue = value.managedScaling;
        }
    }
    get autoScalingGroupArn() {
        return this.getStringAttribute('auto_scaling_group_arn');
    }
    set autoScalingGroupArn(value) {
        this._autoScalingGroupArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get autoScalingGroupArnInput() {
        return this._autoScalingGroupArn;
    }
    get managedTerminationProtection() {
        return this.getStringAttribute('managed_termination_protection');
    }
    set managedTerminationProtection(value) {
        this._managedTerminationProtection = value;
    }
    resetManagedTerminationProtection() {
        this._managedTerminationProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get managedTerminationProtectionInput() {
        return this._managedTerminationProtection;
    }
    get managedScaling() {
        return this._managedScaling;
    }
    putManagedScaling(value) {
        this._managedScaling.internalValue = value;
    }
    resetManagedScaling() {
        this._managedScaling.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get managedScalingInput() {
        return this._managedScaling.internalValue;
    }
}
exports.EcsCapacityProviderAutoScalingGroupProviderOutputReference = EcsCapacityProviderAutoScalingGroupProviderOutputReference;
_b = JSII_RTTI_SYMBOL_1;
EcsCapacityProviderAutoScalingGroupProviderOutputReference[_b] = { fqn: "@cdktf/provider-aws.ecsCapacityProvider.EcsCapacityProviderAutoScalingGroupProviderOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/ecs_capacity_provider aws_ecs_capacity_provider}
*/
class EcsCapacityProvider extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/ecs_capacity_provider aws_ecs_capacity_provider} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options EcsCapacityProviderConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_ecs_capacity_provider',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // auto_scaling_group_provider - computed: false, optional: false, required: true
        this._autoScalingGroupProvider = new EcsCapacityProviderAutoScalingGroupProviderOutputReference(this, "auto_scaling_group_provider");
        this._id = config.id;
        this._name = config.name;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._autoScalingGroupProvider.internalValue = config.autoScalingGroupProvider;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get autoScalingGroupProvider() {
        return this._autoScalingGroupProvider;
    }
    putAutoScalingGroupProvider(value) {
        this._autoScalingGroupProvider.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get autoScalingGroupProviderInput() {
        return this._autoScalingGroupProvider.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            auto_scaling_group_provider: ecsCapacityProviderAutoScalingGroupProviderToTerraform(this._autoScalingGroupProvider.internalValue),
        };
    }
}
exports.EcsCapacityProvider = EcsCapacityProvider;
_c = JSII_RTTI_SYMBOL_1;
EcsCapacityProvider[_c] = { fqn: "@cdktf/provider-aws.ecsCapacityProvider.EcsCapacityProvider", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
EcsCapacityProvider.tfResourceType = "aws_ecs_capacity_provider";
//# sourceMappingURL=data:application/json;base64,