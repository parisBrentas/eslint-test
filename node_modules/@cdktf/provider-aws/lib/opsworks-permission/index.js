"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpsworksPermission = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/opsworks_permission aws_opsworks_permission}
*/
class OpsworksPermission extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/opsworks_permission aws_opsworks_permission} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options OpsworksPermissionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_opsworks_permission',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._allowSsh = config.allowSsh;
        this._allowSudo = config.allowSudo;
        this._id = config.id;
        this._level = config.level;
        this._stackId = config.stackId;
        this._userArn = config.userArn;
    }
    get allowSsh() {
        return this.getBooleanAttribute('allow_ssh');
    }
    set allowSsh(value) {
        this._allowSsh = value;
    }
    resetAllowSsh() {
        this._allowSsh = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowSshInput() {
        return this._allowSsh;
    }
    get allowSudo() {
        return this.getBooleanAttribute('allow_sudo');
    }
    set allowSudo(value) {
        this._allowSudo = value;
    }
    resetAllowSudo() {
        this._allowSudo = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowSudoInput() {
        return this._allowSudo;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get level() {
        return this.getStringAttribute('level');
    }
    set level(value) {
        this._level = value;
    }
    resetLevel() {
        this._level = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get levelInput() {
        return this._level;
    }
    get stackId() {
        return this.getStringAttribute('stack_id');
    }
    set stackId(value) {
        this._stackId = value;
    }
    resetStackId() {
        this._stackId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stackIdInput() {
        return this._stackId;
    }
    get userArn() {
        return this.getStringAttribute('user_arn');
    }
    set userArn(value) {
        this._userArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get userArnInput() {
        return this._userArn;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            allow_ssh: cdktf.booleanToTerraform(this._allowSsh),
            allow_sudo: cdktf.booleanToTerraform(this._allowSudo),
            id: cdktf.stringToTerraform(this._id),
            level: cdktf.stringToTerraform(this._level),
            stack_id: cdktf.stringToTerraform(this._stackId),
            user_arn: cdktf.stringToTerraform(this._userArn),
        };
    }
}
exports.OpsworksPermission = OpsworksPermission;
_a = JSII_RTTI_SYMBOL_1;
OpsworksPermission[_a] = { fqn: "@cdktf/provider-aws.opsworksPermission.OpsworksPermission", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
OpsworksPermission.tfResourceType = "aws_opsworks_permission";
//# sourceMappingURL=data:application/json;base64,