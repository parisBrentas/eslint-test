"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqsQueue = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/sqs_queue aws_sqs_queue}
*/
class SqsQueue extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/sqs_queue aws_sqs_queue} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SqsQueueConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'aws_sqs_queue',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._contentBasedDeduplication = config.contentBasedDeduplication;
        this._deduplicationScope = config.deduplicationScope;
        this._delaySeconds = config.delaySeconds;
        this._fifoQueue = config.fifoQueue;
        this._fifoThroughputLimit = config.fifoThroughputLimit;
        this._id = config.id;
        this._kmsDataKeyReusePeriodSeconds = config.kmsDataKeyReusePeriodSeconds;
        this._kmsMasterKeyId = config.kmsMasterKeyId;
        this._maxMessageSize = config.maxMessageSize;
        this._messageRetentionSeconds = config.messageRetentionSeconds;
        this._name = config.name;
        this._namePrefix = config.namePrefix;
        this._policy = config.policy;
        this._receiveWaitTimeSeconds = config.receiveWaitTimeSeconds;
        this._redriveAllowPolicy = config.redriveAllowPolicy;
        this._redrivePolicy = config.redrivePolicy;
        this._sqsManagedSseEnabled = config.sqsManagedSseEnabled;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._visibilityTimeoutSeconds = config.visibilityTimeoutSeconds;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get contentBasedDeduplication() {
        return this.getBooleanAttribute('content_based_deduplication');
    }
    set contentBasedDeduplication(value) {
        this._contentBasedDeduplication = value;
    }
    resetContentBasedDeduplication() {
        this._contentBasedDeduplication = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentBasedDeduplicationInput() {
        return this._contentBasedDeduplication;
    }
    get deduplicationScope() {
        return this.getStringAttribute('deduplication_scope');
    }
    set deduplicationScope(value) {
        this._deduplicationScope = value;
    }
    resetDeduplicationScope() {
        this._deduplicationScope = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deduplicationScopeInput() {
        return this._deduplicationScope;
    }
    get delaySeconds() {
        return this.getNumberAttribute('delay_seconds');
    }
    set delaySeconds(value) {
        this._delaySeconds = value;
    }
    resetDelaySeconds() {
        this._delaySeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get delaySecondsInput() {
        return this._delaySeconds;
    }
    get fifoQueue() {
        return this.getBooleanAttribute('fifo_queue');
    }
    set fifoQueue(value) {
        this._fifoQueue = value;
    }
    resetFifoQueue() {
        this._fifoQueue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fifoQueueInput() {
        return this._fifoQueue;
    }
    get fifoThroughputLimit() {
        return this.getStringAttribute('fifo_throughput_limit');
    }
    set fifoThroughputLimit(value) {
        this._fifoThroughputLimit = value;
    }
    resetFifoThroughputLimit() {
        this._fifoThroughputLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fifoThroughputLimitInput() {
        return this._fifoThroughputLimit;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get kmsDataKeyReusePeriodSeconds() {
        return this.getNumberAttribute('kms_data_key_reuse_period_seconds');
    }
    set kmsDataKeyReusePeriodSeconds(value) {
        this._kmsDataKeyReusePeriodSeconds = value;
    }
    resetKmsDataKeyReusePeriodSeconds() {
        this._kmsDataKeyReusePeriodSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsDataKeyReusePeriodSecondsInput() {
        return this._kmsDataKeyReusePeriodSeconds;
    }
    get kmsMasterKeyId() {
        return this.getStringAttribute('kms_master_key_id');
    }
    set kmsMasterKeyId(value) {
        this._kmsMasterKeyId = value;
    }
    resetKmsMasterKeyId() {
        this._kmsMasterKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsMasterKeyIdInput() {
        return this._kmsMasterKeyId;
    }
    get maxMessageSize() {
        return this.getNumberAttribute('max_message_size');
    }
    set maxMessageSize(value) {
        this._maxMessageSize = value;
    }
    resetMaxMessageSize() {
        this._maxMessageSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxMessageSizeInput() {
        return this._maxMessageSize;
    }
    get messageRetentionSeconds() {
        return this.getNumberAttribute('message_retention_seconds');
    }
    set messageRetentionSeconds(value) {
        this._messageRetentionSeconds = value;
    }
    resetMessageRetentionSeconds() {
        this._messageRetentionSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messageRetentionSecondsInput() {
        return this._messageRetentionSeconds;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get namePrefix() {
        return this.getStringAttribute('name_prefix');
    }
    set namePrefix(value) {
        this._namePrefix = value;
    }
    resetNamePrefix() {
        this._namePrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get namePrefixInput() {
        return this._namePrefix;
    }
    get policy() {
        return this.getStringAttribute('policy');
    }
    set policy(value) {
        this._policy = value;
    }
    resetPolicy() {
        this._policy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policyInput() {
        return this._policy;
    }
    get receiveWaitTimeSeconds() {
        return this.getNumberAttribute('receive_wait_time_seconds');
    }
    set receiveWaitTimeSeconds(value) {
        this._receiveWaitTimeSeconds = value;
    }
    resetReceiveWaitTimeSeconds() {
        this._receiveWaitTimeSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get receiveWaitTimeSecondsInput() {
        return this._receiveWaitTimeSeconds;
    }
    get redriveAllowPolicy() {
        return this.getStringAttribute('redrive_allow_policy');
    }
    set redriveAllowPolicy(value) {
        this._redriveAllowPolicy = value;
    }
    resetRedriveAllowPolicy() {
        this._redriveAllowPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redriveAllowPolicyInput() {
        return this._redriveAllowPolicy;
    }
    get redrivePolicy() {
        return this.getStringAttribute('redrive_policy');
    }
    set redrivePolicy(value) {
        this._redrivePolicy = value;
    }
    resetRedrivePolicy() {
        this._redrivePolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redrivePolicyInput() {
        return this._redrivePolicy;
    }
    get sqsManagedSseEnabled() {
        return this.getBooleanAttribute('sqs_managed_sse_enabled');
    }
    set sqsManagedSseEnabled(value) {
        this._sqsManagedSseEnabled = value;
    }
    resetSqsManagedSseEnabled() {
        this._sqsManagedSseEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sqsManagedSseEnabledInput() {
        return this._sqsManagedSseEnabled;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    // url - computed: true, optional: false, required: false
    get url() {
        return this.getStringAttribute('url');
    }
    get visibilityTimeoutSeconds() {
        return this.getNumberAttribute('visibility_timeout_seconds');
    }
    set visibilityTimeoutSeconds(value) {
        this._visibilityTimeoutSeconds = value;
    }
    resetVisibilityTimeoutSeconds() {
        this._visibilityTimeoutSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get visibilityTimeoutSecondsInput() {
        return this._visibilityTimeoutSeconds;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            content_based_deduplication: cdktf.booleanToTerraform(this._contentBasedDeduplication),
            deduplication_scope: cdktf.stringToTerraform(this._deduplicationScope),
            delay_seconds: cdktf.numberToTerraform(this._delaySeconds),
            fifo_queue: cdktf.booleanToTerraform(this._fifoQueue),
            fifo_throughput_limit: cdktf.stringToTerraform(this._fifoThroughputLimit),
            id: cdktf.stringToTerraform(this._id),
            kms_data_key_reuse_period_seconds: cdktf.numberToTerraform(this._kmsDataKeyReusePeriodSeconds),
            kms_master_key_id: cdktf.stringToTerraform(this._kmsMasterKeyId),
            max_message_size: cdktf.numberToTerraform(this._maxMessageSize),
            message_retention_seconds: cdktf.numberToTerraform(this._messageRetentionSeconds),
            name: cdktf.stringToTerraform(this._name),
            name_prefix: cdktf.stringToTerraform(this._namePrefix),
            policy: cdktf.stringToTerraform(this._policy),
            receive_wait_time_seconds: cdktf.numberToTerraform(this._receiveWaitTimeSeconds),
            redrive_allow_policy: cdktf.stringToTerraform(this._redriveAllowPolicy),
            redrive_policy: cdktf.stringToTerraform(this._redrivePolicy),
            sqs_managed_sse_enabled: cdktf.booleanToTerraform(this._sqsManagedSseEnabled),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            visibility_timeout_seconds: cdktf.numberToTerraform(this._visibilityTimeoutSeconds),
        };
    }
}
exports.SqsQueue = SqsQueue;
_a = JSII_RTTI_SYMBOL_1;
SqsQueue[_a] = { fqn: "@cdktf/provider-aws.sqsQueue.SqsQueue", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
SqsQueue.tfResourceType = "aws_sqs_queue";
//# sourceMappingURL=data:application/json;base64,