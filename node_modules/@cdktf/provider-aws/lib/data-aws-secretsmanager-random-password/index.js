"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsSecretsmanagerRandomPassword = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/d/secretsmanager_random_password aws_secretsmanager_random_password}
*/
class DataAwsSecretsmanagerRandomPassword extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/d/secretsmanager_random_password aws_secretsmanager_random_password} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsSecretsmanagerRandomPasswordConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'aws_secretsmanager_random_password',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._excludeCharacters = config.excludeCharacters;
        this._excludeLowercase = config.excludeLowercase;
        this._excludeNumbers = config.excludeNumbers;
        this._excludePunctuation = config.excludePunctuation;
        this._excludeUppercase = config.excludeUppercase;
        this._id = config.id;
        this._includeSpace = config.includeSpace;
        this._passwordLength = config.passwordLength;
        this._randomPassword = config.randomPassword;
        this._requireEachIncludedType = config.requireEachIncludedType;
    }
    get excludeCharacters() {
        return this.getStringAttribute('exclude_characters');
    }
    set excludeCharacters(value) {
        this._excludeCharacters = value;
    }
    resetExcludeCharacters() {
        this._excludeCharacters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeCharactersInput() {
        return this._excludeCharacters;
    }
    get excludeLowercase() {
        return this.getBooleanAttribute('exclude_lowercase');
    }
    set excludeLowercase(value) {
        this._excludeLowercase = value;
    }
    resetExcludeLowercase() {
        this._excludeLowercase = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeLowercaseInput() {
        return this._excludeLowercase;
    }
    get excludeNumbers() {
        return this.getBooleanAttribute('exclude_numbers');
    }
    set excludeNumbers(value) {
        this._excludeNumbers = value;
    }
    resetExcludeNumbers() {
        this._excludeNumbers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeNumbersInput() {
        return this._excludeNumbers;
    }
    get excludePunctuation() {
        return this.getBooleanAttribute('exclude_punctuation');
    }
    set excludePunctuation(value) {
        this._excludePunctuation = value;
    }
    resetExcludePunctuation() {
        this._excludePunctuation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludePunctuationInput() {
        return this._excludePunctuation;
    }
    get excludeUppercase() {
        return this.getBooleanAttribute('exclude_uppercase');
    }
    set excludeUppercase(value) {
        this._excludeUppercase = value;
    }
    resetExcludeUppercase() {
        this._excludeUppercase = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeUppercaseInput() {
        return this._excludeUppercase;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get includeSpace() {
        return this.getBooleanAttribute('include_space');
    }
    set includeSpace(value) {
        this._includeSpace = value;
    }
    resetIncludeSpace() {
        this._includeSpace = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeSpaceInput() {
        return this._includeSpace;
    }
    get passwordLength() {
        return this.getNumberAttribute('password_length');
    }
    set passwordLength(value) {
        this._passwordLength = value;
    }
    resetPasswordLength() {
        this._passwordLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordLengthInput() {
        return this._passwordLength;
    }
    get randomPassword() {
        return this.getStringAttribute('random_password');
    }
    set randomPassword(value) {
        this._randomPassword = value;
    }
    resetRandomPassword() {
        this._randomPassword = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get randomPasswordInput() {
        return this._randomPassword;
    }
    get requireEachIncludedType() {
        return this.getBooleanAttribute('require_each_included_type');
    }
    set requireEachIncludedType(value) {
        this._requireEachIncludedType = value;
    }
    resetRequireEachIncludedType() {
        this._requireEachIncludedType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireEachIncludedTypeInput() {
        return this._requireEachIncludedType;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            exclude_characters: cdktf.stringToTerraform(this._excludeCharacters),
            exclude_lowercase: cdktf.booleanToTerraform(this._excludeLowercase),
            exclude_numbers: cdktf.booleanToTerraform(this._excludeNumbers),
            exclude_punctuation: cdktf.booleanToTerraform(this._excludePunctuation),
            exclude_uppercase: cdktf.booleanToTerraform(this._excludeUppercase),
            id: cdktf.stringToTerraform(this._id),
            include_space: cdktf.booleanToTerraform(this._includeSpace),
            password_length: cdktf.numberToTerraform(this._passwordLength),
            random_password: cdktf.stringToTerraform(this._randomPassword),
            require_each_included_type: cdktf.booleanToTerraform(this._requireEachIncludedType),
        };
    }
}
exports.DataAwsSecretsmanagerRandomPassword = DataAwsSecretsmanagerRandomPassword;
_a = JSII_RTTI_SYMBOL_1;
DataAwsSecretsmanagerRandomPassword[_a] = { fqn: "@cdktf/provider-aws.dataAwsSecretsmanagerRandomPassword.DataAwsSecretsmanagerRandomPassword", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
DataAwsSecretsmanagerRandomPassword.tfResourceType = "aws_secretsmanager_random_password";
//# sourceMappingURL=data:application/json;base64,