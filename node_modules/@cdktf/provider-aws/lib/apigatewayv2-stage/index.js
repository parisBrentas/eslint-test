"use strict";
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Apigatewayv2Stage = exports.Apigatewayv2StageRouteSettingsList = exports.Apigatewayv2StageRouteSettingsOutputReference = exports.apigatewayv2StageRouteSettingsToTerraform = exports.Apigatewayv2StageDefaultRouteSettingsOutputReference = exports.apigatewayv2StageDefaultRouteSettingsToTerraform = exports.Apigatewayv2StageAccessLogSettingsOutputReference = exports.apigatewayv2StageAccessLogSettingsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function apigatewayv2StageAccessLogSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_arn: cdktf.stringToTerraform(struct.destinationArn),
        format: cdktf.stringToTerraform(struct.format),
    };
}
exports.apigatewayv2StageAccessLogSettingsToTerraform = apigatewayv2StageAccessLogSettingsToTerraform;
class Apigatewayv2StageAccessLogSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationArn = this._destinationArn;
        }
        if (this._format !== undefined) {
            hasAnyValues = true;
            internalValueResult.format = this._format;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationArn = undefined;
            this._format = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationArn = value.destinationArn;
            this._format = value.format;
        }
    }
    get destinationArn() {
        return this.getStringAttribute('destination_arn');
    }
    set destinationArn(value) {
        this._destinationArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationArnInput() {
        return this._destinationArn;
    }
    get format() {
        return this.getStringAttribute('format');
    }
    set format(value) {
        this._format = value;
    }
    // Temporarily expose input value. Use with caution.
    get formatInput() {
        return this._format;
    }
}
exports.Apigatewayv2StageAccessLogSettingsOutputReference = Apigatewayv2StageAccessLogSettingsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
Apigatewayv2StageAccessLogSettingsOutputReference[_a] = { fqn: "@cdktf/provider-aws.apigatewayv2Stage.Apigatewayv2StageAccessLogSettingsOutputReference", version: "10.0.12" };
function apigatewayv2StageDefaultRouteSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        data_trace_enabled: cdktf.booleanToTerraform(struct.dataTraceEnabled),
        detailed_metrics_enabled: cdktf.booleanToTerraform(struct.detailedMetricsEnabled),
        logging_level: cdktf.stringToTerraform(struct.loggingLevel),
        throttling_burst_limit: cdktf.numberToTerraform(struct.throttlingBurstLimit),
        throttling_rate_limit: cdktf.numberToTerraform(struct.throttlingRateLimit),
    };
}
exports.apigatewayv2StageDefaultRouteSettingsToTerraform = apigatewayv2StageDefaultRouteSettingsToTerraform;
class Apigatewayv2StageDefaultRouteSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataTraceEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataTraceEnabled = this._dataTraceEnabled;
        }
        if (this._detailedMetricsEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.detailedMetricsEnabled = this._detailedMetricsEnabled;
        }
        if (this._loggingLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingLevel = this._loggingLevel;
        }
        if (this._throttlingBurstLimit !== undefined) {
            hasAnyValues = true;
            internalValueResult.throttlingBurstLimit = this._throttlingBurstLimit;
        }
        if (this._throttlingRateLimit !== undefined) {
            hasAnyValues = true;
            internalValueResult.throttlingRateLimit = this._throttlingRateLimit;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dataTraceEnabled = undefined;
            this._detailedMetricsEnabled = undefined;
            this._loggingLevel = undefined;
            this._throttlingBurstLimit = undefined;
            this._throttlingRateLimit = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dataTraceEnabled = value.dataTraceEnabled;
            this._detailedMetricsEnabled = value.detailedMetricsEnabled;
            this._loggingLevel = value.loggingLevel;
            this._throttlingBurstLimit = value.throttlingBurstLimit;
            this._throttlingRateLimit = value.throttlingRateLimit;
        }
    }
    get dataTraceEnabled() {
        return this.getBooleanAttribute('data_trace_enabled');
    }
    set dataTraceEnabled(value) {
        this._dataTraceEnabled = value;
    }
    resetDataTraceEnabled() {
        this._dataTraceEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTraceEnabledInput() {
        return this._dataTraceEnabled;
    }
    get detailedMetricsEnabled() {
        return this.getBooleanAttribute('detailed_metrics_enabled');
    }
    set detailedMetricsEnabled(value) {
        this._detailedMetricsEnabled = value;
    }
    resetDetailedMetricsEnabled() {
        this._detailedMetricsEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get detailedMetricsEnabledInput() {
        return this._detailedMetricsEnabled;
    }
    get loggingLevel() {
        return this.getStringAttribute('logging_level');
    }
    set loggingLevel(value) {
        this._loggingLevel = value;
    }
    resetLoggingLevel() {
        this._loggingLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingLevelInput() {
        return this._loggingLevel;
    }
    get throttlingBurstLimit() {
        return this.getNumberAttribute('throttling_burst_limit');
    }
    set throttlingBurstLimit(value) {
        this._throttlingBurstLimit = value;
    }
    resetThrottlingBurstLimit() {
        this._throttlingBurstLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get throttlingBurstLimitInput() {
        return this._throttlingBurstLimit;
    }
    get throttlingRateLimit() {
        return this.getNumberAttribute('throttling_rate_limit');
    }
    set throttlingRateLimit(value) {
        this._throttlingRateLimit = value;
    }
    resetThrottlingRateLimit() {
        this._throttlingRateLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get throttlingRateLimitInput() {
        return this._throttlingRateLimit;
    }
}
exports.Apigatewayv2StageDefaultRouteSettingsOutputReference = Apigatewayv2StageDefaultRouteSettingsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
Apigatewayv2StageDefaultRouteSettingsOutputReference[_b] = { fqn: "@cdktf/provider-aws.apigatewayv2Stage.Apigatewayv2StageDefaultRouteSettingsOutputReference", version: "10.0.12" };
function apigatewayv2StageRouteSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        data_trace_enabled: cdktf.booleanToTerraform(struct.dataTraceEnabled),
        detailed_metrics_enabled: cdktf.booleanToTerraform(struct.detailedMetricsEnabled),
        logging_level: cdktf.stringToTerraform(struct.loggingLevel),
        route_key: cdktf.stringToTerraform(struct.routeKey),
        throttling_burst_limit: cdktf.numberToTerraform(struct.throttlingBurstLimit),
        throttling_rate_limit: cdktf.numberToTerraform(struct.throttlingRateLimit),
    };
}
exports.apigatewayv2StageRouteSettingsToTerraform = apigatewayv2StageRouteSettingsToTerraform;
class Apigatewayv2StageRouteSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataTraceEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataTraceEnabled = this._dataTraceEnabled;
        }
        if (this._detailedMetricsEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.detailedMetricsEnabled = this._detailedMetricsEnabled;
        }
        if (this._loggingLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingLevel = this._loggingLevel;
        }
        if (this._routeKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.routeKey = this._routeKey;
        }
        if (this._throttlingBurstLimit !== undefined) {
            hasAnyValues = true;
            internalValueResult.throttlingBurstLimit = this._throttlingBurstLimit;
        }
        if (this._throttlingRateLimit !== undefined) {
            hasAnyValues = true;
            internalValueResult.throttlingRateLimit = this._throttlingRateLimit;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._dataTraceEnabled = undefined;
            this._detailedMetricsEnabled = undefined;
            this._loggingLevel = undefined;
            this._routeKey = undefined;
            this._throttlingBurstLimit = undefined;
            this._throttlingRateLimit = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._dataTraceEnabled = value.dataTraceEnabled;
            this._detailedMetricsEnabled = value.detailedMetricsEnabled;
            this._loggingLevel = value.loggingLevel;
            this._routeKey = value.routeKey;
            this._throttlingBurstLimit = value.throttlingBurstLimit;
            this._throttlingRateLimit = value.throttlingRateLimit;
        }
    }
    get dataTraceEnabled() {
        return this.getBooleanAttribute('data_trace_enabled');
    }
    set dataTraceEnabled(value) {
        this._dataTraceEnabled = value;
    }
    resetDataTraceEnabled() {
        this._dataTraceEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTraceEnabledInput() {
        return this._dataTraceEnabled;
    }
    get detailedMetricsEnabled() {
        return this.getBooleanAttribute('detailed_metrics_enabled');
    }
    set detailedMetricsEnabled(value) {
        this._detailedMetricsEnabled = value;
    }
    resetDetailedMetricsEnabled() {
        this._detailedMetricsEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get detailedMetricsEnabledInput() {
        return this._detailedMetricsEnabled;
    }
    get loggingLevel() {
        return this.getStringAttribute('logging_level');
    }
    set loggingLevel(value) {
        this._loggingLevel = value;
    }
    resetLoggingLevel() {
        this._loggingLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingLevelInput() {
        return this._loggingLevel;
    }
    get routeKey() {
        return this.getStringAttribute('route_key');
    }
    set routeKey(value) {
        this._routeKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get routeKeyInput() {
        return this._routeKey;
    }
    get throttlingBurstLimit() {
        return this.getNumberAttribute('throttling_burst_limit');
    }
    set throttlingBurstLimit(value) {
        this._throttlingBurstLimit = value;
    }
    resetThrottlingBurstLimit() {
        this._throttlingBurstLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get throttlingBurstLimitInput() {
        return this._throttlingBurstLimit;
    }
    get throttlingRateLimit() {
        return this.getNumberAttribute('throttling_rate_limit');
    }
    set throttlingRateLimit(value) {
        this._throttlingRateLimit = value;
    }
    resetThrottlingRateLimit() {
        this._throttlingRateLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get throttlingRateLimitInput() {
        return this._throttlingRateLimit;
    }
}
exports.Apigatewayv2StageRouteSettingsOutputReference = Apigatewayv2StageRouteSettingsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
Apigatewayv2StageRouteSettingsOutputReference[_c] = { fqn: "@cdktf/provider-aws.apigatewayv2Stage.Apigatewayv2StageRouteSettingsOutputReference", version: "10.0.12" };
class Apigatewayv2StageRouteSettingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Apigatewayv2StageRouteSettingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Apigatewayv2StageRouteSettingsList = Apigatewayv2StageRouteSettingsList;
_d = JSII_RTTI_SYMBOL_1;
Apigatewayv2StageRouteSettingsList[_d] = { fqn: "@cdktf/provider-aws.apigatewayv2Stage.Apigatewayv2StageRouteSettingsList", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/apigatewayv2_stage aws_apigatewayv2_stage}
*/
class Apigatewayv2Stage extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/apigatewayv2_stage aws_apigatewayv2_stage} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Apigatewayv2StageConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_apigatewayv2_stage',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // access_log_settings - computed: false, optional: true, required: false
        this._accessLogSettings = new Apigatewayv2StageAccessLogSettingsOutputReference(this, "access_log_settings");
        // default_route_settings - computed: false, optional: true, required: false
        this._defaultRouteSettings = new Apigatewayv2StageDefaultRouteSettingsOutputReference(this, "default_route_settings");
        // route_settings - computed: false, optional: true, required: false
        this._routeSettings = new Apigatewayv2StageRouteSettingsList(this, "route_settings", true);
        this._apiId = config.apiId;
        this._autoDeploy = config.autoDeploy;
        this._clientCertificateId = config.clientCertificateId;
        this._deploymentId = config.deploymentId;
        this._description = config.description;
        this._id = config.id;
        this._name = config.name;
        this._stageVariables = config.stageVariables;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._accessLogSettings.internalValue = config.accessLogSettings;
        this._defaultRouteSettings.internalValue = config.defaultRouteSettings;
        this._routeSettings.internalValue = config.routeSettings;
    }
    get apiId() {
        return this.getStringAttribute('api_id');
    }
    set apiId(value) {
        this._apiId = value;
    }
    // Temporarily expose input value. Use with caution.
    get apiIdInput() {
        return this._apiId;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get autoDeploy() {
        return this.getBooleanAttribute('auto_deploy');
    }
    set autoDeploy(value) {
        this._autoDeploy = value;
    }
    resetAutoDeploy() {
        this._autoDeploy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoDeployInput() {
        return this._autoDeploy;
    }
    get clientCertificateId() {
        return this.getStringAttribute('client_certificate_id');
    }
    set clientCertificateId(value) {
        this._clientCertificateId = value;
    }
    resetClientCertificateId() {
        this._clientCertificateId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientCertificateIdInput() {
        return this._clientCertificateId;
    }
    get deploymentId() {
        return this.getStringAttribute('deployment_id');
    }
    set deploymentId(value) {
        this._deploymentId = value;
    }
    resetDeploymentId() {
        this._deploymentId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deploymentIdInput() {
        return this._deploymentId;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // execution_arn - computed: true, optional: false, required: false
    get executionArn() {
        return this.getStringAttribute('execution_arn');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // invoke_url - computed: true, optional: false, required: false
    get invokeUrl() {
        return this.getStringAttribute('invoke_url');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get stageVariables() {
        return this.getStringMapAttribute('stage_variables');
    }
    set stageVariables(value) {
        this._stageVariables = value;
    }
    resetStageVariables() {
        this._stageVariables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stageVariablesInput() {
        return this._stageVariables;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get accessLogSettings() {
        return this._accessLogSettings;
    }
    putAccessLogSettings(value) {
        this._accessLogSettings.internalValue = value;
    }
    resetAccessLogSettings() {
        this._accessLogSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessLogSettingsInput() {
        return this._accessLogSettings.internalValue;
    }
    get defaultRouteSettings() {
        return this._defaultRouteSettings;
    }
    putDefaultRouteSettings(value) {
        this._defaultRouteSettings.internalValue = value;
    }
    resetDefaultRouteSettings() {
        this._defaultRouteSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultRouteSettingsInput() {
        return this._defaultRouteSettings.internalValue;
    }
    get routeSettings() {
        return this._routeSettings;
    }
    putRouteSettings(value) {
        this._routeSettings.internalValue = value;
    }
    resetRouteSettings() {
        this._routeSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get routeSettingsInput() {
        return this._routeSettings.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            api_id: cdktf.stringToTerraform(this._apiId),
            auto_deploy: cdktf.booleanToTerraform(this._autoDeploy),
            client_certificate_id: cdktf.stringToTerraform(this._clientCertificateId),
            deployment_id: cdktf.stringToTerraform(this._deploymentId),
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            stage_variables: cdktf.hashMapper(cdktf.stringToTerraform)(this._stageVariables),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            access_log_settings: apigatewayv2StageAccessLogSettingsToTerraform(this._accessLogSettings.internalValue),
            default_route_settings: apigatewayv2StageDefaultRouteSettingsToTerraform(this._defaultRouteSettings.internalValue),
            route_settings: cdktf.listMapper(apigatewayv2StageRouteSettingsToTerraform, true)(this._routeSettings.internalValue),
        };
    }
}
exports.Apigatewayv2Stage = Apigatewayv2Stage;
_e = JSII_RTTI_SYMBOL_1;
Apigatewayv2Stage[_e] = { fqn: "@cdktf/provider-aws.apigatewayv2Stage.Apigatewayv2Stage", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
Apigatewayv2Stage.tfResourceType = "aws_apigatewayv2_stage";
//# sourceMappingURL=data:application/json;base64,