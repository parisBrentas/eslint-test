"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FsxOntapStorageVirtualMachine = exports.FsxOntapStorageVirtualMachineTimeoutsOutputReference = exports.fsxOntapStorageVirtualMachineTimeoutsToTerraform = exports.FsxOntapStorageVirtualMachineActiveDirectoryConfigurationOutputReference = exports.fsxOntapStorageVirtualMachineActiveDirectoryConfigurationToTerraform = exports.FsxOntapStorageVirtualMachineActiveDirectoryConfigurationSelfManagedActiveDirectoryConfigurationOutputReference = exports.fsxOntapStorageVirtualMachineActiveDirectoryConfigurationSelfManagedActiveDirectoryConfigurationToTerraform = exports.FsxOntapStorageVirtualMachineEndpointsList = exports.FsxOntapStorageVirtualMachineEndpointsOutputReference = exports.fsxOntapStorageVirtualMachineEndpointsToTerraform = exports.FsxOntapStorageVirtualMachineEndpointsSmbList = exports.FsxOntapStorageVirtualMachineEndpointsSmbOutputReference = exports.fsxOntapStorageVirtualMachineEndpointsSmbToTerraform = exports.FsxOntapStorageVirtualMachineEndpointsNfsList = exports.FsxOntapStorageVirtualMachineEndpointsNfsOutputReference = exports.fsxOntapStorageVirtualMachineEndpointsNfsToTerraform = exports.FsxOntapStorageVirtualMachineEndpointsManagementList = exports.FsxOntapStorageVirtualMachineEndpointsManagementOutputReference = exports.fsxOntapStorageVirtualMachineEndpointsManagementToTerraform = exports.FsxOntapStorageVirtualMachineEndpointsIscsiList = exports.FsxOntapStorageVirtualMachineEndpointsIscsiOutputReference = exports.fsxOntapStorageVirtualMachineEndpointsIscsiToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function fsxOntapStorageVirtualMachineEndpointsIscsiToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.fsxOntapStorageVirtualMachineEndpointsIscsiToTerraform = fsxOntapStorageVirtualMachineEndpointsIscsiToTerraform;
class FsxOntapStorageVirtualMachineEndpointsIscsiOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // dns_name - computed: true, optional: false, required: false
    get dnsName() {
        return this.getStringAttribute('dns_name');
    }
    // ip_addresses - computed: true, optional: false, required: false
    get ipAddresses() {
        return cdktf.Fn.tolist(this.getListAttribute('ip_addresses'));
    }
}
exports.FsxOntapStorageVirtualMachineEndpointsIscsiOutputReference = FsxOntapStorageVirtualMachineEndpointsIscsiOutputReference;
_a = JSII_RTTI_SYMBOL_1;
FsxOntapStorageVirtualMachineEndpointsIscsiOutputReference[_a] = { fqn: "@cdktf/provider-aws.fsxOntapStorageVirtualMachine.FsxOntapStorageVirtualMachineEndpointsIscsiOutputReference", version: "10.0.12" };
class FsxOntapStorageVirtualMachineEndpointsIscsiList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new FsxOntapStorageVirtualMachineEndpointsIscsiOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.FsxOntapStorageVirtualMachineEndpointsIscsiList = FsxOntapStorageVirtualMachineEndpointsIscsiList;
_b = JSII_RTTI_SYMBOL_1;
FsxOntapStorageVirtualMachineEndpointsIscsiList[_b] = { fqn: "@cdktf/provider-aws.fsxOntapStorageVirtualMachine.FsxOntapStorageVirtualMachineEndpointsIscsiList", version: "10.0.12" };
function fsxOntapStorageVirtualMachineEndpointsManagementToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.fsxOntapStorageVirtualMachineEndpointsManagementToTerraform = fsxOntapStorageVirtualMachineEndpointsManagementToTerraform;
class FsxOntapStorageVirtualMachineEndpointsManagementOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // dns_name - computed: true, optional: false, required: false
    get dnsName() {
        return this.getStringAttribute('dns_name');
    }
    // ip_addresses - computed: true, optional: false, required: false
    get ipAddresses() {
        return cdktf.Fn.tolist(this.getListAttribute('ip_addresses'));
    }
}
exports.FsxOntapStorageVirtualMachineEndpointsManagementOutputReference = FsxOntapStorageVirtualMachineEndpointsManagementOutputReference;
_c = JSII_RTTI_SYMBOL_1;
FsxOntapStorageVirtualMachineEndpointsManagementOutputReference[_c] = { fqn: "@cdktf/provider-aws.fsxOntapStorageVirtualMachine.FsxOntapStorageVirtualMachineEndpointsManagementOutputReference", version: "10.0.12" };
class FsxOntapStorageVirtualMachineEndpointsManagementList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new FsxOntapStorageVirtualMachineEndpointsManagementOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.FsxOntapStorageVirtualMachineEndpointsManagementList = FsxOntapStorageVirtualMachineEndpointsManagementList;
_d = JSII_RTTI_SYMBOL_1;
FsxOntapStorageVirtualMachineEndpointsManagementList[_d] = { fqn: "@cdktf/provider-aws.fsxOntapStorageVirtualMachine.FsxOntapStorageVirtualMachineEndpointsManagementList", version: "10.0.12" };
function fsxOntapStorageVirtualMachineEndpointsNfsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.fsxOntapStorageVirtualMachineEndpointsNfsToTerraform = fsxOntapStorageVirtualMachineEndpointsNfsToTerraform;
class FsxOntapStorageVirtualMachineEndpointsNfsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // dns_name - computed: true, optional: false, required: false
    get dnsName() {
        return this.getStringAttribute('dns_name');
    }
    // ip_addresses - computed: true, optional: false, required: false
    get ipAddresses() {
        return cdktf.Fn.tolist(this.getListAttribute('ip_addresses'));
    }
}
exports.FsxOntapStorageVirtualMachineEndpointsNfsOutputReference = FsxOntapStorageVirtualMachineEndpointsNfsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
FsxOntapStorageVirtualMachineEndpointsNfsOutputReference[_e] = { fqn: "@cdktf/provider-aws.fsxOntapStorageVirtualMachine.FsxOntapStorageVirtualMachineEndpointsNfsOutputReference", version: "10.0.12" };
class FsxOntapStorageVirtualMachineEndpointsNfsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new FsxOntapStorageVirtualMachineEndpointsNfsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.FsxOntapStorageVirtualMachineEndpointsNfsList = FsxOntapStorageVirtualMachineEndpointsNfsList;
_f = JSII_RTTI_SYMBOL_1;
FsxOntapStorageVirtualMachineEndpointsNfsList[_f] = { fqn: "@cdktf/provider-aws.fsxOntapStorageVirtualMachine.FsxOntapStorageVirtualMachineEndpointsNfsList", version: "10.0.12" };
function fsxOntapStorageVirtualMachineEndpointsSmbToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.fsxOntapStorageVirtualMachineEndpointsSmbToTerraform = fsxOntapStorageVirtualMachineEndpointsSmbToTerraform;
class FsxOntapStorageVirtualMachineEndpointsSmbOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // dns_name - computed: true, optional: false, required: false
    get dnsName() {
        return this.getStringAttribute('dns_name');
    }
    // ip_addresses - computed: true, optional: false, required: false
    get ipAddresses() {
        return cdktf.Fn.tolist(this.getListAttribute('ip_addresses'));
    }
}
exports.FsxOntapStorageVirtualMachineEndpointsSmbOutputReference = FsxOntapStorageVirtualMachineEndpointsSmbOutputReference;
_g = JSII_RTTI_SYMBOL_1;
FsxOntapStorageVirtualMachineEndpointsSmbOutputReference[_g] = { fqn: "@cdktf/provider-aws.fsxOntapStorageVirtualMachine.FsxOntapStorageVirtualMachineEndpointsSmbOutputReference", version: "10.0.12" };
class FsxOntapStorageVirtualMachineEndpointsSmbList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new FsxOntapStorageVirtualMachineEndpointsSmbOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.FsxOntapStorageVirtualMachineEndpointsSmbList = FsxOntapStorageVirtualMachineEndpointsSmbList;
_h = JSII_RTTI_SYMBOL_1;
FsxOntapStorageVirtualMachineEndpointsSmbList[_h] = { fqn: "@cdktf/provider-aws.fsxOntapStorageVirtualMachine.FsxOntapStorageVirtualMachineEndpointsSmbList", version: "10.0.12" };
function fsxOntapStorageVirtualMachineEndpointsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.fsxOntapStorageVirtualMachineEndpointsToTerraform = fsxOntapStorageVirtualMachineEndpointsToTerraform;
class FsxOntapStorageVirtualMachineEndpointsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // iscsi - computed: true, optional: false, required: false
        this._iscsi = new FsxOntapStorageVirtualMachineEndpointsIscsiList(this, "iscsi", false);
        // management - computed: true, optional: false, required: false
        this._management = new FsxOntapStorageVirtualMachineEndpointsManagementList(this, "management", false);
        // nfs - computed: true, optional: false, required: false
        this._nfs = new FsxOntapStorageVirtualMachineEndpointsNfsList(this, "nfs", false);
        // smb - computed: true, optional: false, required: false
        this._smb = new FsxOntapStorageVirtualMachineEndpointsSmbList(this, "smb", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    get iscsi() {
        return this._iscsi;
    }
    get management() {
        return this._management;
    }
    get nfs() {
        return this._nfs;
    }
    get smb() {
        return this._smb;
    }
}
exports.FsxOntapStorageVirtualMachineEndpointsOutputReference = FsxOntapStorageVirtualMachineEndpointsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
FsxOntapStorageVirtualMachineEndpointsOutputReference[_j] = { fqn: "@cdktf/provider-aws.fsxOntapStorageVirtualMachine.FsxOntapStorageVirtualMachineEndpointsOutputReference", version: "10.0.12" };
class FsxOntapStorageVirtualMachineEndpointsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new FsxOntapStorageVirtualMachineEndpointsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.FsxOntapStorageVirtualMachineEndpointsList = FsxOntapStorageVirtualMachineEndpointsList;
_k = JSII_RTTI_SYMBOL_1;
FsxOntapStorageVirtualMachineEndpointsList[_k] = { fqn: "@cdktf/provider-aws.fsxOntapStorageVirtualMachine.FsxOntapStorageVirtualMachineEndpointsList", version: "10.0.12" };
function fsxOntapStorageVirtualMachineActiveDirectoryConfigurationSelfManagedActiveDirectoryConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dns_ips: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.dnsIps),
        domain_name: cdktf.stringToTerraform(struct.domainName),
        file_system_administrators_group: cdktf.stringToTerraform(struct.fileSystemAdministratorsGroup),
        organizational_unit_distinguished_name: cdktf.stringToTerraform(struct.organizationalUnitDistinguishedName),
        password: cdktf.stringToTerraform(struct.password),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.fsxOntapStorageVirtualMachineActiveDirectoryConfigurationSelfManagedActiveDirectoryConfigurationToTerraform = fsxOntapStorageVirtualMachineActiveDirectoryConfigurationSelfManagedActiveDirectoryConfigurationToTerraform;
class FsxOntapStorageVirtualMachineActiveDirectoryConfigurationSelfManagedActiveDirectoryConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dnsIps !== undefined) {
            hasAnyValues = true;
            internalValueResult.dnsIps = this._dnsIps;
        }
        if (this._domainName !== undefined) {
            hasAnyValues = true;
            internalValueResult.domainName = this._domainName;
        }
        if (this._fileSystemAdministratorsGroup !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileSystemAdministratorsGroup = this._fileSystemAdministratorsGroup;
        }
        if (this._organizationalUnitDistinguishedName !== undefined) {
            hasAnyValues = true;
            internalValueResult.organizationalUnitDistinguishedName = this._organizationalUnitDistinguishedName;
        }
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dnsIps = undefined;
            this._domainName = undefined;
            this._fileSystemAdministratorsGroup = undefined;
            this._organizationalUnitDistinguishedName = undefined;
            this._password = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dnsIps = value.dnsIps;
            this._domainName = value.domainName;
            this._fileSystemAdministratorsGroup = value.fileSystemAdministratorsGroup;
            this._organizationalUnitDistinguishedName = value.organizationalUnitDistinguishedName;
            this._password = value.password;
            this._username = value.username;
        }
    }
    get dnsIps() {
        return cdktf.Fn.tolist(this.getListAttribute('dns_ips'));
    }
    set dnsIps(value) {
        this._dnsIps = value;
    }
    // Temporarily expose input value. Use with caution.
    get dnsIpsInput() {
        return this._dnsIps;
    }
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    set domainName(value) {
        this._domainName = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainNameInput() {
        return this._domainName;
    }
    get fileSystemAdministratorsGroup() {
        return this.getStringAttribute('file_system_administrators_group');
    }
    set fileSystemAdministratorsGroup(value) {
        this._fileSystemAdministratorsGroup = value;
    }
    resetFileSystemAdministratorsGroup() {
        this._fileSystemAdministratorsGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileSystemAdministratorsGroupInput() {
        return this._fileSystemAdministratorsGroup;
    }
    get organizationalUnitDistinguishedName() {
        return this.getStringAttribute('organizational_unit_distinguished_name');
    }
    set organizationalUnitDistinguishedName(value) {
        this._organizationalUnitDistinguishedName = value;
    }
    resetOrganizationalUnitDistinguishedName() {
        this._organizationalUnitDistinguishedName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get organizationalUnitDistinguishedNameInput() {
        return this._organizationalUnitDistinguishedName;
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.FsxOntapStorageVirtualMachineActiveDirectoryConfigurationSelfManagedActiveDirectoryConfigurationOutputReference = FsxOntapStorageVirtualMachineActiveDirectoryConfigurationSelfManagedActiveDirectoryConfigurationOutputReference;
_l = JSII_RTTI_SYMBOL_1;
FsxOntapStorageVirtualMachineActiveDirectoryConfigurationSelfManagedActiveDirectoryConfigurationOutputReference[_l] = { fqn: "@cdktf/provider-aws.fsxOntapStorageVirtualMachine.FsxOntapStorageVirtualMachineActiveDirectoryConfigurationSelfManagedActiveDirectoryConfigurationOutputReference", version: "10.0.12" };
function fsxOntapStorageVirtualMachineActiveDirectoryConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        netbios_name: cdktf.stringToTerraform(struct.netbiosName),
        self_managed_active_directory_configuration: fsxOntapStorageVirtualMachineActiveDirectoryConfigurationSelfManagedActiveDirectoryConfigurationToTerraform(struct.selfManagedActiveDirectoryConfiguration),
    };
}
exports.fsxOntapStorageVirtualMachineActiveDirectoryConfigurationToTerraform = fsxOntapStorageVirtualMachineActiveDirectoryConfigurationToTerraform;
class FsxOntapStorageVirtualMachineActiveDirectoryConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // self_managed_active_directory_configuration - computed: false, optional: true, required: false
        this._selfManagedActiveDirectoryConfiguration = new FsxOntapStorageVirtualMachineActiveDirectoryConfigurationSelfManagedActiveDirectoryConfigurationOutputReference(this, "self_managed_active_directory_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._netbiosName !== undefined) {
            hasAnyValues = true;
            internalValueResult.netbiosName = this._netbiosName;
        }
        if (this._selfManagedActiveDirectoryConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.selfManagedActiveDirectoryConfiguration = this._selfManagedActiveDirectoryConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._netbiosName = undefined;
            this._selfManagedActiveDirectoryConfiguration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._netbiosName = value.netbiosName;
            this._selfManagedActiveDirectoryConfiguration.internalValue = value.selfManagedActiveDirectoryConfiguration;
        }
    }
    get netbiosName() {
        return this.getStringAttribute('netbios_name');
    }
    set netbiosName(value) {
        this._netbiosName = value;
    }
    resetNetbiosName() {
        this._netbiosName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get netbiosNameInput() {
        return this._netbiosName;
    }
    get selfManagedActiveDirectoryConfiguration() {
        return this._selfManagedActiveDirectoryConfiguration;
    }
    putSelfManagedActiveDirectoryConfiguration(value) {
        this._selfManagedActiveDirectoryConfiguration.internalValue = value;
    }
    resetSelfManagedActiveDirectoryConfiguration() {
        this._selfManagedActiveDirectoryConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get selfManagedActiveDirectoryConfigurationInput() {
        return this._selfManagedActiveDirectoryConfiguration.internalValue;
    }
}
exports.FsxOntapStorageVirtualMachineActiveDirectoryConfigurationOutputReference = FsxOntapStorageVirtualMachineActiveDirectoryConfigurationOutputReference;
_m = JSII_RTTI_SYMBOL_1;
FsxOntapStorageVirtualMachineActiveDirectoryConfigurationOutputReference[_m] = { fqn: "@cdktf/provider-aws.fsxOntapStorageVirtualMachine.FsxOntapStorageVirtualMachineActiveDirectoryConfigurationOutputReference", version: "10.0.12" };
function fsxOntapStorageVirtualMachineTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.fsxOntapStorageVirtualMachineTimeoutsToTerraform = fsxOntapStorageVirtualMachineTimeoutsToTerraform;
class FsxOntapStorageVirtualMachineTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.FsxOntapStorageVirtualMachineTimeoutsOutputReference = FsxOntapStorageVirtualMachineTimeoutsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
FsxOntapStorageVirtualMachineTimeoutsOutputReference[_o] = { fqn: "@cdktf/provider-aws.fsxOntapStorageVirtualMachine.FsxOntapStorageVirtualMachineTimeoutsOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/fsx_ontap_storage_virtual_machine aws_fsx_ontap_storage_virtual_machine}
*/
class FsxOntapStorageVirtualMachine extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/fsx_ontap_storage_virtual_machine aws_fsx_ontap_storage_virtual_machine} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options FsxOntapStorageVirtualMachineConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_fsx_ontap_storage_virtual_machine',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // endpoints - computed: true, optional: false, required: false
        this._endpoints = new FsxOntapStorageVirtualMachineEndpointsList(this, "endpoints", false);
        // active_directory_configuration - computed: false, optional: true, required: false
        this._activeDirectoryConfiguration = new FsxOntapStorageVirtualMachineActiveDirectoryConfigurationOutputReference(this, "active_directory_configuration");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new FsxOntapStorageVirtualMachineTimeoutsOutputReference(this, "timeouts");
        this._fileSystemId = config.fileSystemId;
        this._id = config.id;
        this._name = config.name;
        this._rootVolumeSecurityStyle = config.rootVolumeSecurityStyle;
        this._svmAdminPassword = config.svmAdminPassword;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._activeDirectoryConfiguration.internalValue = config.activeDirectoryConfiguration;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get endpoints() {
        return this._endpoints;
    }
    get fileSystemId() {
        return this.getStringAttribute('file_system_id');
    }
    set fileSystemId(value) {
        this._fileSystemId = value;
    }
    // Temporarily expose input value. Use with caution.
    get fileSystemIdInput() {
        return this._fileSystemId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get rootVolumeSecurityStyle() {
        return this.getStringAttribute('root_volume_security_style');
    }
    set rootVolumeSecurityStyle(value) {
        this._rootVolumeSecurityStyle = value;
    }
    resetRootVolumeSecurityStyle() {
        this._rootVolumeSecurityStyle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rootVolumeSecurityStyleInput() {
        return this._rootVolumeSecurityStyle;
    }
    // subtype - computed: true, optional: false, required: false
    get subtype() {
        return this.getStringAttribute('subtype');
    }
    get svmAdminPassword() {
        return this.getStringAttribute('svm_admin_password');
    }
    set svmAdminPassword(value) {
        this._svmAdminPassword = value;
    }
    resetSvmAdminPassword() {
        this._svmAdminPassword = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get svmAdminPasswordInput() {
        return this._svmAdminPassword;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    // uuid - computed: true, optional: false, required: false
    get uuid() {
        return this.getStringAttribute('uuid');
    }
    get activeDirectoryConfiguration() {
        return this._activeDirectoryConfiguration;
    }
    putActiveDirectoryConfiguration(value) {
        this._activeDirectoryConfiguration.internalValue = value;
    }
    resetActiveDirectoryConfiguration() {
        this._activeDirectoryConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get activeDirectoryConfigurationInput() {
        return this._activeDirectoryConfiguration.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            file_system_id: cdktf.stringToTerraform(this._fileSystemId),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            root_volume_security_style: cdktf.stringToTerraform(this._rootVolumeSecurityStyle),
            svm_admin_password: cdktf.stringToTerraform(this._svmAdminPassword),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            active_directory_configuration: fsxOntapStorageVirtualMachineActiveDirectoryConfigurationToTerraform(this._activeDirectoryConfiguration.internalValue),
            timeouts: fsxOntapStorageVirtualMachineTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.FsxOntapStorageVirtualMachine = FsxOntapStorageVirtualMachine;
_p = JSII_RTTI_SYMBOL_1;
FsxOntapStorageVirtualMachine[_p] = { fqn: "@cdktf/provider-aws.fsxOntapStorageVirtualMachine.FsxOntapStorageVirtualMachine", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
FsxOntapStorageVirtualMachine.tfResourceType = "aws_fsx_ontap_storage_virtual_machine";
//# sourceMappingURL=data:application/json;base64,