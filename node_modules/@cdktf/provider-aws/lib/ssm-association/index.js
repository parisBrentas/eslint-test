"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SsmAssociation = exports.SsmAssociationTargetsList = exports.SsmAssociationTargetsOutputReference = exports.ssmAssociationTargetsToTerraform = exports.SsmAssociationOutputLocationOutputReference = exports.ssmAssociationOutputLocationToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function ssmAssociationOutputLocationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        s3_bucket_name: cdktf.stringToTerraform(struct.s3BucketName),
        s3_key_prefix: cdktf.stringToTerraform(struct.s3KeyPrefix),
        s3_region: cdktf.stringToTerraform(struct.s3Region),
    };
}
exports.ssmAssociationOutputLocationToTerraform = ssmAssociationOutputLocationToTerraform;
class SsmAssociationOutputLocationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._s3BucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3BucketName = this._s3BucketName;
        }
        if (this._s3KeyPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3KeyPrefix = this._s3KeyPrefix;
        }
        if (this._s3Region !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Region = this._s3Region;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._s3BucketName = undefined;
            this._s3KeyPrefix = undefined;
            this._s3Region = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._s3BucketName = value.s3BucketName;
            this._s3KeyPrefix = value.s3KeyPrefix;
            this._s3Region = value.s3Region;
        }
    }
    get s3BucketName() {
        return this.getStringAttribute('s3_bucket_name');
    }
    set s3BucketName(value) {
        this._s3BucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3BucketNameInput() {
        return this._s3BucketName;
    }
    get s3KeyPrefix() {
        return this.getStringAttribute('s3_key_prefix');
    }
    set s3KeyPrefix(value) {
        this._s3KeyPrefix = value;
    }
    resetS3KeyPrefix() {
        this._s3KeyPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3KeyPrefixInput() {
        return this._s3KeyPrefix;
    }
    get s3Region() {
        return this.getStringAttribute('s3_region');
    }
    set s3Region(value) {
        this._s3Region = value;
    }
    resetS3Region() {
        this._s3Region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3RegionInput() {
        return this._s3Region;
    }
}
exports.SsmAssociationOutputLocationOutputReference = SsmAssociationOutputLocationOutputReference;
_a = JSII_RTTI_SYMBOL_1;
SsmAssociationOutputLocationOutputReference[_a] = { fqn: "@cdktf/provider-aws.ssmAssociation.SsmAssociationOutputLocationOutputReference", version: "10.0.12" };
function ssmAssociationTargetsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.ssmAssociationTargetsToTerraform = ssmAssociationTargetsToTerraform;
class SsmAssociationTargetsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._key = undefined;
            this._values = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._key = value.key;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get values() {
        return this.getListAttribute('values');
    }
    set values(value) {
        this._values = value;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.SsmAssociationTargetsOutputReference = SsmAssociationTargetsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
SsmAssociationTargetsOutputReference[_b] = { fqn: "@cdktf/provider-aws.ssmAssociation.SsmAssociationTargetsOutputReference", version: "10.0.12" };
class SsmAssociationTargetsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SsmAssociationTargetsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SsmAssociationTargetsList = SsmAssociationTargetsList;
_c = JSII_RTTI_SYMBOL_1;
SsmAssociationTargetsList[_c] = { fqn: "@cdktf/provider-aws.ssmAssociation.SsmAssociationTargetsList", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/ssm_association aws_ssm_association}
*/
class SsmAssociation extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/ssm_association aws_ssm_association} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SsmAssociationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_ssm_association',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // output_location - computed: false, optional: true, required: false
        this._outputLocation = new SsmAssociationOutputLocationOutputReference(this, "output_location");
        // targets - computed: false, optional: true, required: false
        this._targets = new SsmAssociationTargetsList(this, "targets", false);
        this._applyOnlyAtCronInterval = config.applyOnlyAtCronInterval;
        this._associationName = config.associationName;
        this._automationTargetParameterName = config.automationTargetParameterName;
        this._complianceSeverity = config.complianceSeverity;
        this._documentVersion = config.documentVersion;
        this._id = config.id;
        this._instanceId = config.instanceId;
        this._maxConcurrency = config.maxConcurrency;
        this._maxErrors = config.maxErrors;
        this._name = config.name;
        this._parameters = config.parameters;
        this._scheduleExpression = config.scheduleExpression;
        this._waitForSuccessTimeoutSeconds = config.waitForSuccessTimeoutSeconds;
        this._outputLocation.internalValue = config.outputLocation;
        this._targets.internalValue = config.targets;
    }
    get applyOnlyAtCronInterval() {
        return this.getBooleanAttribute('apply_only_at_cron_interval');
    }
    set applyOnlyAtCronInterval(value) {
        this._applyOnlyAtCronInterval = value;
    }
    resetApplyOnlyAtCronInterval() {
        this._applyOnlyAtCronInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get applyOnlyAtCronIntervalInput() {
        return this._applyOnlyAtCronInterval;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // association_id - computed: true, optional: false, required: false
    get associationId() {
        return this.getStringAttribute('association_id');
    }
    get associationName() {
        return this.getStringAttribute('association_name');
    }
    set associationName(value) {
        this._associationName = value;
    }
    resetAssociationName() {
        this._associationName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get associationNameInput() {
        return this._associationName;
    }
    get automationTargetParameterName() {
        return this.getStringAttribute('automation_target_parameter_name');
    }
    set automationTargetParameterName(value) {
        this._automationTargetParameterName = value;
    }
    resetAutomationTargetParameterName() {
        this._automationTargetParameterName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get automationTargetParameterNameInput() {
        return this._automationTargetParameterName;
    }
    get complianceSeverity() {
        return this.getStringAttribute('compliance_severity');
    }
    set complianceSeverity(value) {
        this._complianceSeverity = value;
    }
    resetComplianceSeverity() {
        this._complianceSeverity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get complianceSeverityInput() {
        return this._complianceSeverity;
    }
    get documentVersion() {
        return this.getStringAttribute('document_version');
    }
    set documentVersion(value) {
        this._documentVersion = value;
    }
    resetDocumentVersion() {
        this._documentVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get documentVersionInput() {
        return this._documentVersion;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get instanceId() {
        return this.getStringAttribute('instance_id');
    }
    set instanceId(value) {
        this._instanceId = value;
    }
    resetInstanceId() {
        this._instanceId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceIdInput() {
        return this._instanceId;
    }
    get maxConcurrency() {
        return this.getStringAttribute('max_concurrency');
    }
    set maxConcurrency(value) {
        this._maxConcurrency = value;
    }
    resetMaxConcurrency() {
        this._maxConcurrency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConcurrencyInput() {
        return this._maxConcurrency;
    }
    get maxErrors() {
        return this.getStringAttribute('max_errors');
    }
    set maxErrors(value) {
        this._maxErrors = value;
    }
    resetMaxErrors() {
        this._maxErrors = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxErrorsInput() {
        return this._maxErrors;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get parameters() {
        return this.getStringMapAttribute('parameters');
    }
    set parameters(value) {
        this._parameters = value;
    }
    resetParameters() {
        this._parameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters;
    }
    get scheduleExpression() {
        return this.getStringAttribute('schedule_expression');
    }
    set scheduleExpression(value) {
        this._scheduleExpression = value;
    }
    resetScheduleExpression() {
        this._scheduleExpression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleExpressionInput() {
        return this._scheduleExpression;
    }
    get waitForSuccessTimeoutSeconds() {
        return this.getNumberAttribute('wait_for_success_timeout_seconds');
    }
    set waitForSuccessTimeoutSeconds(value) {
        this._waitForSuccessTimeoutSeconds = value;
    }
    resetWaitForSuccessTimeoutSeconds() {
        this._waitForSuccessTimeoutSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get waitForSuccessTimeoutSecondsInput() {
        return this._waitForSuccessTimeoutSeconds;
    }
    get outputLocation() {
        return this._outputLocation;
    }
    putOutputLocation(value) {
        this._outputLocation.internalValue = value;
    }
    resetOutputLocation() {
        this._outputLocation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputLocationInput() {
        return this._outputLocation.internalValue;
    }
    get targets() {
        return this._targets;
    }
    putTargets(value) {
        this._targets.internalValue = value;
    }
    resetTargets() {
        this._targets.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetsInput() {
        return this._targets.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            apply_only_at_cron_interval: cdktf.booleanToTerraform(this._applyOnlyAtCronInterval),
            association_name: cdktf.stringToTerraform(this._associationName),
            automation_target_parameter_name: cdktf.stringToTerraform(this._automationTargetParameterName),
            compliance_severity: cdktf.stringToTerraform(this._complianceSeverity),
            document_version: cdktf.stringToTerraform(this._documentVersion),
            id: cdktf.stringToTerraform(this._id),
            instance_id: cdktf.stringToTerraform(this._instanceId),
            max_concurrency: cdktf.stringToTerraform(this._maxConcurrency),
            max_errors: cdktf.stringToTerraform(this._maxErrors),
            name: cdktf.stringToTerraform(this._name),
            parameters: cdktf.hashMapper(cdktf.stringToTerraform)(this._parameters),
            schedule_expression: cdktf.stringToTerraform(this._scheduleExpression),
            wait_for_success_timeout_seconds: cdktf.numberToTerraform(this._waitForSuccessTimeoutSeconds),
            output_location: ssmAssociationOutputLocationToTerraform(this._outputLocation.internalValue),
            targets: cdktf.listMapper(ssmAssociationTargetsToTerraform, true)(this._targets.internalValue),
        };
    }
}
exports.SsmAssociation = SsmAssociation;
_d = JSII_RTTI_SYMBOL_1;
SsmAssociation[_d] = { fqn: "@cdktf/provider-aws.ssmAssociation.SsmAssociation", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
SsmAssociation.tfResourceType = "aws_ssm_association";
//# sourceMappingURL=data:application/json;base64,