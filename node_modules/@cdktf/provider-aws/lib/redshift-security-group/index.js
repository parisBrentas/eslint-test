"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedshiftSecurityGroup = exports.RedshiftSecurityGroupIngressList = exports.RedshiftSecurityGroupIngressOutputReference = exports.redshiftSecurityGroupIngressToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function redshiftSecurityGroupIngressToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cidr: cdktf.stringToTerraform(struct.cidr),
        security_group_name: cdktf.stringToTerraform(struct.securityGroupName),
        security_group_owner_id: cdktf.stringToTerraform(struct.securityGroupOwnerId),
    };
}
exports.redshiftSecurityGroupIngressToTerraform = redshiftSecurityGroupIngressToTerraform;
class RedshiftSecurityGroupIngressOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cidr !== undefined) {
            hasAnyValues = true;
            internalValueResult.cidr = this._cidr;
        }
        if (this._securityGroupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroupName = this._securityGroupName;
        }
        if (this._securityGroupOwnerId !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroupOwnerId = this._securityGroupOwnerId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._cidr = undefined;
            this._securityGroupName = undefined;
            this._securityGroupOwnerId = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._cidr = value.cidr;
            this._securityGroupName = value.securityGroupName;
            this._securityGroupOwnerId = value.securityGroupOwnerId;
        }
    }
    get cidr() {
        return this.getStringAttribute('cidr');
    }
    set cidr(value) {
        this._cidr = value;
    }
    resetCidr() {
        this._cidr = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cidrInput() {
        return this._cidr;
    }
    get securityGroupName() {
        return this.getStringAttribute('security_group_name');
    }
    set securityGroupName(value) {
        this._securityGroupName = value;
    }
    resetSecurityGroupName() {
        this._securityGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupNameInput() {
        return this._securityGroupName;
    }
    get securityGroupOwnerId() {
        return this.getStringAttribute('security_group_owner_id');
    }
    set securityGroupOwnerId(value) {
        this._securityGroupOwnerId = value;
    }
    resetSecurityGroupOwnerId() {
        this._securityGroupOwnerId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupOwnerIdInput() {
        return this._securityGroupOwnerId;
    }
}
exports.RedshiftSecurityGroupIngressOutputReference = RedshiftSecurityGroupIngressOutputReference;
_a = JSII_RTTI_SYMBOL_1;
RedshiftSecurityGroupIngressOutputReference[_a] = { fqn: "@cdktf/provider-aws.redshiftSecurityGroup.RedshiftSecurityGroupIngressOutputReference", version: "10.0.12" };
class RedshiftSecurityGroupIngressList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new RedshiftSecurityGroupIngressOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.RedshiftSecurityGroupIngressList = RedshiftSecurityGroupIngressList;
_b = JSII_RTTI_SYMBOL_1;
RedshiftSecurityGroupIngressList[_b] = { fqn: "@cdktf/provider-aws.redshiftSecurityGroup.RedshiftSecurityGroupIngressList", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/redshift_security_group aws_redshift_security_group}
*/
class RedshiftSecurityGroup extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/redshift_security_group aws_redshift_security_group} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options RedshiftSecurityGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_redshift_security_group',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // ingress - computed: false, optional: false, required: true
        this._ingress = new RedshiftSecurityGroupIngressList(this, "ingress", true);
        this._description = config.description;
        this._id = config.id;
        this._name = config.name;
        this._ingress.internalValue = config.ingress;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get ingress() {
        return this._ingress;
    }
    putIngress(value) {
        this._ingress.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get ingressInput() {
        return this._ingress.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            ingress: cdktf.listMapper(redshiftSecurityGroupIngressToTerraform, true)(this._ingress.internalValue),
        };
    }
}
exports.RedshiftSecurityGroup = RedshiftSecurityGroup;
_c = JSII_RTTI_SYMBOL_1;
RedshiftSecurityGroup[_c] = { fqn: "@cdktf/provider-aws.redshiftSecurityGroup.RedshiftSecurityGroup", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
RedshiftSecurityGroup.tfResourceType = "aws_redshift_security_group";
//# sourceMappingURL=data:application/json;base64,