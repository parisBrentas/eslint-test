"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigConfigurationAggregator = exports.ConfigConfigurationAggregatorOrganizationAggregationSourceOutputReference = exports.configConfigurationAggregatorOrganizationAggregationSourceToTerraform = exports.ConfigConfigurationAggregatorAccountAggregationSourceOutputReference = exports.configConfigurationAggregatorAccountAggregationSourceToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function configConfigurationAggregatorAccountAggregationSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        account_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.accountIds),
        all_regions: cdktf.booleanToTerraform(struct.allRegions),
        regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.regions),
    };
}
exports.configConfigurationAggregatorAccountAggregationSourceToTerraform = configConfigurationAggregatorAccountAggregationSourceToTerraform;
class ConfigConfigurationAggregatorAccountAggregationSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accountIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.accountIds = this._accountIds;
        }
        if (this._allRegions !== undefined) {
            hasAnyValues = true;
            internalValueResult.allRegions = this._allRegions;
        }
        if (this._regions !== undefined) {
            hasAnyValues = true;
            internalValueResult.regions = this._regions;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accountIds = undefined;
            this._allRegions = undefined;
            this._regions = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accountIds = value.accountIds;
            this._allRegions = value.allRegions;
            this._regions = value.regions;
        }
    }
    get accountIds() {
        return this.getListAttribute('account_ids');
    }
    set accountIds(value) {
        this._accountIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get accountIdsInput() {
        return this._accountIds;
    }
    get allRegions() {
        return this.getBooleanAttribute('all_regions');
    }
    set allRegions(value) {
        this._allRegions = value;
    }
    resetAllRegions() {
        this._allRegions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allRegionsInput() {
        return this._allRegions;
    }
    get regions() {
        return this.getListAttribute('regions');
    }
    set regions(value) {
        this._regions = value;
    }
    resetRegions() {
        this._regions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionsInput() {
        return this._regions;
    }
}
exports.ConfigConfigurationAggregatorAccountAggregationSourceOutputReference = ConfigConfigurationAggregatorAccountAggregationSourceOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ConfigConfigurationAggregatorAccountAggregationSourceOutputReference[_a] = { fqn: "@cdktf/provider-aws.configConfigurationAggregator.ConfigConfigurationAggregatorAccountAggregationSourceOutputReference", version: "10.0.12" };
function configConfigurationAggregatorOrganizationAggregationSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        all_regions: cdktf.booleanToTerraform(struct.allRegions),
        regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.regions),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.configConfigurationAggregatorOrganizationAggregationSourceToTerraform = configConfigurationAggregatorOrganizationAggregationSourceToTerraform;
class ConfigConfigurationAggregatorOrganizationAggregationSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allRegions !== undefined) {
            hasAnyValues = true;
            internalValueResult.allRegions = this._allRegions;
        }
        if (this._regions !== undefined) {
            hasAnyValues = true;
            internalValueResult.regions = this._regions;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allRegions = undefined;
            this._regions = undefined;
            this._roleArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allRegions = value.allRegions;
            this._regions = value.regions;
            this._roleArn = value.roleArn;
        }
    }
    get allRegions() {
        return this.getBooleanAttribute('all_regions');
    }
    set allRegions(value) {
        this._allRegions = value;
    }
    resetAllRegions() {
        this._allRegions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allRegionsInput() {
        return this._allRegions;
    }
    get regions() {
        return this.getListAttribute('regions');
    }
    set regions(value) {
        this._regions = value;
    }
    resetRegions() {
        this._regions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionsInput() {
        return this._regions;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
}
exports.ConfigConfigurationAggregatorOrganizationAggregationSourceOutputReference = ConfigConfigurationAggregatorOrganizationAggregationSourceOutputReference;
_b = JSII_RTTI_SYMBOL_1;
ConfigConfigurationAggregatorOrganizationAggregationSourceOutputReference[_b] = { fqn: "@cdktf/provider-aws.configConfigurationAggregator.ConfigConfigurationAggregatorOrganizationAggregationSourceOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/config_configuration_aggregator aws_config_configuration_aggregator}
*/
class ConfigConfigurationAggregator extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/config_configuration_aggregator aws_config_configuration_aggregator} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ConfigConfigurationAggregatorConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_config_configuration_aggregator',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // account_aggregation_source - computed: false, optional: true, required: false
        this._accountAggregationSource = new ConfigConfigurationAggregatorAccountAggregationSourceOutputReference(this, "account_aggregation_source");
        // organization_aggregation_source - computed: false, optional: true, required: false
        this._organizationAggregationSource = new ConfigConfigurationAggregatorOrganizationAggregationSourceOutputReference(this, "organization_aggregation_source");
        this._id = config.id;
        this._name = config.name;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._accountAggregationSource.internalValue = config.accountAggregationSource;
        this._organizationAggregationSource.internalValue = config.organizationAggregationSource;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get accountAggregationSource() {
        return this._accountAggregationSource;
    }
    putAccountAggregationSource(value) {
        this._accountAggregationSource.internalValue = value;
    }
    resetAccountAggregationSource() {
        this._accountAggregationSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accountAggregationSourceInput() {
        return this._accountAggregationSource.internalValue;
    }
    get organizationAggregationSource() {
        return this._organizationAggregationSource;
    }
    putOrganizationAggregationSource(value) {
        this._organizationAggregationSource.internalValue = value;
    }
    resetOrganizationAggregationSource() {
        this._organizationAggregationSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get organizationAggregationSourceInput() {
        return this._organizationAggregationSource.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            account_aggregation_source: configConfigurationAggregatorAccountAggregationSourceToTerraform(this._accountAggregationSource.internalValue),
            organization_aggregation_source: configConfigurationAggregatorOrganizationAggregationSourceToTerraform(this._organizationAggregationSource.internalValue),
        };
    }
}
exports.ConfigConfigurationAggregator = ConfigConfigurationAggregator;
_c = JSII_RTTI_SYMBOL_1;
ConfigConfigurationAggregator[_c] = { fqn: "@cdktf/provider-aws.configConfigurationAggregator.ConfigConfigurationAggregator", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
ConfigConfigurationAggregator.tfResourceType = "aws_config_configuration_aggregator";
//# sourceMappingURL=data:application/json;base64,