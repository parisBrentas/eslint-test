"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerEndpointConfiguration = exports.SagemakerEndpointConfigurationProductionVariantsList = exports.SagemakerEndpointConfigurationProductionVariantsOutputReference = exports.sagemakerEndpointConfigurationProductionVariantsToTerraform = exports.SagemakerEndpointConfigurationProductionVariantsServerlessConfigOutputReference = exports.sagemakerEndpointConfigurationProductionVariantsServerlessConfigToTerraform = exports.SagemakerEndpointConfigurationDataCaptureConfigOutputReference = exports.sagemakerEndpointConfigurationDataCaptureConfigToTerraform = exports.SagemakerEndpointConfigurationDataCaptureConfigCaptureOptionsList = exports.SagemakerEndpointConfigurationDataCaptureConfigCaptureOptionsOutputReference = exports.sagemakerEndpointConfigurationDataCaptureConfigCaptureOptionsToTerraform = exports.SagemakerEndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderOutputReference = exports.sagemakerEndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderToTerraform = exports.SagemakerEndpointConfigurationAsyncInferenceConfigOutputReference = exports.sagemakerEndpointConfigurationAsyncInferenceConfigToTerraform = exports.SagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigOutputReference = exports.sagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigToTerraform = exports.SagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigOutputReference = exports.sagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigToTerraform = exports.SagemakerEndpointConfigurationAsyncInferenceConfigClientConfigOutputReference = exports.sagemakerEndpointConfigurationAsyncInferenceConfigClientConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function sagemakerEndpointConfigurationAsyncInferenceConfigClientConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_concurrent_invocations_per_instance: cdktf.numberToTerraform(struct.maxConcurrentInvocationsPerInstance),
    };
}
exports.sagemakerEndpointConfigurationAsyncInferenceConfigClientConfigToTerraform = sagemakerEndpointConfigurationAsyncInferenceConfigClientConfigToTerraform;
class SagemakerEndpointConfigurationAsyncInferenceConfigClientConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxConcurrentInvocationsPerInstance !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConcurrentInvocationsPerInstance = this._maxConcurrentInvocationsPerInstance;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxConcurrentInvocationsPerInstance = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxConcurrentInvocationsPerInstance = value.maxConcurrentInvocationsPerInstance;
        }
    }
    get maxConcurrentInvocationsPerInstance() {
        return this.getNumberAttribute('max_concurrent_invocations_per_instance');
    }
    set maxConcurrentInvocationsPerInstance(value) {
        this._maxConcurrentInvocationsPerInstance = value;
    }
    resetMaxConcurrentInvocationsPerInstance() {
        this._maxConcurrentInvocationsPerInstance = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConcurrentInvocationsPerInstanceInput() {
        return this._maxConcurrentInvocationsPerInstance;
    }
}
exports.SagemakerEndpointConfigurationAsyncInferenceConfigClientConfigOutputReference = SagemakerEndpointConfigurationAsyncInferenceConfigClientConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
SagemakerEndpointConfigurationAsyncInferenceConfigClientConfigOutputReference[_a] = { fqn: "@cdktf/provider-aws.sagemakerEndpointConfiguration.SagemakerEndpointConfigurationAsyncInferenceConfigClientConfigOutputReference", version: "10.0.12" };
function sagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        error_topic: cdktf.stringToTerraform(struct.errorTopic),
        success_topic: cdktf.stringToTerraform(struct.successTopic),
    };
}
exports.sagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigToTerraform = sagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigToTerraform;
class SagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._errorTopic !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorTopic = this._errorTopic;
        }
        if (this._successTopic !== undefined) {
            hasAnyValues = true;
            internalValueResult.successTopic = this._successTopic;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._errorTopic = undefined;
            this._successTopic = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._errorTopic = value.errorTopic;
            this._successTopic = value.successTopic;
        }
    }
    get errorTopic() {
        return this.getStringAttribute('error_topic');
    }
    set errorTopic(value) {
        this._errorTopic = value;
    }
    resetErrorTopic() {
        this._errorTopic = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorTopicInput() {
        return this._errorTopic;
    }
    get successTopic() {
        return this.getStringAttribute('success_topic');
    }
    set successTopic(value) {
        this._successTopic = value;
    }
    resetSuccessTopic() {
        this._successTopic = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get successTopicInput() {
        return this._successTopic;
    }
}
exports.SagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigOutputReference = SagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigOutputReference;
_b = JSII_RTTI_SYMBOL_1;
SagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigOutputReference[_b] = { fqn: "@cdktf/provider-aws.sagemakerEndpointConfiguration.SagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigOutputReference", version: "10.0.12" };
function sagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        s3_output_path: cdktf.stringToTerraform(struct.s3OutputPath),
        notification_config: sagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigToTerraform(struct.notificationConfig),
    };
}
exports.sagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigToTerraform = sagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigToTerraform;
class SagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // notification_config - computed: false, optional: true, required: false
        this._notificationConfig = new SagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigOutputReference(this, "notification_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyId = this._kmsKeyId;
        }
        if (this._s3OutputPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3OutputPath = this._s3OutputPath;
        }
        if (this._notificationConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.notificationConfig = this._notificationConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyId = undefined;
            this._s3OutputPath = undefined;
            this._notificationConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyId = value.kmsKeyId;
            this._s3OutputPath = value.s3OutputPath;
            this._notificationConfig.internalValue = value.notificationConfig;
        }
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    get s3OutputPath() {
        return this.getStringAttribute('s3_output_path');
    }
    set s3OutputPath(value) {
        this._s3OutputPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3OutputPathInput() {
        return this._s3OutputPath;
    }
    get notificationConfig() {
        return this._notificationConfig;
    }
    putNotificationConfig(value) {
        this._notificationConfig.internalValue = value;
    }
    resetNotificationConfig() {
        this._notificationConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notificationConfigInput() {
        return this._notificationConfig.internalValue;
    }
}
exports.SagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigOutputReference = SagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
SagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigOutputReference[_c] = { fqn: "@cdktf/provider-aws.sagemakerEndpointConfiguration.SagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigOutputReference", version: "10.0.12" };
function sagemakerEndpointConfigurationAsyncInferenceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_config: sagemakerEndpointConfigurationAsyncInferenceConfigClientConfigToTerraform(struct.clientConfig),
        output_config: sagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigToTerraform(struct.outputConfig),
    };
}
exports.sagemakerEndpointConfigurationAsyncInferenceConfigToTerraform = sagemakerEndpointConfigurationAsyncInferenceConfigToTerraform;
class SagemakerEndpointConfigurationAsyncInferenceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // client_config - computed: false, optional: true, required: false
        this._clientConfig = new SagemakerEndpointConfigurationAsyncInferenceConfigClientConfigOutputReference(this, "client_config");
        // output_config - computed: false, optional: false, required: true
        this._outputConfig = new SagemakerEndpointConfigurationAsyncInferenceConfigOutputConfigOutputReference(this, "output_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientConfig = this._clientConfig?.internalValue;
        }
        if (this._outputConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputConfig = this._outputConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientConfig.internalValue = undefined;
            this._outputConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientConfig.internalValue = value.clientConfig;
            this._outputConfig.internalValue = value.outputConfig;
        }
    }
    get clientConfig() {
        return this._clientConfig;
    }
    putClientConfig(value) {
        this._clientConfig.internalValue = value;
    }
    resetClientConfig() {
        this._clientConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientConfigInput() {
        return this._clientConfig.internalValue;
    }
    get outputConfig() {
        return this._outputConfig;
    }
    putOutputConfig(value) {
        this._outputConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get outputConfigInput() {
        return this._outputConfig.internalValue;
    }
}
exports.SagemakerEndpointConfigurationAsyncInferenceConfigOutputReference = SagemakerEndpointConfigurationAsyncInferenceConfigOutputReference;
_d = JSII_RTTI_SYMBOL_1;
SagemakerEndpointConfigurationAsyncInferenceConfigOutputReference[_d] = { fqn: "@cdktf/provider-aws.sagemakerEndpointConfiguration.SagemakerEndpointConfigurationAsyncInferenceConfigOutputReference", version: "10.0.12" };
function sagemakerEndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        csv_content_types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.csvContentTypes),
        json_content_types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.jsonContentTypes),
    };
}
exports.sagemakerEndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderToTerraform = sagemakerEndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderToTerraform;
class SagemakerEndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._csvContentTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.csvContentTypes = this._csvContentTypes;
        }
        if (this._jsonContentTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.jsonContentTypes = this._jsonContentTypes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._csvContentTypes = undefined;
            this._jsonContentTypes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._csvContentTypes = value.csvContentTypes;
            this._jsonContentTypes = value.jsonContentTypes;
        }
    }
    get csvContentTypes() {
        return cdktf.Fn.tolist(this.getListAttribute('csv_content_types'));
    }
    set csvContentTypes(value) {
        this._csvContentTypes = value;
    }
    resetCsvContentTypes() {
        this._csvContentTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get csvContentTypesInput() {
        return this._csvContentTypes;
    }
    get jsonContentTypes() {
        return cdktf.Fn.tolist(this.getListAttribute('json_content_types'));
    }
    set jsonContentTypes(value) {
        this._jsonContentTypes = value;
    }
    resetJsonContentTypes() {
        this._jsonContentTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jsonContentTypesInput() {
        return this._jsonContentTypes;
    }
}
exports.SagemakerEndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderOutputReference = SagemakerEndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderOutputReference;
_e = JSII_RTTI_SYMBOL_1;
SagemakerEndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderOutputReference[_e] = { fqn: "@cdktf/provider-aws.sagemakerEndpointConfiguration.SagemakerEndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderOutputReference", version: "10.0.12" };
function sagemakerEndpointConfigurationDataCaptureConfigCaptureOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        capture_mode: cdktf.stringToTerraform(struct.captureMode),
    };
}
exports.sagemakerEndpointConfigurationDataCaptureConfigCaptureOptionsToTerraform = sagemakerEndpointConfigurationDataCaptureConfigCaptureOptionsToTerraform;
class SagemakerEndpointConfigurationDataCaptureConfigCaptureOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._captureMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.captureMode = this._captureMode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._captureMode = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._captureMode = value.captureMode;
        }
    }
    get captureMode() {
        return this.getStringAttribute('capture_mode');
    }
    set captureMode(value) {
        this._captureMode = value;
    }
    // Temporarily expose input value. Use with caution.
    get captureModeInput() {
        return this._captureMode;
    }
}
exports.SagemakerEndpointConfigurationDataCaptureConfigCaptureOptionsOutputReference = SagemakerEndpointConfigurationDataCaptureConfigCaptureOptionsOutputReference;
_f = JSII_RTTI_SYMBOL_1;
SagemakerEndpointConfigurationDataCaptureConfigCaptureOptionsOutputReference[_f] = { fqn: "@cdktf/provider-aws.sagemakerEndpointConfiguration.SagemakerEndpointConfigurationDataCaptureConfigCaptureOptionsOutputReference", version: "10.0.12" };
class SagemakerEndpointConfigurationDataCaptureConfigCaptureOptionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerEndpointConfigurationDataCaptureConfigCaptureOptionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerEndpointConfigurationDataCaptureConfigCaptureOptionsList = SagemakerEndpointConfigurationDataCaptureConfigCaptureOptionsList;
_g = JSII_RTTI_SYMBOL_1;
SagemakerEndpointConfigurationDataCaptureConfigCaptureOptionsList[_g] = { fqn: "@cdktf/provider-aws.sagemakerEndpointConfiguration.SagemakerEndpointConfigurationDataCaptureConfigCaptureOptionsList", version: "10.0.12" };
function sagemakerEndpointConfigurationDataCaptureConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_s3_uri: cdktf.stringToTerraform(struct.destinationS3Uri),
        enable_capture: cdktf.booleanToTerraform(struct.enableCapture),
        initial_sampling_percentage: cdktf.numberToTerraform(struct.initialSamplingPercentage),
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        capture_content_type_header: sagemakerEndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderToTerraform(struct.captureContentTypeHeader),
        capture_options: cdktf.listMapper(sagemakerEndpointConfigurationDataCaptureConfigCaptureOptionsToTerraform, true)(struct.captureOptions),
    };
}
exports.sagemakerEndpointConfigurationDataCaptureConfigToTerraform = sagemakerEndpointConfigurationDataCaptureConfigToTerraform;
class SagemakerEndpointConfigurationDataCaptureConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // capture_content_type_header - computed: false, optional: true, required: false
        this._captureContentTypeHeader = new SagemakerEndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderOutputReference(this, "capture_content_type_header");
        // capture_options - computed: false, optional: false, required: true
        this._captureOptions = new SagemakerEndpointConfigurationDataCaptureConfigCaptureOptionsList(this, "capture_options", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationS3Uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationS3Uri = this._destinationS3Uri;
        }
        if (this._enableCapture !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableCapture = this._enableCapture;
        }
        if (this._initialSamplingPercentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.initialSamplingPercentage = this._initialSamplingPercentage;
        }
        if (this._kmsKeyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyId = this._kmsKeyId;
        }
        if (this._captureContentTypeHeader?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.captureContentTypeHeader = this._captureContentTypeHeader?.internalValue;
        }
        if (this._captureOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.captureOptions = this._captureOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationS3Uri = undefined;
            this._enableCapture = undefined;
            this._initialSamplingPercentage = undefined;
            this._kmsKeyId = undefined;
            this._captureContentTypeHeader.internalValue = undefined;
            this._captureOptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationS3Uri = value.destinationS3Uri;
            this._enableCapture = value.enableCapture;
            this._initialSamplingPercentage = value.initialSamplingPercentage;
            this._kmsKeyId = value.kmsKeyId;
            this._captureContentTypeHeader.internalValue = value.captureContentTypeHeader;
            this._captureOptions.internalValue = value.captureOptions;
        }
    }
    get destinationS3Uri() {
        return this.getStringAttribute('destination_s3_uri');
    }
    set destinationS3Uri(value) {
        this._destinationS3Uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationS3UriInput() {
        return this._destinationS3Uri;
    }
    get enableCapture() {
        return this.getBooleanAttribute('enable_capture');
    }
    set enableCapture(value) {
        this._enableCapture = value;
    }
    resetEnableCapture() {
        this._enableCapture = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableCaptureInput() {
        return this._enableCapture;
    }
    get initialSamplingPercentage() {
        return this.getNumberAttribute('initial_sampling_percentage');
    }
    set initialSamplingPercentage(value) {
        this._initialSamplingPercentage = value;
    }
    // Temporarily expose input value. Use with caution.
    get initialSamplingPercentageInput() {
        return this._initialSamplingPercentage;
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    get captureContentTypeHeader() {
        return this._captureContentTypeHeader;
    }
    putCaptureContentTypeHeader(value) {
        this._captureContentTypeHeader.internalValue = value;
    }
    resetCaptureContentTypeHeader() {
        this._captureContentTypeHeader.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get captureContentTypeHeaderInput() {
        return this._captureContentTypeHeader.internalValue;
    }
    get captureOptions() {
        return this._captureOptions;
    }
    putCaptureOptions(value) {
        this._captureOptions.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get captureOptionsInput() {
        return this._captureOptions.internalValue;
    }
}
exports.SagemakerEndpointConfigurationDataCaptureConfigOutputReference = SagemakerEndpointConfigurationDataCaptureConfigOutputReference;
_h = JSII_RTTI_SYMBOL_1;
SagemakerEndpointConfigurationDataCaptureConfigOutputReference[_h] = { fqn: "@cdktf/provider-aws.sagemakerEndpointConfiguration.SagemakerEndpointConfigurationDataCaptureConfigOutputReference", version: "10.0.12" };
function sagemakerEndpointConfigurationProductionVariantsServerlessConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_concurrency: cdktf.numberToTerraform(struct.maxConcurrency),
        memory_size_in_mb: cdktf.numberToTerraform(struct.memorySizeInMb),
    };
}
exports.sagemakerEndpointConfigurationProductionVariantsServerlessConfigToTerraform = sagemakerEndpointConfigurationProductionVariantsServerlessConfigToTerraform;
class SagemakerEndpointConfigurationProductionVariantsServerlessConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxConcurrency !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConcurrency = this._maxConcurrency;
        }
        if (this._memorySizeInMb !== undefined) {
            hasAnyValues = true;
            internalValueResult.memorySizeInMb = this._memorySizeInMb;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxConcurrency = undefined;
            this._memorySizeInMb = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxConcurrency = value.maxConcurrency;
            this._memorySizeInMb = value.memorySizeInMb;
        }
    }
    get maxConcurrency() {
        return this.getNumberAttribute('max_concurrency');
    }
    set maxConcurrency(value) {
        this._maxConcurrency = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxConcurrencyInput() {
        return this._maxConcurrency;
    }
    get memorySizeInMb() {
        return this.getNumberAttribute('memory_size_in_mb');
    }
    set memorySizeInMb(value) {
        this._memorySizeInMb = value;
    }
    // Temporarily expose input value. Use with caution.
    get memorySizeInMbInput() {
        return this._memorySizeInMb;
    }
}
exports.SagemakerEndpointConfigurationProductionVariantsServerlessConfigOutputReference = SagemakerEndpointConfigurationProductionVariantsServerlessConfigOutputReference;
_j = JSII_RTTI_SYMBOL_1;
SagemakerEndpointConfigurationProductionVariantsServerlessConfigOutputReference[_j] = { fqn: "@cdktf/provider-aws.sagemakerEndpointConfiguration.SagemakerEndpointConfigurationProductionVariantsServerlessConfigOutputReference", version: "10.0.12" };
function sagemakerEndpointConfigurationProductionVariantsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        accelerator_type: cdktf.stringToTerraform(struct.acceleratorType),
        initial_instance_count: cdktf.numberToTerraform(struct.initialInstanceCount),
        initial_variant_weight: cdktf.numberToTerraform(struct.initialVariantWeight),
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        model_name: cdktf.stringToTerraform(struct.modelName),
        variant_name: cdktf.stringToTerraform(struct.variantName),
        serverless_config: sagemakerEndpointConfigurationProductionVariantsServerlessConfigToTerraform(struct.serverlessConfig),
    };
}
exports.sagemakerEndpointConfigurationProductionVariantsToTerraform = sagemakerEndpointConfigurationProductionVariantsToTerraform;
class SagemakerEndpointConfigurationProductionVariantsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // serverless_config - computed: false, optional: true, required: false
        this._serverlessConfig = new SagemakerEndpointConfigurationProductionVariantsServerlessConfigOutputReference(this, "serverless_config");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._acceleratorType !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorType = this._acceleratorType;
        }
        if (this._initialInstanceCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.initialInstanceCount = this._initialInstanceCount;
        }
        if (this._initialVariantWeight !== undefined) {
            hasAnyValues = true;
            internalValueResult.initialVariantWeight = this._initialVariantWeight;
        }
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._modelName !== undefined) {
            hasAnyValues = true;
            internalValueResult.modelName = this._modelName;
        }
        if (this._variantName !== undefined) {
            hasAnyValues = true;
            internalValueResult.variantName = this._variantName;
        }
        if (this._serverlessConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.serverlessConfig = this._serverlessConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._acceleratorType = undefined;
            this._initialInstanceCount = undefined;
            this._initialVariantWeight = undefined;
            this._instanceType = undefined;
            this._modelName = undefined;
            this._variantName = undefined;
            this._serverlessConfig.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._acceleratorType = value.acceleratorType;
            this._initialInstanceCount = value.initialInstanceCount;
            this._initialVariantWeight = value.initialVariantWeight;
            this._instanceType = value.instanceType;
            this._modelName = value.modelName;
            this._variantName = value.variantName;
            this._serverlessConfig.internalValue = value.serverlessConfig;
        }
    }
    get acceleratorType() {
        return this.getStringAttribute('accelerator_type');
    }
    set acceleratorType(value) {
        this._acceleratorType = value;
    }
    resetAcceleratorType() {
        this._acceleratorType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorTypeInput() {
        return this._acceleratorType;
    }
    get initialInstanceCount() {
        return this.getNumberAttribute('initial_instance_count');
    }
    set initialInstanceCount(value) {
        this._initialInstanceCount = value;
    }
    resetInitialInstanceCount() {
        this._initialInstanceCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get initialInstanceCountInput() {
        return this._initialInstanceCount;
    }
    get initialVariantWeight() {
        return this.getNumberAttribute('initial_variant_weight');
    }
    set initialVariantWeight(value) {
        this._initialVariantWeight = value;
    }
    resetInitialVariantWeight() {
        this._initialVariantWeight = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get initialVariantWeightInput() {
        return this._initialVariantWeight;
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get modelName() {
        return this.getStringAttribute('model_name');
    }
    set modelName(value) {
        this._modelName = value;
    }
    // Temporarily expose input value. Use with caution.
    get modelNameInput() {
        return this._modelName;
    }
    get variantName() {
        return this.getStringAttribute('variant_name');
    }
    set variantName(value) {
        this._variantName = value;
    }
    resetVariantName() {
        this._variantName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get variantNameInput() {
        return this._variantName;
    }
    get serverlessConfig() {
        return this._serverlessConfig;
    }
    putServerlessConfig(value) {
        this._serverlessConfig.internalValue = value;
    }
    resetServerlessConfig() {
        this._serverlessConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverlessConfigInput() {
        return this._serverlessConfig.internalValue;
    }
}
exports.SagemakerEndpointConfigurationProductionVariantsOutputReference = SagemakerEndpointConfigurationProductionVariantsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
SagemakerEndpointConfigurationProductionVariantsOutputReference[_k] = { fqn: "@cdktf/provider-aws.sagemakerEndpointConfiguration.SagemakerEndpointConfigurationProductionVariantsOutputReference", version: "10.0.12" };
class SagemakerEndpointConfigurationProductionVariantsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerEndpointConfigurationProductionVariantsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerEndpointConfigurationProductionVariantsList = SagemakerEndpointConfigurationProductionVariantsList;
_l = JSII_RTTI_SYMBOL_1;
SagemakerEndpointConfigurationProductionVariantsList[_l] = { fqn: "@cdktf/provider-aws.sagemakerEndpointConfiguration.SagemakerEndpointConfigurationProductionVariantsList", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/sagemaker_endpoint_configuration aws_sagemaker_endpoint_configuration}
*/
class SagemakerEndpointConfiguration extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/sagemaker_endpoint_configuration aws_sagemaker_endpoint_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerEndpointConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_sagemaker_endpoint_configuration',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // async_inference_config - computed: false, optional: true, required: false
        this._asyncInferenceConfig = new SagemakerEndpointConfigurationAsyncInferenceConfigOutputReference(this, "async_inference_config");
        // data_capture_config - computed: false, optional: true, required: false
        this._dataCaptureConfig = new SagemakerEndpointConfigurationDataCaptureConfigOutputReference(this, "data_capture_config");
        // production_variants - computed: false, optional: false, required: true
        this._productionVariants = new SagemakerEndpointConfigurationProductionVariantsList(this, "production_variants", false);
        this._id = config.id;
        this._kmsKeyArn = config.kmsKeyArn;
        this._name = config.name;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._asyncInferenceConfig.internalValue = config.asyncInferenceConfig;
        this._dataCaptureConfig.internalValue = config.dataCaptureConfig;
        this._productionVariants.internalValue = config.productionVariants;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get asyncInferenceConfig() {
        return this._asyncInferenceConfig;
    }
    putAsyncInferenceConfig(value) {
        this._asyncInferenceConfig.internalValue = value;
    }
    resetAsyncInferenceConfig() {
        this._asyncInferenceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get asyncInferenceConfigInput() {
        return this._asyncInferenceConfig.internalValue;
    }
    get dataCaptureConfig() {
        return this._dataCaptureConfig;
    }
    putDataCaptureConfig(value) {
        this._dataCaptureConfig.internalValue = value;
    }
    resetDataCaptureConfig() {
        this._dataCaptureConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataCaptureConfigInput() {
        return this._dataCaptureConfig.internalValue;
    }
    get productionVariants() {
        return this._productionVariants;
    }
    putProductionVariants(value) {
        this._productionVariants.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get productionVariantsInput() {
        return this._productionVariants.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            kms_key_arn: cdktf.stringToTerraform(this._kmsKeyArn),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            async_inference_config: sagemakerEndpointConfigurationAsyncInferenceConfigToTerraform(this._asyncInferenceConfig.internalValue),
            data_capture_config: sagemakerEndpointConfigurationDataCaptureConfigToTerraform(this._dataCaptureConfig.internalValue),
            production_variants: cdktf.listMapper(sagemakerEndpointConfigurationProductionVariantsToTerraform, true)(this._productionVariants.internalValue),
        };
    }
}
exports.SagemakerEndpointConfiguration = SagemakerEndpointConfiguration;
_m = JSII_RTTI_SYMBOL_1;
SagemakerEndpointConfiguration[_m] = { fqn: "@cdktf/provider-aws.sagemakerEndpointConfiguration.SagemakerEndpointConfiguration", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
SagemakerEndpointConfiguration.tfResourceType = "aws_sagemaker_endpoint_configuration";
//# sourceMappingURL=data:application/json;base64,