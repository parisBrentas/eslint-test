"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CognitoIdentityPoolProviderPrincipalTag = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/cognito_identity_pool_provider_principal_tag aws_cognito_identity_pool_provider_principal_tag}
*/
class CognitoIdentityPoolProviderPrincipalTag extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/cognito_identity_pool_provider_principal_tag aws_cognito_identity_pool_provider_principal_tag} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CognitoIdentityPoolProviderPrincipalTagConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_cognito_identity_pool_provider_principal_tag',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._id = config.id;
        this._identityPoolId = config.identityPoolId;
        this._identityProviderName = config.identityProviderName;
        this._principalTags = config.principalTags;
        this._useDefaults = config.useDefaults;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get identityPoolId() {
        return this.getStringAttribute('identity_pool_id');
    }
    set identityPoolId(value) {
        this._identityPoolId = value;
    }
    // Temporarily expose input value. Use with caution.
    get identityPoolIdInput() {
        return this._identityPoolId;
    }
    get identityProviderName() {
        return this.getStringAttribute('identity_provider_name');
    }
    set identityProviderName(value) {
        this._identityProviderName = value;
    }
    // Temporarily expose input value. Use with caution.
    get identityProviderNameInput() {
        return this._identityProviderName;
    }
    get principalTags() {
        return this.getStringMapAttribute('principal_tags');
    }
    set principalTags(value) {
        this._principalTags = value;
    }
    resetPrincipalTags() {
        this._principalTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get principalTagsInput() {
        return this._principalTags;
    }
    get useDefaults() {
        return this.getBooleanAttribute('use_defaults');
    }
    set useDefaults(value) {
        this._useDefaults = value;
    }
    resetUseDefaults() {
        this._useDefaults = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useDefaultsInput() {
        return this._useDefaults;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            identity_pool_id: cdktf.stringToTerraform(this._identityPoolId),
            identity_provider_name: cdktf.stringToTerraform(this._identityProviderName),
            principal_tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._principalTags),
            use_defaults: cdktf.booleanToTerraform(this._useDefaults),
        };
    }
}
exports.CognitoIdentityPoolProviderPrincipalTag = CognitoIdentityPoolProviderPrincipalTag;
_a = JSII_RTTI_SYMBOL_1;
CognitoIdentityPoolProviderPrincipalTag[_a] = { fqn: "@cdktf/provider-aws.cognitoIdentityPoolProviderPrincipalTag.CognitoIdentityPoolProviderPrincipalTag", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
CognitoIdentityPoolProviderPrincipalTag.tfResourceType = "aws_cognito_identity_pool_provider_principal_tag";
//# sourceMappingURL=data:application/json;base64,