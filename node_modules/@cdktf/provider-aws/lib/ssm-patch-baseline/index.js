"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SsmPatchBaseline = exports.SsmPatchBaselineSourceList = exports.SsmPatchBaselineSourceOutputReference = exports.ssmPatchBaselineSourceToTerraform = exports.SsmPatchBaselineGlobalFilterList = exports.SsmPatchBaselineGlobalFilterOutputReference = exports.ssmPatchBaselineGlobalFilterToTerraform = exports.SsmPatchBaselineApprovalRuleList = exports.SsmPatchBaselineApprovalRuleOutputReference = exports.ssmPatchBaselineApprovalRuleToTerraform = exports.SsmPatchBaselineApprovalRulePatchFilterList = exports.SsmPatchBaselineApprovalRulePatchFilterOutputReference = exports.ssmPatchBaselineApprovalRulePatchFilterToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function ssmPatchBaselineApprovalRulePatchFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.ssmPatchBaselineApprovalRulePatchFilterToTerraform = ssmPatchBaselineApprovalRulePatchFilterToTerraform;
class SsmPatchBaselineApprovalRulePatchFilterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._key = undefined;
            this._values = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._key = value.key;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get values() {
        return this.getListAttribute('values');
    }
    set values(value) {
        this._values = value;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.SsmPatchBaselineApprovalRulePatchFilterOutputReference = SsmPatchBaselineApprovalRulePatchFilterOutputReference;
_a = JSII_RTTI_SYMBOL_1;
SsmPatchBaselineApprovalRulePatchFilterOutputReference[_a] = { fqn: "@cdktf/provider-aws.ssmPatchBaseline.SsmPatchBaselineApprovalRulePatchFilterOutputReference", version: "10.0.12" };
class SsmPatchBaselineApprovalRulePatchFilterList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SsmPatchBaselineApprovalRulePatchFilterOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SsmPatchBaselineApprovalRulePatchFilterList = SsmPatchBaselineApprovalRulePatchFilterList;
_b = JSII_RTTI_SYMBOL_1;
SsmPatchBaselineApprovalRulePatchFilterList[_b] = { fqn: "@cdktf/provider-aws.ssmPatchBaseline.SsmPatchBaselineApprovalRulePatchFilterList", version: "10.0.12" };
function ssmPatchBaselineApprovalRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        approve_after_days: cdktf.numberToTerraform(struct.approveAfterDays),
        approve_until_date: cdktf.stringToTerraform(struct.approveUntilDate),
        compliance_level: cdktf.stringToTerraform(struct.complianceLevel),
        enable_non_security: cdktf.booleanToTerraform(struct.enableNonSecurity),
        patch_filter: cdktf.listMapper(ssmPatchBaselineApprovalRulePatchFilterToTerraform, true)(struct.patchFilter),
    };
}
exports.ssmPatchBaselineApprovalRuleToTerraform = ssmPatchBaselineApprovalRuleToTerraform;
class SsmPatchBaselineApprovalRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // patch_filter - computed: false, optional: false, required: true
        this._patchFilter = new SsmPatchBaselineApprovalRulePatchFilterList(this, "patch_filter", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._approveAfterDays !== undefined) {
            hasAnyValues = true;
            internalValueResult.approveAfterDays = this._approveAfterDays;
        }
        if (this._approveUntilDate !== undefined) {
            hasAnyValues = true;
            internalValueResult.approveUntilDate = this._approveUntilDate;
        }
        if (this._complianceLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.complianceLevel = this._complianceLevel;
        }
        if (this._enableNonSecurity !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableNonSecurity = this._enableNonSecurity;
        }
        if (this._patchFilter?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.patchFilter = this._patchFilter?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._approveAfterDays = undefined;
            this._approveUntilDate = undefined;
            this._complianceLevel = undefined;
            this._enableNonSecurity = undefined;
            this._patchFilter.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._approveAfterDays = value.approveAfterDays;
            this._approveUntilDate = value.approveUntilDate;
            this._complianceLevel = value.complianceLevel;
            this._enableNonSecurity = value.enableNonSecurity;
            this._patchFilter.internalValue = value.patchFilter;
        }
    }
    get approveAfterDays() {
        return this.getNumberAttribute('approve_after_days');
    }
    set approveAfterDays(value) {
        this._approveAfterDays = value;
    }
    resetApproveAfterDays() {
        this._approveAfterDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get approveAfterDaysInput() {
        return this._approveAfterDays;
    }
    get approveUntilDate() {
        return this.getStringAttribute('approve_until_date');
    }
    set approveUntilDate(value) {
        this._approveUntilDate = value;
    }
    resetApproveUntilDate() {
        this._approveUntilDate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get approveUntilDateInput() {
        return this._approveUntilDate;
    }
    get complianceLevel() {
        return this.getStringAttribute('compliance_level');
    }
    set complianceLevel(value) {
        this._complianceLevel = value;
    }
    resetComplianceLevel() {
        this._complianceLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get complianceLevelInput() {
        return this._complianceLevel;
    }
    get enableNonSecurity() {
        return this.getBooleanAttribute('enable_non_security');
    }
    set enableNonSecurity(value) {
        this._enableNonSecurity = value;
    }
    resetEnableNonSecurity() {
        this._enableNonSecurity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableNonSecurityInput() {
        return this._enableNonSecurity;
    }
    get patchFilter() {
        return this._patchFilter;
    }
    putPatchFilter(value) {
        this._patchFilter.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get patchFilterInput() {
        return this._patchFilter.internalValue;
    }
}
exports.SsmPatchBaselineApprovalRuleOutputReference = SsmPatchBaselineApprovalRuleOutputReference;
_c = JSII_RTTI_SYMBOL_1;
SsmPatchBaselineApprovalRuleOutputReference[_c] = { fqn: "@cdktf/provider-aws.ssmPatchBaseline.SsmPatchBaselineApprovalRuleOutputReference", version: "10.0.12" };
class SsmPatchBaselineApprovalRuleList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SsmPatchBaselineApprovalRuleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SsmPatchBaselineApprovalRuleList = SsmPatchBaselineApprovalRuleList;
_d = JSII_RTTI_SYMBOL_1;
SsmPatchBaselineApprovalRuleList[_d] = { fqn: "@cdktf/provider-aws.ssmPatchBaseline.SsmPatchBaselineApprovalRuleList", version: "10.0.12" };
function ssmPatchBaselineGlobalFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.ssmPatchBaselineGlobalFilterToTerraform = ssmPatchBaselineGlobalFilterToTerraform;
class SsmPatchBaselineGlobalFilterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._key = undefined;
            this._values = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._key = value.key;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get values() {
        return this.getListAttribute('values');
    }
    set values(value) {
        this._values = value;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.SsmPatchBaselineGlobalFilterOutputReference = SsmPatchBaselineGlobalFilterOutputReference;
_e = JSII_RTTI_SYMBOL_1;
SsmPatchBaselineGlobalFilterOutputReference[_e] = { fqn: "@cdktf/provider-aws.ssmPatchBaseline.SsmPatchBaselineGlobalFilterOutputReference", version: "10.0.12" };
class SsmPatchBaselineGlobalFilterList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SsmPatchBaselineGlobalFilterOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SsmPatchBaselineGlobalFilterList = SsmPatchBaselineGlobalFilterList;
_f = JSII_RTTI_SYMBOL_1;
SsmPatchBaselineGlobalFilterList[_f] = { fqn: "@cdktf/provider-aws.ssmPatchBaseline.SsmPatchBaselineGlobalFilterList", version: "10.0.12" };
function ssmPatchBaselineSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        configuration: cdktf.stringToTerraform(struct.configuration),
        name: cdktf.stringToTerraform(struct.name),
        products: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.products),
    };
}
exports.ssmPatchBaselineSourceToTerraform = ssmPatchBaselineSourceToTerraform;
class SsmPatchBaselineSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._configuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.configuration = this._configuration;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._products !== undefined) {
            hasAnyValues = true;
            internalValueResult.products = this._products;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._configuration = undefined;
            this._name = undefined;
            this._products = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._configuration = value.configuration;
            this._name = value.name;
            this._products = value.products;
        }
    }
    get configuration() {
        return this.getStringAttribute('configuration');
    }
    set configuration(value) {
        this._configuration = value;
    }
    // Temporarily expose input value. Use with caution.
    get configurationInput() {
        return this._configuration;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get products() {
        return this.getListAttribute('products');
    }
    set products(value) {
        this._products = value;
    }
    // Temporarily expose input value. Use with caution.
    get productsInput() {
        return this._products;
    }
}
exports.SsmPatchBaselineSourceOutputReference = SsmPatchBaselineSourceOutputReference;
_g = JSII_RTTI_SYMBOL_1;
SsmPatchBaselineSourceOutputReference[_g] = { fqn: "@cdktf/provider-aws.ssmPatchBaseline.SsmPatchBaselineSourceOutputReference", version: "10.0.12" };
class SsmPatchBaselineSourceList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SsmPatchBaselineSourceOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SsmPatchBaselineSourceList = SsmPatchBaselineSourceList;
_h = JSII_RTTI_SYMBOL_1;
SsmPatchBaselineSourceList[_h] = { fqn: "@cdktf/provider-aws.ssmPatchBaseline.SsmPatchBaselineSourceList", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/ssm_patch_baseline aws_ssm_patch_baseline}
*/
class SsmPatchBaseline extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/ssm_patch_baseline aws_ssm_patch_baseline} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SsmPatchBaselineConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_ssm_patch_baseline',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // approval_rule - computed: false, optional: true, required: false
        this._approvalRule = new SsmPatchBaselineApprovalRuleList(this, "approval_rule", false);
        // global_filter - computed: false, optional: true, required: false
        this._globalFilter = new SsmPatchBaselineGlobalFilterList(this, "global_filter", false);
        // source - computed: false, optional: true, required: false
        this._source = new SsmPatchBaselineSourceList(this, "source", false);
        this._approvedPatches = config.approvedPatches;
        this._approvedPatchesComplianceLevel = config.approvedPatchesComplianceLevel;
        this._approvedPatchesEnableNonSecurity = config.approvedPatchesEnableNonSecurity;
        this._description = config.description;
        this._id = config.id;
        this._name = config.name;
        this._operatingSystem = config.operatingSystem;
        this._rejectedPatches = config.rejectedPatches;
        this._rejectedPatchesAction = config.rejectedPatchesAction;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._approvalRule.internalValue = config.approvalRule;
        this._globalFilter.internalValue = config.globalFilter;
        this._source.internalValue = config.source;
    }
    get approvedPatches() {
        return cdktf.Fn.tolist(this.getListAttribute('approved_patches'));
    }
    set approvedPatches(value) {
        this._approvedPatches = value;
    }
    resetApprovedPatches() {
        this._approvedPatches = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get approvedPatchesInput() {
        return this._approvedPatches;
    }
    get approvedPatchesComplianceLevel() {
        return this.getStringAttribute('approved_patches_compliance_level');
    }
    set approvedPatchesComplianceLevel(value) {
        this._approvedPatchesComplianceLevel = value;
    }
    resetApprovedPatchesComplianceLevel() {
        this._approvedPatchesComplianceLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get approvedPatchesComplianceLevelInput() {
        return this._approvedPatchesComplianceLevel;
    }
    get approvedPatchesEnableNonSecurity() {
        return this.getBooleanAttribute('approved_patches_enable_non_security');
    }
    set approvedPatchesEnableNonSecurity(value) {
        this._approvedPatchesEnableNonSecurity = value;
    }
    resetApprovedPatchesEnableNonSecurity() {
        this._approvedPatchesEnableNonSecurity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get approvedPatchesEnableNonSecurityInput() {
        return this._approvedPatchesEnableNonSecurity;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get operatingSystem() {
        return this.getStringAttribute('operating_system');
    }
    set operatingSystem(value) {
        this._operatingSystem = value;
    }
    resetOperatingSystem() {
        this._operatingSystem = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get operatingSystemInput() {
        return this._operatingSystem;
    }
    get rejectedPatches() {
        return cdktf.Fn.tolist(this.getListAttribute('rejected_patches'));
    }
    set rejectedPatches(value) {
        this._rejectedPatches = value;
    }
    resetRejectedPatches() {
        this._rejectedPatches = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rejectedPatchesInput() {
        return this._rejectedPatches;
    }
    get rejectedPatchesAction() {
        return this.getStringAttribute('rejected_patches_action');
    }
    set rejectedPatchesAction(value) {
        this._rejectedPatchesAction = value;
    }
    resetRejectedPatchesAction() {
        this._rejectedPatchesAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rejectedPatchesActionInput() {
        return this._rejectedPatchesAction;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get approvalRule() {
        return this._approvalRule;
    }
    putApprovalRule(value) {
        this._approvalRule.internalValue = value;
    }
    resetApprovalRule() {
        this._approvalRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get approvalRuleInput() {
        return this._approvalRule.internalValue;
    }
    get globalFilter() {
        return this._globalFilter;
    }
    putGlobalFilter(value) {
        this._globalFilter.internalValue = value;
    }
    resetGlobalFilter() {
        this._globalFilter.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get globalFilterInput() {
        return this._globalFilter.internalValue;
    }
    get source() {
        return this._source;
    }
    putSource(value) {
        this._source.internalValue = value;
    }
    resetSource() {
        this._source.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceInput() {
        return this._source.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            approved_patches: cdktf.listMapper(cdktf.stringToTerraform, false)(this._approvedPatches),
            approved_patches_compliance_level: cdktf.stringToTerraform(this._approvedPatchesComplianceLevel),
            approved_patches_enable_non_security: cdktf.booleanToTerraform(this._approvedPatchesEnableNonSecurity),
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            operating_system: cdktf.stringToTerraform(this._operatingSystem),
            rejected_patches: cdktf.listMapper(cdktf.stringToTerraform, false)(this._rejectedPatches),
            rejected_patches_action: cdktf.stringToTerraform(this._rejectedPatchesAction),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            approval_rule: cdktf.listMapper(ssmPatchBaselineApprovalRuleToTerraform, true)(this._approvalRule.internalValue),
            global_filter: cdktf.listMapper(ssmPatchBaselineGlobalFilterToTerraform, true)(this._globalFilter.internalValue),
            source: cdktf.listMapper(ssmPatchBaselineSourceToTerraform, true)(this._source.internalValue),
        };
    }
}
exports.SsmPatchBaseline = SsmPatchBaseline;
_j = JSII_RTTI_SYMBOL_1;
SsmPatchBaseline[_j] = { fqn: "@cdktf/provider-aws.ssmPatchBaseline.SsmPatchBaseline", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
SsmPatchBaseline.tfResourceType = "aws_ssm_patch_baseline";
//# sourceMappingURL=data:application/json;base64,