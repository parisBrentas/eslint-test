"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppflowFlow = exports.AppflowFlowTriggerConfigOutputReference = exports.appflowFlowTriggerConfigToTerraform = exports.AppflowFlowTriggerConfigTriggerPropertiesOutputReference = exports.appflowFlowTriggerConfigTriggerPropertiesToTerraform = exports.AppflowFlowTriggerConfigTriggerPropertiesScheduledOutputReference = exports.appflowFlowTriggerConfigTriggerPropertiesScheduledToTerraform = exports.AppflowFlowTaskList = exports.AppflowFlowTaskOutputReference = exports.appflowFlowTaskToTerraform = exports.AppflowFlowTaskConnectorOperatorList = exports.AppflowFlowTaskConnectorOperatorOutputReference = exports.appflowFlowTaskConnectorOperatorToTerraform = exports.AppflowFlowSourceFlowConfigOutputReference = exports.appflowFlowSourceFlowConfigToTerraform = exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesOutputReference = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesToTerraform = exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesZendeskOutputReference = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesZendeskToTerraform = exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesVeevaOutputReference = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesVeevaToTerraform = exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutputReference = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroToTerraform = exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesSlackOutputReference = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesSlackToTerraform = exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesSingularOutputReference = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesSingularToTerraform = exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutputReference = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesServiceNowToTerraform = exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutputReference = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesSapoDataToTerraform = exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutputReference = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesSalesforceToTerraform = exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesS3OutputReference = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesS3ToTerraform = exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutputReference = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigToTerraform = exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesMarketoOutputReference = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesMarketoToTerraform = exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutputReference = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesInforNexusToTerraform = exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutputReference = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsToTerraform = exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutputReference = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesDynatraceToTerraform = exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesDatadogOutputReference = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesDatadogToTerraform = exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutputReference = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorToTerraform = exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutputReference = exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeToTerraform = exports.AppflowFlowSourceFlowConfigIncrementalPullConfigOutputReference = exports.appflowFlowSourceFlowConfigIncrementalPullConfigToTerraform = exports.AppflowFlowDestinationFlowConfigList = exports.AppflowFlowDestinationFlowConfigOutputReference = exports.appflowFlowDestinationFlowConfigToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3OutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3ToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorToTerraform = exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutputReference = exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        fail_on_first_destination_error: cdktf.booleanToTerraform(struct.failOnFirstDestinationError),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._bucketPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketPrefix = this._bucketPrefix;
        }
        if (this._failOnFirstDestinationError !== undefined) {
            hasAnyValues = true;
            internalValueResult.failOnFirstDestinationError = this._failOnFirstDestinationError;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._bucketPrefix = undefined;
            this._failOnFirstDestinationError = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._bucketPrefix = value.bucketPrefix;
            this._failOnFirstDestinationError = value.failOnFirstDestinationError;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    resetBucketName() {
        this._bucketName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    resetBucketPrefix() {
        this._bucketPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
    get failOnFirstDestinationError() {
        return this.getBooleanAttribute('fail_on_first_destination_error');
    }
    set failOnFirstDestinationError(value) {
        this._failOnFirstDestinationError = value;
    }
    resetFailOnFirstDestinationError() {
        this._failOnFirstDestinationError = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get failOnFirstDestinationErrorInput() {
        return this._failOnFirstDestinationError;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutputReference[_a] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.customProperties),
        entity_name: cdktf.stringToTerraform(struct.entityName),
        id_field_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.idFieldNames),
        write_operation_type: cdktf.stringToTerraform(struct.writeOperationType),
        error_handling_config: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigToTerraform(struct.errorHandlingConfig),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // error_handling_config - computed: false, optional: true, required: false
        this._errorHandlingConfig = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigOutputReference(this, "error_handling_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customProperties !== undefined) {
            hasAnyValues = true;
            internalValueResult.customProperties = this._customProperties;
        }
        if (this._entityName !== undefined) {
            hasAnyValues = true;
            internalValueResult.entityName = this._entityName;
        }
        if (this._idFieldNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.idFieldNames = this._idFieldNames;
        }
        if (this._writeOperationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.writeOperationType = this._writeOperationType;
        }
        if (this._errorHandlingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorHandlingConfig = this._errorHandlingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._customProperties = undefined;
            this._entityName = undefined;
            this._idFieldNames = undefined;
            this._writeOperationType = undefined;
            this._errorHandlingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._customProperties = value.customProperties;
            this._entityName = value.entityName;
            this._idFieldNames = value.idFieldNames;
            this._writeOperationType = value.writeOperationType;
            this._errorHandlingConfig.internalValue = value.errorHandlingConfig;
        }
    }
    get customProperties() {
        return this.getStringMapAttribute('custom_properties');
    }
    set customProperties(value) {
        this._customProperties = value;
    }
    resetCustomProperties() {
        this._customProperties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customPropertiesInput() {
        return this._customProperties;
    }
    get entityName() {
        return this.getStringAttribute('entity_name');
    }
    set entityName(value) {
        this._entityName = value;
    }
    // Temporarily expose input value. Use with caution.
    get entityNameInput() {
        return this._entityName;
    }
    get idFieldNames() {
        return this.getListAttribute('id_field_names');
    }
    set idFieldNames(value) {
        this._idFieldNames = value;
    }
    resetIdFieldNames() {
        this._idFieldNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idFieldNamesInput() {
        return this._idFieldNames;
    }
    get writeOperationType() {
        return this.getStringAttribute('write_operation_type');
    }
    set writeOperationType(value) {
        this._writeOperationType = value;
    }
    resetWriteOperationType() {
        this._writeOperationType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get writeOperationTypeInput() {
        return this._writeOperationType;
    }
    get errorHandlingConfig() {
        return this._errorHandlingConfig;
    }
    putErrorHandlingConfig(value) {
        this._errorHandlingConfig.internalValue = value;
    }
    resetErrorHandlingConfig() {
        this._errorHandlingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorHandlingConfigInput() {
        return this._errorHandlingConfig.internalValue;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutputReference;
_b = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutputReference[_b] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        domain_name: cdktf.stringToTerraform(struct.domainName),
        object_type_name: cdktf.stringToTerraform(struct.objectTypeName),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._domainName !== undefined) {
            hasAnyValues = true;
            internalValueResult.domainName = this._domainName;
        }
        if (this._objectTypeName !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectTypeName = this._objectTypeName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._domainName = undefined;
            this._objectTypeName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._domainName = value.domainName;
            this._objectTypeName = value.objectTypeName;
        }
    }
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    set domainName(value) {
        this._domainName = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainNameInput() {
        return this._domainName;
    }
    get objectTypeName() {
        return this.getStringAttribute('object_type_name');
    }
    set objectTypeName(value) {
        this._objectTypeName = value;
    }
    resetObjectTypeName() {
        this._objectTypeName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get objectTypeNameInput() {
        return this._objectTypeName;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutputReference;
_c = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutputReference[_c] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        fail_on_first_destination_error: cdktf.booleanToTerraform(struct.failOnFirstDestinationError),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._bucketPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketPrefix = this._bucketPrefix;
        }
        if (this._failOnFirstDestinationError !== undefined) {
            hasAnyValues = true;
            internalValueResult.failOnFirstDestinationError = this._failOnFirstDestinationError;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._bucketPrefix = undefined;
            this._failOnFirstDestinationError = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._bucketPrefix = value.bucketPrefix;
            this._failOnFirstDestinationError = value.failOnFirstDestinationError;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    resetBucketName() {
        this._bucketName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    resetBucketPrefix() {
        this._bucketPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
    get failOnFirstDestinationError() {
        return this.getBooleanAttribute('fail_on_first_destination_error');
    }
    set failOnFirstDestinationError(value) {
        this._failOnFirstDestinationError = value;
    }
    resetFailOnFirstDestinationError() {
        this._failOnFirstDestinationError = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get failOnFirstDestinationErrorInput() {
        return this._failOnFirstDestinationError;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutputReference;
_d = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutputReference[_d] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
        error_handling_config: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigToTerraform(struct.errorHandlingConfig),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // error_handling_config - computed: false, optional: true, required: false
        this._errorHandlingConfig = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigOutputReference(this, "error_handling_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        if (this._errorHandlingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorHandlingConfig = this._errorHandlingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._object = undefined;
            this._errorHandlingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._object = value.object;
            this._errorHandlingConfig.internalValue = value.errorHandlingConfig;
        }
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
    get errorHandlingConfig() {
        return this._errorHandlingConfig;
    }
    putErrorHandlingConfig(value) {
        this._errorHandlingConfig.internalValue = value;
    }
    resetErrorHandlingConfig() {
        this._errorHandlingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorHandlingConfigInput() {
        return this._errorHandlingConfig.internalValue;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutputReference;
_e = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutputReference[_e] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        fail_on_first_destination_error: cdktf.booleanToTerraform(struct.failOnFirstDestinationError),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._bucketPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketPrefix = this._bucketPrefix;
        }
        if (this._failOnFirstDestinationError !== undefined) {
            hasAnyValues = true;
            internalValueResult.failOnFirstDestinationError = this._failOnFirstDestinationError;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._bucketPrefix = undefined;
            this._failOnFirstDestinationError = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._bucketPrefix = value.bucketPrefix;
            this._failOnFirstDestinationError = value.failOnFirstDestinationError;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    resetBucketName() {
        this._bucketName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    resetBucketPrefix() {
        this._bucketPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
    get failOnFirstDestinationError() {
        return this.getBooleanAttribute('fail_on_first_destination_error');
    }
    set failOnFirstDestinationError(value) {
        this._failOnFirstDestinationError = value;
    }
    resetFailOnFirstDestinationError() {
        this._failOnFirstDestinationError = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get failOnFirstDestinationErrorInput() {
        return this._failOnFirstDestinationError;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutputReference;
_f = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutputReference[_f] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
        error_handling_config: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigToTerraform(struct.errorHandlingConfig),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // error_handling_config - computed: false, optional: true, required: false
        this._errorHandlingConfig = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigOutputReference(this, "error_handling_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        if (this._errorHandlingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorHandlingConfig = this._errorHandlingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._object = undefined;
            this._errorHandlingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._object = value.object;
            this._errorHandlingConfig.internalValue = value.errorHandlingConfig;
        }
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
    get errorHandlingConfig() {
        return this._errorHandlingConfig;
    }
    putErrorHandlingConfig(value) {
        this._errorHandlingConfig.internalValue = value;
    }
    resetErrorHandlingConfig() {
        this._errorHandlingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorHandlingConfigInput() {
        return this._errorHandlingConfig.internalValue;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutputReference;
_g = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutputReference[_g] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutputReference[_h] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        fail_on_first_destination_error: cdktf.booleanToTerraform(struct.failOnFirstDestinationError),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._bucketPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketPrefix = this._bucketPrefix;
        }
        if (this._failOnFirstDestinationError !== undefined) {
            hasAnyValues = true;
            internalValueResult.failOnFirstDestinationError = this._failOnFirstDestinationError;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._bucketPrefix = undefined;
            this._failOnFirstDestinationError = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._bucketPrefix = value.bucketPrefix;
            this._failOnFirstDestinationError = value.failOnFirstDestinationError;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    resetBucketName() {
        this._bucketName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    resetBucketPrefix() {
        this._bucketPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
    get failOnFirstDestinationError() {
        return this.getBooleanAttribute('fail_on_first_destination_error');
    }
    set failOnFirstDestinationError(value) {
        this._failOnFirstDestinationError = value;
    }
    resetFailOnFirstDestinationError() {
        this._failOnFirstDestinationError = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get failOnFirstDestinationErrorInput() {
        return this._failOnFirstDestinationError;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutputReference;
_j = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutputReference[_j] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
        error_handling_config: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigToTerraform(struct.errorHandlingConfig),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // error_handling_config - computed: false, optional: true, required: false
        this._errorHandlingConfig = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigOutputReference(this, "error_handling_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        if (this._errorHandlingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorHandlingConfig = this._errorHandlingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._object = undefined;
            this._errorHandlingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._object = value.object;
            this._errorHandlingConfig.internalValue = value.errorHandlingConfig;
        }
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
    get errorHandlingConfig() {
        return this._errorHandlingConfig;
    }
    putErrorHandlingConfig(value) {
        this._errorHandlingConfig.internalValue = value;
    }
    resetErrorHandlingConfig() {
        this._errorHandlingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorHandlingConfigInput() {
        return this._errorHandlingConfig.internalValue;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutputReference;
_k = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutputReference[_k] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        fail_on_first_destination_error: cdktf.booleanToTerraform(struct.failOnFirstDestinationError),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._bucketPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketPrefix = this._bucketPrefix;
        }
        if (this._failOnFirstDestinationError !== undefined) {
            hasAnyValues = true;
            internalValueResult.failOnFirstDestinationError = this._failOnFirstDestinationError;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._bucketPrefix = undefined;
            this._failOnFirstDestinationError = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._bucketPrefix = value.bucketPrefix;
            this._failOnFirstDestinationError = value.failOnFirstDestinationError;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    resetBucketName() {
        this._bucketName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    resetBucketPrefix() {
        this._bucketPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
    get failOnFirstDestinationError() {
        return this.getBooleanAttribute('fail_on_first_destination_error');
    }
    set failOnFirstDestinationError(value) {
        this._failOnFirstDestinationError = value;
    }
    resetFailOnFirstDestinationError() {
        this._failOnFirstDestinationError = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get failOnFirstDestinationErrorInput() {
        return this._failOnFirstDestinationError;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutputReference;
_l = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutputReference[_l] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        intermediate_bucket_name: cdktf.stringToTerraform(struct.intermediateBucketName),
        object: cdktf.stringToTerraform(struct.object),
        error_handling_config: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigToTerraform(struct.errorHandlingConfig),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // error_handling_config - computed: false, optional: true, required: false
        this._errorHandlingConfig = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigOutputReference(this, "error_handling_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketPrefix = this._bucketPrefix;
        }
        if (this._intermediateBucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.intermediateBucketName = this._intermediateBucketName;
        }
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        if (this._errorHandlingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorHandlingConfig = this._errorHandlingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketPrefix = undefined;
            this._intermediateBucketName = undefined;
            this._object = undefined;
            this._errorHandlingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketPrefix = value.bucketPrefix;
            this._intermediateBucketName = value.intermediateBucketName;
            this._object = value.object;
            this._errorHandlingConfig.internalValue = value.errorHandlingConfig;
        }
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    resetBucketPrefix() {
        this._bucketPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
    get intermediateBucketName() {
        return this.getStringAttribute('intermediate_bucket_name');
    }
    set intermediateBucketName(value) {
        this._intermediateBucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get intermediateBucketNameInput() {
        return this._intermediateBucketName;
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
    get errorHandlingConfig() {
        return this._errorHandlingConfig;
    }
    putErrorHandlingConfig(value) {
        this._errorHandlingConfig.internalValue = value;
    }
    resetErrorHandlingConfig() {
        this._errorHandlingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorHandlingConfigInput() {
        return this._errorHandlingConfig.internalValue;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutputReference;
_m = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutputReference[_m] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        aggregation_type: cdktf.stringToTerraform(struct.aggregationType),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._aggregationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.aggregationType = this._aggregationType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._aggregationType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._aggregationType = value.aggregationType;
        }
    }
    get aggregationType() {
        return this.getStringAttribute('aggregation_type');
    }
    set aggregationType(value) {
        this._aggregationType = value;
    }
    resetAggregationType() {
        this._aggregationType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aggregationTypeInput() {
        return this._aggregationType;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutputReference;
_o = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutputReference[_o] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        prefix_format: cdktf.stringToTerraform(struct.prefixFormat),
        prefix_type: cdktf.stringToTerraform(struct.prefixType),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._prefixFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixFormat = this._prefixFormat;
        }
        if (this._prefixType !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixType = this._prefixType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._prefixFormat = undefined;
            this._prefixType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._prefixFormat = value.prefixFormat;
            this._prefixType = value.prefixType;
        }
    }
    get prefixFormat() {
        return this.getStringAttribute('prefix_format');
    }
    set prefixFormat(value) {
        this._prefixFormat = value;
    }
    resetPrefixFormat() {
        this._prefixFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixFormatInput() {
        return this._prefixFormat;
    }
    get prefixType() {
        return this.getStringAttribute('prefix_type');
    }
    set prefixType(value) {
        this._prefixType = value;
    }
    resetPrefixType() {
        this._prefixType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixTypeInput() {
        return this._prefixType;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutputReference;
_p = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutputReference[_p] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        file_type: cdktf.stringToTerraform(struct.fileType),
        aggregation_config: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigToTerraform(struct.aggregationConfig),
        prefix_config: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigToTerraform(struct.prefixConfig),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // aggregation_config - computed: false, optional: true, required: false
        this._aggregationConfig = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigOutputReference(this, "aggregation_config");
        // prefix_config - computed: false, optional: true, required: false
        this._prefixConfig = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigOutputReference(this, "prefix_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fileType !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileType = this._fileType;
        }
        if (this._aggregationConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.aggregationConfig = this._aggregationConfig?.internalValue;
        }
        if (this._prefixConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixConfig = this._prefixConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fileType = undefined;
            this._aggregationConfig.internalValue = undefined;
            this._prefixConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fileType = value.fileType;
            this._aggregationConfig.internalValue = value.aggregationConfig;
            this._prefixConfig.internalValue = value.prefixConfig;
        }
    }
    get fileType() {
        return this.getStringAttribute('file_type');
    }
    set fileType(value) {
        this._fileType = value;
    }
    resetFileType() {
        this._fileType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileTypeInput() {
        return this._fileType;
    }
    get aggregationConfig() {
        return this._aggregationConfig;
    }
    putAggregationConfig(value) {
        this._aggregationConfig.internalValue = value;
    }
    resetAggregationConfig() {
        this._aggregationConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aggregationConfigInput() {
        return this._aggregationConfig.internalValue;
    }
    get prefixConfig() {
        return this._prefixConfig;
    }
    putPrefixConfig(value) {
        this._prefixConfig.internalValue = value;
    }
    resetPrefixConfig() {
        this._prefixConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixConfigInput() {
        return this._prefixConfig.internalValue;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutputReference;
_q = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutputReference[_q] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3ToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        s3_output_format_config: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigToTerraform(struct.s3OutputFormatConfig),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3ToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3ToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3OutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // s3_output_format_config - computed: false, optional: true, required: false
        this._s3OutputFormatConfig = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigOutputReference(this, "s3_output_format_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._bucketPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketPrefix = this._bucketPrefix;
        }
        if (this._s3OutputFormatConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3OutputFormatConfig = this._s3OutputFormatConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._bucketPrefix = undefined;
            this._s3OutputFormatConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._bucketPrefix = value.bucketPrefix;
            this._s3OutputFormatConfig.internalValue = value.s3OutputFormatConfig;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    resetBucketPrefix() {
        this._bucketPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
    get s3OutputFormatConfig() {
        return this._s3OutputFormatConfig;
    }
    putS3OutputFormatConfig(value) {
        this._s3OutputFormatConfig.internalValue = value;
    }
    resetS3OutputFormatConfig() {
        this._s3OutputFormatConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3OutputFormatConfigInput() {
        return this._s3OutputFormatConfig.internalValue;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3OutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3OutputReference;
_r = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3OutputReference[_r] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3OutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        fail_on_first_destination_error: cdktf.booleanToTerraform(struct.failOnFirstDestinationError),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._bucketPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketPrefix = this._bucketPrefix;
        }
        if (this._failOnFirstDestinationError !== undefined) {
            hasAnyValues = true;
            internalValueResult.failOnFirstDestinationError = this._failOnFirstDestinationError;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._bucketPrefix = undefined;
            this._failOnFirstDestinationError = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._bucketPrefix = value.bucketPrefix;
            this._failOnFirstDestinationError = value.failOnFirstDestinationError;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    resetBucketName() {
        this._bucketName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    resetBucketPrefix() {
        this._bucketPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
    get failOnFirstDestinationError() {
        return this.getBooleanAttribute('fail_on_first_destination_error');
    }
    set failOnFirstDestinationError(value) {
        this._failOnFirstDestinationError = value;
    }
    resetFailOnFirstDestinationError() {
        this._failOnFirstDestinationError = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get failOnFirstDestinationErrorInput() {
        return this._failOnFirstDestinationError;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutputReference;
_s = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutputReference[_s] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        id_field_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.idFieldNames),
        object: cdktf.stringToTerraform(struct.object),
        write_operation_type: cdktf.stringToTerraform(struct.writeOperationType),
        error_handling_config: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigToTerraform(struct.errorHandlingConfig),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // error_handling_config - computed: false, optional: true, required: false
        this._errorHandlingConfig = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigOutputReference(this, "error_handling_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._idFieldNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.idFieldNames = this._idFieldNames;
        }
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        if (this._writeOperationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.writeOperationType = this._writeOperationType;
        }
        if (this._errorHandlingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorHandlingConfig = this._errorHandlingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._idFieldNames = undefined;
            this._object = undefined;
            this._writeOperationType = undefined;
            this._errorHandlingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._idFieldNames = value.idFieldNames;
            this._object = value.object;
            this._writeOperationType = value.writeOperationType;
            this._errorHandlingConfig.internalValue = value.errorHandlingConfig;
        }
    }
    get idFieldNames() {
        return this.getListAttribute('id_field_names');
    }
    set idFieldNames(value) {
        this._idFieldNames = value;
    }
    resetIdFieldNames() {
        this._idFieldNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idFieldNamesInput() {
        return this._idFieldNames;
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
    get writeOperationType() {
        return this.getStringAttribute('write_operation_type');
    }
    set writeOperationType(value) {
        this._writeOperationType = value;
    }
    resetWriteOperationType() {
        this._writeOperationType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get writeOperationTypeInput() {
        return this._writeOperationType;
    }
    get errorHandlingConfig() {
        return this._errorHandlingConfig;
    }
    putErrorHandlingConfig(value) {
        this._errorHandlingConfig.internalValue = value;
    }
    resetErrorHandlingConfig() {
        this._errorHandlingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorHandlingConfigInput() {
        return this._errorHandlingConfig.internalValue;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutputReference;
_t = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutputReference[_t] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        fail_on_first_destination_error: cdktf.booleanToTerraform(struct.failOnFirstDestinationError),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._bucketPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketPrefix = this._bucketPrefix;
        }
        if (this._failOnFirstDestinationError !== undefined) {
            hasAnyValues = true;
            internalValueResult.failOnFirstDestinationError = this._failOnFirstDestinationError;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._bucketPrefix = undefined;
            this._failOnFirstDestinationError = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._bucketPrefix = value.bucketPrefix;
            this._failOnFirstDestinationError = value.failOnFirstDestinationError;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    resetBucketName() {
        this._bucketName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    resetBucketPrefix() {
        this._bucketPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
    get failOnFirstDestinationError() {
        return this.getBooleanAttribute('fail_on_first_destination_error');
    }
    set failOnFirstDestinationError(value) {
        this._failOnFirstDestinationError = value;
    }
    resetFailOnFirstDestinationError() {
        this._failOnFirstDestinationError = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get failOnFirstDestinationErrorInput() {
        return this._failOnFirstDestinationError;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutputReference;
_u = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutputReference[_u] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._bucketPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketPrefix = this._bucketPrefix;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._bucketPrefix = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._bucketPrefix = value.bucketPrefix;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    resetBucketName() {
        this._bucketName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    resetBucketPrefix() {
        this._bucketPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutputReference;
_v = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutputReference[_v] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        id_field_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.idFieldNames),
        object_path: cdktf.stringToTerraform(struct.objectPath),
        write_operation_type: cdktf.stringToTerraform(struct.writeOperationType),
        error_handling_config: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigToTerraform(struct.errorHandlingConfig),
        success_response_handling_config: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigToTerraform(struct.successResponseHandlingConfig),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // error_handling_config - computed: false, optional: true, required: false
        this._errorHandlingConfig = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigOutputReference(this, "error_handling_config");
        // success_response_handling_config - computed: false, optional: true, required: false
        this._successResponseHandlingConfig = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigOutputReference(this, "success_response_handling_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._idFieldNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.idFieldNames = this._idFieldNames;
        }
        if (this._objectPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectPath = this._objectPath;
        }
        if (this._writeOperationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.writeOperationType = this._writeOperationType;
        }
        if (this._errorHandlingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorHandlingConfig = this._errorHandlingConfig?.internalValue;
        }
        if (this._successResponseHandlingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.successResponseHandlingConfig = this._successResponseHandlingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._idFieldNames = undefined;
            this._objectPath = undefined;
            this._writeOperationType = undefined;
            this._errorHandlingConfig.internalValue = undefined;
            this._successResponseHandlingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._idFieldNames = value.idFieldNames;
            this._objectPath = value.objectPath;
            this._writeOperationType = value.writeOperationType;
            this._errorHandlingConfig.internalValue = value.errorHandlingConfig;
            this._successResponseHandlingConfig.internalValue = value.successResponseHandlingConfig;
        }
    }
    get idFieldNames() {
        return this.getListAttribute('id_field_names');
    }
    set idFieldNames(value) {
        this._idFieldNames = value;
    }
    resetIdFieldNames() {
        this._idFieldNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idFieldNamesInput() {
        return this._idFieldNames;
    }
    get objectPath() {
        return this.getStringAttribute('object_path');
    }
    set objectPath(value) {
        this._objectPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectPathInput() {
        return this._objectPath;
    }
    get writeOperationType() {
        return this.getStringAttribute('write_operation_type');
    }
    set writeOperationType(value) {
        this._writeOperationType = value;
    }
    resetWriteOperationType() {
        this._writeOperationType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get writeOperationTypeInput() {
        return this._writeOperationType;
    }
    get errorHandlingConfig() {
        return this._errorHandlingConfig;
    }
    putErrorHandlingConfig(value) {
        this._errorHandlingConfig.internalValue = value;
    }
    resetErrorHandlingConfig() {
        this._errorHandlingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorHandlingConfigInput() {
        return this._errorHandlingConfig.internalValue;
    }
    get successResponseHandlingConfig() {
        return this._successResponseHandlingConfig;
    }
    putSuccessResponseHandlingConfig(value) {
        this._successResponseHandlingConfig.internalValue = value;
    }
    resetSuccessResponseHandlingConfig() {
        this._successResponseHandlingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get successResponseHandlingConfigInput() {
        return this._successResponseHandlingConfig.internalValue;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutputReference;
_w = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutputReference[_w] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        fail_on_first_destination_error: cdktf.booleanToTerraform(struct.failOnFirstDestinationError),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._bucketPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketPrefix = this._bucketPrefix;
        }
        if (this._failOnFirstDestinationError !== undefined) {
            hasAnyValues = true;
            internalValueResult.failOnFirstDestinationError = this._failOnFirstDestinationError;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._bucketPrefix = undefined;
            this._failOnFirstDestinationError = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._bucketPrefix = value.bucketPrefix;
            this._failOnFirstDestinationError = value.failOnFirstDestinationError;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    resetBucketName() {
        this._bucketName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    resetBucketPrefix() {
        this._bucketPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
    get failOnFirstDestinationError() {
        return this.getBooleanAttribute('fail_on_first_destination_error');
    }
    set failOnFirstDestinationError(value) {
        this._failOnFirstDestinationError = value;
    }
    resetFailOnFirstDestinationError() {
        this._failOnFirstDestinationError = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get failOnFirstDestinationErrorInput() {
        return this._failOnFirstDestinationError;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutputReference;
_x = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutputReference[_x] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        intermediate_bucket_name: cdktf.stringToTerraform(struct.intermediateBucketName),
        object: cdktf.stringToTerraform(struct.object),
        error_handling_config: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigToTerraform(struct.errorHandlingConfig),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // error_handling_config - computed: false, optional: true, required: false
        this._errorHandlingConfig = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigOutputReference(this, "error_handling_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketPrefix = this._bucketPrefix;
        }
        if (this._intermediateBucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.intermediateBucketName = this._intermediateBucketName;
        }
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        if (this._errorHandlingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorHandlingConfig = this._errorHandlingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketPrefix = undefined;
            this._intermediateBucketName = undefined;
            this._object = undefined;
            this._errorHandlingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketPrefix = value.bucketPrefix;
            this._intermediateBucketName = value.intermediateBucketName;
            this._object = value.object;
            this._errorHandlingConfig.internalValue = value.errorHandlingConfig;
        }
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    resetBucketPrefix() {
        this._bucketPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
    get intermediateBucketName() {
        return this.getStringAttribute('intermediate_bucket_name');
    }
    set intermediateBucketName(value) {
        this._intermediateBucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get intermediateBucketNameInput() {
        return this._intermediateBucketName;
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
    get errorHandlingConfig() {
        return this._errorHandlingConfig;
    }
    putErrorHandlingConfig(value) {
        this._errorHandlingConfig.internalValue = value;
    }
    resetErrorHandlingConfig() {
        this._errorHandlingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorHandlingConfigInput() {
        return this._errorHandlingConfig.internalValue;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutputReference;
_y = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutputReference[_y] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        aggregation_type: cdktf.stringToTerraform(struct.aggregationType),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._aggregationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.aggregationType = this._aggregationType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._aggregationType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._aggregationType = value.aggregationType;
        }
    }
    get aggregationType() {
        return this.getStringAttribute('aggregation_type');
    }
    set aggregationType(value) {
        this._aggregationType = value;
    }
    resetAggregationType() {
        this._aggregationType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aggregationTypeInput() {
        return this._aggregationType;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutputReference;
_z = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutputReference[_z] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        prefix_format: cdktf.stringToTerraform(struct.prefixFormat),
        prefix_type: cdktf.stringToTerraform(struct.prefixType),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._prefixFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixFormat = this._prefixFormat;
        }
        if (this._prefixType !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixType = this._prefixType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._prefixFormat = undefined;
            this._prefixType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._prefixFormat = value.prefixFormat;
            this._prefixType = value.prefixType;
        }
    }
    get prefixFormat() {
        return this.getStringAttribute('prefix_format');
    }
    set prefixFormat(value) {
        this._prefixFormat = value;
    }
    resetPrefixFormat() {
        this._prefixFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixFormatInput() {
        return this._prefixFormat;
    }
    get prefixType() {
        return this.getStringAttribute('prefix_type');
    }
    set prefixType(value) {
        this._prefixType = value;
    }
    // Temporarily expose input value. Use with caution.
    get prefixTypeInput() {
        return this._prefixType;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutputReference[_0] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        file_type: cdktf.stringToTerraform(struct.fileType),
        aggregation_config: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigToTerraform(struct.aggregationConfig),
        prefix_config: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigToTerraform(struct.prefixConfig),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // aggregation_config - computed: false, optional: true, required: false
        this._aggregationConfig = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigOutputReference(this, "aggregation_config");
        // prefix_config - computed: false, optional: false, required: true
        this._prefixConfig = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigOutputReference(this, "prefix_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fileType !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileType = this._fileType;
        }
        if (this._aggregationConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.aggregationConfig = this._aggregationConfig?.internalValue;
        }
        if (this._prefixConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixConfig = this._prefixConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fileType = undefined;
            this._aggregationConfig.internalValue = undefined;
            this._prefixConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fileType = value.fileType;
            this._aggregationConfig.internalValue = value.aggregationConfig;
            this._prefixConfig.internalValue = value.prefixConfig;
        }
    }
    get fileType() {
        return this.getStringAttribute('file_type');
    }
    set fileType(value) {
        this._fileType = value;
    }
    resetFileType() {
        this._fileType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileTypeInput() {
        return this._fileType;
    }
    get aggregationConfig() {
        return this._aggregationConfig;
    }
    putAggregationConfig(value) {
        this._aggregationConfig.internalValue = value;
    }
    resetAggregationConfig() {
        this._aggregationConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aggregationConfigInput() {
        return this._aggregationConfig.internalValue;
    }
    get prefixConfig() {
        return this._prefixConfig;
    }
    putPrefixConfig(value) {
        this._prefixConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get prefixConfigInput() {
        return this._prefixConfig.internalValue;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutputReference[_1] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        s3_output_format_config: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigToTerraform(struct.s3OutputFormatConfig),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // s3_output_format_config - computed: false, optional: false, required: true
        this._s3OutputFormatConfig = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigOutputReference(this, "s3_output_format_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._bucketPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketPrefix = this._bucketPrefix;
        }
        if (this._s3OutputFormatConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3OutputFormatConfig = this._s3OutputFormatConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._bucketPrefix = undefined;
            this._s3OutputFormatConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._bucketPrefix = value.bucketPrefix;
            this._s3OutputFormatConfig.internalValue = value.s3OutputFormatConfig;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    resetBucketPrefix() {
        this._bucketPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
    get s3OutputFormatConfig() {
        return this._s3OutputFormatConfig;
    }
    putS3OutputFormatConfig(value) {
        this._s3OutputFormatConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3OutputFormatConfigInput() {
        return this._s3OutputFormatConfig.internalValue;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutputReference[_2] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        fail_on_first_destination_error: cdktf.booleanToTerraform(struct.failOnFirstDestinationError),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._bucketPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketPrefix = this._bucketPrefix;
        }
        if (this._failOnFirstDestinationError !== undefined) {
            hasAnyValues = true;
            internalValueResult.failOnFirstDestinationError = this._failOnFirstDestinationError;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._bucketPrefix = undefined;
            this._failOnFirstDestinationError = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._bucketPrefix = value.bucketPrefix;
            this._failOnFirstDestinationError = value.failOnFirstDestinationError;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    resetBucketName() {
        this._bucketName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    resetBucketPrefix() {
        this._bucketPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
    get failOnFirstDestinationError() {
        return this.getBooleanAttribute('fail_on_first_destination_error');
    }
    set failOnFirstDestinationError(value) {
        this._failOnFirstDestinationError = value;
    }
    resetFailOnFirstDestinationError() {
        this._failOnFirstDestinationError = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get failOnFirstDestinationErrorInput() {
        return this._failOnFirstDestinationError;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutputReference[_3] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        id_field_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.idFieldNames),
        object: cdktf.stringToTerraform(struct.object),
        write_operation_type: cdktf.stringToTerraform(struct.writeOperationType),
        error_handling_config: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigToTerraform(struct.errorHandlingConfig),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // error_handling_config - computed: false, optional: true, required: false
        this._errorHandlingConfig = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigOutputReference(this, "error_handling_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._idFieldNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.idFieldNames = this._idFieldNames;
        }
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        if (this._writeOperationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.writeOperationType = this._writeOperationType;
        }
        if (this._errorHandlingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorHandlingConfig = this._errorHandlingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._idFieldNames = undefined;
            this._object = undefined;
            this._writeOperationType = undefined;
            this._errorHandlingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._idFieldNames = value.idFieldNames;
            this._object = value.object;
            this._writeOperationType = value.writeOperationType;
            this._errorHandlingConfig.internalValue = value.errorHandlingConfig;
        }
    }
    get idFieldNames() {
        return this.getListAttribute('id_field_names');
    }
    set idFieldNames(value) {
        this._idFieldNames = value;
    }
    resetIdFieldNames() {
        this._idFieldNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idFieldNamesInput() {
        return this._idFieldNames;
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
    get writeOperationType() {
        return this.getStringAttribute('write_operation_type');
    }
    set writeOperationType(value) {
        this._writeOperationType = value;
    }
    resetWriteOperationType() {
        this._writeOperationType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get writeOperationTypeInput() {
        return this._writeOperationType;
    }
    get errorHandlingConfig() {
        return this._errorHandlingConfig;
    }
    putErrorHandlingConfig(value) {
        this._errorHandlingConfig.internalValue = value;
    }
    resetErrorHandlingConfig() {
        this._errorHandlingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorHandlingConfigInput() {
        return this._errorHandlingConfig.internalValue;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutputReference[_4] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigDestinationConnectorPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_connector: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorToTerraform(struct.customConnector),
        customer_profiles: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesToTerraform(struct.customerProfiles),
        event_bridge: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeToTerraform(struct.eventBridge),
        honeycode: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeToTerraform(struct.honeycode),
        lookout_metrics: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsToTerraform(struct.lookoutMetrics),
        marketo: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoToTerraform(struct.marketo),
        redshift: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftToTerraform(struct.redshift),
        s3: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3ToTerraform(struct.s3),
        salesforce: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceToTerraform(struct.salesforce),
        sapo_data: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataToTerraform(struct.sapoData),
        snowflake: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeToTerraform(struct.snowflake),
        upsolver: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverToTerraform(struct.upsolver),
        zendesk: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskToTerraform(struct.zendesk),
    };
}
exports.appflowFlowDestinationFlowConfigDestinationConnectorPropertiesToTerraform = appflowFlowDestinationFlowConfigDestinationConnectorPropertiesToTerraform;
class AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // custom_connector - computed: false, optional: true, required: false
        this._customConnector = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorOutputReference(this, "custom_connector");
        // customer_profiles - computed: false, optional: true, required: false
        this._customerProfiles = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesOutputReference(this, "customer_profiles");
        // event_bridge - computed: false, optional: true, required: false
        this._eventBridge = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeOutputReference(this, "event_bridge");
        // honeycode - computed: false, optional: true, required: false
        this._honeycode = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeOutputReference(this, "honeycode");
        // lookout_metrics - computed: false, optional: true, required: false
        this._lookoutMetrics = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsOutputReference(this, "lookout_metrics");
        // marketo - computed: false, optional: true, required: false
        this._marketo = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesMarketoOutputReference(this, "marketo");
        // redshift - computed: false, optional: true, required: false
        this._redshift = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftOutputReference(this, "redshift");
        // s3 - computed: false, optional: true, required: false
        this._s3 = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesS3OutputReference(this, "s3");
        // salesforce - computed: false, optional: true, required: false
        this._salesforce = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceOutputReference(this, "salesforce");
        // sapo_data - computed: false, optional: true, required: false
        this._sapoData = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataOutputReference(this, "sapo_data");
        // snowflake - computed: false, optional: true, required: false
        this._snowflake = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeOutputReference(this, "snowflake");
        // upsolver - computed: false, optional: true, required: false
        this._upsolver = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverOutputReference(this, "upsolver");
        // zendesk - computed: false, optional: true, required: false
        this._zendesk = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesZendeskOutputReference(this, "zendesk");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customConnector?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customConnector = this._customConnector?.internalValue;
        }
        if (this._customerProfiles?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customerProfiles = this._customerProfiles?.internalValue;
        }
        if (this._eventBridge?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventBridge = this._eventBridge?.internalValue;
        }
        if (this._honeycode?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.honeycode = this._honeycode?.internalValue;
        }
        if (this._lookoutMetrics?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.lookoutMetrics = this._lookoutMetrics?.internalValue;
        }
        if (this._marketo?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.marketo = this._marketo?.internalValue;
        }
        if (this._redshift?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.redshift = this._redshift?.internalValue;
        }
        if (this._s3?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3 = this._s3?.internalValue;
        }
        if (this._salesforce?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.salesforce = this._salesforce?.internalValue;
        }
        if (this._sapoData?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sapoData = this._sapoData?.internalValue;
        }
        if (this._snowflake?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.snowflake = this._snowflake?.internalValue;
        }
        if (this._upsolver?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.upsolver = this._upsolver?.internalValue;
        }
        if (this._zendesk?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.zendesk = this._zendesk?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._customConnector.internalValue = undefined;
            this._customerProfiles.internalValue = undefined;
            this._eventBridge.internalValue = undefined;
            this._honeycode.internalValue = undefined;
            this._lookoutMetrics.internalValue = undefined;
            this._marketo.internalValue = undefined;
            this._redshift.internalValue = undefined;
            this._s3.internalValue = undefined;
            this._salesforce.internalValue = undefined;
            this._sapoData.internalValue = undefined;
            this._snowflake.internalValue = undefined;
            this._upsolver.internalValue = undefined;
            this._zendesk.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._customConnector.internalValue = value.customConnector;
            this._customerProfiles.internalValue = value.customerProfiles;
            this._eventBridge.internalValue = value.eventBridge;
            this._honeycode.internalValue = value.honeycode;
            this._lookoutMetrics.internalValue = value.lookoutMetrics;
            this._marketo.internalValue = value.marketo;
            this._redshift.internalValue = value.redshift;
            this._s3.internalValue = value.s3;
            this._salesforce.internalValue = value.salesforce;
            this._sapoData.internalValue = value.sapoData;
            this._snowflake.internalValue = value.snowflake;
            this._upsolver.internalValue = value.upsolver;
            this._zendesk.internalValue = value.zendesk;
        }
    }
    get customConnector() {
        return this._customConnector;
    }
    putCustomConnector(value) {
        this._customConnector.internalValue = value;
    }
    resetCustomConnector() {
        this._customConnector.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customConnectorInput() {
        return this._customConnector.internalValue;
    }
    get customerProfiles() {
        return this._customerProfiles;
    }
    putCustomerProfiles(value) {
        this._customerProfiles.internalValue = value;
    }
    resetCustomerProfiles() {
        this._customerProfiles.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customerProfilesInput() {
        return this._customerProfiles.internalValue;
    }
    get eventBridge() {
        return this._eventBridge;
    }
    putEventBridge(value) {
        this._eventBridge.internalValue = value;
    }
    resetEventBridge() {
        this._eventBridge.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventBridgeInput() {
        return this._eventBridge.internalValue;
    }
    get honeycode() {
        return this._honeycode;
    }
    putHoneycode(value) {
        this._honeycode.internalValue = value;
    }
    resetHoneycode() {
        this._honeycode.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get honeycodeInput() {
        return this._honeycode.internalValue;
    }
    get lookoutMetrics() {
        return this._lookoutMetrics;
    }
    putLookoutMetrics(value) {
        this._lookoutMetrics.internalValue = value;
    }
    resetLookoutMetrics() {
        this._lookoutMetrics.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lookoutMetricsInput() {
        return this._lookoutMetrics.internalValue;
    }
    get marketo() {
        return this._marketo;
    }
    putMarketo(value) {
        this._marketo.internalValue = value;
    }
    resetMarketo() {
        this._marketo.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get marketoInput() {
        return this._marketo.internalValue;
    }
    get redshift() {
        return this._redshift;
    }
    putRedshift(value) {
        this._redshift.internalValue = value;
    }
    resetRedshift() {
        this._redshift.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redshiftInput() {
        return this._redshift.internalValue;
    }
    get s3() {
        return this._s3;
    }
    putS3(value) {
        this._s3.internalValue = value;
    }
    resetS3() {
        this._s3.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3Input() {
        return this._s3.internalValue;
    }
    get salesforce() {
        return this._salesforce;
    }
    putSalesforce(value) {
        this._salesforce.internalValue = value;
    }
    resetSalesforce() {
        this._salesforce.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get salesforceInput() {
        return this._salesforce.internalValue;
    }
    get sapoData() {
        return this._sapoData;
    }
    putSapoData(value) {
        this._sapoData.internalValue = value;
    }
    resetSapoData() {
        this._sapoData.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sapoDataInput() {
        return this._sapoData.internalValue;
    }
    get snowflake() {
        return this._snowflake;
    }
    putSnowflake(value) {
        this._snowflake.internalValue = value;
    }
    resetSnowflake() {
        this._snowflake.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snowflakeInput() {
        return this._snowflake.internalValue;
    }
    get upsolver() {
        return this._upsolver;
    }
    putUpsolver(value) {
        this._upsolver.internalValue = value;
    }
    resetUpsolver() {
        this._upsolver.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get upsolverInput() {
        return this._upsolver.internalValue;
    }
    get zendesk() {
        return this._zendesk;
    }
    putZendesk(value) {
        this._zendesk.internalValue = value;
    }
    resetZendesk() {
        this._zendesk.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zendeskInput() {
        return this._zendesk.internalValue;
    }
}
exports.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesOutputReference = AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesOutputReference[_5] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesOutputReference", version: "10.0.12" };
function appflowFlowDestinationFlowConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        api_version: cdktf.stringToTerraform(struct.apiVersion),
        connector_profile_name: cdktf.stringToTerraform(struct.connectorProfileName),
        connector_type: cdktf.stringToTerraform(struct.connectorType),
        destination_connector_properties: appflowFlowDestinationFlowConfigDestinationConnectorPropertiesToTerraform(struct.destinationConnectorProperties),
    };
}
exports.appflowFlowDestinationFlowConfigToTerraform = appflowFlowDestinationFlowConfigToTerraform;
class AppflowFlowDestinationFlowConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // destination_connector_properties - computed: false, optional: false, required: true
        this._destinationConnectorProperties = new AppflowFlowDestinationFlowConfigDestinationConnectorPropertiesOutputReference(this, "destination_connector_properties");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._apiVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.apiVersion = this._apiVersion;
        }
        if (this._connectorProfileName !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectorProfileName = this._connectorProfileName;
        }
        if (this._connectorType !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectorType = this._connectorType;
        }
        if (this._destinationConnectorProperties?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationConnectorProperties = this._destinationConnectorProperties?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._apiVersion = undefined;
            this._connectorProfileName = undefined;
            this._connectorType = undefined;
            this._destinationConnectorProperties.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._apiVersion = value.apiVersion;
            this._connectorProfileName = value.connectorProfileName;
            this._connectorType = value.connectorType;
            this._destinationConnectorProperties.internalValue = value.destinationConnectorProperties;
        }
    }
    get apiVersion() {
        return this.getStringAttribute('api_version');
    }
    set apiVersion(value) {
        this._apiVersion = value;
    }
    resetApiVersion() {
        this._apiVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get apiVersionInput() {
        return this._apiVersion;
    }
    get connectorProfileName() {
        return this.getStringAttribute('connector_profile_name');
    }
    set connectorProfileName(value) {
        this._connectorProfileName = value;
    }
    resetConnectorProfileName() {
        this._connectorProfileName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectorProfileNameInput() {
        return this._connectorProfileName;
    }
    get connectorType() {
        return this.getStringAttribute('connector_type');
    }
    set connectorType(value) {
        this._connectorType = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectorTypeInput() {
        return this._connectorType;
    }
    get destinationConnectorProperties() {
        return this._destinationConnectorProperties;
    }
    putDestinationConnectorProperties(value) {
        this._destinationConnectorProperties.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationConnectorPropertiesInput() {
        return this._destinationConnectorProperties.internalValue;
    }
}
exports.AppflowFlowDestinationFlowConfigOutputReference = AppflowFlowDestinationFlowConfigOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigOutputReference[_6] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigOutputReference", version: "10.0.12" };
class AppflowFlowDestinationFlowConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AppflowFlowDestinationFlowConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AppflowFlowDestinationFlowConfigList = AppflowFlowDestinationFlowConfigList;
_7 = JSII_RTTI_SYMBOL_1;
AppflowFlowDestinationFlowConfigList[_7] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowDestinationFlowConfigList", version: "10.0.12" };
function appflowFlowSourceFlowConfigIncrementalPullConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        datetime_type_field_name: cdktf.stringToTerraform(struct.datetimeTypeFieldName),
    };
}
exports.appflowFlowSourceFlowConfigIncrementalPullConfigToTerraform = appflowFlowSourceFlowConfigIncrementalPullConfigToTerraform;
class AppflowFlowSourceFlowConfigIncrementalPullConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datetimeTypeFieldName !== undefined) {
            hasAnyValues = true;
            internalValueResult.datetimeTypeFieldName = this._datetimeTypeFieldName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datetimeTypeFieldName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datetimeTypeFieldName = value.datetimeTypeFieldName;
        }
    }
    get datetimeTypeFieldName() {
        return this.getStringAttribute('datetime_type_field_name');
    }
    set datetimeTypeFieldName(value) {
        this._datetimeTypeFieldName = value;
    }
    resetDatetimeTypeFieldName() {
        this._datetimeTypeFieldName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datetimeTypeFieldNameInput() {
        return this._datetimeTypeFieldName;
    }
}
exports.AppflowFlowSourceFlowConfigIncrementalPullConfigOutputReference = AppflowFlowSourceFlowConfigIncrementalPullConfigOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigIncrementalPullConfigOutputReference[_8] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigIncrementalPullConfigOutputReference", version: "10.0.12" };
function appflowFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeToTerraform;
class AppflowFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._object = value.object;
        }
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutputReference = AppflowFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutputReference[_9] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutputReference", version: "10.0.12" };
function appflowFlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.customProperties),
        entity_name: cdktf.stringToTerraform(struct.entityName),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorToTerraform;
class AppflowFlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customProperties !== undefined) {
            hasAnyValues = true;
            internalValueResult.customProperties = this._customProperties;
        }
        if (this._entityName !== undefined) {
            hasAnyValues = true;
            internalValueResult.entityName = this._entityName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._customProperties = undefined;
            this._entityName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._customProperties = value.customProperties;
            this._entityName = value.entityName;
        }
    }
    get customProperties() {
        return this.getStringMapAttribute('custom_properties');
    }
    set customProperties(value) {
        this._customProperties = value;
    }
    resetCustomProperties() {
        this._customProperties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customPropertiesInput() {
        return this._customProperties;
    }
    get entityName() {
        return this.getStringAttribute('entity_name');
    }
    set entityName(value) {
        this._entityName = value;
    }
    // Temporarily expose input value. Use with caution.
    get entityNameInput() {
        return this._entityName;
    }
}
exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutputReference = AppflowFlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutputReference[_10] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutputReference", version: "10.0.12" };
function appflowFlowSourceFlowConfigSourceConnectorPropertiesDatadogToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesDatadogToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesDatadogToTerraform;
class AppflowFlowSourceFlowConfigSourceConnectorPropertiesDatadogOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._object = value.object;
        }
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesDatadogOutputReference = AppflowFlowSourceFlowConfigSourceConnectorPropertiesDatadogOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigSourceConnectorPropertiesDatadogOutputReference[_11] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigSourceConnectorPropertiesDatadogOutputReference", version: "10.0.12" };
function appflowFlowSourceFlowConfigSourceConnectorPropertiesDynatraceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesDynatraceToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesDynatraceToTerraform;
class AppflowFlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._object = value.object;
        }
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutputReference = AppflowFlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutputReference[_12] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutputReference", version: "10.0.12" };
function appflowFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsToTerraform;
class AppflowFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._object = value.object;
        }
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutputReference = AppflowFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutputReference[_13] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutputReference", version: "10.0.12" };
function appflowFlowSourceFlowConfigSourceConnectorPropertiesInforNexusToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesInforNexusToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesInforNexusToTerraform;
class AppflowFlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._object = value.object;
        }
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutputReference = AppflowFlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutputReference[_14] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutputReference", version: "10.0.12" };
function appflowFlowSourceFlowConfigSourceConnectorPropertiesMarketoToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesMarketoToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesMarketoToTerraform;
class AppflowFlowSourceFlowConfigSourceConnectorPropertiesMarketoOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._object = value.object;
        }
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesMarketoOutputReference = AppflowFlowSourceFlowConfigSourceConnectorPropertiesMarketoOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigSourceConnectorPropertiesMarketoOutputReference[_15] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigSourceConnectorPropertiesMarketoOutputReference", version: "10.0.12" };
function appflowFlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        s3_input_file_type: cdktf.stringToTerraform(struct.s3InputFileType),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigToTerraform;
class AppflowFlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._s3InputFileType !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3InputFileType = this._s3InputFileType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._s3InputFileType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._s3InputFileType = value.s3InputFileType;
        }
    }
    get s3InputFileType() {
        return this.getStringAttribute('s3_input_file_type');
    }
    set s3InputFileType(value) {
        this._s3InputFileType = value;
    }
    resetS3InputFileType() {
        this._s3InputFileType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3InputFileTypeInput() {
        return this._s3InputFileType;
    }
}
exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutputReference = AppflowFlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutputReference[_16] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutputReference", version: "10.0.12" };
function appflowFlowSourceFlowConfigSourceConnectorPropertiesS3ToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        s3_input_format_config: appflowFlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigToTerraform(struct.s3InputFormatConfig),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesS3ToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesS3ToTerraform;
class AppflowFlowSourceFlowConfigSourceConnectorPropertiesS3OutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // s3_input_format_config - computed: false, optional: true, required: false
        this._s3InputFormatConfig = new AppflowFlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigOutputReference(this, "s3_input_format_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._bucketPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketPrefix = this._bucketPrefix;
        }
        if (this._s3InputFormatConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3InputFormatConfig = this._s3InputFormatConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._bucketPrefix = undefined;
            this._s3InputFormatConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._bucketPrefix = value.bucketPrefix;
            this._s3InputFormatConfig.internalValue = value.s3InputFormatConfig;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    resetBucketPrefix() {
        this._bucketPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
    get s3InputFormatConfig() {
        return this._s3InputFormatConfig;
    }
    putS3InputFormatConfig(value) {
        this._s3InputFormatConfig.internalValue = value;
    }
    resetS3InputFormatConfig() {
        this._s3InputFormatConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3InputFormatConfigInput() {
        return this._s3InputFormatConfig.internalValue;
    }
}
exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesS3OutputReference = AppflowFlowSourceFlowConfigSourceConnectorPropertiesS3OutputReference;
_17 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigSourceConnectorPropertiesS3OutputReference[_17] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigSourceConnectorPropertiesS3OutputReference", version: "10.0.12" };
function appflowFlowSourceFlowConfigSourceConnectorPropertiesSalesforceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_dynamic_field_update: cdktf.booleanToTerraform(struct.enableDynamicFieldUpdate),
        include_deleted_records: cdktf.booleanToTerraform(struct.includeDeletedRecords),
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesSalesforceToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesSalesforceToTerraform;
class AppflowFlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableDynamicFieldUpdate !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableDynamicFieldUpdate = this._enableDynamicFieldUpdate;
        }
        if (this._includeDeletedRecords !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeDeletedRecords = this._includeDeletedRecords;
        }
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableDynamicFieldUpdate = undefined;
            this._includeDeletedRecords = undefined;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableDynamicFieldUpdate = value.enableDynamicFieldUpdate;
            this._includeDeletedRecords = value.includeDeletedRecords;
            this._object = value.object;
        }
    }
    get enableDynamicFieldUpdate() {
        return this.getBooleanAttribute('enable_dynamic_field_update');
    }
    set enableDynamicFieldUpdate(value) {
        this._enableDynamicFieldUpdate = value;
    }
    resetEnableDynamicFieldUpdate() {
        this._enableDynamicFieldUpdate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableDynamicFieldUpdateInput() {
        return this._enableDynamicFieldUpdate;
    }
    get includeDeletedRecords() {
        return this.getBooleanAttribute('include_deleted_records');
    }
    set includeDeletedRecords(value) {
        this._includeDeletedRecords = value;
    }
    resetIncludeDeletedRecords() {
        this._includeDeletedRecords = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeDeletedRecordsInput() {
        return this._includeDeletedRecords;
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutputReference = AppflowFlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutputReference[_18] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutputReference", version: "10.0.12" };
function appflowFlowSourceFlowConfigSourceConnectorPropertiesSapoDataToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesSapoDataToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesSapoDataToTerraform;
class AppflowFlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._object = value.object;
        }
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutputReference = AppflowFlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutputReference[_19] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutputReference", version: "10.0.12" };
function appflowFlowSourceFlowConfigSourceConnectorPropertiesServiceNowToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesServiceNowToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesServiceNowToTerraform;
class AppflowFlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._object = value.object;
        }
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutputReference = AppflowFlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutputReference[_20] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutputReference", version: "10.0.12" };
function appflowFlowSourceFlowConfigSourceConnectorPropertiesSingularToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesSingularToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesSingularToTerraform;
class AppflowFlowSourceFlowConfigSourceConnectorPropertiesSingularOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._object = value.object;
        }
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesSingularOutputReference = AppflowFlowSourceFlowConfigSourceConnectorPropertiesSingularOutputReference;
_21 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigSourceConnectorPropertiesSingularOutputReference[_21] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigSourceConnectorPropertiesSingularOutputReference", version: "10.0.12" };
function appflowFlowSourceFlowConfigSourceConnectorPropertiesSlackToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesSlackToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesSlackToTerraform;
class AppflowFlowSourceFlowConfigSourceConnectorPropertiesSlackOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._object = value.object;
        }
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesSlackOutputReference = AppflowFlowSourceFlowConfigSourceConnectorPropertiesSlackOutputReference;
_22 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigSourceConnectorPropertiesSlackOutputReference[_22] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigSourceConnectorPropertiesSlackOutputReference", version: "10.0.12" };
function appflowFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroToTerraform;
class AppflowFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._object = value.object;
        }
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutputReference = AppflowFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutputReference[_23] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutputReference", version: "10.0.12" };
function appflowFlowSourceFlowConfigSourceConnectorPropertiesVeevaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        document_type: cdktf.stringToTerraform(struct.documentType),
        include_all_versions: cdktf.booleanToTerraform(struct.includeAllVersions),
        include_renditions: cdktf.booleanToTerraform(struct.includeRenditions),
        include_source_files: cdktf.booleanToTerraform(struct.includeSourceFiles),
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesVeevaToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesVeevaToTerraform;
class AppflowFlowSourceFlowConfigSourceConnectorPropertiesVeevaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._documentType !== undefined) {
            hasAnyValues = true;
            internalValueResult.documentType = this._documentType;
        }
        if (this._includeAllVersions !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeAllVersions = this._includeAllVersions;
        }
        if (this._includeRenditions !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeRenditions = this._includeRenditions;
        }
        if (this._includeSourceFiles !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeSourceFiles = this._includeSourceFiles;
        }
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._documentType = undefined;
            this._includeAllVersions = undefined;
            this._includeRenditions = undefined;
            this._includeSourceFiles = undefined;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._documentType = value.documentType;
            this._includeAllVersions = value.includeAllVersions;
            this._includeRenditions = value.includeRenditions;
            this._includeSourceFiles = value.includeSourceFiles;
            this._object = value.object;
        }
    }
    get documentType() {
        return this.getStringAttribute('document_type');
    }
    set documentType(value) {
        this._documentType = value;
    }
    resetDocumentType() {
        this._documentType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get documentTypeInput() {
        return this._documentType;
    }
    get includeAllVersions() {
        return this.getBooleanAttribute('include_all_versions');
    }
    set includeAllVersions(value) {
        this._includeAllVersions = value;
    }
    resetIncludeAllVersions() {
        this._includeAllVersions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeAllVersionsInput() {
        return this._includeAllVersions;
    }
    get includeRenditions() {
        return this.getBooleanAttribute('include_renditions');
    }
    set includeRenditions(value) {
        this._includeRenditions = value;
    }
    resetIncludeRenditions() {
        this._includeRenditions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeRenditionsInput() {
        return this._includeRenditions;
    }
    get includeSourceFiles() {
        return this.getBooleanAttribute('include_source_files');
    }
    set includeSourceFiles(value) {
        this._includeSourceFiles = value;
    }
    resetIncludeSourceFiles() {
        this._includeSourceFiles = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeSourceFilesInput() {
        return this._includeSourceFiles;
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesVeevaOutputReference = AppflowFlowSourceFlowConfigSourceConnectorPropertiesVeevaOutputReference;
_24 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigSourceConnectorPropertiesVeevaOutputReference[_24] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigSourceConnectorPropertiesVeevaOutputReference", version: "10.0.12" };
function appflowFlowSourceFlowConfigSourceConnectorPropertiesZendeskToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesZendeskToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesZendeskToTerraform;
class AppflowFlowSourceFlowConfigSourceConnectorPropertiesZendeskOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._object = value.object;
        }
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesZendeskOutputReference = AppflowFlowSourceFlowConfigSourceConnectorPropertiesZendeskOutputReference;
_25 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigSourceConnectorPropertiesZendeskOutputReference[_25] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigSourceConnectorPropertiesZendeskOutputReference", version: "10.0.12" };
function appflowFlowSourceFlowConfigSourceConnectorPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        amplitude: appflowFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeToTerraform(struct.amplitude),
        custom_connector: appflowFlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorToTerraform(struct.customConnector),
        datadog: appflowFlowSourceFlowConfigSourceConnectorPropertiesDatadogToTerraform(struct.datadog),
        dynatrace: appflowFlowSourceFlowConfigSourceConnectorPropertiesDynatraceToTerraform(struct.dynatrace),
        google_analytics: appflowFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsToTerraform(struct.googleAnalytics),
        infor_nexus: appflowFlowSourceFlowConfigSourceConnectorPropertiesInforNexusToTerraform(struct.inforNexus),
        marketo: appflowFlowSourceFlowConfigSourceConnectorPropertiesMarketoToTerraform(struct.marketo),
        s3: appflowFlowSourceFlowConfigSourceConnectorPropertiesS3ToTerraform(struct.s3),
        salesforce: appflowFlowSourceFlowConfigSourceConnectorPropertiesSalesforceToTerraform(struct.salesforce),
        sapo_data: appflowFlowSourceFlowConfigSourceConnectorPropertiesSapoDataToTerraform(struct.sapoData),
        service_now: appflowFlowSourceFlowConfigSourceConnectorPropertiesServiceNowToTerraform(struct.serviceNow),
        singular: appflowFlowSourceFlowConfigSourceConnectorPropertiesSingularToTerraform(struct.singular),
        slack: appflowFlowSourceFlowConfigSourceConnectorPropertiesSlackToTerraform(struct.slack),
        trendmicro: appflowFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroToTerraform(struct.trendmicro),
        veeva: appflowFlowSourceFlowConfigSourceConnectorPropertiesVeevaToTerraform(struct.veeva),
        zendesk: appflowFlowSourceFlowConfigSourceConnectorPropertiesZendeskToTerraform(struct.zendesk),
    };
}
exports.appflowFlowSourceFlowConfigSourceConnectorPropertiesToTerraform = appflowFlowSourceFlowConfigSourceConnectorPropertiesToTerraform;
class AppflowFlowSourceFlowConfigSourceConnectorPropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // amplitude - computed: false, optional: true, required: false
        this._amplitude = new AppflowFlowSourceFlowConfigSourceConnectorPropertiesAmplitudeOutputReference(this, "amplitude");
        // custom_connector - computed: false, optional: true, required: false
        this._customConnector = new AppflowFlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorOutputReference(this, "custom_connector");
        // datadog - computed: false, optional: true, required: false
        this._datadog = new AppflowFlowSourceFlowConfigSourceConnectorPropertiesDatadogOutputReference(this, "datadog");
        // dynatrace - computed: false, optional: true, required: false
        this._dynatrace = new AppflowFlowSourceFlowConfigSourceConnectorPropertiesDynatraceOutputReference(this, "dynatrace");
        // google_analytics - computed: false, optional: true, required: false
        this._googleAnalytics = new AppflowFlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsOutputReference(this, "google_analytics");
        // infor_nexus - computed: false, optional: true, required: false
        this._inforNexus = new AppflowFlowSourceFlowConfigSourceConnectorPropertiesInforNexusOutputReference(this, "infor_nexus");
        // marketo - computed: false, optional: true, required: false
        this._marketo = new AppflowFlowSourceFlowConfigSourceConnectorPropertiesMarketoOutputReference(this, "marketo");
        // s3 - computed: false, optional: true, required: false
        this._s3 = new AppflowFlowSourceFlowConfigSourceConnectorPropertiesS3OutputReference(this, "s3");
        // salesforce - computed: false, optional: true, required: false
        this._salesforce = new AppflowFlowSourceFlowConfigSourceConnectorPropertiesSalesforceOutputReference(this, "salesforce");
        // sapo_data - computed: false, optional: true, required: false
        this._sapoData = new AppflowFlowSourceFlowConfigSourceConnectorPropertiesSapoDataOutputReference(this, "sapo_data");
        // service_now - computed: false, optional: true, required: false
        this._serviceNow = new AppflowFlowSourceFlowConfigSourceConnectorPropertiesServiceNowOutputReference(this, "service_now");
        // singular - computed: false, optional: true, required: false
        this._singular = new AppflowFlowSourceFlowConfigSourceConnectorPropertiesSingularOutputReference(this, "singular");
        // slack - computed: false, optional: true, required: false
        this._slack = new AppflowFlowSourceFlowConfigSourceConnectorPropertiesSlackOutputReference(this, "slack");
        // trendmicro - computed: false, optional: true, required: false
        this._trendmicro = new AppflowFlowSourceFlowConfigSourceConnectorPropertiesTrendmicroOutputReference(this, "trendmicro");
        // veeva - computed: false, optional: true, required: false
        this._veeva = new AppflowFlowSourceFlowConfigSourceConnectorPropertiesVeevaOutputReference(this, "veeva");
        // zendesk - computed: false, optional: true, required: false
        this._zendesk = new AppflowFlowSourceFlowConfigSourceConnectorPropertiesZendeskOutputReference(this, "zendesk");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._amplitude?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.amplitude = this._amplitude?.internalValue;
        }
        if (this._customConnector?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customConnector = this._customConnector?.internalValue;
        }
        if (this._datadog?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.datadog = this._datadog?.internalValue;
        }
        if (this._dynatrace?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dynatrace = this._dynatrace?.internalValue;
        }
        if (this._googleAnalytics?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.googleAnalytics = this._googleAnalytics?.internalValue;
        }
        if (this._inforNexus?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inforNexus = this._inforNexus?.internalValue;
        }
        if (this._marketo?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.marketo = this._marketo?.internalValue;
        }
        if (this._s3?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3 = this._s3?.internalValue;
        }
        if (this._salesforce?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.salesforce = this._salesforce?.internalValue;
        }
        if (this._sapoData?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sapoData = this._sapoData?.internalValue;
        }
        if (this._serviceNow?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceNow = this._serviceNow?.internalValue;
        }
        if (this._singular?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.singular = this._singular?.internalValue;
        }
        if (this._slack?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.slack = this._slack?.internalValue;
        }
        if (this._trendmicro?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.trendmicro = this._trendmicro?.internalValue;
        }
        if (this._veeva?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.veeva = this._veeva?.internalValue;
        }
        if (this._zendesk?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.zendesk = this._zendesk?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._amplitude.internalValue = undefined;
            this._customConnector.internalValue = undefined;
            this._datadog.internalValue = undefined;
            this._dynatrace.internalValue = undefined;
            this._googleAnalytics.internalValue = undefined;
            this._inforNexus.internalValue = undefined;
            this._marketo.internalValue = undefined;
            this._s3.internalValue = undefined;
            this._salesforce.internalValue = undefined;
            this._sapoData.internalValue = undefined;
            this._serviceNow.internalValue = undefined;
            this._singular.internalValue = undefined;
            this._slack.internalValue = undefined;
            this._trendmicro.internalValue = undefined;
            this._veeva.internalValue = undefined;
            this._zendesk.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._amplitude.internalValue = value.amplitude;
            this._customConnector.internalValue = value.customConnector;
            this._datadog.internalValue = value.datadog;
            this._dynatrace.internalValue = value.dynatrace;
            this._googleAnalytics.internalValue = value.googleAnalytics;
            this._inforNexus.internalValue = value.inforNexus;
            this._marketo.internalValue = value.marketo;
            this._s3.internalValue = value.s3;
            this._salesforce.internalValue = value.salesforce;
            this._sapoData.internalValue = value.sapoData;
            this._serviceNow.internalValue = value.serviceNow;
            this._singular.internalValue = value.singular;
            this._slack.internalValue = value.slack;
            this._trendmicro.internalValue = value.trendmicro;
            this._veeva.internalValue = value.veeva;
            this._zendesk.internalValue = value.zendesk;
        }
    }
    get amplitude() {
        return this._amplitude;
    }
    putAmplitude(value) {
        this._amplitude.internalValue = value;
    }
    resetAmplitude() {
        this._amplitude.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get amplitudeInput() {
        return this._amplitude.internalValue;
    }
    get customConnector() {
        return this._customConnector;
    }
    putCustomConnector(value) {
        this._customConnector.internalValue = value;
    }
    resetCustomConnector() {
        this._customConnector.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customConnectorInput() {
        return this._customConnector.internalValue;
    }
    get datadog() {
        return this._datadog;
    }
    putDatadog(value) {
        this._datadog.internalValue = value;
    }
    resetDatadog() {
        this._datadog.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datadogInput() {
        return this._datadog.internalValue;
    }
    get dynatrace() {
        return this._dynatrace;
    }
    putDynatrace(value) {
        this._dynatrace.internalValue = value;
    }
    resetDynatrace() {
        this._dynatrace.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dynatraceInput() {
        return this._dynatrace.internalValue;
    }
    get googleAnalytics() {
        return this._googleAnalytics;
    }
    putGoogleAnalytics(value) {
        this._googleAnalytics.internalValue = value;
    }
    resetGoogleAnalytics() {
        this._googleAnalytics.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get googleAnalyticsInput() {
        return this._googleAnalytics.internalValue;
    }
    get inforNexus() {
        return this._inforNexus;
    }
    putInforNexus(value) {
        this._inforNexus.internalValue = value;
    }
    resetInforNexus() {
        this._inforNexus.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inforNexusInput() {
        return this._inforNexus.internalValue;
    }
    get marketo() {
        return this._marketo;
    }
    putMarketo(value) {
        this._marketo.internalValue = value;
    }
    resetMarketo() {
        this._marketo.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get marketoInput() {
        return this._marketo.internalValue;
    }
    get s3() {
        return this._s3;
    }
    putS3(value) {
        this._s3.internalValue = value;
    }
    resetS3() {
        this._s3.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3Input() {
        return this._s3.internalValue;
    }
    get salesforce() {
        return this._salesforce;
    }
    putSalesforce(value) {
        this._salesforce.internalValue = value;
    }
    resetSalesforce() {
        this._salesforce.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get salesforceInput() {
        return this._salesforce.internalValue;
    }
    get sapoData() {
        return this._sapoData;
    }
    putSapoData(value) {
        this._sapoData.internalValue = value;
    }
    resetSapoData() {
        this._sapoData.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sapoDataInput() {
        return this._sapoData.internalValue;
    }
    get serviceNow() {
        return this._serviceNow;
    }
    putServiceNow(value) {
        this._serviceNow.internalValue = value;
    }
    resetServiceNow() {
        this._serviceNow.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNowInput() {
        return this._serviceNow.internalValue;
    }
    get singular() {
        return this._singular;
    }
    putSingular(value) {
        this._singular.internalValue = value;
    }
    resetSingular() {
        this._singular.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get singularInput() {
        return this._singular.internalValue;
    }
    get slack() {
        return this._slack;
    }
    putSlack(value) {
        this._slack.internalValue = value;
    }
    resetSlack() {
        this._slack.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get slackInput() {
        return this._slack.internalValue;
    }
    get trendmicro() {
        return this._trendmicro;
    }
    putTrendmicro(value) {
        this._trendmicro.internalValue = value;
    }
    resetTrendmicro() {
        this._trendmicro.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trendmicroInput() {
        return this._trendmicro.internalValue;
    }
    get veeva() {
        return this._veeva;
    }
    putVeeva(value) {
        this._veeva.internalValue = value;
    }
    resetVeeva() {
        this._veeva.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get veevaInput() {
        return this._veeva.internalValue;
    }
    get zendesk() {
        return this._zendesk;
    }
    putZendesk(value) {
        this._zendesk.internalValue = value;
    }
    resetZendesk() {
        this._zendesk.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zendeskInput() {
        return this._zendesk.internalValue;
    }
}
exports.AppflowFlowSourceFlowConfigSourceConnectorPropertiesOutputReference = AppflowFlowSourceFlowConfigSourceConnectorPropertiesOutputReference;
_26 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigSourceConnectorPropertiesOutputReference[_26] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigSourceConnectorPropertiesOutputReference", version: "10.0.12" };
function appflowFlowSourceFlowConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        api_version: cdktf.stringToTerraform(struct.apiVersion),
        connector_profile_name: cdktf.stringToTerraform(struct.connectorProfileName),
        connector_type: cdktf.stringToTerraform(struct.connectorType),
        incremental_pull_config: appflowFlowSourceFlowConfigIncrementalPullConfigToTerraform(struct.incrementalPullConfig),
        source_connector_properties: appflowFlowSourceFlowConfigSourceConnectorPropertiesToTerraform(struct.sourceConnectorProperties),
    };
}
exports.appflowFlowSourceFlowConfigToTerraform = appflowFlowSourceFlowConfigToTerraform;
class AppflowFlowSourceFlowConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // incremental_pull_config - computed: false, optional: true, required: false
        this._incrementalPullConfig = new AppflowFlowSourceFlowConfigIncrementalPullConfigOutputReference(this, "incremental_pull_config");
        // source_connector_properties - computed: false, optional: false, required: true
        this._sourceConnectorProperties = new AppflowFlowSourceFlowConfigSourceConnectorPropertiesOutputReference(this, "source_connector_properties");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._apiVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.apiVersion = this._apiVersion;
        }
        if (this._connectorProfileName !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectorProfileName = this._connectorProfileName;
        }
        if (this._connectorType !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectorType = this._connectorType;
        }
        if (this._incrementalPullConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.incrementalPullConfig = this._incrementalPullConfig?.internalValue;
        }
        if (this._sourceConnectorProperties?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceConnectorProperties = this._sourceConnectorProperties?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._apiVersion = undefined;
            this._connectorProfileName = undefined;
            this._connectorType = undefined;
            this._incrementalPullConfig.internalValue = undefined;
            this._sourceConnectorProperties.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._apiVersion = value.apiVersion;
            this._connectorProfileName = value.connectorProfileName;
            this._connectorType = value.connectorType;
            this._incrementalPullConfig.internalValue = value.incrementalPullConfig;
            this._sourceConnectorProperties.internalValue = value.sourceConnectorProperties;
        }
    }
    get apiVersion() {
        return this.getStringAttribute('api_version');
    }
    set apiVersion(value) {
        this._apiVersion = value;
    }
    resetApiVersion() {
        this._apiVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get apiVersionInput() {
        return this._apiVersion;
    }
    get connectorProfileName() {
        return this.getStringAttribute('connector_profile_name');
    }
    set connectorProfileName(value) {
        this._connectorProfileName = value;
    }
    resetConnectorProfileName() {
        this._connectorProfileName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectorProfileNameInput() {
        return this._connectorProfileName;
    }
    get connectorType() {
        return this.getStringAttribute('connector_type');
    }
    set connectorType(value) {
        this._connectorType = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectorTypeInput() {
        return this._connectorType;
    }
    get incrementalPullConfig() {
        return this._incrementalPullConfig;
    }
    putIncrementalPullConfig(value) {
        this._incrementalPullConfig.internalValue = value;
    }
    resetIncrementalPullConfig() {
        this._incrementalPullConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get incrementalPullConfigInput() {
        return this._incrementalPullConfig.internalValue;
    }
    get sourceConnectorProperties() {
        return this._sourceConnectorProperties;
    }
    putSourceConnectorProperties(value) {
        this._sourceConnectorProperties.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceConnectorPropertiesInput() {
        return this._sourceConnectorProperties.internalValue;
    }
}
exports.AppflowFlowSourceFlowConfigOutputReference = AppflowFlowSourceFlowConfigOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
AppflowFlowSourceFlowConfigOutputReference[_27] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowSourceFlowConfigOutputReference", version: "10.0.12" };
function appflowFlowTaskConnectorOperatorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        amplitude: cdktf.stringToTerraform(struct.amplitude),
        custom_connector: cdktf.stringToTerraform(struct.customConnector),
        datadog: cdktf.stringToTerraform(struct.datadog),
        dynatrace: cdktf.stringToTerraform(struct.dynatrace),
        google_analytics: cdktf.stringToTerraform(struct.googleAnalytics),
        infor_nexus: cdktf.stringToTerraform(struct.inforNexus),
        marketo: cdktf.stringToTerraform(struct.marketo),
        s3: cdktf.stringToTerraform(struct.s3),
        salesforce: cdktf.stringToTerraform(struct.salesforce),
        sapo_data: cdktf.stringToTerraform(struct.sapoData),
        service_now: cdktf.stringToTerraform(struct.serviceNow),
        singular: cdktf.stringToTerraform(struct.singular),
        slack: cdktf.stringToTerraform(struct.slack),
        trendmicro: cdktf.stringToTerraform(struct.trendmicro),
        veeva: cdktf.stringToTerraform(struct.veeva),
        zendesk: cdktf.stringToTerraform(struct.zendesk),
    };
}
exports.appflowFlowTaskConnectorOperatorToTerraform = appflowFlowTaskConnectorOperatorToTerraform;
class AppflowFlowTaskConnectorOperatorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._amplitude !== undefined) {
            hasAnyValues = true;
            internalValueResult.amplitude = this._amplitude;
        }
        if (this._customConnector !== undefined) {
            hasAnyValues = true;
            internalValueResult.customConnector = this._customConnector;
        }
        if (this._datadog !== undefined) {
            hasAnyValues = true;
            internalValueResult.datadog = this._datadog;
        }
        if (this._dynatrace !== undefined) {
            hasAnyValues = true;
            internalValueResult.dynatrace = this._dynatrace;
        }
        if (this._googleAnalytics !== undefined) {
            hasAnyValues = true;
            internalValueResult.googleAnalytics = this._googleAnalytics;
        }
        if (this._inforNexus !== undefined) {
            hasAnyValues = true;
            internalValueResult.inforNexus = this._inforNexus;
        }
        if (this._marketo !== undefined) {
            hasAnyValues = true;
            internalValueResult.marketo = this._marketo;
        }
        if (this._s3 !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3 = this._s3;
        }
        if (this._salesforce !== undefined) {
            hasAnyValues = true;
            internalValueResult.salesforce = this._salesforce;
        }
        if (this._sapoData !== undefined) {
            hasAnyValues = true;
            internalValueResult.sapoData = this._sapoData;
        }
        if (this._serviceNow !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceNow = this._serviceNow;
        }
        if (this._singular !== undefined) {
            hasAnyValues = true;
            internalValueResult.singular = this._singular;
        }
        if (this._slack !== undefined) {
            hasAnyValues = true;
            internalValueResult.slack = this._slack;
        }
        if (this._trendmicro !== undefined) {
            hasAnyValues = true;
            internalValueResult.trendmicro = this._trendmicro;
        }
        if (this._veeva !== undefined) {
            hasAnyValues = true;
            internalValueResult.veeva = this._veeva;
        }
        if (this._zendesk !== undefined) {
            hasAnyValues = true;
            internalValueResult.zendesk = this._zendesk;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._amplitude = undefined;
            this._customConnector = undefined;
            this._datadog = undefined;
            this._dynatrace = undefined;
            this._googleAnalytics = undefined;
            this._inforNexus = undefined;
            this._marketo = undefined;
            this._s3 = undefined;
            this._salesforce = undefined;
            this._sapoData = undefined;
            this._serviceNow = undefined;
            this._singular = undefined;
            this._slack = undefined;
            this._trendmicro = undefined;
            this._veeva = undefined;
            this._zendesk = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._amplitude = value.amplitude;
            this._customConnector = value.customConnector;
            this._datadog = value.datadog;
            this._dynatrace = value.dynatrace;
            this._googleAnalytics = value.googleAnalytics;
            this._inforNexus = value.inforNexus;
            this._marketo = value.marketo;
            this._s3 = value.s3;
            this._salesforce = value.salesforce;
            this._sapoData = value.sapoData;
            this._serviceNow = value.serviceNow;
            this._singular = value.singular;
            this._slack = value.slack;
            this._trendmicro = value.trendmicro;
            this._veeva = value.veeva;
            this._zendesk = value.zendesk;
        }
    }
    get amplitude() {
        return this.getStringAttribute('amplitude');
    }
    set amplitude(value) {
        this._amplitude = value;
    }
    resetAmplitude() {
        this._amplitude = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get amplitudeInput() {
        return this._amplitude;
    }
    get customConnector() {
        return this.getStringAttribute('custom_connector');
    }
    set customConnector(value) {
        this._customConnector = value;
    }
    resetCustomConnector() {
        this._customConnector = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customConnectorInput() {
        return this._customConnector;
    }
    get datadog() {
        return this.getStringAttribute('datadog');
    }
    set datadog(value) {
        this._datadog = value;
    }
    resetDatadog() {
        this._datadog = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datadogInput() {
        return this._datadog;
    }
    get dynatrace() {
        return this.getStringAttribute('dynatrace');
    }
    set dynatrace(value) {
        this._dynatrace = value;
    }
    resetDynatrace() {
        this._dynatrace = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dynatraceInput() {
        return this._dynatrace;
    }
    get googleAnalytics() {
        return this.getStringAttribute('google_analytics');
    }
    set googleAnalytics(value) {
        this._googleAnalytics = value;
    }
    resetGoogleAnalytics() {
        this._googleAnalytics = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get googleAnalyticsInput() {
        return this._googleAnalytics;
    }
    get inforNexus() {
        return this.getStringAttribute('infor_nexus');
    }
    set inforNexus(value) {
        this._inforNexus = value;
    }
    resetInforNexus() {
        this._inforNexus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inforNexusInput() {
        return this._inforNexus;
    }
    get marketo() {
        return this.getStringAttribute('marketo');
    }
    set marketo(value) {
        this._marketo = value;
    }
    resetMarketo() {
        this._marketo = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get marketoInput() {
        return this._marketo;
    }
    get s3() {
        return this.getStringAttribute('s3');
    }
    set s3(value) {
        this._s3 = value;
    }
    resetS3() {
        this._s3 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3Input() {
        return this._s3;
    }
    get salesforce() {
        return this.getStringAttribute('salesforce');
    }
    set salesforce(value) {
        this._salesforce = value;
    }
    resetSalesforce() {
        this._salesforce = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get salesforceInput() {
        return this._salesforce;
    }
    get sapoData() {
        return this.getStringAttribute('sapo_data');
    }
    set sapoData(value) {
        this._sapoData = value;
    }
    resetSapoData() {
        this._sapoData = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sapoDataInput() {
        return this._sapoData;
    }
    get serviceNow() {
        return this.getStringAttribute('service_now');
    }
    set serviceNow(value) {
        this._serviceNow = value;
    }
    resetServiceNow() {
        this._serviceNow = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNowInput() {
        return this._serviceNow;
    }
    get singular() {
        return this.getStringAttribute('singular');
    }
    set singular(value) {
        this._singular = value;
    }
    resetSingular() {
        this._singular = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get singularInput() {
        return this._singular;
    }
    get slack() {
        return this.getStringAttribute('slack');
    }
    set slack(value) {
        this._slack = value;
    }
    resetSlack() {
        this._slack = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get slackInput() {
        return this._slack;
    }
    get trendmicro() {
        return this.getStringAttribute('trendmicro');
    }
    set trendmicro(value) {
        this._trendmicro = value;
    }
    resetTrendmicro() {
        this._trendmicro = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trendmicroInput() {
        return this._trendmicro;
    }
    get veeva() {
        return this.getStringAttribute('veeva');
    }
    set veeva(value) {
        this._veeva = value;
    }
    resetVeeva() {
        this._veeva = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get veevaInput() {
        return this._veeva;
    }
    get zendesk() {
        return this.getStringAttribute('zendesk');
    }
    set zendesk(value) {
        this._zendesk = value;
    }
    resetZendesk() {
        this._zendesk = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zendeskInput() {
        return this._zendesk;
    }
}
exports.AppflowFlowTaskConnectorOperatorOutputReference = AppflowFlowTaskConnectorOperatorOutputReference;
_28 = JSII_RTTI_SYMBOL_1;
AppflowFlowTaskConnectorOperatorOutputReference[_28] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowTaskConnectorOperatorOutputReference", version: "10.0.12" };
class AppflowFlowTaskConnectorOperatorList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AppflowFlowTaskConnectorOperatorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AppflowFlowTaskConnectorOperatorList = AppflowFlowTaskConnectorOperatorList;
_29 = JSII_RTTI_SYMBOL_1;
AppflowFlowTaskConnectorOperatorList[_29] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowTaskConnectorOperatorList", version: "10.0.12" };
function appflowFlowTaskToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_field: cdktf.stringToTerraform(struct.destinationField),
        source_fields: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.sourceFields),
        task_properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.taskProperties),
        task_type: cdktf.stringToTerraform(struct.taskType),
        connector_operator: cdktf.listMapper(appflowFlowTaskConnectorOperatorToTerraform, true)(struct.connectorOperator),
    };
}
exports.appflowFlowTaskToTerraform = appflowFlowTaskToTerraform;
class AppflowFlowTaskOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // connector_operator - computed: false, optional: true, required: false
        this._connectorOperator = new AppflowFlowTaskConnectorOperatorList(this, "connector_operator", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationField !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationField = this._destinationField;
        }
        if (this._sourceFields !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceFields = this._sourceFields;
        }
        if (this._taskProperties !== undefined) {
            hasAnyValues = true;
            internalValueResult.taskProperties = this._taskProperties;
        }
        if (this._taskType !== undefined) {
            hasAnyValues = true;
            internalValueResult.taskType = this._taskType;
        }
        if (this._connectorOperator?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectorOperator = this._connectorOperator?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._destinationField = undefined;
            this._sourceFields = undefined;
            this._taskProperties = undefined;
            this._taskType = undefined;
            this._connectorOperator.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._destinationField = value.destinationField;
            this._sourceFields = value.sourceFields;
            this._taskProperties = value.taskProperties;
            this._taskType = value.taskType;
            this._connectorOperator.internalValue = value.connectorOperator;
        }
    }
    get destinationField() {
        return this.getStringAttribute('destination_field');
    }
    set destinationField(value) {
        this._destinationField = value;
    }
    resetDestinationField() {
        this._destinationField = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get destinationFieldInput() {
        return this._destinationField;
    }
    get sourceFields() {
        return this.getListAttribute('source_fields');
    }
    set sourceFields(value) {
        this._sourceFields = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceFieldsInput() {
        return this._sourceFields;
    }
    get taskProperties() {
        return this.getStringMapAttribute('task_properties');
    }
    set taskProperties(value) {
        this._taskProperties = value;
    }
    resetTaskProperties() {
        this._taskProperties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get taskPropertiesInput() {
        return this._taskProperties;
    }
    get taskType() {
        return this.getStringAttribute('task_type');
    }
    set taskType(value) {
        this._taskType = value;
    }
    // Temporarily expose input value. Use with caution.
    get taskTypeInput() {
        return this._taskType;
    }
    get connectorOperator() {
        return this._connectorOperator;
    }
    putConnectorOperator(value) {
        this._connectorOperator.internalValue = value;
    }
    resetConnectorOperator() {
        this._connectorOperator.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectorOperatorInput() {
        return this._connectorOperator.internalValue;
    }
}
exports.AppflowFlowTaskOutputReference = AppflowFlowTaskOutputReference;
_30 = JSII_RTTI_SYMBOL_1;
AppflowFlowTaskOutputReference[_30] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowTaskOutputReference", version: "10.0.12" };
class AppflowFlowTaskList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AppflowFlowTaskOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AppflowFlowTaskList = AppflowFlowTaskList;
_31 = JSII_RTTI_SYMBOL_1;
AppflowFlowTaskList[_31] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowTaskList", version: "10.0.12" };
function appflowFlowTriggerConfigTriggerPropertiesScheduledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        data_pull_mode: cdktf.stringToTerraform(struct.dataPullMode),
        first_execution_from: cdktf.stringToTerraform(struct.firstExecutionFrom),
        schedule_end_time: cdktf.stringToTerraform(struct.scheduleEndTime),
        schedule_expression: cdktf.stringToTerraform(struct.scheduleExpression),
        schedule_offset: cdktf.numberToTerraform(struct.scheduleOffset),
        schedule_start_time: cdktf.stringToTerraform(struct.scheduleStartTime),
        timezone: cdktf.stringToTerraform(struct.timezone),
    };
}
exports.appflowFlowTriggerConfigTriggerPropertiesScheduledToTerraform = appflowFlowTriggerConfigTriggerPropertiesScheduledToTerraform;
class AppflowFlowTriggerConfigTriggerPropertiesScheduledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataPullMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataPullMode = this._dataPullMode;
        }
        if (this._firstExecutionFrom !== undefined) {
            hasAnyValues = true;
            internalValueResult.firstExecutionFrom = this._firstExecutionFrom;
        }
        if (this._scheduleEndTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.scheduleEndTime = this._scheduleEndTime;
        }
        if (this._scheduleExpression !== undefined) {
            hasAnyValues = true;
            internalValueResult.scheduleExpression = this._scheduleExpression;
        }
        if (this._scheduleOffset !== undefined) {
            hasAnyValues = true;
            internalValueResult.scheduleOffset = this._scheduleOffset;
        }
        if (this._scheduleStartTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.scheduleStartTime = this._scheduleStartTime;
        }
        if (this._timezone !== undefined) {
            hasAnyValues = true;
            internalValueResult.timezone = this._timezone;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dataPullMode = undefined;
            this._firstExecutionFrom = undefined;
            this._scheduleEndTime = undefined;
            this._scheduleExpression = undefined;
            this._scheduleOffset = undefined;
            this._scheduleStartTime = undefined;
            this._timezone = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dataPullMode = value.dataPullMode;
            this._firstExecutionFrom = value.firstExecutionFrom;
            this._scheduleEndTime = value.scheduleEndTime;
            this._scheduleExpression = value.scheduleExpression;
            this._scheduleOffset = value.scheduleOffset;
            this._scheduleStartTime = value.scheduleStartTime;
            this._timezone = value.timezone;
        }
    }
    get dataPullMode() {
        return this.getStringAttribute('data_pull_mode');
    }
    set dataPullMode(value) {
        this._dataPullMode = value;
    }
    resetDataPullMode() {
        this._dataPullMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataPullModeInput() {
        return this._dataPullMode;
    }
    get firstExecutionFrom() {
        return this.getStringAttribute('first_execution_from');
    }
    set firstExecutionFrom(value) {
        this._firstExecutionFrom = value;
    }
    resetFirstExecutionFrom() {
        this._firstExecutionFrom = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get firstExecutionFromInput() {
        return this._firstExecutionFrom;
    }
    get scheduleEndTime() {
        return this.getStringAttribute('schedule_end_time');
    }
    set scheduleEndTime(value) {
        this._scheduleEndTime = value;
    }
    resetScheduleEndTime() {
        this._scheduleEndTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleEndTimeInput() {
        return this._scheduleEndTime;
    }
    get scheduleExpression() {
        return this.getStringAttribute('schedule_expression');
    }
    set scheduleExpression(value) {
        this._scheduleExpression = value;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleExpressionInput() {
        return this._scheduleExpression;
    }
    get scheduleOffset() {
        return this.getNumberAttribute('schedule_offset');
    }
    set scheduleOffset(value) {
        this._scheduleOffset = value;
    }
    resetScheduleOffset() {
        this._scheduleOffset = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleOffsetInput() {
        return this._scheduleOffset;
    }
    get scheduleStartTime() {
        return this.getStringAttribute('schedule_start_time');
    }
    set scheduleStartTime(value) {
        this._scheduleStartTime = value;
    }
    resetScheduleStartTime() {
        this._scheduleStartTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleStartTimeInput() {
        return this._scheduleStartTime;
    }
    get timezone() {
        return this.getStringAttribute('timezone');
    }
    set timezone(value) {
        this._timezone = value;
    }
    resetTimezone() {
        this._timezone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timezoneInput() {
        return this._timezone;
    }
}
exports.AppflowFlowTriggerConfigTriggerPropertiesScheduledOutputReference = AppflowFlowTriggerConfigTriggerPropertiesScheduledOutputReference;
_32 = JSII_RTTI_SYMBOL_1;
AppflowFlowTriggerConfigTriggerPropertiesScheduledOutputReference[_32] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowTriggerConfigTriggerPropertiesScheduledOutputReference", version: "10.0.12" };
function appflowFlowTriggerConfigTriggerPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        scheduled: appflowFlowTriggerConfigTriggerPropertiesScheduledToTerraform(struct.scheduled),
    };
}
exports.appflowFlowTriggerConfigTriggerPropertiesToTerraform = appflowFlowTriggerConfigTriggerPropertiesToTerraform;
class AppflowFlowTriggerConfigTriggerPropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // scheduled - computed: false, optional: true, required: false
        this._scheduled = new AppflowFlowTriggerConfigTriggerPropertiesScheduledOutputReference(this, "scheduled");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._scheduled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.scheduled = this._scheduled?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._scheduled.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._scheduled.internalValue = value.scheduled;
        }
    }
    get scheduled() {
        return this._scheduled;
    }
    putScheduled(value) {
        this._scheduled.internalValue = value;
    }
    resetScheduled() {
        this._scheduled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduledInput() {
        return this._scheduled.internalValue;
    }
}
exports.AppflowFlowTriggerConfigTriggerPropertiesOutputReference = AppflowFlowTriggerConfigTriggerPropertiesOutputReference;
_33 = JSII_RTTI_SYMBOL_1;
AppflowFlowTriggerConfigTriggerPropertiesOutputReference[_33] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowTriggerConfigTriggerPropertiesOutputReference", version: "10.0.12" };
function appflowFlowTriggerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        trigger_type: cdktf.stringToTerraform(struct.triggerType),
        trigger_properties: appflowFlowTriggerConfigTriggerPropertiesToTerraform(struct.triggerProperties),
    };
}
exports.appflowFlowTriggerConfigToTerraform = appflowFlowTriggerConfigToTerraform;
class AppflowFlowTriggerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // trigger_properties - computed: false, optional: true, required: false
        this._triggerProperties = new AppflowFlowTriggerConfigTriggerPropertiesOutputReference(this, "trigger_properties");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._triggerType !== undefined) {
            hasAnyValues = true;
            internalValueResult.triggerType = this._triggerType;
        }
        if (this._triggerProperties?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.triggerProperties = this._triggerProperties?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._triggerType = undefined;
            this._triggerProperties.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._triggerType = value.triggerType;
            this._triggerProperties.internalValue = value.triggerProperties;
        }
    }
    get triggerType() {
        return this.getStringAttribute('trigger_type');
    }
    set triggerType(value) {
        this._triggerType = value;
    }
    // Temporarily expose input value. Use with caution.
    get triggerTypeInput() {
        return this._triggerType;
    }
    get triggerProperties() {
        return this._triggerProperties;
    }
    putTriggerProperties(value) {
        this._triggerProperties.internalValue = value;
    }
    resetTriggerProperties() {
        this._triggerProperties.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggerPropertiesInput() {
        return this._triggerProperties.internalValue;
    }
}
exports.AppflowFlowTriggerConfigOutputReference = AppflowFlowTriggerConfigOutputReference;
_34 = JSII_RTTI_SYMBOL_1;
AppflowFlowTriggerConfigOutputReference[_34] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlowTriggerConfigOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/appflow_flow aws_appflow_flow}
*/
class AppflowFlow extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/appflow_flow aws_appflow_flow} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AppflowFlowConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_appflow_flow',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // destination_flow_config - computed: false, optional: false, required: true
        this._destinationFlowConfig = new AppflowFlowDestinationFlowConfigList(this, "destination_flow_config", true);
        // source_flow_config - computed: false, optional: false, required: true
        this._sourceFlowConfig = new AppflowFlowSourceFlowConfigOutputReference(this, "source_flow_config");
        // task - computed: false, optional: false, required: true
        this._task = new AppflowFlowTaskList(this, "task", true);
        // trigger_config - computed: false, optional: false, required: true
        this._triggerConfig = new AppflowFlowTriggerConfigOutputReference(this, "trigger_config");
        this._description = config.description;
        this._id = config.id;
        this._kmsArn = config.kmsArn;
        this._name = config.name;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._destinationFlowConfig.internalValue = config.destinationFlowConfig;
        this._sourceFlowConfig.internalValue = config.sourceFlowConfig;
        this._task.internalValue = config.task;
        this._triggerConfig.internalValue = config.triggerConfig;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get kmsArn() {
        return this.getStringAttribute('kms_arn');
    }
    set kmsArn(value) {
        this._kmsArn = value;
    }
    resetKmsArn() {
        this._kmsArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsArnInput() {
        return this._kmsArn;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get destinationFlowConfig() {
        return this._destinationFlowConfig;
    }
    putDestinationFlowConfig(value) {
        this._destinationFlowConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationFlowConfigInput() {
        return this._destinationFlowConfig.internalValue;
    }
    get sourceFlowConfig() {
        return this._sourceFlowConfig;
    }
    putSourceFlowConfig(value) {
        this._sourceFlowConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceFlowConfigInput() {
        return this._sourceFlowConfig.internalValue;
    }
    get task() {
        return this._task;
    }
    putTask(value) {
        this._task.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get taskInput() {
        return this._task.internalValue;
    }
    get triggerConfig() {
        return this._triggerConfig;
    }
    putTriggerConfig(value) {
        this._triggerConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get triggerConfigInput() {
        return this._triggerConfig.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            kms_arn: cdktf.stringToTerraform(this._kmsArn),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            destination_flow_config: cdktf.listMapper(appflowFlowDestinationFlowConfigToTerraform, true)(this._destinationFlowConfig.internalValue),
            source_flow_config: appflowFlowSourceFlowConfigToTerraform(this._sourceFlowConfig.internalValue),
            task: cdktf.listMapper(appflowFlowTaskToTerraform, true)(this._task.internalValue),
            trigger_config: appflowFlowTriggerConfigToTerraform(this._triggerConfig.internalValue),
        };
    }
}
exports.AppflowFlow = AppflowFlow;
_35 = JSII_RTTI_SYMBOL_1;
AppflowFlow[_35] = { fqn: "@cdktf/provider-aws.appflowFlow.AppflowFlow", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
AppflowFlow.tfResourceType = "aws_appflow_flow";
//# sourceMappingURL=data:application/json;base64,