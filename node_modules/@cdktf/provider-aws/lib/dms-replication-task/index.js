"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DmsReplicationTask = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/dms_replication_task aws_dms_replication_task}
*/
class DmsReplicationTask extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/dms_replication_task aws_dms_replication_task} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DmsReplicationTaskConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_dms_replication_task',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._cdcStartPosition = config.cdcStartPosition;
        this._cdcStartTime = config.cdcStartTime;
        this._id = config.id;
        this._migrationType = config.migrationType;
        this._replicationInstanceArn = config.replicationInstanceArn;
        this._replicationTaskId = config.replicationTaskId;
        this._replicationTaskSettings = config.replicationTaskSettings;
        this._sourceEndpointArn = config.sourceEndpointArn;
        this._startReplicationTask = config.startReplicationTask;
        this._tableMappings = config.tableMappings;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._targetEndpointArn = config.targetEndpointArn;
    }
    get cdcStartPosition() {
        return this.getStringAttribute('cdc_start_position');
    }
    set cdcStartPosition(value) {
        this._cdcStartPosition = value;
    }
    resetCdcStartPosition() {
        this._cdcStartPosition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cdcStartPositionInput() {
        return this._cdcStartPosition;
    }
    get cdcStartTime() {
        return this.getStringAttribute('cdc_start_time');
    }
    set cdcStartTime(value) {
        this._cdcStartTime = value;
    }
    resetCdcStartTime() {
        this._cdcStartTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cdcStartTimeInput() {
        return this._cdcStartTime;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get migrationType() {
        return this.getStringAttribute('migration_type');
    }
    set migrationType(value) {
        this._migrationType = value;
    }
    // Temporarily expose input value. Use with caution.
    get migrationTypeInput() {
        return this._migrationType;
    }
    get replicationInstanceArn() {
        return this.getStringAttribute('replication_instance_arn');
    }
    set replicationInstanceArn(value) {
        this._replicationInstanceArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get replicationInstanceArnInput() {
        return this._replicationInstanceArn;
    }
    // replication_task_arn - computed: true, optional: false, required: false
    get replicationTaskArn() {
        return this.getStringAttribute('replication_task_arn');
    }
    get replicationTaskId() {
        return this.getStringAttribute('replication_task_id');
    }
    set replicationTaskId(value) {
        this._replicationTaskId = value;
    }
    // Temporarily expose input value. Use with caution.
    get replicationTaskIdInput() {
        return this._replicationTaskId;
    }
    get replicationTaskSettings() {
        return this.getStringAttribute('replication_task_settings');
    }
    set replicationTaskSettings(value) {
        this._replicationTaskSettings = value;
    }
    resetReplicationTaskSettings() {
        this._replicationTaskSettings = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replicationTaskSettingsInput() {
        return this._replicationTaskSettings;
    }
    get sourceEndpointArn() {
        return this.getStringAttribute('source_endpoint_arn');
    }
    set sourceEndpointArn(value) {
        this._sourceEndpointArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceEndpointArnInput() {
        return this._sourceEndpointArn;
    }
    get startReplicationTask() {
        return this.getBooleanAttribute('start_replication_task');
    }
    set startReplicationTask(value) {
        this._startReplicationTask = value;
    }
    resetStartReplicationTask() {
        this._startReplicationTask = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get startReplicationTaskInput() {
        return this._startReplicationTask;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    get tableMappings() {
        return this.getStringAttribute('table_mappings');
    }
    set tableMappings(value) {
        this._tableMappings = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableMappingsInput() {
        return this._tableMappings;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get targetEndpointArn() {
        return this.getStringAttribute('target_endpoint_arn');
    }
    set targetEndpointArn(value) {
        this._targetEndpointArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetEndpointArnInput() {
        return this._targetEndpointArn;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cdc_start_position: cdktf.stringToTerraform(this._cdcStartPosition),
            cdc_start_time: cdktf.stringToTerraform(this._cdcStartTime),
            id: cdktf.stringToTerraform(this._id),
            migration_type: cdktf.stringToTerraform(this._migrationType),
            replication_instance_arn: cdktf.stringToTerraform(this._replicationInstanceArn),
            replication_task_id: cdktf.stringToTerraform(this._replicationTaskId),
            replication_task_settings: cdktf.stringToTerraform(this._replicationTaskSettings),
            source_endpoint_arn: cdktf.stringToTerraform(this._sourceEndpointArn),
            start_replication_task: cdktf.booleanToTerraform(this._startReplicationTask),
            table_mappings: cdktf.stringToTerraform(this._tableMappings),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            target_endpoint_arn: cdktf.stringToTerraform(this._targetEndpointArn),
        };
    }
}
exports.DmsReplicationTask = DmsReplicationTask;
_a = JSII_RTTI_SYMBOL_1;
DmsReplicationTask[_a] = { fqn: "@cdktf/provider-aws.dmsReplicationTask.DmsReplicationTask", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
DmsReplicationTask.tfResourceType = "aws_dms_replication_task";
//# sourceMappingURL=data:application/json;base64,