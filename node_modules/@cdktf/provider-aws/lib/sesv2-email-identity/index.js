"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sesv2EmailIdentity = exports.Sesv2EmailIdentityDkimSigningAttributesOutputReference = exports.sesv2EmailIdentityDkimSigningAttributesToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function sesv2EmailIdentityDkimSigningAttributesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        domain_signing_private_key: cdktf.stringToTerraform(struct.domainSigningPrivateKey),
        domain_signing_selector: cdktf.stringToTerraform(struct.domainSigningSelector),
        next_signing_key_length: cdktf.stringToTerraform(struct.nextSigningKeyLength),
    };
}
exports.sesv2EmailIdentityDkimSigningAttributesToTerraform = sesv2EmailIdentityDkimSigningAttributesToTerraform;
class Sesv2EmailIdentityDkimSigningAttributesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._domainSigningPrivateKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.domainSigningPrivateKey = this._domainSigningPrivateKey;
        }
        if (this._domainSigningSelector !== undefined) {
            hasAnyValues = true;
            internalValueResult.domainSigningSelector = this._domainSigningSelector;
        }
        if (this._nextSigningKeyLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.nextSigningKeyLength = this._nextSigningKeyLength;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._domainSigningPrivateKey = undefined;
            this._domainSigningSelector = undefined;
            this._nextSigningKeyLength = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._domainSigningPrivateKey = value.domainSigningPrivateKey;
            this._domainSigningSelector = value.domainSigningSelector;
            this._nextSigningKeyLength = value.nextSigningKeyLength;
        }
    }
    // current_signing_key_length - computed: true, optional: false, required: false
    get currentSigningKeyLength() {
        return this.getStringAttribute('current_signing_key_length');
    }
    get domainSigningPrivateKey() {
        return this.getStringAttribute('domain_signing_private_key');
    }
    set domainSigningPrivateKey(value) {
        this._domainSigningPrivateKey = value;
    }
    resetDomainSigningPrivateKey() {
        this._domainSigningPrivateKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainSigningPrivateKeyInput() {
        return this._domainSigningPrivateKey;
    }
    get domainSigningSelector() {
        return this.getStringAttribute('domain_signing_selector');
    }
    set domainSigningSelector(value) {
        this._domainSigningSelector = value;
    }
    resetDomainSigningSelector() {
        this._domainSigningSelector = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainSigningSelectorInput() {
        return this._domainSigningSelector;
    }
    // last_key_generation_timestamp - computed: true, optional: false, required: false
    get lastKeyGenerationTimestamp() {
        return this.getStringAttribute('last_key_generation_timestamp');
    }
    get nextSigningKeyLength() {
        return this.getStringAttribute('next_signing_key_length');
    }
    set nextSigningKeyLength(value) {
        this._nextSigningKeyLength = value;
    }
    resetNextSigningKeyLength() {
        this._nextSigningKeyLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nextSigningKeyLengthInput() {
        return this._nextSigningKeyLength;
    }
    // signing_attributes_origin - computed: true, optional: false, required: false
    get signingAttributesOrigin() {
        return this.getStringAttribute('signing_attributes_origin');
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    // tokens - computed: true, optional: false, required: false
    get tokens() {
        return this.getListAttribute('tokens');
    }
}
exports.Sesv2EmailIdentityDkimSigningAttributesOutputReference = Sesv2EmailIdentityDkimSigningAttributesOutputReference;
_a = JSII_RTTI_SYMBOL_1;
Sesv2EmailIdentityDkimSigningAttributesOutputReference[_a] = { fqn: "@cdktf/provider-aws.sesv2EmailIdentity.Sesv2EmailIdentityDkimSigningAttributesOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/sesv2_email_identity aws_sesv2_email_identity}
*/
class Sesv2EmailIdentity extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/sesv2_email_identity aws_sesv2_email_identity} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Sesv2EmailIdentityConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_sesv2_email_identity',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // dkim_signing_attributes - computed: false, optional: true, required: false
        this._dkimSigningAttributes = new Sesv2EmailIdentityDkimSigningAttributesOutputReference(this, "dkim_signing_attributes");
        this._configurationSetName = config.configurationSetName;
        this._emailIdentity = config.emailIdentity;
        this._id = config.id;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._dkimSigningAttributes.internalValue = config.dkimSigningAttributes;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get configurationSetName() {
        return this.getStringAttribute('configuration_set_name');
    }
    set configurationSetName(value) {
        this._configurationSetName = value;
    }
    resetConfigurationSetName() {
        this._configurationSetName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configurationSetNameInput() {
        return this._configurationSetName;
    }
    get emailIdentity() {
        return this.getStringAttribute('email_identity');
    }
    set emailIdentity(value) {
        this._emailIdentity = value;
    }
    // Temporarily expose input value. Use with caution.
    get emailIdentityInput() {
        return this._emailIdentity;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // identity_type - computed: true, optional: false, required: false
    get identityType() {
        return this.getStringAttribute('identity_type');
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    // verified_for_sending_status - computed: true, optional: false, required: false
    get verifiedForSendingStatus() {
        return this.getBooleanAttribute('verified_for_sending_status');
    }
    get dkimSigningAttributes() {
        return this._dkimSigningAttributes;
    }
    putDkimSigningAttributes(value) {
        this._dkimSigningAttributes.internalValue = value;
    }
    resetDkimSigningAttributes() {
        this._dkimSigningAttributes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dkimSigningAttributesInput() {
        return this._dkimSigningAttributes.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            configuration_set_name: cdktf.stringToTerraform(this._configurationSetName),
            email_identity: cdktf.stringToTerraform(this._emailIdentity),
            id: cdktf.stringToTerraform(this._id),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            dkim_signing_attributes: sesv2EmailIdentityDkimSigningAttributesToTerraform(this._dkimSigningAttributes.internalValue),
        };
    }
}
exports.Sesv2EmailIdentity = Sesv2EmailIdentity;
_b = JSII_RTTI_SYMBOL_1;
Sesv2EmailIdentity[_b] = { fqn: "@cdktf/provider-aws.sesv2EmailIdentity.Sesv2EmailIdentity", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
Sesv2EmailIdentity.tfResourceType = "aws_sesv2_email_identity";
//# sourceMappingURL=data:application/json;base64,