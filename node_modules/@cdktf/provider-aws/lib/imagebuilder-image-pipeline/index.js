"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImagebuilderImagePipeline = exports.ImagebuilderImagePipelineScheduleOutputReference = exports.imagebuilderImagePipelineScheduleToTerraform = exports.ImagebuilderImagePipelineImageTestsConfigurationOutputReference = exports.imagebuilderImagePipelineImageTestsConfigurationToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function imagebuilderImagePipelineImageTestsConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_tests_enabled: cdktf.booleanToTerraform(struct.imageTestsEnabled),
        timeout_minutes: cdktf.numberToTerraform(struct.timeoutMinutes),
    };
}
exports.imagebuilderImagePipelineImageTestsConfigurationToTerraform = imagebuilderImagePipelineImageTestsConfigurationToTerraform;
class ImagebuilderImagePipelineImageTestsConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageTestsEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageTestsEnabled = this._imageTestsEnabled;
        }
        if (this._timeoutMinutes !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeoutMinutes = this._timeoutMinutes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._imageTestsEnabled = undefined;
            this._timeoutMinutes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._imageTestsEnabled = value.imageTestsEnabled;
            this._timeoutMinutes = value.timeoutMinutes;
        }
    }
    get imageTestsEnabled() {
        return this.getBooleanAttribute('image_tests_enabled');
    }
    set imageTestsEnabled(value) {
        this._imageTestsEnabled = value;
    }
    resetImageTestsEnabled() {
        this._imageTestsEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageTestsEnabledInput() {
        return this._imageTestsEnabled;
    }
    get timeoutMinutes() {
        return this.getNumberAttribute('timeout_minutes');
    }
    set timeoutMinutes(value) {
        this._timeoutMinutes = value;
    }
    resetTimeoutMinutes() {
        this._timeoutMinutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutMinutesInput() {
        return this._timeoutMinutes;
    }
}
exports.ImagebuilderImagePipelineImageTestsConfigurationOutputReference = ImagebuilderImagePipelineImageTestsConfigurationOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ImagebuilderImagePipelineImageTestsConfigurationOutputReference[_a] = { fqn: "@cdktf/provider-aws.imagebuilderImagePipeline.ImagebuilderImagePipelineImageTestsConfigurationOutputReference", version: "10.0.12" };
function imagebuilderImagePipelineScheduleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        pipeline_execution_start_condition: cdktf.stringToTerraform(struct.pipelineExecutionStartCondition),
        schedule_expression: cdktf.stringToTerraform(struct.scheduleExpression),
        timezone: cdktf.stringToTerraform(struct.timezone),
    };
}
exports.imagebuilderImagePipelineScheduleToTerraform = imagebuilderImagePipelineScheduleToTerraform;
class ImagebuilderImagePipelineScheduleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._pipelineExecutionStartCondition !== undefined) {
            hasAnyValues = true;
            internalValueResult.pipelineExecutionStartCondition = this._pipelineExecutionStartCondition;
        }
        if (this._scheduleExpression !== undefined) {
            hasAnyValues = true;
            internalValueResult.scheduleExpression = this._scheduleExpression;
        }
        if (this._timezone !== undefined) {
            hasAnyValues = true;
            internalValueResult.timezone = this._timezone;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._pipelineExecutionStartCondition = undefined;
            this._scheduleExpression = undefined;
            this._timezone = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._pipelineExecutionStartCondition = value.pipelineExecutionStartCondition;
            this._scheduleExpression = value.scheduleExpression;
            this._timezone = value.timezone;
        }
    }
    get pipelineExecutionStartCondition() {
        return this.getStringAttribute('pipeline_execution_start_condition');
    }
    set pipelineExecutionStartCondition(value) {
        this._pipelineExecutionStartCondition = value;
    }
    resetPipelineExecutionStartCondition() {
        this._pipelineExecutionStartCondition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pipelineExecutionStartConditionInput() {
        return this._pipelineExecutionStartCondition;
    }
    get scheduleExpression() {
        return this.getStringAttribute('schedule_expression');
    }
    set scheduleExpression(value) {
        this._scheduleExpression = value;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleExpressionInput() {
        return this._scheduleExpression;
    }
    get timezone() {
        return this.getStringAttribute('timezone');
    }
    set timezone(value) {
        this._timezone = value;
    }
    resetTimezone() {
        this._timezone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timezoneInput() {
        return this._timezone;
    }
}
exports.ImagebuilderImagePipelineScheduleOutputReference = ImagebuilderImagePipelineScheduleOutputReference;
_b = JSII_RTTI_SYMBOL_1;
ImagebuilderImagePipelineScheduleOutputReference[_b] = { fqn: "@cdktf/provider-aws.imagebuilderImagePipeline.ImagebuilderImagePipelineScheduleOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/imagebuilder_image_pipeline aws_imagebuilder_image_pipeline}
*/
class ImagebuilderImagePipeline extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/imagebuilder_image_pipeline aws_imagebuilder_image_pipeline} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ImagebuilderImagePipelineConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_imagebuilder_image_pipeline',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // image_tests_configuration - computed: false, optional: true, required: false
        this._imageTestsConfiguration = new ImagebuilderImagePipelineImageTestsConfigurationOutputReference(this, "image_tests_configuration");
        // schedule - computed: false, optional: true, required: false
        this._schedule = new ImagebuilderImagePipelineScheduleOutputReference(this, "schedule");
        this._containerRecipeArn = config.containerRecipeArn;
        this._description = config.description;
        this._distributionConfigurationArn = config.distributionConfigurationArn;
        this._enhancedImageMetadataEnabled = config.enhancedImageMetadataEnabled;
        this._id = config.id;
        this._imageRecipeArn = config.imageRecipeArn;
        this._infrastructureConfigurationArn = config.infrastructureConfigurationArn;
        this._name = config.name;
        this._status = config.status;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._imageTestsConfiguration.internalValue = config.imageTestsConfiguration;
        this._schedule.internalValue = config.schedule;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get containerRecipeArn() {
        return this.getStringAttribute('container_recipe_arn');
    }
    set containerRecipeArn(value) {
        this._containerRecipeArn = value;
    }
    resetContainerRecipeArn() {
        this._containerRecipeArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerRecipeArnInput() {
        return this._containerRecipeArn;
    }
    // date_created - computed: true, optional: false, required: false
    get dateCreated() {
        return this.getStringAttribute('date_created');
    }
    // date_last_run - computed: true, optional: false, required: false
    get dateLastRun() {
        return this.getStringAttribute('date_last_run');
    }
    // date_next_run - computed: true, optional: false, required: false
    get dateNextRun() {
        return this.getStringAttribute('date_next_run');
    }
    // date_updated - computed: true, optional: false, required: false
    get dateUpdated() {
        return this.getStringAttribute('date_updated');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get distributionConfigurationArn() {
        return this.getStringAttribute('distribution_configuration_arn');
    }
    set distributionConfigurationArn(value) {
        this._distributionConfigurationArn = value;
    }
    resetDistributionConfigurationArn() {
        this._distributionConfigurationArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get distributionConfigurationArnInput() {
        return this._distributionConfigurationArn;
    }
    get enhancedImageMetadataEnabled() {
        return this.getBooleanAttribute('enhanced_image_metadata_enabled');
    }
    set enhancedImageMetadataEnabled(value) {
        this._enhancedImageMetadataEnabled = value;
    }
    resetEnhancedImageMetadataEnabled() {
        this._enhancedImageMetadataEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enhancedImageMetadataEnabledInput() {
        return this._enhancedImageMetadataEnabled;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get imageRecipeArn() {
        return this.getStringAttribute('image_recipe_arn');
    }
    set imageRecipeArn(value) {
        this._imageRecipeArn = value;
    }
    resetImageRecipeArn() {
        this._imageRecipeArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageRecipeArnInput() {
        return this._imageRecipeArn;
    }
    get infrastructureConfigurationArn() {
        return this.getStringAttribute('infrastructure_configuration_arn');
    }
    set infrastructureConfigurationArn(value) {
        this._infrastructureConfigurationArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get infrastructureConfigurationArnInput() {
        return this._infrastructureConfigurationArn;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // platform - computed: true, optional: false, required: false
    get platform() {
        return this.getStringAttribute('platform');
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get imageTestsConfiguration() {
        return this._imageTestsConfiguration;
    }
    putImageTestsConfiguration(value) {
        this._imageTestsConfiguration.internalValue = value;
    }
    resetImageTestsConfiguration() {
        this._imageTestsConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageTestsConfigurationInput() {
        return this._imageTestsConfiguration.internalValue;
    }
    get schedule() {
        return this._schedule;
    }
    putSchedule(value) {
        this._schedule.internalValue = value;
    }
    resetSchedule() {
        this._schedule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleInput() {
        return this._schedule.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            container_recipe_arn: cdktf.stringToTerraform(this._containerRecipeArn),
            description: cdktf.stringToTerraform(this._description),
            distribution_configuration_arn: cdktf.stringToTerraform(this._distributionConfigurationArn),
            enhanced_image_metadata_enabled: cdktf.booleanToTerraform(this._enhancedImageMetadataEnabled),
            id: cdktf.stringToTerraform(this._id),
            image_recipe_arn: cdktf.stringToTerraform(this._imageRecipeArn),
            infrastructure_configuration_arn: cdktf.stringToTerraform(this._infrastructureConfigurationArn),
            name: cdktf.stringToTerraform(this._name),
            status: cdktf.stringToTerraform(this._status),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            image_tests_configuration: imagebuilderImagePipelineImageTestsConfigurationToTerraform(this._imageTestsConfiguration.internalValue),
            schedule: imagebuilderImagePipelineScheduleToTerraform(this._schedule.internalValue),
        };
    }
}
exports.ImagebuilderImagePipeline = ImagebuilderImagePipeline;
_c = JSII_RTTI_SYMBOL_1;
ImagebuilderImagePipeline[_c] = { fqn: "@cdktf/provider-aws.imagebuilderImagePipeline.ImagebuilderImagePipeline", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
ImagebuilderImagePipeline.tfResourceType = "aws_imagebuilder_image_pipeline";
//# sourceMappingURL=data:application/json;base64,