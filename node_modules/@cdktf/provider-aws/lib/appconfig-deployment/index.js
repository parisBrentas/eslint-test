"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppconfigDeployment = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/appconfig_deployment aws_appconfig_deployment}
*/
class AppconfigDeployment extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/appconfig_deployment aws_appconfig_deployment} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AppconfigDeploymentConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_appconfig_deployment',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._applicationId = config.applicationId;
        this._configurationProfileId = config.configurationProfileId;
        this._configurationVersion = config.configurationVersion;
        this._deploymentStrategyId = config.deploymentStrategyId;
        this._description = config.description;
        this._environmentId = config.environmentId;
        this._id = config.id;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
    }
    get applicationId() {
        return this.getStringAttribute('application_id');
    }
    set applicationId(value) {
        this._applicationId = value;
    }
    // Temporarily expose input value. Use with caution.
    get applicationIdInput() {
        return this._applicationId;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get configurationProfileId() {
        return this.getStringAttribute('configuration_profile_id');
    }
    set configurationProfileId(value) {
        this._configurationProfileId = value;
    }
    // Temporarily expose input value. Use with caution.
    get configurationProfileIdInput() {
        return this._configurationProfileId;
    }
    get configurationVersion() {
        return this.getStringAttribute('configuration_version');
    }
    set configurationVersion(value) {
        this._configurationVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get configurationVersionInput() {
        return this._configurationVersion;
    }
    // deployment_number - computed: true, optional: false, required: false
    get deploymentNumber() {
        return this.getNumberAttribute('deployment_number');
    }
    get deploymentStrategyId() {
        return this.getStringAttribute('deployment_strategy_id');
    }
    set deploymentStrategyId(value) {
        this._deploymentStrategyId = value;
    }
    // Temporarily expose input value. Use with caution.
    get deploymentStrategyIdInput() {
        return this._deploymentStrategyId;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get environmentId() {
        return this.getStringAttribute('environment_id');
    }
    set environmentId(value) {
        this._environmentId = value;
    }
    // Temporarily expose input value. Use with caution.
    get environmentIdInput() {
        return this._environmentId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            application_id: cdktf.stringToTerraform(this._applicationId),
            configuration_profile_id: cdktf.stringToTerraform(this._configurationProfileId),
            configuration_version: cdktf.stringToTerraform(this._configurationVersion),
            deployment_strategy_id: cdktf.stringToTerraform(this._deploymentStrategyId),
            description: cdktf.stringToTerraform(this._description),
            environment_id: cdktf.stringToTerraform(this._environmentId),
            id: cdktf.stringToTerraform(this._id),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
        };
    }
}
exports.AppconfigDeployment = AppconfigDeployment;
_a = JSII_RTTI_SYMBOL_1;
AppconfigDeployment[_a] = { fqn: "@cdktf/provider-aws.appconfigDeployment.AppconfigDeployment", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
AppconfigDeployment.tfResourceType = "aws_appconfig_deployment";
//# sourceMappingURL=data:application/json;base64,