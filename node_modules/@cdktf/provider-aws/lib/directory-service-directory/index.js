"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DirectoryServiceDirectory = exports.DirectoryServiceDirectoryVpcSettingsOutputReference = exports.directoryServiceDirectoryVpcSettingsToTerraform = exports.DirectoryServiceDirectoryTimeoutsOutputReference = exports.directoryServiceDirectoryTimeoutsToTerraform = exports.DirectoryServiceDirectoryConnectSettingsOutputReference = exports.directoryServiceDirectoryConnectSettingsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function directoryServiceDirectoryConnectSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        customer_dns_ips: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.customerDnsIps),
        customer_username: cdktf.stringToTerraform(struct.customerUsername),
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.subnetIds),
        vpc_id: cdktf.stringToTerraform(struct.vpcId),
    };
}
exports.directoryServiceDirectoryConnectSettingsToTerraform = directoryServiceDirectoryConnectSettingsToTerraform;
class DirectoryServiceDirectoryConnectSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customerDnsIps !== undefined) {
            hasAnyValues = true;
            internalValueResult.customerDnsIps = this._customerDnsIps;
        }
        if (this._customerUsername !== undefined) {
            hasAnyValues = true;
            internalValueResult.customerUsername = this._customerUsername;
        }
        if (this._subnetIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetIds = this._subnetIds;
        }
        if (this._vpcId !== undefined) {
            hasAnyValues = true;
            internalValueResult.vpcId = this._vpcId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._customerDnsIps = undefined;
            this._customerUsername = undefined;
            this._subnetIds = undefined;
            this._vpcId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._customerDnsIps = value.customerDnsIps;
            this._customerUsername = value.customerUsername;
            this._subnetIds = value.subnetIds;
            this._vpcId = value.vpcId;
        }
    }
    // availability_zones - computed: true, optional: false, required: false
    get availabilityZones() {
        return cdktf.Fn.tolist(this.getListAttribute('availability_zones'));
    }
    // connect_ips - computed: true, optional: false, required: false
    get connectIps() {
        return cdktf.Fn.tolist(this.getListAttribute('connect_ips'));
    }
    get customerDnsIps() {
        return cdktf.Fn.tolist(this.getListAttribute('customer_dns_ips'));
    }
    set customerDnsIps(value) {
        this._customerDnsIps = value;
    }
    // Temporarily expose input value. Use with caution.
    get customerDnsIpsInput() {
        return this._customerDnsIps;
    }
    get customerUsername() {
        return this.getStringAttribute('customer_username');
    }
    set customerUsername(value) {
        this._customerUsername = value;
    }
    // Temporarily expose input value. Use with caution.
    get customerUsernameInput() {
        return this._customerUsername;
    }
    get subnetIds() {
        return cdktf.Fn.tolist(this.getListAttribute('subnet_ids'));
    }
    set subnetIds(value) {
        this._subnetIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdsInput() {
        return this._subnetIds;
    }
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
    set vpcId(value) {
        this._vpcId = value;
    }
    // Temporarily expose input value. Use with caution.
    get vpcIdInput() {
        return this._vpcId;
    }
}
exports.DirectoryServiceDirectoryConnectSettingsOutputReference = DirectoryServiceDirectoryConnectSettingsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DirectoryServiceDirectoryConnectSettingsOutputReference[_a] = { fqn: "@cdktf/provider-aws.directoryServiceDirectory.DirectoryServiceDirectoryConnectSettingsOutputReference", version: "10.0.12" };
function directoryServiceDirectoryTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.directoryServiceDirectoryTimeoutsToTerraform = directoryServiceDirectoryTimeoutsToTerraform;
class DirectoryServiceDirectoryTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.DirectoryServiceDirectoryTimeoutsOutputReference = DirectoryServiceDirectoryTimeoutsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
DirectoryServiceDirectoryTimeoutsOutputReference[_b] = { fqn: "@cdktf/provider-aws.directoryServiceDirectory.DirectoryServiceDirectoryTimeoutsOutputReference", version: "10.0.12" };
function directoryServiceDirectoryVpcSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.subnetIds),
        vpc_id: cdktf.stringToTerraform(struct.vpcId),
    };
}
exports.directoryServiceDirectoryVpcSettingsToTerraform = directoryServiceDirectoryVpcSettingsToTerraform;
class DirectoryServiceDirectoryVpcSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._subnetIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetIds = this._subnetIds;
        }
        if (this._vpcId !== undefined) {
            hasAnyValues = true;
            internalValueResult.vpcId = this._vpcId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._subnetIds = undefined;
            this._vpcId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._subnetIds = value.subnetIds;
            this._vpcId = value.vpcId;
        }
    }
    // availability_zones - computed: true, optional: false, required: false
    get availabilityZones() {
        return cdktf.Fn.tolist(this.getListAttribute('availability_zones'));
    }
    get subnetIds() {
        return cdktf.Fn.tolist(this.getListAttribute('subnet_ids'));
    }
    set subnetIds(value) {
        this._subnetIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdsInput() {
        return this._subnetIds;
    }
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
    set vpcId(value) {
        this._vpcId = value;
    }
    // Temporarily expose input value. Use with caution.
    get vpcIdInput() {
        return this._vpcId;
    }
}
exports.DirectoryServiceDirectoryVpcSettingsOutputReference = DirectoryServiceDirectoryVpcSettingsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DirectoryServiceDirectoryVpcSettingsOutputReference[_c] = { fqn: "@cdktf/provider-aws.directoryServiceDirectory.DirectoryServiceDirectoryVpcSettingsOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/directory_service_directory aws_directory_service_directory}
*/
class DirectoryServiceDirectory extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/directory_service_directory aws_directory_service_directory} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DirectoryServiceDirectoryConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_directory_service_directory',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // connect_settings - computed: false, optional: true, required: false
        this._connectSettings = new DirectoryServiceDirectoryConnectSettingsOutputReference(this, "connect_settings");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DirectoryServiceDirectoryTimeoutsOutputReference(this, "timeouts");
        // vpc_settings - computed: false, optional: true, required: false
        this._vpcSettings = new DirectoryServiceDirectoryVpcSettingsOutputReference(this, "vpc_settings");
        this._alias = config.alias;
        this._description = config.description;
        this._desiredNumberOfDomainControllers = config.desiredNumberOfDomainControllers;
        this._edition = config.edition;
        this._enableSso = config.enableSso;
        this._id = config.id;
        this._name = config.name;
        this._password = config.password;
        this._shortName = config.shortName;
        this._size = config.size;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._type = config.type;
        this._connectSettings.internalValue = config.connectSettings;
        this._timeouts.internalValue = config.timeouts;
        this._vpcSettings.internalValue = config.vpcSettings;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // access_url - computed: true, optional: false, required: false
    get accessUrl() {
        return this.getStringAttribute('access_url');
    }
    get alias() {
        return this.getStringAttribute('alias');
    }
    set alias(value) {
        this._alias = value;
    }
    resetAlias() {
        this._alias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aliasInput() {
        return this._alias;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get desiredNumberOfDomainControllers() {
        return this.getNumberAttribute('desired_number_of_domain_controllers');
    }
    set desiredNumberOfDomainControllers(value) {
        this._desiredNumberOfDomainControllers = value;
    }
    resetDesiredNumberOfDomainControllers() {
        this._desiredNumberOfDomainControllers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get desiredNumberOfDomainControllersInput() {
        return this._desiredNumberOfDomainControllers;
    }
    // dns_ip_addresses - computed: true, optional: false, required: false
    get dnsIpAddresses() {
        return cdktf.Fn.tolist(this.getListAttribute('dns_ip_addresses'));
    }
    get edition() {
        return this.getStringAttribute('edition');
    }
    set edition(value) {
        this._edition = value;
    }
    resetEdition() {
        this._edition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get editionInput() {
        return this._edition;
    }
    get enableSso() {
        return this.getBooleanAttribute('enable_sso');
    }
    set enableSso(value) {
        this._enableSso = value;
    }
    resetEnableSso() {
        this._enableSso = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableSsoInput() {
        return this._enableSso;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    // security_group_id - computed: true, optional: false, required: false
    get securityGroupId() {
        return this.getStringAttribute('security_group_id');
    }
    get shortName() {
        return this.getStringAttribute('short_name');
    }
    set shortName(value) {
        this._shortName = value;
    }
    resetShortName() {
        this._shortName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shortNameInput() {
        return this._shortName;
    }
    get size() {
        return this.getStringAttribute('size');
    }
    set size(value) {
        this._size = value;
    }
    resetSize() {
        this._size = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sizeInput() {
        return this._size;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get connectSettings() {
        return this._connectSettings;
    }
    putConnectSettings(value) {
        this._connectSettings.internalValue = value;
    }
    resetConnectSettings() {
        this._connectSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectSettingsInput() {
        return this._connectSettings.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get vpcSettings() {
        return this._vpcSettings;
    }
    putVpcSettings(value) {
        this._vpcSettings.internalValue = value;
    }
    resetVpcSettings() {
        this._vpcSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcSettingsInput() {
        return this._vpcSettings.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            alias: cdktf.stringToTerraform(this._alias),
            description: cdktf.stringToTerraform(this._description),
            desired_number_of_domain_controllers: cdktf.numberToTerraform(this._desiredNumberOfDomainControllers),
            edition: cdktf.stringToTerraform(this._edition),
            enable_sso: cdktf.booleanToTerraform(this._enableSso),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            password: cdktf.stringToTerraform(this._password),
            short_name: cdktf.stringToTerraform(this._shortName),
            size: cdktf.stringToTerraform(this._size),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            type: cdktf.stringToTerraform(this._type),
            connect_settings: directoryServiceDirectoryConnectSettingsToTerraform(this._connectSettings.internalValue),
            timeouts: directoryServiceDirectoryTimeoutsToTerraform(this._timeouts.internalValue),
            vpc_settings: directoryServiceDirectoryVpcSettingsToTerraform(this._vpcSettings.internalValue),
        };
    }
}
exports.DirectoryServiceDirectory = DirectoryServiceDirectory;
_d = JSII_RTTI_SYMBOL_1;
DirectoryServiceDirectory[_d] = { fqn: "@cdktf/provider-aws.directoryServiceDirectory.DirectoryServiceDirectory", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
DirectoryServiceDirectory.tfResourceType = "aws_directory_service_directory";
//# sourceMappingURL=data:application/json;base64,