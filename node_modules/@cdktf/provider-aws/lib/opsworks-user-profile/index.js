"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpsworksUserProfile = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/opsworks_user_profile aws_opsworks_user_profile}
*/
class OpsworksUserProfile extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/opsworks_user_profile aws_opsworks_user_profile} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options OpsworksUserProfileConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_opsworks_user_profile',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._allowSelfManagement = config.allowSelfManagement;
        this._id = config.id;
        this._sshPublicKey = config.sshPublicKey;
        this._sshUsername = config.sshUsername;
        this._userArn = config.userArn;
    }
    get allowSelfManagement() {
        return this.getBooleanAttribute('allow_self_management');
    }
    set allowSelfManagement(value) {
        this._allowSelfManagement = value;
    }
    resetAllowSelfManagement() {
        this._allowSelfManagement = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowSelfManagementInput() {
        return this._allowSelfManagement;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get sshPublicKey() {
        return this.getStringAttribute('ssh_public_key');
    }
    set sshPublicKey(value) {
        this._sshPublicKey = value;
    }
    resetSshPublicKey() {
        this._sshPublicKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sshPublicKeyInput() {
        return this._sshPublicKey;
    }
    get sshUsername() {
        return this.getStringAttribute('ssh_username');
    }
    set sshUsername(value) {
        this._sshUsername = value;
    }
    // Temporarily expose input value. Use with caution.
    get sshUsernameInput() {
        return this._sshUsername;
    }
    get userArn() {
        return this.getStringAttribute('user_arn');
    }
    set userArn(value) {
        this._userArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get userArnInput() {
        return this._userArn;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            allow_self_management: cdktf.booleanToTerraform(this._allowSelfManagement),
            id: cdktf.stringToTerraform(this._id),
            ssh_public_key: cdktf.stringToTerraform(this._sshPublicKey),
            ssh_username: cdktf.stringToTerraform(this._sshUsername),
            user_arn: cdktf.stringToTerraform(this._userArn),
        };
    }
}
exports.OpsworksUserProfile = OpsworksUserProfile;
_a = JSII_RTTI_SYMBOL_1;
OpsworksUserProfile[_a] = { fqn: "@cdktf/provider-aws.opsworksUserProfile.OpsworksUserProfile", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
OpsworksUserProfile.tfResourceType = "aws_opsworks_user_profile";
//# sourceMappingURL=data:application/json;base64,