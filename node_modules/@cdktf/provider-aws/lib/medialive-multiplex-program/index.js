"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MedialiveMultiplexProgram = exports.MedialiveMultiplexProgramMultiplexProgramSettingsOutputReference = exports.medialiveMultiplexProgramMultiplexProgramSettingsToTerraform = exports.MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsOutputReference = exports.medialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsToTerraform = exports.MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutputReference = exports.medialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsToTerraform = exports.MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatemuxSettingsOutputReference = exports.medialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatemuxSettingsToTerraform = exports.MedialiveMultiplexProgramMultiplexProgramSettingsServiceDescriptorOutputReference = exports.medialiveMultiplexProgramMultiplexProgramSettingsServiceDescriptorToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function medialiveMultiplexProgramMultiplexProgramSettingsServiceDescriptorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        provider_name: cdktf.stringToTerraform(struct.providerName),
        service_name: cdktf.stringToTerraform(struct.serviceName),
    };
}
exports.medialiveMultiplexProgramMultiplexProgramSettingsServiceDescriptorToTerraform = medialiveMultiplexProgramMultiplexProgramSettingsServiceDescriptorToTerraform;
class MedialiveMultiplexProgramMultiplexProgramSettingsServiceDescriptorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._providerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.providerName = this._providerName;
        }
        if (this._serviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceName = this._serviceName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._providerName = undefined;
            this._serviceName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._providerName = value.providerName;
            this._serviceName = value.serviceName;
        }
    }
    get providerName() {
        return this.getStringAttribute('provider_name');
    }
    set providerName(value) {
        this._providerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get providerNameInput() {
        return this._providerName;
    }
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
    set serviceName(value) {
        this._serviceName = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNameInput() {
        return this._serviceName;
    }
}
exports.MedialiveMultiplexProgramMultiplexProgramSettingsServiceDescriptorOutputReference = MedialiveMultiplexProgramMultiplexProgramSettingsServiceDescriptorOutputReference;
_a = JSII_RTTI_SYMBOL_1;
MedialiveMultiplexProgramMultiplexProgramSettingsServiceDescriptorOutputReference[_a] = { fqn: "@cdktf/provider-aws.medialiveMultiplexProgram.MedialiveMultiplexProgramMultiplexProgramSettingsServiceDescriptorOutputReference", version: "10.0.12" };
function medialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatemuxSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        maximum_bitrate: cdktf.numberToTerraform(struct.maximumBitrate),
        minimum_bitrate: cdktf.numberToTerraform(struct.minimumBitrate),
        priority: cdktf.numberToTerraform(struct.priority),
    };
}
exports.medialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatemuxSettingsToTerraform = medialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatemuxSettingsToTerraform;
class MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatemuxSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maximumBitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.maximumBitrate = this._maximumBitrate;
        }
        if (this._minimumBitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.minimumBitrate = this._minimumBitrate;
        }
        if (this._priority !== undefined) {
            hasAnyValues = true;
            internalValueResult.priority = this._priority;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maximumBitrate = undefined;
            this._minimumBitrate = undefined;
            this._priority = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maximumBitrate = value.maximumBitrate;
            this._minimumBitrate = value.minimumBitrate;
            this._priority = value.priority;
        }
    }
    get maximumBitrate() {
        return this.getNumberAttribute('maximum_bitrate');
    }
    set maximumBitrate(value) {
        this._maximumBitrate = value;
    }
    resetMaximumBitrate() {
        this._maximumBitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maximumBitrateInput() {
        return this._maximumBitrate;
    }
    get minimumBitrate() {
        return this.getNumberAttribute('minimum_bitrate');
    }
    set minimumBitrate(value) {
        this._minimumBitrate = value;
    }
    resetMinimumBitrate() {
        this._minimumBitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minimumBitrateInput() {
        return this._minimumBitrate;
    }
    get priority() {
        return this.getNumberAttribute('priority');
    }
    set priority(value) {
        this._priority = value;
    }
    resetPriority() {
        this._priority = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get priorityInput() {
        return this._priority;
    }
}
exports.MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatemuxSettingsOutputReference = MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatemuxSettingsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatemuxSettingsOutputReference[_b] = { fqn: "@cdktf/provider-aws.medialiveMultiplexProgram.MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatemuxSettingsOutputReference", version: "10.0.12" };
function medialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        maximum_bitrate: cdktf.numberToTerraform(struct.maximumBitrate),
        minimum_bitrate: cdktf.numberToTerraform(struct.minimumBitrate),
        priority: cdktf.numberToTerraform(struct.priority),
    };
}
exports.medialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsToTerraform = medialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsToTerraform;
class MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maximumBitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.maximumBitrate = this._maximumBitrate;
        }
        if (this._minimumBitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.minimumBitrate = this._minimumBitrate;
        }
        if (this._priority !== undefined) {
            hasAnyValues = true;
            internalValueResult.priority = this._priority;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maximumBitrate = undefined;
            this._minimumBitrate = undefined;
            this._priority = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maximumBitrate = value.maximumBitrate;
            this._minimumBitrate = value.minimumBitrate;
            this._priority = value.priority;
        }
    }
    get maximumBitrate() {
        return this.getNumberAttribute('maximum_bitrate');
    }
    set maximumBitrate(value) {
        this._maximumBitrate = value;
    }
    resetMaximumBitrate() {
        this._maximumBitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maximumBitrateInput() {
        return this._maximumBitrate;
    }
    get minimumBitrate() {
        return this.getNumberAttribute('minimum_bitrate');
    }
    set minimumBitrate(value) {
        this._minimumBitrate = value;
    }
    resetMinimumBitrate() {
        this._minimumBitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minimumBitrateInput() {
        return this._minimumBitrate;
    }
    get priority() {
        return this.getNumberAttribute('priority');
    }
    set priority(value) {
        this._priority = value;
    }
    resetPriority() {
        this._priority = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get priorityInput() {
        return this._priority;
    }
}
exports.MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutputReference = MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutputReference[_c] = { fqn: "@cdktf/provider-aws.medialiveMultiplexProgram.MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutputReference", version: "10.0.12" };
function medialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        constant_bitrate: cdktf.numberToTerraform(struct.constantBitrate),
        statemux_settings: medialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatemuxSettingsToTerraform(struct.statemuxSettings),
        statmux_settings: medialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsToTerraform(struct.statmuxSettings),
    };
}
exports.medialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsToTerraform = medialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsToTerraform;
class MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // statemux_settings - computed: false, optional: true, required: false
        this._statemuxSettings = new MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatemuxSettingsOutputReference(this, "statemux_settings");
        // statmux_settings - computed: false, optional: true, required: false
        this._statmuxSettings = new MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsOutputReference(this, "statmux_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._constantBitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.constantBitrate = this._constantBitrate;
        }
        if (this._statemuxSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.statemuxSettings = this._statemuxSettings?.internalValue;
        }
        if (this._statmuxSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.statmuxSettings = this._statmuxSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._constantBitrate = undefined;
            this._statemuxSettings.internalValue = undefined;
            this._statmuxSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._constantBitrate = value.constantBitrate;
            this._statemuxSettings.internalValue = value.statemuxSettings;
            this._statmuxSettings.internalValue = value.statmuxSettings;
        }
    }
    get constantBitrate() {
        return this.getNumberAttribute('constant_bitrate');
    }
    set constantBitrate(value) {
        this._constantBitrate = value;
    }
    resetConstantBitrate() {
        this._constantBitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get constantBitrateInput() {
        return this._constantBitrate;
    }
    get statemuxSettings() {
        return this._statemuxSettings;
    }
    putStatemuxSettings(value) {
        this._statemuxSettings.internalValue = value;
    }
    resetStatemuxSettings() {
        this._statemuxSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statemuxSettingsInput() {
        return this._statemuxSettings.internalValue;
    }
    get statmuxSettings() {
        return this._statmuxSettings;
    }
    putStatmuxSettings(value) {
        this._statmuxSettings.internalValue = value;
    }
    resetStatmuxSettings() {
        this._statmuxSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statmuxSettingsInput() {
        return this._statmuxSettings.internalValue;
    }
}
exports.MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsOutputReference = MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsOutputReference[_d] = { fqn: "@cdktf/provider-aws.medialiveMultiplexProgram.MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsOutputReference", version: "10.0.12" };
function medialiveMultiplexProgramMultiplexProgramSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        preferred_channel_pipeline: cdktf.stringToTerraform(struct.preferredChannelPipeline),
        program_number: cdktf.numberToTerraform(struct.programNumber),
        service_descriptor: medialiveMultiplexProgramMultiplexProgramSettingsServiceDescriptorToTerraform(struct.serviceDescriptor),
        video_settings: medialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsToTerraform(struct.videoSettings),
    };
}
exports.medialiveMultiplexProgramMultiplexProgramSettingsToTerraform = medialiveMultiplexProgramMultiplexProgramSettingsToTerraform;
class MedialiveMultiplexProgramMultiplexProgramSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // service_descriptor - computed: false, optional: true, required: false
        this._serviceDescriptor = new MedialiveMultiplexProgramMultiplexProgramSettingsServiceDescriptorOutputReference(this, "service_descriptor");
        // video_settings - computed: false, optional: true, required: false
        this._videoSettings = new MedialiveMultiplexProgramMultiplexProgramSettingsVideoSettingsOutputReference(this, "video_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._preferredChannelPipeline !== undefined) {
            hasAnyValues = true;
            internalValueResult.preferredChannelPipeline = this._preferredChannelPipeline;
        }
        if (this._programNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.programNumber = this._programNumber;
        }
        if (this._serviceDescriptor?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceDescriptor = this._serviceDescriptor?.internalValue;
        }
        if (this._videoSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.videoSettings = this._videoSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._preferredChannelPipeline = undefined;
            this._programNumber = undefined;
            this._serviceDescriptor.internalValue = undefined;
            this._videoSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._preferredChannelPipeline = value.preferredChannelPipeline;
            this._programNumber = value.programNumber;
            this._serviceDescriptor.internalValue = value.serviceDescriptor;
            this._videoSettings.internalValue = value.videoSettings;
        }
    }
    get preferredChannelPipeline() {
        return this.getStringAttribute('preferred_channel_pipeline');
    }
    set preferredChannelPipeline(value) {
        this._preferredChannelPipeline = value;
    }
    // Temporarily expose input value. Use with caution.
    get preferredChannelPipelineInput() {
        return this._preferredChannelPipeline;
    }
    get programNumber() {
        return this.getNumberAttribute('program_number');
    }
    set programNumber(value) {
        this._programNumber = value;
    }
    // Temporarily expose input value. Use with caution.
    get programNumberInput() {
        return this._programNumber;
    }
    get serviceDescriptor() {
        return this._serviceDescriptor;
    }
    putServiceDescriptor(value) {
        this._serviceDescriptor.internalValue = value;
    }
    resetServiceDescriptor() {
        this._serviceDescriptor.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceDescriptorInput() {
        return this._serviceDescriptor.internalValue;
    }
    get videoSettings() {
        return this._videoSettings;
    }
    putVideoSettings(value) {
        this._videoSettings.internalValue = value;
    }
    resetVideoSettings() {
        this._videoSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get videoSettingsInput() {
        return this._videoSettings.internalValue;
    }
}
exports.MedialiveMultiplexProgramMultiplexProgramSettingsOutputReference = MedialiveMultiplexProgramMultiplexProgramSettingsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
MedialiveMultiplexProgramMultiplexProgramSettingsOutputReference[_e] = { fqn: "@cdktf/provider-aws.medialiveMultiplexProgram.MedialiveMultiplexProgramMultiplexProgramSettingsOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/medialive_multiplex_program aws_medialive_multiplex_program}
*/
class MedialiveMultiplexProgram extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/medialive_multiplex_program aws_medialive_multiplex_program} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MedialiveMultiplexProgramConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_medialive_multiplex_program',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // multiplex_program_settings - computed: false, optional: false, required: true
        this._multiplexProgramSettings = new MedialiveMultiplexProgramMultiplexProgramSettingsOutputReference(this, "multiplex_program_settings");
        this._multiplexId = config.multiplexId;
        this._programName = config.programName;
        this._multiplexProgramSettings.internalValue = config.multiplexProgramSettings;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get multiplexId() {
        return this.getStringAttribute('multiplex_id');
    }
    set multiplexId(value) {
        this._multiplexId = value;
    }
    // Temporarily expose input value. Use with caution.
    get multiplexIdInput() {
        return this._multiplexId;
    }
    get programName() {
        return this.getStringAttribute('program_name');
    }
    set programName(value) {
        this._programName = value;
    }
    // Temporarily expose input value. Use with caution.
    get programNameInput() {
        return this._programName;
    }
    get multiplexProgramSettings() {
        return this._multiplexProgramSettings;
    }
    putMultiplexProgramSettings(value) {
        this._multiplexProgramSettings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get multiplexProgramSettingsInput() {
        return this._multiplexProgramSettings.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            multiplex_id: cdktf.stringToTerraform(this._multiplexId),
            program_name: cdktf.stringToTerraform(this._programName),
            multiplex_program_settings: medialiveMultiplexProgramMultiplexProgramSettingsToTerraform(this._multiplexProgramSettings.internalValue),
        };
    }
}
exports.MedialiveMultiplexProgram = MedialiveMultiplexProgram;
_f = JSII_RTTI_SYMBOL_1;
MedialiveMultiplexProgram[_f] = { fqn: "@cdktf/provider-aws.medialiveMultiplexProgram.MedialiveMultiplexProgram", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
MedialiveMultiplexProgram.tfResourceType = "aws_medialive_multiplex_program";
//# sourceMappingURL=data:application/json;base64,