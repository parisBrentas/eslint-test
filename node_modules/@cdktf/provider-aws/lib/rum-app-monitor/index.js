"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RumAppMonitor = exports.RumAppMonitorAppMonitorConfigurationOutputReference = exports.rumAppMonitorAppMonitorConfigurationToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function rumAppMonitorAppMonitorConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_cookies: cdktf.booleanToTerraform(struct.allowCookies),
        enable_xray: cdktf.booleanToTerraform(struct.enableXray),
        excluded_pages: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.excludedPages),
        favorite_pages: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.favoritePages),
        guest_role_arn: cdktf.stringToTerraform(struct.guestRoleArn),
        identity_pool_id: cdktf.stringToTerraform(struct.identityPoolId),
        included_pages: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.includedPages),
        session_sample_rate: cdktf.numberToTerraform(struct.sessionSampleRate),
        telemetries: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.telemetries),
    };
}
exports.rumAppMonitorAppMonitorConfigurationToTerraform = rumAppMonitorAppMonitorConfigurationToTerraform;
class RumAppMonitorAppMonitorConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowCookies !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowCookies = this._allowCookies;
        }
        if (this._enableXray !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableXray = this._enableXray;
        }
        if (this._excludedPages !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludedPages = this._excludedPages;
        }
        if (this._favoritePages !== undefined) {
            hasAnyValues = true;
            internalValueResult.favoritePages = this._favoritePages;
        }
        if (this._guestRoleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.guestRoleArn = this._guestRoleArn;
        }
        if (this._identityPoolId !== undefined) {
            hasAnyValues = true;
            internalValueResult.identityPoolId = this._identityPoolId;
        }
        if (this._includedPages !== undefined) {
            hasAnyValues = true;
            internalValueResult.includedPages = this._includedPages;
        }
        if (this._sessionSampleRate !== undefined) {
            hasAnyValues = true;
            internalValueResult.sessionSampleRate = this._sessionSampleRate;
        }
        if (this._telemetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.telemetries = this._telemetries;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowCookies = undefined;
            this._enableXray = undefined;
            this._excludedPages = undefined;
            this._favoritePages = undefined;
            this._guestRoleArn = undefined;
            this._identityPoolId = undefined;
            this._includedPages = undefined;
            this._sessionSampleRate = undefined;
            this._telemetries = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowCookies = value.allowCookies;
            this._enableXray = value.enableXray;
            this._excludedPages = value.excludedPages;
            this._favoritePages = value.favoritePages;
            this._guestRoleArn = value.guestRoleArn;
            this._identityPoolId = value.identityPoolId;
            this._includedPages = value.includedPages;
            this._sessionSampleRate = value.sessionSampleRate;
            this._telemetries = value.telemetries;
        }
    }
    get allowCookies() {
        return this.getBooleanAttribute('allow_cookies');
    }
    set allowCookies(value) {
        this._allowCookies = value;
    }
    resetAllowCookies() {
        this._allowCookies = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowCookiesInput() {
        return this._allowCookies;
    }
    get enableXray() {
        return this.getBooleanAttribute('enable_xray');
    }
    set enableXray(value) {
        this._enableXray = value;
    }
    resetEnableXray() {
        this._enableXray = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableXrayInput() {
        return this._enableXray;
    }
    get excludedPages() {
        return cdktf.Fn.tolist(this.getListAttribute('excluded_pages'));
    }
    set excludedPages(value) {
        this._excludedPages = value;
    }
    resetExcludedPages() {
        this._excludedPages = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludedPagesInput() {
        return this._excludedPages;
    }
    get favoritePages() {
        return cdktf.Fn.tolist(this.getListAttribute('favorite_pages'));
    }
    set favoritePages(value) {
        this._favoritePages = value;
    }
    resetFavoritePages() {
        this._favoritePages = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get favoritePagesInput() {
        return this._favoritePages;
    }
    get guestRoleArn() {
        return this.getStringAttribute('guest_role_arn');
    }
    set guestRoleArn(value) {
        this._guestRoleArn = value;
    }
    resetGuestRoleArn() {
        this._guestRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get guestRoleArnInput() {
        return this._guestRoleArn;
    }
    get identityPoolId() {
        return this.getStringAttribute('identity_pool_id');
    }
    set identityPoolId(value) {
        this._identityPoolId = value;
    }
    resetIdentityPoolId() {
        this._identityPoolId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityPoolIdInput() {
        return this._identityPoolId;
    }
    get includedPages() {
        return cdktf.Fn.tolist(this.getListAttribute('included_pages'));
    }
    set includedPages(value) {
        this._includedPages = value;
    }
    resetIncludedPages() {
        this._includedPages = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includedPagesInput() {
        return this._includedPages;
    }
    get sessionSampleRate() {
        return this.getNumberAttribute('session_sample_rate');
    }
    set sessionSampleRate(value) {
        this._sessionSampleRate = value;
    }
    resetSessionSampleRate() {
        this._sessionSampleRate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sessionSampleRateInput() {
        return this._sessionSampleRate;
    }
    get telemetries() {
        return cdktf.Fn.tolist(this.getListAttribute('telemetries'));
    }
    set telemetries(value) {
        this._telemetries = value;
    }
    resetTelemetries() {
        this._telemetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get telemetriesInput() {
        return this._telemetries;
    }
}
exports.RumAppMonitorAppMonitorConfigurationOutputReference = RumAppMonitorAppMonitorConfigurationOutputReference;
_a = JSII_RTTI_SYMBOL_1;
RumAppMonitorAppMonitorConfigurationOutputReference[_a] = { fqn: "@cdktf/provider-aws.rumAppMonitor.RumAppMonitorAppMonitorConfigurationOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/rum_app_monitor aws_rum_app_monitor}
*/
class RumAppMonitor extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/rum_app_monitor aws_rum_app_monitor} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options RumAppMonitorConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_rum_app_monitor',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // app_monitor_configuration - computed: false, optional: true, required: false
        this._appMonitorConfiguration = new RumAppMonitorAppMonitorConfigurationOutputReference(this, "app_monitor_configuration");
        this._cwLogEnabled = config.cwLogEnabled;
        this._domain = config.domain;
        this._id = config.id;
        this._name = config.name;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._appMonitorConfiguration.internalValue = config.appMonitorConfiguration;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // app_monitor_id - computed: true, optional: false, required: false
    get appMonitorId() {
        return this.getStringAttribute('app_monitor_id');
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get cwLogEnabled() {
        return this.getBooleanAttribute('cw_log_enabled');
    }
    set cwLogEnabled(value) {
        this._cwLogEnabled = value;
    }
    resetCwLogEnabled() {
        this._cwLogEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cwLogEnabledInput() {
        return this._cwLogEnabled;
    }
    // cw_log_group - computed: true, optional: false, required: false
    get cwLogGroup() {
        return this.getStringAttribute('cw_log_group');
    }
    get domain() {
        return this.getStringAttribute('domain');
    }
    set domain(value) {
        this._domain = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainInput() {
        return this._domain;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get appMonitorConfiguration() {
        return this._appMonitorConfiguration;
    }
    putAppMonitorConfiguration(value) {
        this._appMonitorConfiguration.internalValue = value;
    }
    resetAppMonitorConfiguration() {
        this._appMonitorConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appMonitorConfigurationInput() {
        return this._appMonitorConfiguration.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cw_log_enabled: cdktf.booleanToTerraform(this._cwLogEnabled),
            domain: cdktf.stringToTerraform(this._domain),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            app_monitor_configuration: rumAppMonitorAppMonitorConfigurationToTerraform(this._appMonitorConfiguration.internalValue),
        };
    }
}
exports.RumAppMonitor = RumAppMonitor;
_b = JSII_RTTI_SYMBOL_1;
RumAppMonitor[_b] = { fqn: "@cdktf/provider-aws.rumAppMonitor.RumAppMonitor", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
RumAppMonitor.tfResourceType = "aws_rum_app_monitor";
//# sourceMappingURL=data:application/json;base64,