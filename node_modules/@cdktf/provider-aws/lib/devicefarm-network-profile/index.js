"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevicefarmNetworkProfile = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/devicefarm_network_profile aws_devicefarm_network_profile}
*/
class DevicefarmNetworkProfile extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/devicefarm_network_profile aws_devicefarm_network_profile} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DevicefarmNetworkProfileConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_devicefarm_network_profile',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._description = config.description;
        this._downlinkBandwidthBits = config.downlinkBandwidthBits;
        this._downlinkDelayMs = config.downlinkDelayMs;
        this._downlinkJitterMs = config.downlinkJitterMs;
        this._downlinkLossPercent = config.downlinkLossPercent;
        this._id = config.id;
        this._name = config.name;
        this._projectArn = config.projectArn;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._type = config.type;
        this._uplinkBandwidthBits = config.uplinkBandwidthBits;
        this._uplinkDelayMs = config.uplinkDelayMs;
        this._uplinkJitterMs = config.uplinkJitterMs;
        this._uplinkLossPercent = config.uplinkLossPercent;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get downlinkBandwidthBits() {
        return this.getNumberAttribute('downlink_bandwidth_bits');
    }
    set downlinkBandwidthBits(value) {
        this._downlinkBandwidthBits = value;
    }
    resetDownlinkBandwidthBits() {
        this._downlinkBandwidthBits = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get downlinkBandwidthBitsInput() {
        return this._downlinkBandwidthBits;
    }
    get downlinkDelayMs() {
        return this.getNumberAttribute('downlink_delay_ms');
    }
    set downlinkDelayMs(value) {
        this._downlinkDelayMs = value;
    }
    resetDownlinkDelayMs() {
        this._downlinkDelayMs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get downlinkDelayMsInput() {
        return this._downlinkDelayMs;
    }
    get downlinkJitterMs() {
        return this.getNumberAttribute('downlink_jitter_ms');
    }
    set downlinkJitterMs(value) {
        this._downlinkJitterMs = value;
    }
    resetDownlinkJitterMs() {
        this._downlinkJitterMs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get downlinkJitterMsInput() {
        return this._downlinkJitterMs;
    }
    get downlinkLossPercent() {
        return this.getNumberAttribute('downlink_loss_percent');
    }
    set downlinkLossPercent(value) {
        this._downlinkLossPercent = value;
    }
    resetDownlinkLossPercent() {
        this._downlinkLossPercent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get downlinkLossPercentInput() {
        return this._downlinkLossPercent;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get projectArn() {
        return this.getStringAttribute('project_arn');
    }
    set projectArn(value) {
        this._projectArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectArnInput() {
        return this._projectArn;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get uplinkBandwidthBits() {
        return this.getNumberAttribute('uplink_bandwidth_bits');
    }
    set uplinkBandwidthBits(value) {
        this._uplinkBandwidthBits = value;
    }
    resetUplinkBandwidthBits() {
        this._uplinkBandwidthBits = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get uplinkBandwidthBitsInput() {
        return this._uplinkBandwidthBits;
    }
    get uplinkDelayMs() {
        return this.getNumberAttribute('uplink_delay_ms');
    }
    set uplinkDelayMs(value) {
        this._uplinkDelayMs = value;
    }
    resetUplinkDelayMs() {
        this._uplinkDelayMs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get uplinkDelayMsInput() {
        return this._uplinkDelayMs;
    }
    get uplinkJitterMs() {
        return this.getNumberAttribute('uplink_jitter_ms');
    }
    set uplinkJitterMs(value) {
        this._uplinkJitterMs = value;
    }
    resetUplinkJitterMs() {
        this._uplinkJitterMs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get uplinkJitterMsInput() {
        return this._uplinkJitterMs;
    }
    get uplinkLossPercent() {
        return this.getNumberAttribute('uplink_loss_percent');
    }
    set uplinkLossPercent(value) {
        this._uplinkLossPercent = value;
    }
    resetUplinkLossPercent() {
        this._uplinkLossPercent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get uplinkLossPercentInput() {
        return this._uplinkLossPercent;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            downlink_bandwidth_bits: cdktf.numberToTerraform(this._downlinkBandwidthBits),
            downlink_delay_ms: cdktf.numberToTerraform(this._downlinkDelayMs),
            downlink_jitter_ms: cdktf.numberToTerraform(this._downlinkJitterMs),
            downlink_loss_percent: cdktf.numberToTerraform(this._downlinkLossPercent),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            project_arn: cdktf.stringToTerraform(this._projectArn),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            type: cdktf.stringToTerraform(this._type),
            uplink_bandwidth_bits: cdktf.numberToTerraform(this._uplinkBandwidthBits),
            uplink_delay_ms: cdktf.numberToTerraform(this._uplinkDelayMs),
            uplink_jitter_ms: cdktf.numberToTerraform(this._uplinkJitterMs),
            uplink_loss_percent: cdktf.numberToTerraform(this._uplinkLossPercent),
        };
    }
}
exports.DevicefarmNetworkProfile = DevicefarmNetworkProfile;
_a = JSII_RTTI_SYMBOL_1;
DevicefarmNetworkProfile[_a] = { fqn: "@cdktf/provider-aws.devicefarmNetworkProfile.DevicefarmNetworkProfile", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
DevicefarmNetworkProfile.tfResourceType = "aws_devicefarm_network_profile";
//# sourceMappingURL=data:application/json;base64,