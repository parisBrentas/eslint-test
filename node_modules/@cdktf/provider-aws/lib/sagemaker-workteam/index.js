"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerWorkteam = exports.SagemakerWorkteamNotificationConfigurationOutputReference = exports.sagemakerWorkteamNotificationConfigurationToTerraform = exports.SagemakerWorkteamMemberDefinitionList = exports.SagemakerWorkteamMemberDefinitionOutputReference = exports.sagemakerWorkteamMemberDefinitionToTerraform = exports.SagemakerWorkteamMemberDefinitionOidcMemberDefinitionOutputReference = exports.sagemakerWorkteamMemberDefinitionOidcMemberDefinitionToTerraform = exports.SagemakerWorkteamMemberDefinitionCognitoMemberDefinitionOutputReference = exports.sagemakerWorkteamMemberDefinitionCognitoMemberDefinitionToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function sagemakerWorkteamMemberDefinitionCognitoMemberDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_id: cdktf.stringToTerraform(struct.clientId),
        user_group: cdktf.stringToTerraform(struct.userGroup),
        user_pool: cdktf.stringToTerraform(struct.userPool),
    };
}
exports.sagemakerWorkteamMemberDefinitionCognitoMemberDefinitionToTerraform = sagemakerWorkteamMemberDefinitionCognitoMemberDefinitionToTerraform;
class SagemakerWorkteamMemberDefinitionCognitoMemberDefinitionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._userGroup !== undefined) {
            hasAnyValues = true;
            internalValueResult.userGroup = this._userGroup;
        }
        if (this._userPool !== undefined) {
            hasAnyValues = true;
            internalValueResult.userPool = this._userPool;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientId = undefined;
            this._userGroup = undefined;
            this._userPool = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientId = value.clientId;
            this._userGroup = value.userGroup;
            this._userPool = value.userPool;
        }
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get userGroup() {
        return this.getStringAttribute('user_group');
    }
    set userGroup(value) {
        this._userGroup = value;
    }
    // Temporarily expose input value. Use with caution.
    get userGroupInput() {
        return this._userGroup;
    }
    get userPool() {
        return this.getStringAttribute('user_pool');
    }
    set userPool(value) {
        this._userPool = value;
    }
    // Temporarily expose input value. Use with caution.
    get userPoolInput() {
        return this._userPool;
    }
}
exports.SagemakerWorkteamMemberDefinitionCognitoMemberDefinitionOutputReference = SagemakerWorkteamMemberDefinitionCognitoMemberDefinitionOutputReference;
_a = JSII_RTTI_SYMBOL_1;
SagemakerWorkteamMemberDefinitionCognitoMemberDefinitionOutputReference[_a] = { fqn: "@cdktf/provider-aws.sagemakerWorkteam.SagemakerWorkteamMemberDefinitionCognitoMemberDefinitionOutputReference", version: "10.0.12" };
function sagemakerWorkteamMemberDefinitionOidcMemberDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        groups: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.groups),
    };
}
exports.sagemakerWorkteamMemberDefinitionOidcMemberDefinitionToTerraform = sagemakerWorkteamMemberDefinitionOidcMemberDefinitionToTerraform;
class SagemakerWorkteamMemberDefinitionOidcMemberDefinitionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._groups !== undefined) {
            hasAnyValues = true;
            internalValueResult.groups = this._groups;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._groups = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._groups = value.groups;
        }
    }
    get groups() {
        return cdktf.Fn.tolist(this.getListAttribute('groups'));
    }
    set groups(value) {
        this._groups = value;
    }
    // Temporarily expose input value. Use with caution.
    get groupsInput() {
        return this._groups;
    }
}
exports.SagemakerWorkteamMemberDefinitionOidcMemberDefinitionOutputReference = SagemakerWorkteamMemberDefinitionOidcMemberDefinitionOutputReference;
_b = JSII_RTTI_SYMBOL_1;
SagemakerWorkteamMemberDefinitionOidcMemberDefinitionOutputReference[_b] = { fqn: "@cdktf/provider-aws.sagemakerWorkteam.SagemakerWorkteamMemberDefinitionOidcMemberDefinitionOutputReference", version: "10.0.12" };
function sagemakerWorkteamMemberDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cognito_member_definition: sagemakerWorkteamMemberDefinitionCognitoMemberDefinitionToTerraform(struct.cognitoMemberDefinition),
        oidc_member_definition: sagemakerWorkteamMemberDefinitionOidcMemberDefinitionToTerraform(struct.oidcMemberDefinition),
    };
}
exports.sagemakerWorkteamMemberDefinitionToTerraform = sagemakerWorkteamMemberDefinitionToTerraform;
class SagemakerWorkteamMemberDefinitionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // cognito_member_definition - computed: false, optional: true, required: false
        this._cognitoMemberDefinition = new SagemakerWorkteamMemberDefinitionCognitoMemberDefinitionOutputReference(this, "cognito_member_definition");
        // oidc_member_definition - computed: false, optional: true, required: false
        this._oidcMemberDefinition = new SagemakerWorkteamMemberDefinitionOidcMemberDefinitionOutputReference(this, "oidc_member_definition");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cognitoMemberDefinition?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cognitoMemberDefinition = this._cognitoMemberDefinition?.internalValue;
        }
        if (this._oidcMemberDefinition?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oidcMemberDefinition = this._oidcMemberDefinition?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._cognitoMemberDefinition.internalValue = undefined;
            this._oidcMemberDefinition.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._cognitoMemberDefinition.internalValue = value.cognitoMemberDefinition;
            this._oidcMemberDefinition.internalValue = value.oidcMemberDefinition;
        }
    }
    get cognitoMemberDefinition() {
        return this._cognitoMemberDefinition;
    }
    putCognitoMemberDefinition(value) {
        this._cognitoMemberDefinition.internalValue = value;
    }
    resetCognitoMemberDefinition() {
        this._cognitoMemberDefinition.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cognitoMemberDefinitionInput() {
        return this._cognitoMemberDefinition.internalValue;
    }
    get oidcMemberDefinition() {
        return this._oidcMemberDefinition;
    }
    putOidcMemberDefinition(value) {
        this._oidcMemberDefinition.internalValue = value;
    }
    resetOidcMemberDefinition() {
        this._oidcMemberDefinition.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oidcMemberDefinitionInput() {
        return this._oidcMemberDefinition.internalValue;
    }
}
exports.SagemakerWorkteamMemberDefinitionOutputReference = SagemakerWorkteamMemberDefinitionOutputReference;
_c = JSII_RTTI_SYMBOL_1;
SagemakerWorkteamMemberDefinitionOutputReference[_c] = { fqn: "@cdktf/provider-aws.sagemakerWorkteam.SagemakerWorkteamMemberDefinitionOutputReference", version: "10.0.12" };
class SagemakerWorkteamMemberDefinitionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerWorkteamMemberDefinitionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerWorkteamMemberDefinitionList = SagemakerWorkteamMemberDefinitionList;
_d = JSII_RTTI_SYMBOL_1;
SagemakerWorkteamMemberDefinitionList[_d] = { fqn: "@cdktf/provider-aws.sagemakerWorkteam.SagemakerWorkteamMemberDefinitionList", version: "10.0.12" };
function sagemakerWorkteamNotificationConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        notification_topic_arn: cdktf.stringToTerraform(struct.notificationTopicArn),
    };
}
exports.sagemakerWorkteamNotificationConfigurationToTerraform = sagemakerWorkteamNotificationConfigurationToTerraform;
class SagemakerWorkteamNotificationConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._notificationTopicArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.notificationTopicArn = this._notificationTopicArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._notificationTopicArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._notificationTopicArn = value.notificationTopicArn;
        }
    }
    get notificationTopicArn() {
        return this.getStringAttribute('notification_topic_arn');
    }
    set notificationTopicArn(value) {
        this._notificationTopicArn = value;
    }
    resetNotificationTopicArn() {
        this._notificationTopicArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notificationTopicArnInput() {
        return this._notificationTopicArn;
    }
}
exports.SagemakerWorkteamNotificationConfigurationOutputReference = SagemakerWorkteamNotificationConfigurationOutputReference;
_e = JSII_RTTI_SYMBOL_1;
SagemakerWorkteamNotificationConfigurationOutputReference[_e] = { fqn: "@cdktf/provider-aws.sagemakerWorkteam.SagemakerWorkteamNotificationConfigurationOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/sagemaker_workteam aws_sagemaker_workteam}
*/
class SagemakerWorkteam extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/sagemaker_workteam aws_sagemaker_workteam} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerWorkteamConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_sagemaker_workteam',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // member_definition - computed: false, optional: false, required: true
        this._memberDefinition = new SagemakerWorkteamMemberDefinitionList(this, "member_definition", false);
        // notification_configuration - computed: false, optional: true, required: false
        this._notificationConfiguration = new SagemakerWorkteamNotificationConfigurationOutputReference(this, "notification_configuration");
        this._description = config.description;
        this._id = config.id;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._workforceName = config.workforceName;
        this._workteamName = config.workteamName;
        this._memberDefinition.internalValue = config.memberDefinition;
        this._notificationConfiguration.internalValue = config.notificationConfiguration;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // subdomain - computed: true, optional: false, required: false
    get subdomain() {
        return this.getStringAttribute('subdomain');
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get workforceName() {
        return this.getStringAttribute('workforce_name');
    }
    set workforceName(value) {
        this._workforceName = value;
    }
    // Temporarily expose input value. Use with caution.
    get workforceNameInput() {
        return this._workforceName;
    }
    get workteamName() {
        return this.getStringAttribute('workteam_name');
    }
    set workteamName(value) {
        this._workteamName = value;
    }
    // Temporarily expose input value. Use with caution.
    get workteamNameInput() {
        return this._workteamName;
    }
    get memberDefinition() {
        return this._memberDefinition;
    }
    putMemberDefinition(value) {
        this._memberDefinition.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get memberDefinitionInput() {
        return this._memberDefinition.internalValue;
    }
    get notificationConfiguration() {
        return this._notificationConfiguration;
    }
    putNotificationConfiguration(value) {
        this._notificationConfiguration.internalValue = value;
    }
    resetNotificationConfiguration() {
        this._notificationConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notificationConfigurationInput() {
        return this._notificationConfiguration.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            workforce_name: cdktf.stringToTerraform(this._workforceName),
            workteam_name: cdktf.stringToTerraform(this._workteamName),
            member_definition: cdktf.listMapper(sagemakerWorkteamMemberDefinitionToTerraform, true)(this._memberDefinition.internalValue),
            notification_configuration: sagemakerWorkteamNotificationConfigurationToTerraform(this._notificationConfiguration.internalValue),
        };
    }
}
exports.SagemakerWorkteam = SagemakerWorkteam;
_f = JSII_RTTI_SYMBOL_1;
SagemakerWorkteam[_f] = { fqn: "@cdktf/provider-aws.sagemakerWorkteam.SagemakerWorkteam", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
SagemakerWorkteam.tfResourceType = "aws_sagemaker_workteam";
//# sourceMappingURL=data:application/json;base64,