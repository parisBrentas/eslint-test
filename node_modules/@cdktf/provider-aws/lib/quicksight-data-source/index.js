"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4;
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuicksightDataSource = exports.QuicksightDataSourceVpcConnectionPropertiesOutputReference = exports.quicksightDataSourceVpcConnectionPropertiesToTerraform = exports.QuicksightDataSourceSslPropertiesOutputReference = exports.quicksightDataSourceSslPropertiesToTerraform = exports.QuicksightDataSourcePermissionList = exports.QuicksightDataSourcePermissionOutputReference = exports.quicksightDataSourcePermissionToTerraform = exports.QuicksightDataSourceParametersOutputReference = exports.quicksightDataSourceParametersToTerraform = exports.QuicksightDataSourceParametersTwitterOutputReference = exports.quicksightDataSourceParametersTwitterToTerraform = exports.QuicksightDataSourceParametersTeradataOutputReference = exports.quicksightDataSourceParametersTeradataToTerraform = exports.QuicksightDataSourceParametersSqlServerOutputReference = exports.quicksightDataSourceParametersSqlServerToTerraform = exports.QuicksightDataSourceParametersSparkOutputReference = exports.quicksightDataSourceParametersSparkToTerraform = exports.QuicksightDataSourceParametersSnowflakeOutputReference = exports.quicksightDataSourceParametersSnowflakeToTerraform = exports.QuicksightDataSourceParametersServiceNowOutputReference = exports.quicksightDataSourceParametersServiceNowToTerraform = exports.QuicksightDataSourceParametersS3OutputReference = exports.quicksightDataSourceParametersS3ToTerraform = exports.QuicksightDataSourceParametersS3ManifestFileLocationOutputReference = exports.quicksightDataSourceParametersS3ManifestFileLocationToTerraform = exports.QuicksightDataSourceParametersRedshiftOutputReference = exports.quicksightDataSourceParametersRedshiftToTerraform = exports.QuicksightDataSourceParametersRdsOutputReference = exports.quicksightDataSourceParametersRdsToTerraform = exports.QuicksightDataSourceParametersPrestoOutputReference = exports.quicksightDataSourceParametersPrestoToTerraform = exports.QuicksightDataSourceParametersPostgresqlOutputReference = exports.quicksightDataSourceParametersPostgresqlToTerraform = exports.QuicksightDataSourceParametersOracleOutputReference = exports.quicksightDataSourceParametersOracleToTerraform = exports.QuicksightDataSourceParametersMysqlOutputReference = exports.quicksightDataSourceParametersMysqlToTerraform = exports.QuicksightDataSourceParametersMariaDbOutputReference = exports.quicksightDataSourceParametersMariaDbToTerraform = exports.QuicksightDataSourceParametersJiraOutputReference = exports.quicksightDataSourceParametersJiraToTerraform = exports.QuicksightDataSourceParametersAwsIotAnalyticsOutputReference = exports.quicksightDataSourceParametersAwsIotAnalyticsToTerraform = exports.QuicksightDataSourceParametersAuroraPostgresqlOutputReference = exports.quicksightDataSourceParametersAuroraPostgresqlToTerraform = exports.QuicksightDataSourceParametersAuroraOutputReference = exports.quicksightDataSourceParametersAuroraToTerraform = exports.QuicksightDataSourceParametersAthenaOutputReference = exports.quicksightDataSourceParametersAthenaToTerraform = exports.QuicksightDataSourceParametersAmazonElasticsearchOutputReference = exports.quicksightDataSourceParametersAmazonElasticsearchToTerraform = exports.QuicksightDataSourceCredentialsOutputReference = exports.quicksightDataSourceCredentialsToTerraform = exports.QuicksightDataSourceCredentialsCredentialPairOutputReference = exports.quicksightDataSourceCredentialsCredentialPairToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function quicksightDataSourceCredentialsCredentialPairToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password: cdktf.stringToTerraform(struct.password),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.quicksightDataSourceCredentialsCredentialPairToTerraform = quicksightDataSourceCredentialsCredentialPairToTerraform;
class QuicksightDataSourceCredentialsCredentialPairOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._password = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._password = value.password;
            this._username = value.username;
        }
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.QuicksightDataSourceCredentialsCredentialPairOutputReference = QuicksightDataSourceCredentialsCredentialPairOutputReference;
_a = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceCredentialsCredentialPairOutputReference[_a] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceCredentialsCredentialPairOutputReference", version: "10.0.12" };
function quicksightDataSourceCredentialsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        copy_source_arn: cdktf.stringToTerraform(struct.copySourceArn),
        credential_pair: quicksightDataSourceCredentialsCredentialPairToTerraform(struct.credentialPair),
    };
}
exports.quicksightDataSourceCredentialsToTerraform = quicksightDataSourceCredentialsToTerraform;
class QuicksightDataSourceCredentialsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // credential_pair - computed: false, optional: true, required: false
        this._credentialPair = new QuicksightDataSourceCredentialsCredentialPairOutputReference(this, "credential_pair");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._copySourceArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.copySourceArn = this._copySourceArn;
        }
        if (this._credentialPair?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.credentialPair = this._credentialPair?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._copySourceArn = undefined;
            this._credentialPair.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._copySourceArn = value.copySourceArn;
            this._credentialPair.internalValue = value.credentialPair;
        }
    }
    get copySourceArn() {
        return this.getStringAttribute('copy_source_arn');
    }
    set copySourceArn(value) {
        this._copySourceArn = value;
    }
    resetCopySourceArn() {
        this._copySourceArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get copySourceArnInput() {
        return this._copySourceArn;
    }
    get credentialPair() {
        return this._credentialPair;
    }
    putCredentialPair(value) {
        this._credentialPair.internalValue = value;
    }
    resetCredentialPair() {
        this._credentialPair.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get credentialPairInput() {
        return this._credentialPair.internalValue;
    }
}
exports.QuicksightDataSourceCredentialsOutputReference = QuicksightDataSourceCredentialsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceCredentialsOutputReference[_b] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceCredentialsOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersAmazonElasticsearchToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        domain: cdktf.stringToTerraform(struct.domain),
    };
}
exports.quicksightDataSourceParametersAmazonElasticsearchToTerraform = quicksightDataSourceParametersAmazonElasticsearchToTerraform;
class QuicksightDataSourceParametersAmazonElasticsearchOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._domain !== undefined) {
            hasAnyValues = true;
            internalValueResult.domain = this._domain;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._domain = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._domain = value.domain;
        }
    }
    get domain() {
        return this.getStringAttribute('domain');
    }
    set domain(value) {
        this._domain = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainInput() {
        return this._domain;
    }
}
exports.QuicksightDataSourceParametersAmazonElasticsearchOutputReference = QuicksightDataSourceParametersAmazonElasticsearchOutputReference;
_c = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersAmazonElasticsearchOutputReference[_c] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersAmazonElasticsearchOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersAthenaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        work_group: cdktf.stringToTerraform(struct.workGroup),
    };
}
exports.quicksightDataSourceParametersAthenaToTerraform = quicksightDataSourceParametersAthenaToTerraform;
class QuicksightDataSourceParametersAthenaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._workGroup !== undefined) {
            hasAnyValues = true;
            internalValueResult.workGroup = this._workGroup;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._workGroup = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._workGroup = value.workGroup;
        }
    }
    get workGroup() {
        return this.getStringAttribute('work_group');
    }
    set workGroup(value) {
        this._workGroup = value;
    }
    resetWorkGroup() {
        this._workGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workGroupInput() {
        return this._workGroup;
    }
}
exports.QuicksightDataSourceParametersAthenaOutputReference = QuicksightDataSourceParametersAthenaOutputReference;
_d = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersAthenaOutputReference[_d] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersAthenaOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersAuroraToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceParametersAuroraToTerraform = quicksightDataSourceParametersAuroraToTerraform;
class QuicksightDataSourceParametersAuroraOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._database = undefined;
            this._host = undefined;
            this._port = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._database = value.database;
            this._host = value.host;
            this._port = value.port;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
}
exports.QuicksightDataSourceParametersAuroraOutputReference = QuicksightDataSourceParametersAuroraOutputReference;
_e = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersAuroraOutputReference[_e] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersAuroraOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersAuroraPostgresqlToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceParametersAuroraPostgresqlToTerraform = quicksightDataSourceParametersAuroraPostgresqlToTerraform;
class QuicksightDataSourceParametersAuroraPostgresqlOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._database = undefined;
            this._host = undefined;
            this._port = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._database = value.database;
            this._host = value.host;
            this._port = value.port;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
}
exports.QuicksightDataSourceParametersAuroraPostgresqlOutputReference = QuicksightDataSourceParametersAuroraPostgresqlOutputReference;
_f = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersAuroraPostgresqlOutputReference[_f] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersAuroraPostgresqlOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersAwsIotAnalyticsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        data_set_name: cdktf.stringToTerraform(struct.dataSetName),
    };
}
exports.quicksightDataSourceParametersAwsIotAnalyticsToTerraform = quicksightDataSourceParametersAwsIotAnalyticsToTerraform;
class QuicksightDataSourceParametersAwsIotAnalyticsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataSetName !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataSetName = this._dataSetName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dataSetName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dataSetName = value.dataSetName;
        }
    }
    get dataSetName() {
        return this.getStringAttribute('data_set_name');
    }
    set dataSetName(value) {
        this._dataSetName = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataSetNameInput() {
        return this._dataSetName;
    }
}
exports.QuicksightDataSourceParametersAwsIotAnalyticsOutputReference = QuicksightDataSourceParametersAwsIotAnalyticsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersAwsIotAnalyticsOutputReference[_g] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersAwsIotAnalyticsOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersJiraToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        site_base_url: cdktf.stringToTerraform(struct.siteBaseUrl),
    };
}
exports.quicksightDataSourceParametersJiraToTerraform = quicksightDataSourceParametersJiraToTerraform;
class QuicksightDataSourceParametersJiraOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._siteBaseUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.siteBaseUrl = this._siteBaseUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._siteBaseUrl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._siteBaseUrl = value.siteBaseUrl;
        }
    }
    get siteBaseUrl() {
        return this.getStringAttribute('site_base_url');
    }
    set siteBaseUrl(value) {
        this._siteBaseUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get siteBaseUrlInput() {
        return this._siteBaseUrl;
    }
}
exports.QuicksightDataSourceParametersJiraOutputReference = QuicksightDataSourceParametersJiraOutputReference;
_h = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersJiraOutputReference[_h] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersJiraOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersMariaDbToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceParametersMariaDbToTerraform = quicksightDataSourceParametersMariaDbToTerraform;
class QuicksightDataSourceParametersMariaDbOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._database = undefined;
            this._host = undefined;
            this._port = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._database = value.database;
            this._host = value.host;
            this._port = value.port;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
}
exports.QuicksightDataSourceParametersMariaDbOutputReference = QuicksightDataSourceParametersMariaDbOutputReference;
_j = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersMariaDbOutputReference[_j] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersMariaDbOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersMysqlToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceParametersMysqlToTerraform = quicksightDataSourceParametersMysqlToTerraform;
class QuicksightDataSourceParametersMysqlOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._database = undefined;
            this._host = undefined;
            this._port = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._database = value.database;
            this._host = value.host;
            this._port = value.port;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
}
exports.QuicksightDataSourceParametersMysqlOutputReference = QuicksightDataSourceParametersMysqlOutputReference;
_k = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersMysqlOutputReference[_k] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersMysqlOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersOracleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceParametersOracleToTerraform = quicksightDataSourceParametersOracleToTerraform;
class QuicksightDataSourceParametersOracleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._database = undefined;
            this._host = undefined;
            this._port = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._database = value.database;
            this._host = value.host;
            this._port = value.port;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
}
exports.QuicksightDataSourceParametersOracleOutputReference = QuicksightDataSourceParametersOracleOutputReference;
_l = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersOracleOutputReference[_l] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersOracleOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersPostgresqlToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceParametersPostgresqlToTerraform = quicksightDataSourceParametersPostgresqlToTerraform;
class QuicksightDataSourceParametersPostgresqlOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._database = undefined;
            this._host = undefined;
            this._port = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._database = value.database;
            this._host = value.host;
            this._port = value.port;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
}
exports.QuicksightDataSourceParametersPostgresqlOutputReference = QuicksightDataSourceParametersPostgresqlOutputReference;
_m = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersPostgresqlOutputReference[_m] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersPostgresqlOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersPrestoToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        catalog: cdktf.stringToTerraform(struct.catalog),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceParametersPrestoToTerraform = quicksightDataSourceParametersPrestoToTerraform;
class QuicksightDataSourceParametersPrestoOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._catalog !== undefined) {
            hasAnyValues = true;
            internalValueResult.catalog = this._catalog;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._catalog = undefined;
            this._host = undefined;
            this._port = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._catalog = value.catalog;
            this._host = value.host;
            this._port = value.port;
        }
    }
    get catalog() {
        return this.getStringAttribute('catalog');
    }
    set catalog(value) {
        this._catalog = value;
    }
    // Temporarily expose input value. Use with caution.
    get catalogInput() {
        return this._catalog;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
}
exports.QuicksightDataSourceParametersPrestoOutputReference = QuicksightDataSourceParametersPrestoOutputReference;
_o = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersPrestoOutputReference[_o] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersPrestoOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersRdsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        instance_id: cdktf.stringToTerraform(struct.instanceId),
    };
}
exports.quicksightDataSourceParametersRdsToTerraform = quicksightDataSourceParametersRdsToTerraform;
class QuicksightDataSourceParametersRdsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._instanceId !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceId = this._instanceId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._database = undefined;
            this._instanceId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._database = value.database;
            this._instanceId = value.instanceId;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get instanceId() {
        return this.getStringAttribute('instance_id');
    }
    set instanceId(value) {
        this._instanceId = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceIdInput() {
        return this._instanceId;
    }
}
exports.QuicksightDataSourceParametersRdsOutputReference = QuicksightDataSourceParametersRdsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersRdsOutputReference[_p] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersRdsOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersRedshiftToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cluster_id: cdktf.stringToTerraform(struct.clusterId),
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceParametersRedshiftToTerraform = quicksightDataSourceParametersRedshiftToTerraform;
class QuicksightDataSourceParametersRedshiftOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clusterId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterId = this._clusterId;
        }
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clusterId = undefined;
            this._database = undefined;
            this._host = undefined;
            this._port = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clusterId = value.clusterId;
            this._database = value.database;
            this._host = value.host;
            this._port = value.port;
        }
    }
    get clusterId() {
        return this.getStringAttribute('cluster_id');
    }
    set clusterId(value) {
        this._clusterId = value;
    }
    resetClusterId() {
        this._clusterId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterIdInput() {
        return this._clusterId;
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    resetHost() {
        this._host = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
}
exports.QuicksightDataSourceParametersRedshiftOutputReference = QuicksightDataSourceParametersRedshiftOutputReference;
_q = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersRedshiftOutputReference[_q] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersRedshiftOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersS3ManifestFileLocationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        key: cdktf.stringToTerraform(struct.key),
    };
}
exports.quicksightDataSourceParametersS3ManifestFileLocationToTerraform = quicksightDataSourceParametersS3ManifestFileLocationToTerraform;
class QuicksightDataSourceParametersS3ManifestFileLocationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucket = this._bucket;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucket = undefined;
            this._key = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucket = value.bucket;
            this._key = value.key;
        }
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
}
exports.QuicksightDataSourceParametersS3ManifestFileLocationOutputReference = QuicksightDataSourceParametersS3ManifestFileLocationOutputReference;
_r = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersS3ManifestFileLocationOutputReference[_r] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersS3ManifestFileLocationOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersS3ToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        manifest_file_location: quicksightDataSourceParametersS3ManifestFileLocationToTerraform(struct.manifestFileLocation),
    };
}
exports.quicksightDataSourceParametersS3ToTerraform = quicksightDataSourceParametersS3ToTerraform;
class QuicksightDataSourceParametersS3OutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // manifest_file_location - computed: false, optional: false, required: true
        this._manifestFileLocation = new QuicksightDataSourceParametersS3ManifestFileLocationOutputReference(this, "manifest_file_location");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._manifestFileLocation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.manifestFileLocation = this._manifestFileLocation?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._manifestFileLocation.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._manifestFileLocation.internalValue = value.manifestFileLocation;
        }
    }
    get manifestFileLocation() {
        return this._manifestFileLocation;
    }
    putManifestFileLocation(value) {
        this._manifestFileLocation.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get manifestFileLocationInput() {
        return this._manifestFileLocation.internalValue;
    }
}
exports.QuicksightDataSourceParametersS3OutputReference = QuicksightDataSourceParametersS3OutputReference;
_s = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersS3OutputReference[_s] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersS3OutputReference", version: "10.0.12" };
function quicksightDataSourceParametersServiceNowToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        site_base_url: cdktf.stringToTerraform(struct.siteBaseUrl),
    };
}
exports.quicksightDataSourceParametersServiceNowToTerraform = quicksightDataSourceParametersServiceNowToTerraform;
class QuicksightDataSourceParametersServiceNowOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._siteBaseUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.siteBaseUrl = this._siteBaseUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._siteBaseUrl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._siteBaseUrl = value.siteBaseUrl;
        }
    }
    get siteBaseUrl() {
        return this.getStringAttribute('site_base_url');
    }
    set siteBaseUrl(value) {
        this._siteBaseUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get siteBaseUrlInput() {
        return this._siteBaseUrl;
    }
}
exports.QuicksightDataSourceParametersServiceNowOutputReference = QuicksightDataSourceParametersServiceNowOutputReference;
_t = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersServiceNowOutputReference[_t] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersServiceNowOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersSnowflakeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        warehouse: cdktf.stringToTerraform(struct.warehouse),
    };
}
exports.quicksightDataSourceParametersSnowflakeToTerraform = quicksightDataSourceParametersSnowflakeToTerraform;
class QuicksightDataSourceParametersSnowflakeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._warehouse !== undefined) {
            hasAnyValues = true;
            internalValueResult.warehouse = this._warehouse;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._database = undefined;
            this._host = undefined;
            this._warehouse = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._database = value.database;
            this._host = value.host;
            this._warehouse = value.warehouse;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get warehouse() {
        return this.getStringAttribute('warehouse');
    }
    set warehouse(value) {
        this._warehouse = value;
    }
    // Temporarily expose input value. Use with caution.
    get warehouseInput() {
        return this._warehouse;
    }
}
exports.QuicksightDataSourceParametersSnowflakeOutputReference = QuicksightDataSourceParametersSnowflakeOutputReference;
_u = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersSnowflakeOutputReference[_u] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersSnowflakeOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersSparkToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceParametersSparkToTerraform = quicksightDataSourceParametersSparkToTerraform;
class QuicksightDataSourceParametersSparkOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._host = undefined;
            this._port = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._host = value.host;
            this._port = value.port;
        }
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
}
exports.QuicksightDataSourceParametersSparkOutputReference = QuicksightDataSourceParametersSparkOutputReference;
_v = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersSparkOutputReference[_v] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersSparkOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersSqlServerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceParametersSqlServerToTerraform = quicksightDataSourceParametersSqlServerToTerraform;
class QuicksightDataSourceParametersSqlServerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._database = undefined;
            this._host = undefined;
            this._port = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._database = value.database;
            this._host = value.host;
            this._port = value.port;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
}
exports.QuicksightDataSourceParametersSqlServerOutputReference = QuicksightDataSourceParametersSqlServerOutputReference;
_w = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersSqlServerOutputReference[_w] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersSqlServerOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersTeradataToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.quicksightDataSourceParametersTeradataToTerraform = quicksightDataSourceParametersTeradataToTerraform;
class QuicksightDataSourceParametersTeradataOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._database = undefined;
            this._host = undefined;
            this._port = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._database = value.database;
            this._host = value.host;
            this._port = value.port;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
}
exports.QuicksightDataSourceParametersTeradataOutputReference = QuicksightDataSourceParametersTeradataOutputReference;
_x = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersTeradataOutputReference[_x] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersTeradataOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersTwitterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_rows: cdktf.numberToTerraform(struct.maxRows),
        query: cdktf.stringToTerraform(struct.query),
    };
}
exports.quicksightDataSourceParametersTwitterToTerraform = quicksightDataSourceParametersTwitterToTerraform;
class QuicksightDataSourceParametersTwitterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxRows !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRows = this._maxRows;
        }
        if (this._query !== undefined) {
            hasAnyValues = true;
            internalValueResult.query = this._query;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxRows = undefined;
            this._query = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxRows = value.maxRows;
            this._query = value.query;
        }
    }
    get maxRows() {
        return this.getNumberAttribute('max_rows');
    }
    set maxRows(value) {
        this._maxRows = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxRowsInput() {
        return this._maxRows;
    }
    get query() {
        return this.getStringAttribute('query');
    }
    set query(value) {
        this._query = value;
    }
    // Temporarily expose input value. Use with caution.
    get queryInput() {
        return this._query;
    }
}
exports.QuicksightDataSourceParametersTwitterOutputReference = QuicksightDataSourceParametersTwitterOutputReference;
_y = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersTwitterOutputReference[_y] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersTwitterOutputReference", version: "10.0.12" };
function quicksightDataSourceParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        amazon_elasticsearch: quicksightDataSourceParametersAmazonElasticsearchToTerraform(struct.amazonElasticsearch),
        athena: quicksightDataSourceParametersAthenaToTerraform(struct.athena),
        aurora: quicksightDataSourceParametersAuroraToTerraform(struct.aurora),
        aurora_postgresql: quicksightDataSourceParametersAuroraPostgresqlToTerraform(struct.auroraPostgresql),
        aws_iot_analytics: quicksightDataSourceParametersAwsIotAnalyticsToTerraform(struct.awsIotAnalytics),
        jira: quicksightDataSourceParametersJiraToTerraform(struct.jira),
        maria_db: quicksightDataSourceParametersMariaDbToTerraform(struct.mariaDb),
        mysql: quicksightDataSourceParametersMysqlToTerraform(struct.mysql),
        oracle: quicksightDataSourceParametersOracleToTerraform(struct.oracle),
        postgresql: quicksightDataSourceParametersPostgresqlToTerraform(struct.postgresql),
        presto: quicksightDataSourceParametersPrestoToTerraform(struct.presto),
        rds: quicksightDataSourceParametersRdsToTerraform(struct.rds),
        redshift: quicksightDataSourceParametersRedshiftToTerraform(struct.redshift),
        s3: quicksightDataSourceParametersS3ToTerraform(struct.s3),
        service_now: quicksightDataSourceParametersServiceNowToTerraform(struct.serviceNow),
        snowflake: quicksightDataSourceParametersSnowflakeToTerraform(struct.snowflake),
        spark: quicksightDataSourceParametersSparkToTerraform(struct.spark),
        sql_server: quicksightDataSourceParametersSqlServerToTerraform(struct.sqlServer),
        teradata: quicksightDataSourceParametersTeradataToTerraform(struct.teradata),
        twitter: quicksightDataSourceParametersTwitterToTerraform(struct.twitter),
    };
}
exports.quicksightDataSourceParametersToTerraform = quicksightDataSourceParametersToTerraform;
class QuicksightDataSourceParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // amazon_elasticsearch - computed: false, optional: true, required: false
        this._amazonElasticsearch = new QuicksightDataSourceParametersAmazonElasticsearchOutputReference(this, "amazon_elasticsearch");
        // athena - computed: false, optional: true, required: false
        this._athena = new QuicksightDataSourceParametersAthenaOutputReference(this, "athena");
        // aurora - computed: false, optional: true, required: false
        this._aurora = new QuicksightDataSourceParametersAuroraOutputReference(this, "aurora");
        // aurora_postgresql - computed: false, optional: true, required: false
        this._auroraPostgresql = new QuicksightDataSourceParametersAuroraPostgresqlOutputReference(this, "aurora_postgresql");
        // aws_iot_analytics - computed: false, optional: true, required: false
        this._awsIotAnalytics = new QuicksightDataSourceParametersAwsIotAnalyticsOutputReference(this, "aws_iot_analytics");
        // jira - computed: false, optional: true, required: false
        this._jira = new QuicksightDataSourceParametersJiraOutputReference(this, "jira");
        // maria_db - computed: false, optional: true, required: false
        this._mariaDb = new QuicksightDataSourceParametersMariaDbOutputReference(this, "maria_db");
        // mysql - computed: false, optional: true, required: false
        this._mysql = new QuicksightDataSourceParametersMysqlOutputReference(this, "mysql");
        // oracle - computed: false, optional: true, required: false
        this._oracle = new QuicksightDataSourceParametersOracleOutputReference(this, "oracle");
        // postgresql - computed: false, optional: true, required: false
        this._postgresql = new QuicksightDataSourceParametersPostgresqlOutputReference(this, "postgresql");
        // presto - computed: false, optional: true, required: false
        this._presto = new QuicksightDataSourceParametersPrestoOutputReference(this, "presto");
        // rds - computed: false, optional: true, required: false
        this._rds = new QuicksightDataSourceParametersRdsOutputReference(this, "rds");
        // redshift - computed: false, optional: true, required: false
        this._redshift = new QuicksightDataSourceParametersRedshiftOutputReference(this, "redshift");
        // s3 - computed: false, optional: true, required: false
        this._s3 = new QuicksightDataSourceParametersS3OutputReference(this, "s3");
        // service_now - computed: false, optional: true, required: false
        this._serviceNow = new QuicksightDataSourceParametersServiceNowOutputReference(this, "service_now");
        // snowflake - computed: false, optional: true, required: false
        this._snowflake = new QuicksightDataSourceParametersSnowflakeOutputReference(this, "snowflake");
        // spark - computed: false, optional: true, required: false
        this._spark = new QuicksightDataSourceParametersSparkOutputReference(this, "spark");
        // sql_server - computed: false, optional: true, required: false
        this._sqlServer = new QuicksightDataSourceParametersSqlServerOutputReference(this, "sql_server");
        // teradata - computed: false, optional: true, required: false
        this._teradata = new QuicksightDataSourceParametersTeradataOutputReference(this, "teradata");
        // twitter - computed: false, optional: true, required: false
        this._twitter = new QuicksightDataSourceParametersTwitterOutputReference(this, "twitter");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._amazonElasticsearch?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.amazonElasticsearch = this._amazonElasticsearch?.internalValue;
        }
        if (this._athena?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.athena = this._athena?.internalValue;
        }
        if (this._aurora?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.aurora = this._aurora?.internalValue;
        }
        if (this._auroraPostgresql?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.auroraPostgresql = this._auroraPostgresql?.internalValue;
        }
        if (this._awsIotAnalytics?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.awsIotAnalytics = this._awsIotAnalytics?.internalValue;
        }
        if (this._jira?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.jira = this._jira?.internalValue;
        }
        if (this._mariaDb?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mariaDb = this._mariaDb?.internalValue;
        }
        if (this._mysql?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysql = this._mysql?.internalValue;
        }
        if (this._oracle?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oracle = this._oracle?.internalValue;
        }
        if (this._postgresql?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postgresql = this._postgresql?.internalValue;
        }
        if (this._presto?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.presto = this._presto?.internalValue;
        }
        if (this._rds?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rds = this._rds?.internalValue;
        }
        if (this._redshift?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.redshift = this._redshift?.internalValue;
        }
        if (this._s3?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3 = this._s3?.internalValue;
        }
        if (this._serviceNow?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceNow = this._serviceNow?.internalValue;
        }
        if (this._snowflake?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.snowflake = this._snowflake?.internalValue;
        }
        if (this._spark?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.spark = this._spark?.internalValue;
        }
        if (this._sqlServer?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sqlServer = this._sqlServer?.internalValue;
        }
        if (this._teradata?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.teradata = this._teradata?.internalValue;
        }
        if (this._twitter?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.twitter = this._twitter?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._amazonElasticsearch.internalValue = undefined;
            this._athena.internalValue = undefined;
            this._aurora.internalValue = undefined;
            this._auroraPostgresql.internalValue = undefined;
            this._awsIotAnalytics.internalValue = undefined;
            this._jira.internalValue = undefined;
            this._mariaDb.internalValue = undefined;
            this._mysql.internalValue = undefined;
            this._oracle.internalValue = undefined;
            this._postgresql.internalValue = undefined;
            this._presto.internalValue = undefined;
            this._rds.internalValue = undefined;
            this._redshift.internalValue = undefined;
            this._s3.internalValue = undefined;
            this._serviceNow.internalValue = undefined;
            this._snowflake.internalValue = undefined;
            this._spark.internalValue = undefined;
            this._sqlServer.internalValue = undefined;
            this._teradata.internalValue = undefined;
            this._twitter.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._amazonElasticsearch.internalValue = value.amazonElasticsearch;
            this._athena.internalValue = value.athena;
            this._aurora.internalValue = value.aurora;
            this._auroraPostgresql.internalValue = value.auroraPostgresql;
            this._awsIotAnalytics.internalValue = value.awsIotAnalytics;
            this._jira.internalValue = value.jira;
            this._mariaDb.internalValue = value.mariaDb;
            this._mysql.internalValue = value.mysql;
            this._oracle.internalValue = value.oracle;
            this._postgresql.internalValue = value.postgresql;
            this._presto.internalValue = value.presto;
            this._rds.internalValue = value.rds;
            this._redshift.internalValue = value.redshift;
            this._s3.internalValue = value.s3;
            this._serviceNow.internalValue = value.serviceNow;
            this._snowflake.internalValue = value.snowflake;
            this._spark.internalValue = value.spark;
            this._sqlServer.internalValue = value.sqlServer;
            this._teradata.internalValue = value.teradata;
            this._twitter.internalValue = value.twitter;
        }
    }
    get amazonElasticsearch() {
        return this._amazonElasticsearch;
    }
    putAmazonElasticsearch(value) {
        this._amazonElasticsearch.internalValue = value;
    }
    resetAmazonElasticsearch() {
        this._amazonElasticsearch.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get amazonElasticsearchInput() {
        return this._amazonElasticsearch.internalValue;
    }
    get athena() {
        return this._athena;
    }
    putAthena(value) {
        this._athena.internalValue = value;
    }
    resetAthena() {
        this._athena.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get athenaInput() {
        return this._athena.internalValue;
    }
    get aurora() {
        return this._aurora;
    }
    putAurora(value) {
        this._aurora.internalValue = value;
    }
    resetAurora() {
        this._aurora.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get auroraInput() {
        return this._aurora.internalValue;
    }
    get auroraPostgresql() {
        return this._auroraPostgresql;
    }
    putAuroraPostgresql(value) {
        this._auroraPostgresql.internalValue = value;
    }
    resetAuroraPostgresql() {
        this._auroraPostgresql.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get auroraPostgresqlInput() {
        return this._auroraPostgresql.internalValue;
    }
    get awsIotAnalytics() {
        return this._awsIotAnalytics;
    }
    putAwsIotAnalytics(value) {
        this._awsIotAnalytics.internalValue = value;
    }
    resetAwsIotAnalytics() {
        this._awsIotAnalytics.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get awsIotAnalyticsInput() {
        return this._awsIotAnalytics.internalValue;
    }
    get jira() {
        return this._jira;
    }
    putJira(value) {
        this._jira.internalValue = value;
    }
    resetJira() {
        this._jira.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jiraInput() {
        return this._jira.internalValue;
    }
    get mariaDb() {
        return this._mariaDb;
    }
    putMariaDb(value) {
        this._mariaDb.internalValue = value;
    }
    resetMariaDb() {
        this._mariaDb.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mariaDbInput() {
        return this._mariaDb.internalValue;
    }
    get mysql() {
        return this._mysql;
    }
    putMysql(value) {
        this._mysql.internalValue = value;
    }
    resetMysql() {
        this._mysql.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlInput() {
        return this._mysql.internalValue;
    }
    get oracle() {
        return this._oracle;
    }
    putOracle(value) {
        this._oracle.internalValue = value;
    }
    resetOracle() {
        this._oracle.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oracleInput() {
        return this._oracle.internalValue;
    }
    get postgresql() {
        return this._postgresql;
    }
    putPostgresql(value) {
        this._postgresql.internalValue = value;
    }
    resetPostgresql() {
        this._postgresql.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postgresqlInput() {
        return this._postgresql.internalValue;
    }
    get presto() {
        return this._presto;
    }
    putPresto(value) {
        this._presto.internalValue = value;
    }
    resetPresto() {
        this._presto.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prestoInput() {
        return this._presto.internalValue;
    }
    get rds() {
        return this._rds;
    }
    putRds(value) {
        this._rds.internalValue = value;
    }
    resetRds() {
        this._rds.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rdsInput() {
        return this._rds.internalValue;
    }
    get redshift() {
        return this._redshift;
    }
    putRedshift(value) {
        this._redshift.internalValue = value;
    }
    resetRedshift() {
        this._redshift.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redshiftInput() {
        return this._redshift.internalValue;
    }
    get s3() {
        return this._s3;
    }
    putS3(value) {
        this._s3.internalValue = value;
    }
    resetS3() {
        this._s3.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3Input() {
        return this._s3.internalValue;
    }
    get serviceNow() {
        return this._serviceNow;
    }
    putServiceNow(value) {
        this._serviceNow.internalValue = value;
    }
    resetServiceNow() {
        this._serviceNow.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNowInput() {
        return this._serviceNow.internalValue;
    }
    get snowflake() {
        return this._snowflake;
    }
    putSnowflake(value) {
        this._snowflake.internalValue = value;
    }
    resetSnowflake() {
        this._snowflake.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snowflakeInput() {
        return this._snowflake.internalValue;
    }
    get spark() {
        return this._spark;
    }
    putSpark(value) {
        this._spark.internalValue = value;
    }
    resetSpark() {
        this._spark.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sparkInput() {
        return this._spark.internalValue;
    }
    get sqlServer() {
        return this._sqlServer;
    }
    putSqlServer(value) {
        this._sqlServer.internalValue = value;
    }
    resetSqlServer() {
        this._sqlServer.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sqlServerInput() {
        return this._sqlServer.internalValue;
    }
    get teradata() {
        return this._teradata;
    }
    putTeradata(value) {
        this._teradata.internalValue = value;
    }
    resetTeradata() {
        this._teradata.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get teradataInput() {
        return this._teradata.internalValue;
    }
    get twitter() {
        return this._twitter;
    }
    putTwitter(value) {
        this._twitter.internalValue = value;
    }
    resetTwitter() {
        this._twitter.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get twitterInput() {
        return this._twitter.internalValue;
    }
}
exports.QuicksightDataSourceParametersOutputReference = QuicksightDataSourceParametersOutputReference;
_z = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceParametersOutputReference[_z] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceParametersOutputReference", version: "10.0.12" };
function quicksightDataSourcePermissionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        actions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.actions),
        principal: cdktf.stringToTerraform(struct.principal),
    };
}
exports.quicksightDataSourcePermissionToTerraform = quicksightDataSourcePermissionToTerraform;
class QuicksightDataSourcePermissionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._actions !== undefined) {
            hasAnyValues = true;
            internalValueResult.actions = this._actions;
        }
        if (this._principal !== undefined) {
            hasAnyValues = true;
            internalValueResult.principal = this._principal;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._actions = undefined;
            this._principal = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._actions = value.actions;
            this._principal = value.principal;
        }
    }
    get actions() {
        return cdktf.Fn.tolist(this.getListAttribute('actions'));
    }
    set actions(value) {
        this._actions = value;
    }
    // Temporarily expose input value. Use with caution.
    get actionsInput() {
        return this._actions;
    }
    get principal() {
        return this.getStringAttribute('principal');
    }
    set principal(value) {
        this._principal = value;
    }
    // Temporarily expose input value. Use with caution.
    get principalInput() {
        return this._principal;
    }
}
exports.QuicksightDataSourcePermissionOutputReference = QuicksightDataSourcePermissionOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
QuicksightDataSourcePermissionOutputReference[_0] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourcePermissionOutputReference", version: "10.0.12" };
class QuicksightDataSourcePermissionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new QuicksightDataSourcePermissionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.QuicksightDataSourcePermissionList = QuicksightDataSourcePermissionList;
_1 = JSII_RTTI_SYMBOL_1;
QuicksightDataSourcePermissionList[_1] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourcePermissionList", version: "10.0.12" };
function quicksightDataSourceSslPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disable_ssl: cdktf.booleanToTerraform(struct.disableSsl),
    };
}
exports.quicksightDataSourceSslPropertiesToTerraform = quicksightDataSourceSslPropertiesToTerraform;
class QuicksightDataSourceSslPropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disableSsl !== undefined) {
            hasAnyValues = true;
            internalValueResult.disableSsl = this._disableSsl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._disableSsl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._disableSsl = value.disableSsl;
        }
    }
    get disableSsl() {
        return this.getBooleanAttribute('disable_ssl');
    }
    set disableSsl(value) {
        this._disableSsl = value;
    }
    // Temporarily expose input value. Use with caution.
    get disableSslInput() {
        return this._disableSsl;
    }
}
exports.QuicksightDataSourceSslPropertiesOutputReference = QuicksightDataSourceSslPropertiesOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceSslPropertiesOutputReference[_2] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceSslPropertiesOutputReference", version: "10.0.12" };
function quicksightDataSourceVpcConnectionPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        vpc_connection_arn: cdktf.stringToTerraform(struct.vpcConnectionArn),
    };
}
exports.quicksightDataSourceVpcConnectionPropertiesToTerraform = quicksightDataSourceVpcConnectionPropertiesToTerraform;
class QuicksightDataSourceVpcConnectionPropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._vpcConnectionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.vpcConnectionArn = this._vpcConnectionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._vpcConnectionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._vpcConnectionArn = value.vpcConnectionArn;
        }
    }
    get vpcConnectionArn() {
        return this.getStringAttribute('vpc_connection_arn');
    }
    set vpcConnectionArn(value) {
        this._vpcConnectionArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get vpcConnectionArnInput() {
        return this._vpcConnectionArn;
    }
}
exports.QuicksightDataSourceVpcConnectionPropertiesOutputReference = QuicksightDataSourceVpcConnectionPropertiesOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
QuicksightDataSourceVpcConnectionPropertiesOutputReference[_3] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSourceVpcConnectionPropertiesOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/quicksight_data_source aws_quicksight_data_source}
*/
class QuicksightDataSource extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/quicksight_data_source aws_quicksight_data_source} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options QuicksightDataSourceConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_quicksight_data_source',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // credentials - computed: false, optional: true, required: false
        this._credentials = new QuicksightDataSourceCredentialsOutputReference(this, "credentials");
        // parameters - computed: false, optional: false, required: true
        this._parameters = new QuicksightDataSourceParametersOutputReference(this, "parameters");
        // permission - computed: false, optional: true, required: false
        this._permission = new QuicksightDataSourcePermissionList(this, "permission", true);
        // ssl_properties - computed: false, optional: true, required: false
        this._sslProperties = new QuicksightDataSourceSslPropertiesOutputReference(this, "ssl_properties");
        // vpc_connection_properties - computed: false, optional: true, required: false
        this._vpcConnectionProperties = new QuicksightDataSourceVpcConnectionPropertiesOutputReference(this, "vpc_connection_properties");
        this._awsAccountId = config.awsAccountId;
        this._dataSourceId = config.dataSourceId;
        this._id = config.id;
        this._name = config.name;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._type = config.type;
        this._credentials.internalValue = config.credentials;
        this._parameters.internalValue = config.parameters;
        this._permission.internalValue = config.permission;
        this._sslProperties.internalValue = config.sslProperties;
        this._vpcConnectionProperties.internalValue = config.vpcConnectionProperties;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get awsAccountId() {
        return this.getStringAttribute('aws_account_id');
    }
    set awsAccountId(value) {
        this._awsAccountId = value;
    }
    resetAwsAccountId() {
        this._awsAccountId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get awsAccountIdInput() {
        return this._awsAccountId;
    }
    get dataSourceId() {
        return this.getStringAttribute('data_source_id');
    }
    set dataSourceId(value) {
        this._dataSourceId = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataSourceIdInput() {
        return this._dataSourceId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get credentials() {
        return this._credentials;
    }
    putCredentials(value) {
        this._credentials.internalValue = value;
    }
    resetCredentials() {
        this._credentials.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get credentialsInput() {
        return this._credentials.internalValue;
    }
    get parameters() {
        return this._parameters;
    }
    putParameters(value) {
        this._parameters.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters.internalValue;
    }
    get permission() {
        return this._permission;
    }
    putPermission(value) {
        this._permission.internalValue = value;
    }
    resetPermission() {
        this._permission.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionInput() {
        return this._permission.internalValue;
    }
    get sslProperties() {
        return this._sslProperties;
    }
    putSslProperties(value) {
        this._sslProperties.internalValue = value;
    }
    resetSslProperties() {
        this._sslProperties.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sslPropertiesInput() {
        return this._sslProperties.internalValue;
    }
    get vpcConnectionProperties() {
        return this._vpcConnectionProperties;
    }
    putVpcConnectionProperties(value) {
        this._vpcConnectionProperties.internalValue = value;
    }
    resetVpcConnectionProperties() {
        this._vpcConnectionProperties.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcConnectionPropertiesInput() {
        return this._vpcConnectionProperties.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            aws_account_id: cdktf.stringToTerraform(this._awsAccountId),
            data_source_id: cdktf.stringToTerraform(this._dataSourceId),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            type: cdktf.stringToTerraform(this._type),
            credentials: quicksightDataSourceCredentialsToTerraform(this._credentials.internalValue),
            parameters: quicksightDataSourceParametersToTerraform(this._parameters.internalValue),
            permission: cdktf.listMapper(quicksightDataSourcePermissionToTerraform, true)(this._permission.internalValue),
            ssl_properties: quicksightDataSourceSslPropertiesToTerraform(this._sslProperties.internalValue),
            vpc_connection_properties: quicksightDataSourceVpcConnectionPropertiesToTerraform(this._vpcConnectionProperties.internalValue),
        };
    }
}
exports.QuicksightDataSource = QuicksightDataSource;
_4 = JSII_RTTI_SYMBOL_1;
QuicksightDataSource[_4] = { fqn: "@cdktf/provider-aws.quicksightDataSource.QuicksightDataSource", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
QuicksightDataSource.tfResourceType = "aws_quicksight_data_source";
//# sourceMappingURL=data:application/json;base64,