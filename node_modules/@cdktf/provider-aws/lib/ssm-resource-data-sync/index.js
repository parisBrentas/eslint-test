"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SsmResourceDataSync = exports.SsmResourceDataSyncS3DestinationOutputReference = exports.ssmResourceDataSyncS3DestinationToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function ssmResourceDataSyncS3DestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
        prefix: cdktf.stringToTerraform(struct.prefix),
        region: cdktf.stringToTerraform(struct.region),
        sync_format: cdktf.stringToTerraform(struct.syncFormat),
    };
}
exports.ssmResourceDataSyncS3DestinationToTerraform = ssmResourceDataSyncS3DestinationToTerraform;
class SsmResourceDataSyncS3DestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._kmsKeyArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyArn = this._kmsKeyArn;
        }
        if (this._prefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefix = this._prefix;
        }
        if (this._region !== undefined) {
            hasAnyValues = true;
            internalValueResult.region = this._region;
        }
        if (this._syncFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.syncFormat = this._syncFormat;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._kmsKeyArn = undefined;
            this._prefix = undefined;
            this._region = undefined;
            this._syncFormat = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._kmsKeyArn = value.kmsKeyArn;
            this._prefix = value.prefix;
            this._region = value.region;
            this._syncFormat = value.syncFormat;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
    get prefix() {
        return this.getStringAttribute('prefix');
    }
    set prefix(value) {
        this._prefix = value;
    }
    resetPrefix() {
        this._prefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixInput() {
        return this._prefix;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    get syncFormat() {
        return this.getStringAttribute('sync_format');
    }
    set syncFormat(value) {
        this._syncFormat = value;
    }
    resetSyncFormat() {
        this._syncFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncFormatInput() {
        return this._syncFormat;
    }
}
exports.SsmResourceDataSyncS3DestinationOutputReference = SsmResourceDataSyncS3DestinationOutputReference;
_a = JSII_RTTI_SYMBOL_1;
SsmResourceDataSyncS3DestinationOutputReference[_a] = { fqn: "@cdktf/provider-aws.ssmResourceDataSync.SsmResourceDataSyncS3DestinationOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/ssm_resource_data_sync aws_ssm_resource_data_sync}
*/
class SsmResourceDataSync extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/ssm_resource_data_sync aws_ssm_resource_data_sync} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SsmResourceDataSyncConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_ssm_resource_data_sync',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // s3_destination - computed: false, optional: false, required: true
        this._s3Destination = new SsmResourceDataSyncS3DestinationOutputReference(this, "s3_destination");
        this._id = config.id;
        this._name = config.name;
        this._s3Destination.internalValue = config.s3Destination;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get s3Destination() {
        return this._s3Destination;
    }
    putS3Destination(value) {
        this._s3Destination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3DestinationInput() {
        return this._s3Destination.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            s3_destination: ssmResourceDataSyncS3DestinationToTerraform(this._s3Destination.internalValue),
        };
    }
}
exports.SsmResourceDataSync = SsmResourceDataSync;
_b = JSII_RTTI_SYMBOL_1;
SsmResourceDataSync[_b] = { fqn: "@cdktf/provider-aws.ssmResourceDataSync.SsmResourceDataSync", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
SsmResourceDataSync.tfResourceType = "aws_ssm_resource_data_sync";
//# sourceMappingURL=data:application/json;base64,