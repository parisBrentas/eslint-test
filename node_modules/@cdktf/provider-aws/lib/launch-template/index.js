"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LaunchTemplate = exports.LaunchTemplateTagSpecificationsList = exports.LaunchTemplateTagSpecificationsOutputReference = exports.launchTemplateTagSpecificationsToTerraform = exports.LaunchTemplatePrivateDnsNameOptionsOutputReference = exports.launchTemplatePrivateDnsNameOptionsToTerraform = exports.LaunchTemplatePlacementOutputReference = exports.launchTemplatePlacementToTerraform = exports.LaunchTemplateNetworkInterfacesList = exports.LaunchTemplateNetworkInterfacesOutputReference = exports.launchTemplateNetworkInterfacesToTerraform = exports.LaunchTemplateMonitoringOutputReference = exports.launchTemplateMonitoringToTerraform = exports.LaunchTemplateMetadataOptionsOutputReference = exports.launchTemplateMetadataOptionsToTerraform = exports.LaunchTemplateMaintenanceOptionsOutputReference = exports.launchTemplateMaintenanceOptionsToTerraform = exports.LaunchTemplateLicenseSpecificationList = exports.LaunchTemplateLicenseSpecificationOutputReference = exports.launchTemplateLicenseSpecificationToTerraform = exports.LaunchTemplateInstanceRequirementsOutputReference = exports.launchTemplateInstanceRequirementsToTerraform = exports.LaunchTemplateInstanceRequirementsVcpuCountOutputReference = exports.launchTemplateInstanceRequirementsVcpuCountToTerraform = exports.LaunchTemplateInstanceRequirementsTotalLocalStorageGbOutputReference = exports.launchTemplateInstanceRequirementsTotalLocalStorageGbToTerraform = exports.LaunchTemplateInstanceRequirementsNetworkInterfaceCountOutputReference = exports.launchTemplateInstanceRequirementsNetworkInterfaceCountToTerraform = exports.LaunchTemplateInstanceRequirementsMemoryMibOutputReference = exports.launchTemplateInstanceRequirementsMemoryMibToTerraform = exports.LaunchTemplateInstanceRequirementsMemoryGibPerVcpuOutputReference = exports.launchTemplateInstanceRequirementsMemoryGibPerVcpuToTerraform = exports.LaunchTemplateInstanceRequirementsBaselineEbsBandwidthMbpsOutputReference = exports.launchTemplateInstanceRequirementsBaselineEbsBandwidthMbpsToTerraform = exports.LaunchTemplateInstanceRequirementsAcceleratorTotalMemoryMibOutputReference = exports.launchTemplateInstanceRequirementsAcceleratorTotalMemoryMibToTerraform = exports.LaunchTemplateInstanceRequirementsAcceleratorCountOutputReference = exports.launchTemplateInstanceRequirementsAcceleratorCountToTerraform = exports.LaunchTemplateInstanceMarketOptionsOutputReference = exports.launchTemplateInstanceMarketOptionsToTerraform = exports.LaunchTemplateInstanceMarketOptionsSpotOptionsOutputReference = exports.launchTemplateInstanceMarketOptionsSpotOptionsToTerraform = exports.LaunchTemplateIamInstanceProfileOutputReference = exports.launchTemplateIamInstanceProfileToTerraform = exports.LaunchTemplateHibernationOptionsOutputReference = exports.launchTemplateHibernationOptionsToTerraform = exports.LaunchTemplateEnclaveOptionsOutputReference = exports.launchTemplateEnclaveOptionsToTerraform = exports.LaunchTemplateElasticInferenceAcceleratorOutputReference = exports.launchTemplateElasticInferenceAcceleratorToTerraform = exports.LaunchTemplateElasticGpuSpecificationsList = exports.LaunchTemplateElasticGpuSpecificationsOutputReference = exports.launchTemplateElasticGpuSpecificationsToTerraform = exports.LaunchTemplateCreditSpecificationOutputReference = exports.launchTemplateCreditSpecificationToTerraform = exports.LaunchTemplateCpuOptionsOutputReference = exports.launchTemplateCpuOptionsToTerraform = exports.LaunchTemplateCapacityReservationSpecificationOutputReference = exports.launchTemplateCapacityReservationSpecificationToTerraform = exports.LaunchTemplateCapacityReservationSpecificationCapacityReservationTargetOutputReference = exports.launchTemplateCapacityReservationSpecificationCapacityReservationTargetToTerraform = exports.LaunchTemplateBlockDeviceMappingsList = exports.LaunchTemplateBlockDeviceMappingsOutputReference = exports.launchTemplateBlockDeviceMappingsToTerraform = exports.LaunchTemplateBlockDeviceMappingsEbsOutputReference = exports.launchTemplateBlockDeviceMappingsEbsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function launchTemplateBlockDeviceMappingsEbsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        delete_on_termination: cdktf.stringToTerraform(struct.deleteOnTermination),
        encrypted: cdktf.stringToTerraform(struct.encrypted),
        iops: cdktf.numberToTerraform(struct.iops),
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        snapshot_id: cdktf.stringToTerraform(struct.snapshotId),
        throughput: cdktf.numberToTerraform(struct.throughput),
        volume_size: cdktf.numberToTerraform(struct.volumeSize),
        volume_type: cdktf.stringToTerraform(struct.volumeType),
    };
}
exports.launchTemplateBlockDeviceMappingsEbsToTerraform = launchTemplateBlockDeviceMappingsEbsToTerraform;
class LaunchTemplateBlockDeviceMappingsEbsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deleteOnTermination !== undefined) {
            hasAnyValues = true;
            internalValueResult.deleteOnTermination = this._deleteOnTermination;
        }
        if (this._encrypted !== undefined) {
            hasAnyValues = true;
            internalValueResult.encrypted = this._encrypted;
        }
        if (this._iops !== undefined) {
            hasAnyValues = true;
            internalValueResult.iops = this._iops;
        }
        if (this._kmsKeyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyId = this._kmsKeyId;
        }
        if (this._snapshotId !== undefined) {
            hasAnyValues = true;
            internalValueResult.snapshotId = this._snapshotId;
        }
        if (this._throughput !== undefined) {
            hasAnyValues = true;
            internalValueResult.throughput = this._throughput;
        }
        if (this._volumeSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumeSize = this._volumeSize;
        }
        if (this._volumeType !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumeType = this._volumeType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._deleteOnTermination = undefined;
            this._encrypted = undefined;
            this._iops = undefined;
            this._kmsKeyId = undefined;
            this._snapshotId = undefined;
            this._throughput = undefined;
            this._volumeSize = undefined;
            this._volumeType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._deleteOnTermination = value.deleteOnTermination;
            this._encrypted = value.encrypted;
            this._iops = value.iops;
            this._kmsKeyId = value.kmsKeyId;
            this._snapshotId = value.snapshotId;
            this._throughput = value.throughput;
            this._volumeSize = value.volumeSize;
            this._volumeType = value.volumeType;
        }
    }
    get deleteOnTermination() {
        return this.getStringAttribute('delete_on_termination');
    }
    set deleteOnTermination(value) {
        this._deleteOnTermination = value;
    }
    resetDeleteOnTermination() {
        this._deleteOnTermination = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteOnTerminationInput() {
        return this._deleteOnTermination;
    }
    get encrypted() {
        return this.getStringAttribute('encrypted');
    }
    set encrypted(value) {
        this._encrypted = value;
    }
    resetEncrypted() {
        this._encrypted = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptedInput() {
        return this._encrypted;
    }
    get iops() {
        return this.getNumberAttribute('iops');
    }
    set iops(value) {
        this._iops = value;
    }
    resetIops() {
        this._iops = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iopsInput() {
        return this._iops;
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    get snapshotId() {
        return this.getStringAttribute('snapshot_id');
    }
    set snapshotId(value) {
        this._snapshotId = value;
    }
    resetSnapshotId() {
        this._snapshotId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snapshotIdInput() {
        return this._snapshotId;
    }
    get throughput() {
        return this.getNumberAttribute('throughput');
    }
    set throughput(value) {
        this._throughput = value;
    }
    resetThroughput() {
        this._throughput = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get throughputInput() {
        return this._throughput;
    }
    get volumeSize() {
        return this.getNumberAttribute('volume_size');
    }
    set volumeSize(value) {
        this._volumeSize = value;
    }
    resetVolumeSize() {
        this._volumeSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumeSizeInput() {
        return this._volumeSize;
    }
    get volumeType() {
        return this.getStringAttribute('volume_type');
    }
    set volumeType(value) {
        this._volumeType = value;
    }
    resetVolumeType() {
        this._volumeType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumeTypeInput() {
        return this._volumeType;
    }
}
exports.LaunchTemplateBlockDeviceMappingsEbsOutputReference = LaunchTemplateBlockDeviceMappingsEbsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
LaunchTemplateBlockDeviceMappingsEbsOutputReference[_a] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateBlockDeviceMappingsEbsOutputReference", version: "10.0.12" };
function launchTemplateBlockDeviceMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        device_name: cdktf.stringToTerraform(struct.deviceName),
        no_device: cdktf.stringToTerraform(struct.noDevice),
        virtual_name: cdktf.stringToTerraform(struct.virtualName),
        ebs: launchTemplateBlockDeviceMappingsEbsToTerraform(struct.ebs),
    };
}
exports.launchTemplateBlockDeviceMappingsToTerraform = launchTemplateBlockDeviceMappingsToTerraform;
class LaunchTemplateBlockDeviceMappingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // ebs - computed: false, optional: true, required: false
        this._ebs = new LaunchTemplateBlockDeviceMappingsEbsOutputReference(this, "ebs");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceName = this._deviceName;
        }
        if (this._noDevice !== undefined) {
            hasAnyValues = true;
            internalValueResult.noDevice = this._noDevice;
        }
        if (this._virtualName !== undefined) {
            hasAnyValues = true;
            internalValueResult.virtualName = this._virtualName;
        }
        if (this._ebs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebs = this._ebs?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._deviceName = undefined;
            this._noDevice = undefined;
            this._virtualName = undefined;
            this._ebs.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._deviceName = value.deviceName;
            this._noDevice = value.noDevice;
            this._virtualName = value.virtualName;
            this._ebs.internalValue = value.ebs;
        }
    }
    get deviceName() {
        return this.getStringAttribute('device_name');
    }
    set deviceName(value) {
        this._deviceName = value;
    }
    resetDeviceName() {
        this._deviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deviceNameInput() {
        return this._deviceName;
    }
    get noDevice() {
        return this.getStringAttribute('no_device');
    }
    set noDevice(value) {
        this._noDevice = value;
    }
    resetNoDevice() {
        this._noDevice = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get noDeviceInput() {
        return this._noDevice;
    }
    get virtualName() {
        return this.getStringAttribute('virtual_name');
    }
    set virtualName(value) {
        this._virtualName = value;
    }
    resetVirtualName() {
        this._virtualName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get virtualNameInput() {
        return this._virtualName;
    }
    get ebs() {
        return this._ebs;
    }
    putEbs(value) {
        this._ebs.internalValue = value;
    }
    resetEbs() {
        this._ebs.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebsInput() {
        return this._ebs.internalValue;
    }
}
exports.LaunchTemplateBlockDeviceMappingsOutputReference = LaunchTemplateBlockDeviceMappingsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
LaunchTemplateBlockDeviceMappingsOutputReference[_b] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateBlockDeviceMappingsOutputReference", version: "10.0.12" };
class LaunchTemplateBlockDeviceMappingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new LaunchTemplateBlockDeviceMappingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.LaunchTemplateBlockDeviceMappingsList = LaunchTemplateBlockDeviceMappingsList;
_c = JSII_RTTI_SYMBOL_1;
LaunchTemplateBlockDeviceMappingsList[_c] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateBlockDeviceMappingsList", version: "10.0.12" };
function launchTemplateCapacityReservationSpecificationCapacityReservationTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        capacity_reservation_id: cdktf.stringToTerraform(struct.capacityReservationId),
        capacity_reservation_resource_group_arn: cdktf.stringToTerraform(struct.capacityReservationResourceGroupArn),
    };
}
exports.launchTemplateCapacityReservationSpecificationCapacityReservationTargetToTerraform = launchTemplateCapacityReservationSpecificationCapacityReservationTargetToTerraform;
class LaunchTemplateCapacityReservationSpecificationCapacityReservationTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._capacityReservationId !== undefined) {
            hasAnyValues = true;
            internalValueResult.capacityReservationId = this._capacityReservationId;
        }
        if (this._capacityReservationResourceGroupArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.capacityReservationResourceGroupArn = this._capacityReservationResourceGroupArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._capacityReservationId = undefined;
            this._capacityReservationResourceGroupArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._capacityReservationId = value.capacityReservationId;
            this._capacityReservationResourceGroupArn = value.capacityReservationResourceGroupArn;
        }
    }
    get capacityReservationId() {
        return this.getStringAttribute('capacity_reservation_id');
    }
    set capacityReservationId(value) {
        this._capacityReservationId = value;
    }
    resetCapacityReservationId() {
        this._capacityReservationId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get capacityReservationIdInput() {
        return this._capacityReservationId;
    }
    get capacityReservationResourceGroupArn() {
        return this.getStringAttribute('capacity_reservation_resource_group_arn');
    }
    set capacityReservationResourceGroupArn(value) {
        this._capacityReservationResourceGroupArn = value;
    }
    resetCapacityReservationResourceGroupArn() {
        this._capacityReservationResourceGroupArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get capacityReservationResourceGroupArnInput() {
        return this._capacityReservationResourceGroupArn;
    }
}
exports.LaunchTemplateCapacityReservationSpecificationCapacityReservationTargetOutputReference = LaunchTemplateCapacityReservationSpecificationCapacityReservationTargetOutputReference;
_d = JSII_RTTI_SYMBOL_1;
LaunchTemplateCapacityReservationSpecificationCapacityReservationTargetOutputReference[_d] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateCapacityReservationSpecificationCapacityReservationTargetOutputReference", version: "10.0.12" };
function launchTemplateCapacityReservationSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        capacity_reservation_preference: cdktf.stringToTerraform(struct.capacityReservationPreference),
        capacity_reservation_target: launchTemplateCapacityReservationSpecificationCapacityReservationTargetToTerraform(struct.capacityReservationTarget),
    };
}
exports.launchTemplateCapacityReservationSpecificationToTerraform = launchTemplateCapacityReservationSpecificationToTerraform;
class LaunchTemplateCapacityReservationSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // capacity_reservation_target - computed: false, optional: true, required: false
        this._capacityReservationTarget = new LaunchTemplateCapacityReservationSpecificationCapacityReservationTargetOutputReference(this, "capacity_reservation_target");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._capacityReservationPreference !== undefined) {
            hasAnyValues = true;
            internalValueResult.capacityReservationPreference = this._capacityReservationPreference;
        }
        if (this._capacityReservationTarget?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.capacityReservationTarget = this._capacityReservationTarget?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._capacityReservationPreference = undefined;
            this._capacityReservationTarget.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._capacityReservationPreference = value.capacityReservationPreference;
            this._capacityReservationTarget.internalValue = value.capacityReservationTarget;
        }
    }
    get capacityReservationPreference() {
        return this.getStringAttribute('capacity_reservation_preference');
    }
    set capacityReservationPreference(value) {
        this._capacityReservationPreference = value;
    }
    resetCapacityReservationPreference() {
        this._capacityReservationPreference = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get capacityReservationPreferenceInput() {
        return this._capacityReservationPreference;
    }
    get capacityReservationTarget() {
        return this._capacityReservationTarget;
    }
    putCapacityReservationTarget(value) {
        this._capacityReservationTarget.internalValue = value;
    }
    resetCapacityReservationTarget() {
        this._capacityReservationTarget.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get capacityReservationTargetInput() {
        return this._capacityReservationTarget.internalValue;
    }
}
exports.LaunchTemplateCapacityReservationSpecificationOutputReference = LaunchTemplateCapacityReservationSpecificationOutputReference;
_e = JSII_RTTI_SYMBOL_1;
LaunchTemplateCapacityReservationSpecificationOutputReference[_e] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateCapacityReservationSpecificationOutputReference", version: "10.0.12" };
function launchTemplateCpuOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        core_count: cdktf.numberToTerraform(struct.coreCount),
        threads_per_core: cdktf.numberToTerraform(struct.threadsPerCore),
    };
}
exports.launchTemplateCpuOptionsToTerraform = launchTemplateCpuOptionsToTerraform;
class LaunchTemplateCpuOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._coreCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.coreCount = this._coreCount;
        }
        if (this._threadsPerCore !== undefined) {
            hasAnyValues = true;
            internalValueResult.threadsPerCore = this._threadsPerCore;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._coreCount = undefined;
            this._threadsPerCore = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._coreCount = value.coreCount;
            this._threadsPerCore = value.threadsPerCore;
        }
    }
    get coreCount() {
        return this.getNumberAttribute('core_count');
    }
    set coreCount(value) {
        this._coreCount = value;
    }
    resetCoreCount() {
        this._coreCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get coreCountInput() {
        return this._coreCount;
    }
    get threadsPerCore() {
        return this.getNumberAttribute('threads_per_core');
    }
    set threadsPerCore(value) {
        this._threadsPerCore = value;
    }
    resetThreadsPerCore() {
        this._threadsPerCore = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get threadsPerCoreInput() {
        return this._threadsPerCore;
    }
}
exports.LaunchTemplateCpuOptionsOutputReference = LaunchTemplateCpuOptionsOutputReference;
_f = JSII_RTTI_SYMBOL_1;
LaunchTemplateCpuOptionsOutputReference[_f] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateCpuOptionsOutputReference", version: "10.0.12" };
function launchTemplateCreditSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cpu_credits: cdktf.stringToTerraform(struct.cpuCredits),
    };
}
exports.launchTemplateCreditSpecificationToTerraform = launchTemplateCreditSpecificationToTerraform;
class LaunchTemplateCreditSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cpuCredits !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpuCredits = this._cpuCredits;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cpuCredits = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cpuCredits = value.cpuCredits;
        }
    }
    get cpuCredits() {
        return this.getStringAttribute('cpu_credits');
    }
    set cpuCredits(value) {
        this._cpuCredits = value;
    }
    resetCpuCredits() {
        this._cpuCredits = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuCreditsInput() {
        return this._cpuCredits;
    }
}
exports.LaunchTemplateCreditSpecificationOutputReference = LaunchTemplateCreditSpecificationOutputReference;
_g = JSII_RTTI_SYMBOL_1;
LaunchTemplateCreditSpecificationOutputReference[_g] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateCreditSpecificationOutputReference", version: "10.0.12" };
function launchTemplateElasticGpuSpecificationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.launchTemplateElasticGpuSpecificationsToTerraform = launchTemplateElasticGpuSpecificationsToTerraform;
class LaunchTemplateElasticGpuSpecificationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._type = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._type = value.type;
        }
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.LaunchTemplateElasticGpuSpecificationsOutputReference = LaunchTemplateElasticGpuSpecificationsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
LaunchTemplateElasticGpuSpecificationsOutputReference[_h] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateElasticGpuSpecificationsOutputReference", version: "10.0.12" };
class LaunchTemplateElasticGpuSpecificationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new LaunchTemplateElasticGpuSpecificationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.LaunchTemplateElasticGpuSpecificationsList = LaunchTemplateElasticGpuSpecificationsList;
_j = JSII_RTTI_SYMBOL_1;
LaunchTemplateElasticGpuSpecificationsList[_j] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateElasticGpuSpecificationsList", version: "10.0.12" };
function launchTemplateElasticInferenceAcceleratorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.launchTemplateElasticInferenceAcceleratorToTerraform = launchTemplateElasticInferenceAcceleratorToTerraform;
class LaunchTemplateElasticInferenceAcceleratorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._type = value.type;
        }
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.LaunchTemplateElasticInferenceAcceleratorOutputReference = LaunchTemplateElasticInferenceAcceleratorOutputReference;
_k = JSII_RTTI_SYMBOL_1;
LaunchTemplateElasticInferenceAcceleratorOutputReference[_k] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateElasticInferenceAcceleratorOutputReference", version: "10.0.12" };
function launchTemplateEnclaveOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.launchTemplateEnclaveOptionsToTerraform = launchTemplateEnclaveOptionsToTerraform;
class LaunchTemplateEnclaveOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.LaunchTemplateEnclaveOptionsOutputReference = LaunchTemplateEnclaveOptionsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
LaunchTemplateEnclaveOptionsOutputReference[_l] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateEnclaveOptionsOutputReference", version: "10.0.12" };
function launchTemplateHibernationOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        configured: cdktf.booleanToTerraform(struct.configured),
    };
}
exports.launchTemplateHibernationOptionsToTerraform = launchTemplateHibernationOptionsToTerraform;
class LaunchTemplateHibernationOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._configured !== undefined) {
            hasAnyValues = true;
            internalValueResult.configured = this._configured;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._configured = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._configured = value.configured;
        }
    }
    get configured() {
        return this.getBooleanAttribute('configured');
    }
    set configured(value) {
        this._configured = value;
    }
    // Temporarily expose input value. Use with caution.
    get configuredInput() {
        return this._configured;
    }
}
exports.LaunchTemplateHibernationOptionsOutputReference = LaunchTemplateHibernationOptionsOutputReference;
_m = JSII_RTTI_SYMBOL_1;
LaunchTemplateHibernationOptionsOutputReference[_m] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateHibernationOptionsOutputReference", version: "10.0.12" };
function launchTemplateIamInstanceProfileToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.launchTemplateIamInstanceProfileToTerraform = launchTemplateIamInstanceProfileToTerraform;
class LaunchTemplateIamInstanceProfileOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._arn !== undefined) {
            hasAnyValues = true;
            internalValueResult.arn = this._arn;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._arn = undefined;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._arn = value.arn;
            this._name = value.name;
        }
    }
    get arn() {
        return this.getStringAttribute('arn');
    }
    set arn(value) {
        this._arn = value;
    }
    resetArn() {
        this._arn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get arnInput() {
        return this._arn;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.LaunchTemplateIamInstanceProfileOutputReference = LaunchTemplateIamInstanceProfileOutputReference;
_o = JSII_RTTI_SYMBOL_1;
LaunchTemplateIamInstanceProfileOutputReference[_o] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateIamInstanceProfileOutputReference", version: "10.0.12" };
function launchTemplateInstanceMarketOptionsSpotOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        block_duration_minutes: cdktf.numberToTerraform(struct.blockDurationMinutes),
        instance_interruption_behavior: cdktf.stringToTerraform(struct.instanceInterruptionBehavior),
        max_price: cdktf.stringToTerraform(struct.maxPrice),
        spot_instance_type: cdktf.stringToTerraform(struct.spotInstanceType),
        valid_until: cdktf.stringToTerraform(struct.validUntil),
    };
}
exports.launchTemplateInstanceMarketOptionsSpotOptionsToTerraform = launchTemplateInstanceMarketOptionsSpotOptionsToTerraform;
class LaunchTemplateInstanceMarketOptionsSpotOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._blockDurationMinutes !== undefined) {
            hasAnyValues = true;
            internalValueResult.blockDurationMinutes = this._blockDurationMinutes;
        }
        if (this._instanceInterruptionBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceInterruptionBehavior = this._instanceInterruptionBehavior;
        }
        if (this._maxPrice !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxPrice = this._maxPrice;
        }
        if (this._spotInstanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.spotInstanceType = this._spotInstanceType;
        }
        if (this._validUntil !== undefined) {
            hasAnyValues = true;
            internalValueResult.validUntil = this._validUntil;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._blockDurationMinutes = undefined;
            this._instanceInterruptionBehavior = undefined;
            this._maxPrice = undefined;
            this._spotInstanceType = undefined;
            this._validUntil = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._blockDurationMinutes = value.blockDurationMinutes;
            this._instanceInterruptionBehavior = value.instanceInterruptionBehavior;
            this._maxPrice = value.maxPrice;
            this._spotInstanceType = value.spotInstanceType;
            this._validUntil = value.validUntil;
        }
    }
    get blockDurationMinutes() {
        return this.getNumberAttribute('block_duration_minutes');
    }
    set blockDurationMinutes(value) {
        this._blockDurationMinutes = value;
    }
    resetBlockDurationMinutes() {
        this._blockDurationMinutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get blockDurationMinutesInput() {
        return this._blockDurationMinutes;
    }
    get instanceInterruptionBehavior() {
        return this.getStringAttribute('instance_interruption_behavior');
    }
    set instanceInterruptionBehavior(value) {
        this._instanceInterruptionBehavior = value;
    }
    resetInstanceInterruptionBehavior() {
        this._instanceInterruptionBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceInterruptionBehaviorInput() {
        return this._instanceInterruptionBehavior;
    }
    get maxPrice() {
        return this.getStringAttribute('max_price');
    }
    set maxPrice(value) {
        this._maxPrice = value;
    }
    resetMaxPrice() {
        this._maxPrice = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxPriceInput() {
        return this._maxPrice;
    }
    get spotInstanceType() {
        return this.getStringAttribute('spot_instance_type');
    }
    set spotInstanceType(value) {
        this._spotInstanceType = value;
    }
    resetSpotInstanceType() {
        this._spotInstanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spotInstanceTypeInput() {
        return this._spotInstanceType;
    }
    get validUntil() {
        return this.getStringAttribute('valid_until');
    }
    set validUntil(value) {
        this._validUntil = value;
    }
    resetValidUntil() {
        this._validUntil = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get validUntilInput() {
        return this._validUntil;
    }
}
exports.LaunchTemplateInstanceMarketOptionsSpotOptionsOutputReference = LaunchTemplateInstanceMarketOptionsSpotOptionsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
LaunchTemplateInstanceMarketOptionsSpotOptionsOutputReference[_p] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateInstanceMarketOptionsSpotOptionsOutputReference", version: "10.0.12" };
function launchTemplateInstanceMarketOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        market_type: cdktf.stringToTerraform(struct.marketType),
        spot_options: launchTemplateInstanceMarketOptionsSpotOptionsToTerraform(struct.spotOptions),
    };
}
exports.launchTemplateInstanceMarketOptionsToTerraform = launchTemplateInstanceMarketOptionsToTerraform;
class LaunchTemplateInstanceMarketOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // spot_options - computed: false, optional: true, required: false
        this._spotOptions = new LaunchTemplateInstanceMarketOptionsSpotOptionsOutputReference(this, "spot_options");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._marketType !== undefined) {
            hasAnyValues = true;
            internalValueResult.marketType = this._marketType;
        }
        if (this._spotOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.spotOptions = this._spotOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._marketType = undefined;
            this._spotOptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._marketType = value.marketType;
            this._spotOptions.internalValue = value.spotOptions;
        }
    }
    get marketType() {
        return this.getStringAttribute('market_type');
    }
    set marketType(value) {
        this._marketType = value;
    }
    resetMarketType() {
        this._marketType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get marketTypeInput() {
        return this._marketType;
    }
    get spotOptions() {
        return this._spotOptions;
    }
    putSpotOptions(value) {
        this._spotOptions.internalValue = value;
    }
    resetSpotOptions() {
        this._spotOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spotOptionsInput() {
        return this._spotOptions.internalValue;
    }
}
exports.LaunchTemplateInstanceMarketOptionsOutputReference = LaunchTemplateInstanceMarketOptionsOutputReference;
_q = JSII_RTTI_SYMBOL_1;
LaunchTemplateInstanceMarketOptionsOutputReference[_q] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateInstanceMarketOptionsOutputReference", version: "10.0.12" };
function launchTemplateInstanceRequirementsAcceleratorCountToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.launchTemplateInstanceRequirementsAcceleratorCountToTerraform = launchTemplateInstanceRequirementsAcceleratorCountToTerraform;
class LaunchTemplateInstanceRequirementsAcceleratorCountOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    resetMin() {
        this._min = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.LaunchTemplateInstanceRequirementsAcceleratorCountOutputReference = LaunchTemplateInstanceRequirementsAcceleratorCountOutputReference;
_r = JSII_RTTI_SYMBOL_1;
LaunchTemplateInstanceRequirementsAcceleratorCountOutputReference[_r] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateInstanceRequirementsAcceleratorCountOutputReference", version: "10.0.12" };
function launchTemplateInstanceRequirementsAcceleratorTotalMemoryMibToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.launchTemplateInstanceRequirementsAcceleratorTotalMemoryMibToTerraform = launchTemplateInstanceRequirementsAcceleratorTotalMemoryMibToTerraform;
class LaunchTemplateInstanceRequirementsAcceleratorTotalMemoryMibOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    resetMin() {
        this._min = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.LaunchTemplateInstanceRequirementsAcceleratorTotalMemoryMibOutputReference = LaunchTemplateInstanceRequirementsAcceleratorTotalMemoryMibOutputReference;
_s = JSII_RTTI_SYMBOL_1;
LaunchTemplateInstanceRequirementsAcceleratorTotalMemoryMibOutputReference[_s] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateInstanceRequirementsAcceleratorTotalMemoryMibOutputReference", version: "10.0.12" };
function launchTemplateInstanceRequirementsBaselineEbsBandwidthMbpsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.launchTemplateInstanceRequirementsBaselineEbsBandwidthMbpsToTerraform = launchTemplateInstanceRequirementsBaselineEbsBandwidthMbpsToTerraform;
class LaunchTemplateInstanceRequirementsBaselineEbsBandwidthMbpsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    resetMin() {
        this._min = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.LaunchTemplateInstanceRequirementsBaselineEbsBandwidthMbpsOutputReference = LaunchTemplateInstanceRequirementsBaselineEbsBandwidthMbpsOutputReference;
_t = JSII_RTTI_SYMBOL_1;
LaunchTemplateInstanceRequirementsBaselineEbsBandwidthMbpsOutputReference[_t] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateInstanceRequirementsBaselineEbsBandwidthMbpsOutputReference", version: "10.0.12" };
function launchTemplateInstanceRequirementsMemoryGibPerVcpuToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.launchTemplateInstanceRequirementsMemoryGibPerVcpuToTerraform = launchTemplateInstanceRequirementsMemoryGibPerVcpuToTerraform;
class LaunchTemplateInstanceRequirementsMemoryGibPerVcpuOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    resetMin() {
        this._min = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.LaunchTemplateInstanceRequirementsMemoryGibPerVcpuOutputReference = LaunchTemplateInstanceRequirementsMemoryGibPerVcpuOutputReference;
_u = JSII_RTTI_SYMBOL_1;
LaunchTemplateInstanceRequirementsMemoryGibPerVcpuOutputReference[_u] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateInstanceRequirementsMemoryGibPerVcpuOutputReference", version: "10.0.12" };
function launchTemplateInstanceRequirementsMemoryMibToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.launchTemplateInstanceRequirementsMemoryMibToTerraform = launchTemplateInstanceRequirementsMemoryMibToTerraform;
class LaunchTemplateInstanceRequirementsMemoryMibOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.LaunchTemplateInstanceRequirementsMemoryMibOutputReference = LaunchTemplateInstanceRequirementsMemoryMibOutputReference;
_v = JSII_RTTI_SYMBOL_1;
LaunchTemplateInstanceRequirementsMemoryMibOutputReference[_v] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateInstanceRequirementsMemoryMibOutputReference", version: "10.0.12" };
function launchTemplateInstanceRequirementsNetworkInterfaceCountToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.launchTemplateInstanceRequirementsNetworkInterfaceCountToTerraform = launchTemplateInstanceRequirementsNetworkInterfaceCountToTerraform;
class LaunchTemplateInstanceRequirementsNetworkInterfaceCountOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    resetMin() {
        this._min = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.LaunchTemplateInstanceRequirementsNetworkInterfaceCountOutputReference = LaunchTemplateInstanceRequirementsNetworkInterfaceCountOutputReference;
_w = JSII_RTTI_SYMBOL_1;
LaunchTemplateInstanceRequirementsNetworkInterfaceCountOutputReference[_w] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateInstanceRequirementsNetworkInterfaceCountOutputReference", version: "10.0.12" };
function launchTemplateInstanceRequirementsTotalLocalStorageGbToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.launchTemplateInstanceRequirementsTotalLocalStorageGbToTerraform = launchTemplateInstanceRequirementsTotalLocalStorageGbToTerraform;
class LaunchTemplateInstanceRequirementsTotalLocalStorageGbOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    resetMin() {
        this._min = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.LaunchTemplateInstanceRequirementsTotalLocalStorageGbOutputReference = LaunchTemplateInstanceRequirementsTotalLocalStorageGbOutputReference;
_x = JSII_RTTI_SYMBOL_1;
LaunchTemplateInstanceRequirementsTotalLocalStorageGbOutputReference[_x] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateInstanceRequirementsTotalLocalStorageGbOutputReference", version: "10.0.12" };
function launchTemplateInstanceRequirementsVcpuCountToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.launchTemplateInstanceRequirementsVcpuCountToTerraform = launchTemplateInstanceRequirementsVcpuCountToTerraform;
class LaunchTemplateInstanceRequirementsVcpuCountOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.LaunchTemplateInstanceRequirementsVcpuCountOutputReference = LaunchTemplateInstanceRequirementsVcpuCountOutputReference;
_y = JSII_RTTI_SYMBOL_1;
LaunchTemplateInstanceRequirementsVcpuCountOutputReference[_y] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateInstanceRequirementsVcpuCountOutputReference", version: "10.0.12" };
function launchTemplateInstanceRequirementsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        accelerator_manufacturers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.acceleratorManufacturers),
        accelerator_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.acceleratorNames),
        accelerator_types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.acceleratorTypes),
        bare_metal: cdktf.stringToTerraform(struct.bareMetal),
        burstable_performance: cdktf.stringToTerraform(struct.burstablePerformance),
        cpu_manufacturers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.cpuManufacturers),
        excluded_instance_types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.excludedInstanceTypes),
        instance_generations: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.instanceGenerations),
        local_storage: cdktf.stringToTerraform(struct.localStorage),
        local_storage_types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.localStorageTypes),
        on_demand_max_price_percentage_over_lowest_price: cdktf.numberToTerraform(struct.onDemandMaxPricePercentageOverLowestPrice),
        require_hibernate_support: cdktf.booleanToTerraform(struct.requireHibernateSupport),
        spot_max_price_percentage_over_lowest_price: cdktf.numberToTerraform(struct.spotMaxPricePercentageOverLowestPrice),
        accelerator_count: launchTemplateInstanceRequirementsAcceleratorCountToTerraform(struct.acceleratorCount),
        accelerator_total_memory_mib: launchTemplateInstanceRequirementsAcceleratorTotalMemoryMibToTerraform(struct.acceleratorTotalMemoryMib),
        baseline_ebs_bandwidth_mbps: launchTemplateInstanceRequirementsBaselineEbsBandwidthMbpsToTerraform(struct.baselineEbsBandwidthMbps),
        memory_gib_per_vcpu: launchTemplateInstanceRequirementsMemoryGibPerVcpuToTerraform(struct.memoryGibPerVcpu),
        memory_mib: launchTemplateInstanceRequirementsMemoryMibToTerraform(struct.memoryMib),
        network_interface_count: launchTemplateInstanceRequirementsNetworkInterfaceCountToTerraform(struct.networkInterfaceCount),
        total_local_storage_gb: launchTemplateInstanceRequirementsTotalLocalStorageGbToTerraform(struct.totalLocalStorageGb),
        vcpu_count: launchTemplateInstanceRequirementsVcpuCountToTerraform(struct.vcpuCount),
    };
}
exports.launchTemplateInstanceRequirementsToTerraform = launchTemplateInstanceRequirementsToTerraform;
class LaunchTemplateInstanceRequirementsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // accelerator_count - computed: false, optional: true, required: false
        this._acceleratorCount = new LaunchTemplateInstanceRequirementsAcceleratorCountOutputReference(this, "accelerator_count");
        // accelerator_total_memory_mib - computed: false, optional: true, required: false
        this._acceleratorTotalMemoryMib = new LaunchTemplateInstanceRequirementsAcceleratorTotalMemoryMibOutputReference(this, "accelerator_total_memory_mib");
        // baseline_ebs_bandwidth_mbps - computed: false, optional: true, required: false
        this._baselineEbsBandwidthMbps = new LaunchTemplateInstanceRequirementsBaselineEbsBandwidthMbpsOutputReference(this, "baseline_ebs_bandwidth_mbps");
        // memory_gib_per_vcpu - computed: false, optional: true, required: false
        this._memoryGibPerVcpu = new LaunchTemplateInstanceRequirementsMemoryGibPerVcpuOutputReference(this, "memory_gib_per_vcpu");
        // memory_mib - computed: false, optional: false, required: true
        this._memoryMib = new LaunchTemplateInstanceRequirementsMemoryMibOutputReference(this, "memory_mib");
        // network_interface_count - computed: false, optional: true, required: false
        this._networkInterfaceCount = new LaunchTemplateInstanceRequirementsNetworkInterfaceCountOutputReference(this, "network_interface_count");
        // total_local_storage_gb - computed: false, optional: true, required: false
        this._totalLocalStorageGb = new LaunchTemplateInstanceRequirementsTotalLocalStorageGbOutputReference(this, "total_local_storage_gb");
        // vcpu_count - computed: false, optional: false, required: true
        this._vcpuCount = new LaunchTemplateInstanceRequirementsVcpuCountOutputReference(this, "vcpu_count");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._acceleratorManufacturers !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorManufacturers = this._acceleratorManufacturers;
        }
        if (this._acceleratorNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorNames = this._acceleratorNames;
        }
        if (this._acceleratorTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorTypes = this._acceleratorTypes;
        }
        if (this._bareMetal !== undefined) {
            hasAnyValues = true;
            internalValueResult.bareMetal = this._bareMetal;
        }
        if (this._burstablePerformance !== undefined) {
            hasAnyValues = true;
            internalValueResult.burstablePerformance = this._burstablePerformance;
        }
        if (this._cpuManufacturers !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpuManufacturers = this._cpuManufacturers;
        }
        if (this._excludedInstanceTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludedInstanceTypes = this._excludedInstanceTypes;
        }
        if (this._instanceGenerations !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceGenerations = this._instanceGenerations;
        }
        if (this._localStorage !== undefined) {
            hasAnyValues = true;
            internalValueResult.localStorage = this._localStorage;
        }
        if (this._localStorageTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.localStorageTypes = this._localStorageTypes;
        }
        if (this._onDemandMaxPricePercentageOverLowestPrice !== undefined) {
            hasAnyValues = true;
            internalValueResult.onDemandMaxPricePercentageOverLowestPrice = this._onDemandMaxPricePercentageOverLowestPrice;
        }
        if (this._requireHibernateSupport !== undefined) {
            hasAnyValues = true;
            internalValueResult.requireHibernateSupport = this._requireHibernateSupport;
        }
        if (this._spotMaxPricePercentageOverLowestPrice !== undefined) {
            hasAnyValues = true;
            internalValueResult.spotMaxPricePercentageOverLowestPrice = this._spotMaxPricePercentageOverLowestPrice;
        }
        if (this._acceleratorCount?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorCount = this._acceleratorCount?.internalValue;
        }
        if (this._acceleratorTotalMemoryMib?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorTotalMemoryMib = this._acceleratorTotalMemoryMib?.internalValue;
        }
        if (this._baselineEbsBandwidthMbps?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.baselineEbsBandwidthMbps = this._baselineEbsBandwidthMbps?.internalValue;
        }
        if (this._memoryGibPerVcpu?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.memoryGibPerVcpu = this._memoryGibPerVcpu?.internalValue;
        }
        if (this._memoryMib?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.memoryMib = this._memoryMib?.internalValue;
        }
        if (this._networkInterfaceCount?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkInterfaceCount = this._networkInterfaceCount?.internalValue;
        }
        if (this._totalLocalStorageGb?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.totalLocalStorageGb = this._totalLocalStorageGb?.internalValue;
        }
        if (this._vcpuCount?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.vcpuCount = this._vcpuCount?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._acceleratorManufacturers = undefined;
            this._acceleratorNames = undefined;
            this._acceleratorTypes = undefined;
            this._bareMetal = undefined;
            this._burstablePerformance = undefined;
            this._cpuManufacturers = undefined;
            this._excludedInstanceTypes = undefined;
            this._instanceGenerations = undefined;
            this._localStorage = undefined;
            this._localStorageTypes = undefined;
            this._onDemandMaxPricePercentageOverLowestPrice = undefined;
            this._requireHibernateSupport = undefined;
            this._spotMaxPricePercentageOverLowestPrice = undefined;
            this._acceleratorCount.internalValue = undefined;
            this._acceleratorTotalMemoryMib.internalValue = undefined;
            this._baselineEbsBandwidthMbps.internalValue = undefined;
            this._memoryGibPerVcpu.internalValue = undefined;
            this._memoryMib.internalValue = undefined;
            this._networkInterfaceCount.internalValue = undefined;
            this._totalLocalStorageGb.internalValue = undefined;
            this._vcpuCount.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._acceleratorManufacturers = value.acceleratorManufacturers;
            this._acceleratorNames = value.acceleratorNames;
            this._acceleratorTypes = value.acceleratorTypes;
            this._bareMetal = value.bareMetal;
            this._burstablePerformance = value.burstablePerformance;
            this._cpuManufacturers = value.cpuManufacturers;
            this._excludedInstanceTypes = value.excludedInstanceTypes;
            this._instanceGenerations = value.instanceGenerations;
            this._localStorage = value.localStorage;
            this._localStorageTypes = value.localStorageTypes;
            this._onDemandMaxPricePercentageOverLowestPrice = value.onDemandMaxPricePercentageOverLowestPrice;
            this._requireHibernateSupport = value.requireHibernateSupport;
            this._spotMaxPricePercentageOverLowestPrice = value.spotMaxPricePercentageOverLowestPrice;
            this._acceleratorCount.internalValue = value.acceleratorCount;
            this._acceleratorTotalMemoryMib.internalValue = value.acceleratorTotalMemoryMib;
            this._baselineEbsBandwidthMbps.internalValue = value.baselineEbsBandwidthMbps;
            this._memoryGibPerVcpu.internalValue = value.memoryGibPerVcpu;
            this._memoryMib.internalValue = value.memoryMib;
            this._networkInterfaceCount.internalValue = value.networkInterfaceCount;
            this._totalLocalStorageGb.internalValue = value.totalLocalStorageGb;
            this._vcpuCount.internalValue = value.vcpuCount;
        }
    }
    get acceleratorManufacturers() {
        return cdktf.Fn.tolist(this.getListAttribute('accelerator_manufacturers'));
    }
    set acceleratorManufacturers(value) {
        this._acceleratorManufacturers = value;
    }
    resetAcceleratorManufacturers() {
        this._acceleratorManufacturers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorManufacturersInput() {
        return this._acceleratorManufacturers;
    }
    get acceleratorNames() {
        return cdktf.Fn.tolist(this.getListAttribute('accelerator_names'));
    }
    set acceleratorNames(value) {
        this._acceleratorNames = value;
    }
    resetAcceleratorNames() {
        this._acceleratorNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorNamesInput() {
        return this._acceleratorNames;
    }
    get acceleratorTypes() {
        return cdktf.Fn.tolist(this.getListAttribute('accelerator_types'));
    }
    set acceleratorTypes(value) {
        this._acceleratorTypes = value;
    }
    resetAcceleratorTypes() {
        this._acceleratorTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorTypesInput() {
        return this._acceleratorTypes;
    }
    get bareMetal() {
        return this.getStringAttribute('bare_metal');
    }
    set bareMetal(value) {
        this._bareMetal = value;
    }
    resetBareMetal() {
        this._bareMetal = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bareMetalInput() {
        return this._bareMetal;
    }
    get burstablePerformance() {
        return this.getStringAttribute('burstable_performance');
    }
    set burstablePerformance(value) {
        this._burstablePerformance = value;
    }
    resetBurstablePerformance() {
        this._burstablePerformance = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get burstablePerformanceInput() {
        return this._burstablePerformance;
    }
    get cpuManufacturers() {
        return cdktf.Fn.tolist(this.getListAttribute('cpu_manufacturers'));
    }
    set cpuManufacturers(value) {
        this._cpuManufacturers = value;
    }
    resetCpuManufacturers() {
        this._cpuManufacturers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuManufacturersInput() {
        return this._cpuManufacturers;
    }
    get excludedInstanceTypes() {
        return cdktf.Fn.tolist(this.getListAttribute('excluded_instance_types'));
    }
    set excludedInstanceTypes(value) {
        this._excludedInstanceTypes = value;
    }
    resetExcludedInstanceTypes() {
        this._excludedInstanceTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludedInstanceTypesInput() {
        return this._excludedInstanceTypes;
    }
    get instanceGenerations() {
        return cdktf.Fn.tolist(this.getListAttribute('instance_generations'));
    }
    set instanceGenerations(value) {
        this._instanceGenerations = value;
    }
    resetInstanceGenerations() {
        this._instanceGenerations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceGenerationsInput() {
        return this._instanceGenerations;
    }
    get localStorage() {
        return this.getStringAttribute('local_storage');
    }
    set localStorage(value) {
        this._localStorage = value;
    }
    resetLocalStorage() {
        this._localStorage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localStorageInput() {
        return this._localStorage;
    }
    get localStorageTypes() {
        return cdktf.Fn.tolist(this.getListAttribute('local_storage_types'));
    }
    set localStorageTypes(value) {
        this._localStorageTypes = value;
    }
    resetLocalStorageTypes() {
        this._localStorageTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localStorageTypesInput() {
        return this._localStorageTypes;
    }
    get onDemandMaxPricePercentageOverLowestPrice() {
        return this.getNumberAttribute('on_demand_max_price_percentage_over_lowest_price');
    }
    set onDemandMaxPricePercentageOverLowestPrice(value) {
        this._onDemandMaxPricePercentageOverLowestPrice = value;
    }
    resetOnDemandMaxPricePercentageOverLowestPrice() {
        this._onDemandMaxPricePercentageOverLowestPrice = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onDemandMaxPricePercentageOverLowestPriceInput() {
        return this._onDemandMaxPricePercentageOverLowestPrice;
    }
    get requireHibernateSupport() {
        return this.getBooleanAttribute('require_hibernate_support');
    }
    set requireHibernateSupport(value) {
        this._requireHibernateSupport = value;
    }
    resetRequireHibernateSupport() {
        this._requireHibernateSupport = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireHibernateSupportInput() {
        return this._requireHibernateSupport;
    }
    get spotMaxPricePercentageOverLowestPrice() {
        return this.getNumberAttribute('spot_max_price_percentage_over_lowest_price');
    }
    set spotMaxPricePercentageOverLowestPrice(value) {
        this._spotMaxPricePercentageOverLowestPrice = value;
    }
    resetSpotMaxPricePercentageOverLowestPrice() {
        this._spotMaxPricePercentageOverLowestPrice = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spotMaxPricePercentageOverLowestPriceInput() {
        return this._spotMaxPricePercentageOverLowestPrice;
    }
    get acceleratorCount() {
        return this._acceleratorCount;
    }
    putAcceleratorCount(value) {
        this._acceleratorCount.internalValue = value;
    }
    resetAcceleratorCount() {
        this._acceleratorCount.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorCountInput() {
        return this._acceleratorCount.internalValue;
    }
    get acceleratorTotalMemoryMib() {
        return this._acceleratorTotalMemoryMib;
    }
    putAcceleratorTotalMemoryMib(value) {
        this._acceleratorTotalMemoryMib.internalValue = value;
    }
    resetAcceleratorTotalMemoryMib() {
        this._acceleratorTotalMemoryMib.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorTotalMemoryMibInput() {
        return this._acceleratorTotalMemoryMib.internalValue;
    }
    get baselineEbsBandwidthMbps() {
        return this._baselineEbsBandwidthMbps;
    }
    putBaselineEbsBandwidthMbps(value) {
        this._baselineEbsBandwidthMbps.internalValue = value;
    }
    resetBaselineEbsBandwidthMbps() {
        this._baselineEbsBandwidthMbps.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get baselineEbsBandwidthMbpsInput() {
        return this._baselineEbsBandwidthMbps.internalValue;
    }
    get memoryGibPerVcpu() {
        return this._memoryGibPerVcpu;
    }
    putMemoryGibPerVcpu(value) {
        this._memoryGibPerVcpu.internalValue = value;
    }
    resetMemoryGibPerVcpu() {
        this._memoryGibPerVcpu.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryGibPerVcpuInput() {
        return this._memoryGibPerVcpu.internalValue;
    }
    get memoryMib() {
        return this._memoryMib;
    }
    putMemoryMib(value) {
        this._memoryMib.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get memoryMibInput() {
        return this._memoryMib.internalValue;
    }
    get networkInterfaceCount() {
        return this._networkInterfaceCount;
    }
    putNetworkInterfaceCount(value) {
        this._networkInterfaceCount.internalValue = value;
    }
    resetNetworkInterfaceCount() {
        this._networkInterfaceCount.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInterfaceCountInput() {
        return this._networkInterfaceCount.internalValue;
    }
    get totalLocalStorageGb() {
        return this._totalLocalStorageGb;
    }
    putTotalLocalStorageGb(value) {
        this._totalLocalStorageGb.internalValue = value;
    }
    resetTotalLocalStorageGb() {
        this._totalLocalStorageGb.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get totalLocalStorageGbInput() {
        return this._totalLocalStorageGb.internalValue;
    }
    get vcpuCount() {
        return this._vcpuCount;
    }
    putVcpuCount(value) {
        this._vcpuCount.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get vcpuCountInput() {
        return this._vcpuCount.internalValue;
    }
}
exports.LaunchTemplateInstanceRequirementsOutputReference = LaunchTemplateInstanceRequirementsOutputReference;
_z = JSII_RTTI_SYMBOL_1;
LaunchTemplateInstanceRequirementsOutputReference[_z] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateInstanceRequirementsOutputReference", version: "10.0.12" };
function launchTemplateLicenseSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        license_configuration_arn: cdktf.stringToTerraform(struct.licenseConfigurationArn),
    };
}
exports.launchTemplateLicenseSpecificationToTerraform = launchTemplateLicenseSpecificationToTerraform;
class LaunchTemplateLicenseSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._licenseConfigurationArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.licenseConfigurationArn = this._licenseConfigurationArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._licenseConfigurationArn = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._licenseConfigurationArn = value.licenseConfigurationArn;
        }
    }
    get licenseConfigurationArn() {
        return this.getStringAttribute('license_configuration_arn');
    }
    set licenseConfigurationArn(value) {
        this._licenseConfigurationArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get licenseConfigurationArnInput() {
        return this._licenseConfigurationArn;
    }
}
exports.LaunchTemplateLicenseSpecificationOutputReference = LaunchTemplateLicenseSpecificationOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
LaunchTemplateLicenseSpecificationOutputReference[_0] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateLicenseSpecificationOutputReference", version: "10.0.12" };
class LaunchTemplateLicenseSpecificationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new LaunchTemplateLicenseSpecificationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.LaunchTemplateLicenseSpecificationList = LaunchTemplateLicenseSpecificationList;
_1 = JSII_RTTI_SYMBOL_1;
LaunchTemplateLicenseSpecificationList[_1] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateLicenseSpecificationList", version: "10.0.12" };
function launchTemplateMaintenanceOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_recovery: cdktf.stringToTerraform(struct.autoRecovery),
    };
}
exports.launchTemplateMaintenanceOptionsToTerraform = launchTemplateMaintenanceOptionsToTerraform;
class LaunchTemplateMaintenanceOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoRecovery !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoRecovery = this._autoRecovery;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoRecovery = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoRecovery = value.autoRecovery;
        }
    }
    get autoRecovery() {
        return this.getStringAttribute('auto_recovery');
    }
    set autoRecovery(value) {
        this._autoRecovery = value;
    }
    resetAutoRecovery() {
        this._autoRecovery = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoRecoveryInput() {
        return this._autoRecovery;
    }
}
exports.LaunchTemplateMaintenanceOptionsOutputReference = LaunchTemplateMaintenanceOptionsOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
LaunchTemplateMaintenanceOptionsOutputReference[_2] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateMaintenanceOptionsOutputReference", version: "10.0.12" };
function launchTemplateMetadataOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        http_endpoint: cdktf.stringToTerraform(struct.httpEndpoint),
        http_protocol_ipv6: cdktf.stringToTerraform(struct.httpProtocolIpv6),
        http_put_response_hop_limit: cdktf.numberToTerraform(struct.httpPutResponseHopLimit),
        http_tokens: cdktf.stringToTerraform(struct.httpTokens),
        instance_metadata_tags: cdktf.stringToTerraform(struct.instanceMetadataTags),
    };
}
exports.launchTemplateMetadataOptionsToTerraform = launchTemplateMetadataOptionsToTerraform;
class LaunchTemplateMetadataOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._httpEndpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpEndpoint = this._httpEndpoint;
        }
        if (this._httpProtocolIpv6 !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpProtocolIpv6 = this._httpProtocolIpv6;
        }
        if (this._httpPutResponseHopLimit !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpPutResponseHopLimit = this._httpPutResponseHopLimit;
        }
        if (this._httpTokens !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpTokens = this._httpTokens;
        }
        if (this._instanceMetadataTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceMetadataTags = this._instanceMetadataTags;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._httpEndpoint = undefined;
            this._httpProtocolIpv6 = undefined;
            this._httpPutResponseHopLimit = undefined;
            this._httpTokens = undefined;
            this._instanceMetadataTags = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._httpEndpoint = value.httpEndpoint;
            this._httpProtocolIpv6 = value.httpProtocolIpv6;
            this._httpPutResponseHopLimit = value.httpPutResponseHopLimit;
            this._httpTokens = value.httpTokens;
            this._instanceMetadataTags = value.instanceMetadataTags;
        }
    }
    get httpEndpoint() {
        return this.getStringAttribute('http_endpoint');
    }
    set httpEndpoint(value) {
        this._httpEndpoint = value;
    }
    resetHttpEndpoint() {
        this._httpEndpoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpEndpointInput() {
        return this._httpEndpoint;
    }
    get httpProtocolIpv6() {
        return this.getStringAttribute('http_protocol_ipv6');
    }
    set httpProtocolIpv6(value) {
        this._httpProtocolIpv6 = value;
    }
    resetHttpProtocolIpv6() {
        this._httpProtocolIpv6 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpProtocolIpv6Input() {
        return this._httpProtocolIpv6;
    }
    get httpPutResponseHopLimit() {
        return this.getNumberAttribute('http_put_response_hop_limit');
    }
    set httpPutResponseHopLimit(value) {
        this._httpPutResponseHopLimit = value;
    }
    resetHttpPutResponseHopLimit() {
        this._httpPutResponseHopLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpPutResponseHopLimitInput() {
        return this._httpPutResponseHopLimit;
    }
    get httpTokens() {
        return this.getStringAttribute('http_tokens');
    }
    set httpTokens(value) {
        this._httpTokens = value;
    }
    resetHttpTokens() {
        this._httpTokens = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpTokensInput() {
        return this._httpTokens;
    }
    get instanceMetadataTags() {
        return this.getStringAttribute('instance_metadata_tags');
    }
    set instanceMetadataTags(value) {
        this._instanceMetadataTags = value;
    }
    resetInstanceMetadataTags() {
        this._instanceMetadataTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceMetadataTagsInput() {
        return this._instanceMetadataTags;
    }
}
exports.LaunchTemplateMetadataOptionsOutputReference = LaunchTemplateMetadataOptionsOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
LaunchTemplateMetadataOptionsOutputReference[_3] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateMetadataOptionsOutputReference", version: "10.0.12" };
function launchTemplateMonitoringToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.launchTemplateMonitoringToTerraform = launchTemplateMonitoringToTerraform;
class LaunchTemplateMonitoringOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.LaunchTemplateMonitoringOutputReference = LaunchTemplateMonitoringOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
LaunchTemplateMonitoringOutputReference[_4] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateMonitoringOutputReference", version: "10.0.12" };
function launchTemplateNetworkInterfacesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        associate_carrier_ip_address: cdktf.stringToTerraform(struct.associateCarrierIpAddress),
        associate_public_ip_address: cdktf.stringToTerraform(struct.associatePublicIpAddress),
        delete_on_termination: cdktf.stringToTerraform(struct.deleteOnTermination),
        description: cdktf.stringToTerraform(struct.description),
        device_index: cdktf.numberToTerraform(struct.deviceIndex),
        interface_type: cdktf.stringToTerraform(struct.interfaceType),
        ipv4_address_count: cdktf.numberToTerraform(struct.ipv4AddressCount),
        ipv4_addresses: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.ipv4Addresses),
        ipv4_prefix_count: cdktf.numberToTerraform(struct.ipv4PrefixCount),
        ipv4_prefixes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.ipv4Prefixes),
        ipv6_address_count: cdktf.numberToTerraform(struct.ipv6AddressCount),
        ipv6_addresses: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.ipv6Addresses),
        ipv6_prefix_count: cdktf.numberToTerraform(struct.ipv6PrefixCount),
        ipv6_prefixes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.ipv6Prefixes),
        network_card_index: cdktf.numberToTerraform(struct.networkCardIndex),
        network_interface_id: cdktf.stringToTerraform(struct.networkInterfaceId),
        private_ip_address: cdktf.stringToTerraform(struct.privateIpAddress),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroups),
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
    };
}
exports.launchTemplateNetworkInterfacesToTerraform = launchTemplateNetworkInterfacesToTerraform;
class LaunchTemplateNetworkInterfacesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._associateCarrierIpAddress !== undefined) {
            hasAnyValues = true;
            internalValueResult.associateCarrierIpAddress = this._associateCarrierIpAddress;
        }
        if (this._associatePublicIpAddress !== undefined) {
            hasAnyValues = true;
            internalValueResult.associatePublicIpAddress = this._associatePublicIpAddress;
        }
        if (this._deleteOnTermination !== undefined) {
            hasAnyValues = true;
            internalValueResult.deleteOnTermination = this._deleteOnTermination;
        }
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._deviceIndex !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceIndex = this._deviceIndex;
        }
        if (this._interfaceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.interfaceType = this._interfaceType;
        }
        if (this._ipv4AddressCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipv4AddressCount = this._ipv4AddressCount;
        }
        if (this._ipv4Addresses !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipv4Addresses = this._ipv4Addresses;
        }
        if (this._ipv4PrefixCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipv4PrefixCount = this._ipv4PrefixCount;
        }
        if (this._ipv4Prefixes !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipv4Prefixes = this._ipv4Prefixes;
        }
        if (this._ipv6AddressCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipv6AddressCount = this._ipv6AddressCount;
        }
        if (this._ipv6Addresses !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipv6Addresses = this._ipv6Addresses;
        }
        if (this._ipv6PrefixCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipv6PrefixCount = this._ipv6PrefixCount;
        }
        if (this._ipv6Prefixes !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipv6Prefixes = this._ipv6Prefixes;
        }
        if (this._networkCardIndex !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkCardIndex = this._networkCardIndex;
        }
        if (this._networkInterfaceId !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkInterfaceId = this._networkInterfaceId;
        }
        if (this._privateIpAddress !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateIpAddress = this._privateIpAddress;
        }
        if (this._securityGroups !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroups = this._securityGroups;
        }
        if (this._subnetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetId = this._subnetId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._associateCarrierIpAddress = undefined;
            this._associatePublicIpAddress = undefined;
            this._deleteOnTermination = undefined;
            this._description = undefined;
            this._deviceIndex = undefined;
            this._interfaceType = undefined;
            this._ipv4AddressCount = undefined;
            this._ipv4Addresses = undefined;
            this._ipv4PrefixCount = undefined;
            this._ipv4Prefixes = undefined;
            this._ipv6AddressCount = undefined;
            this._ipv6Addresses = undefined;
            this._ipv6PrefixCount = undefined;
            this._ipv6Prefixes = undefined;
            this._networkCardIndex = undefined;
            this._networkInterfaceId = undefined;
            this._privateIpAddress = undefined;
            this._securityGroups = undefined;
            this._subnetId = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._associateCarrierIpAddress = value.associateCarrierIpAddress;
            this._associatePublicIpAddress = value.associatePublicIpAddress;
            this._deleteOnTermination = value.deleteOnTermination;
            this._description = value.description;
            this._deviceIndex = value.deviceIndex;
            this._interfaceType = value.interfaceType;
            this._ipv4AddressCount = value.ipv4AddressCount;
            this._ipv4Addresses = value.ipv4Addresses;
            this._ipv4PrefixCount = value.ipv4PrefixCount;
            this._ipv4Prefixes = value.ipv4Prefixes;
            this._ipv6AddressCount = value.ipv6AddressCount;
            this._ipv6Addresses = value.ipv6Addresses;
            this._ipv6PrefixCount = value.ipv6PrefixCount;
            this._ipv6Prefixes = value.ipv6Prefixes;
            this._networkCardIndex = value.networkCardIndex;
            this._networkInterfaceId = value.networkInterfaceId;
            this._privateIpAddress = value.privateIpAddress;
            this._securityGroups = value.securityGroups;
            this._subnetId = value.subnetId;
        }
    }
    get associateCarrierIpAddress() {
        return this.getStringAttribute('associate_carrier_ip_address');
    }
    set associateCarrierIpAddress(value) {
        this._associateCarrierIpAddress = value;
    }
    resetAssociateCarrierIpAddress() {
        this._associateCarrierIpAddress = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get associateCarrierIpAddressInput() {
        return this._associateCarrierIpAddress;
    }
    get associatePublicIpAddress() {
        return this.getStringAttribute('associate_public_ip_address');
    }
    set associatePublicIpAddress(value) {
        this._associatePublicIpAddress = value;
    }
    resetAssociatePublicIpAddress() {
        this._associatePublicIpAddress = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get associatePublicIpAddressInput() {
        return this._associatePublicIpAddress;
    }
    get deleteOnTermination() {
        return this.getStringAttribute('delete_on_termination');
    }
    set deleteOnTermination(value) {
        this._deleteOnTermination = value;
    }
    resetDeleteOnTermination() {
        this._deleteOnTermination = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteOnTerminationInput() {
        return this._deleteOnTermination;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get deviceIndex() {
        return this.getNumberAttribute('device_index');
    }
    set deviceIndex(value) {
        this._deviceIndex = value;
    }
    resetDeviceIndex() {
        this._deviceIndex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deviceIndexInput() {
        return this._deviceIndex;
    }
    get interfaceType() {
        return this.getStringAttribute('interface_type');
    }
    set interfaceType(value) {
        this._interfaceType = value;
    }
    resetInterfaceType() {
        this._interfaceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get interfaceTypeInput() {
        return this._interfaceType;
    }
    get ipv4AddressCount() {
        return this.getNumberAttribute('ipv4_address_count');
    }
    set ipv4AddressCount(value) {
        this._ipv4AddressCount = value;
    }
    resetIpv4AddressCount() {
        this._ipv4AddressCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv4AddressCountInput() {
        return this._ipv4AddressCount;
    }
    get ipv4Addresses() {
        return cdktf.Fn.tolist(this.getListAttribute('ipv4_addresses'));
    }
    set ipv4Addresses(value) {
        this._ipv4Addresses = value;
    }
    resetIpv4Addresses() {
        this._ipv4Addresses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv4AddressesInput() {
        return this._ipv4Addresses;
    }
    get ipv4PrefixCount() {
        return this.getNumberAttribute('ipv4_prefix_count');
    }
    set ipv4PrefixCount(value) {
        this._ipv4PrefixCount = value;
    }
    resetIpv4PrefixCount() {
        this._ipv4PrefixCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv4PrefixCountInput() {
        return this._ipv4PrefixCount;
    }
    get ipv4Prefixes() {
        return cdktf.Fn.tolist(this.getListAttribute('ipv4_prefixes'));
    }
    set ipv4Prefixes(value) {
        this._ipv4Prefixes = value;
    }
    resetIpv4Prefixes() {
        this._ipv4Prefixes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv4PrefixesInput() {
        return this._ipv4Prefixes;
    }
    get ipv6AddressCount() {
        return this.getNumberAttribute('ipv6_address_count');
    }
    set ipv6AddressCount(value) {
        this._ipv6AddressCount = value;
    }
    resetIpv6AddressCount() {
        this._ipv6AddressCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv6AddressCountInput() {
        return this._ipv6AddressCount;
    }
    get ipv6Addresses() {
        return cdktf.Fn.tolist(this.getListAttribute('ipv6_addresses'));
    }
    set ipv6Addresses(value) {
        this._ipv6Addresses = value;
    }
    resetIpv6Addresses() {
        this._ipv6Addresses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv6AddressesInput() {
        return this._ipv6Addresses;
    }
    get ipv6PrefixCount() {
        return this.getNumberAttribute('ipv6_prefix_count');
    }
    set ipv6PrefixCount(value) {
        this._ipv6PrefixCount = value;
    }
    resetIpv6PrefixCount() {
        this._ipv6PrefixCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv6PrefixCountInput() {
        return this._ipv6PrefixCount;
    }
    get ipv6Prefixes() {
        return cdktf.Fn.tolist(this.getListAttribute('ipv6_prefixes'));
    }
    set ipv6Prefixes(value) {
        this._ipv6Prefixes = value;
    }
    resetIpv6Prefixes() {
        this._ipv6Prefixes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv6PrefixesInput() {
        return this._ipv6Prefixes;
    }
    get networkCardIndex() {
        return this.getNumberAttribute('network_card_index');
    }
    set networkCardIndex(value) {
        this._networkCardIndex = value;
    }
    resetNetworkCardIndex() {
        this._networkCardIndex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkCardIndexInput() {
        return this._networkCardIndex;
    }
    get networkInterfaceId() {
        return this.getStringAttribute('network_interface_id');
    }
    set networkInterfaceId(value) {
        this._networkInterfaceId = value;
    }
    resetNetworkInterfaceId() {
        this._networkInterfaceId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInterfaceIdInput() {
        return this._networkInterfaceId;
    }
    get privateIpAddress() {
        return this.getStringAttribute('private_ip_address');
    }
    set privateIpAddress(value) {
        this._privateIpAddress = value;
    }
    resetPrivateIpAddress() {
        this._privateIpAddress = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateIpAddressInput() {
        return this._privateIpAddress;
    }
    get securityGroups() {
        return cdktf.Fn.tolist(this.getListAttribute('security_groups'));
    }
    set securityGroups(value) {
        this._securityGroups = value;
    }
    resetSecurityGroups() {
        this._securityGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupsInput() {
        return this._securityGroups;
    }
    get subnetId() {
        return this.getStringAttribute('subnet_id');
    }
    set subnetId(value) {
        this._subnetId = value;
    }
    resetSubnetId() {
        this._subnetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdInput() {
        return this._subnetId;
    }
}
exports.LaunchTemplateNetworkInterfacesOutputReference = LaunchTemplateNetworkInterfacesOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
LaunchTemplateNetworkInterfacesOutputReference[_5] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateNetworkInterfacesOutputReference", version: "10.0.12" };
class LaunchTemplateNetworkInterfacesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new LaunchTemplateNetworkInterfacesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.LaunchTemplateNetworkInterfacesList = LaunchTemplateNetworkInterfacesList;
_6 = JSII_RTTI_SYMBOL_1;
LaunchTemplateNetworkInterfacesList[_6] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateNetworkInterfacesList", version: "10.0.12" };
function launchTemplatePlacementToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        affinity: cdktf.stringToTerraform(struct.affinity),
        availability_zone: cdktf.stringToTerraform(struct.availabilityZone),
        group_name: cdktf.stringToTerraform(struct.groupName),
        host_id: cdktf.stringToTerraform(struct.hostId),
        host_resource_group_arn: cdktf.stringToTerraform(struct.hostResourceGroupArn),
        partition_number: cdktf.numberToTerraform(struct.partitionNumber),
        spread_domain: cdktf.stringToTerraform(struct.spreadDomain),
        tenancy: cdktf.stringToTerraform(struct.tenancy),
    };
}
exports.launchTemplatePlacementToTerraform = launchTemplatePlacementToTerraform;
class LaunchTemplatePlacementOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._affinity !== undefined) {
            hasAnyValues = true;
            internalValueResult.affinity = this._affinity;
        }
        if (this._availabilityZone !== undefined) {
            hasAnyValues = true;
            internalValueResult.availabilityZone = this._availabilityZone;
        }
        if (this._groupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupName = this._groupName;
        }
        if (this._hostId !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostId = this._hostId;
        }
        if (this._hostResourceGroupArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostResourceGroupArn = this._hostResourceGroupArn;
        }
        if (this._partitionNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.partitionNumber = this._partitionNumber;
        }
        if (this._spreadDomain !== undefined) {
            hasAnyValues = true;
            internalValueResult.spreadDomain = this._spreadDomain;
        }
        if (this._tenancy !== undefined) {
            hasAnyValues = true;
            internalValueResult.tenancy = this._tenancy;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._affinity = undefined;
            this._availabilityZone = undefined;
            this._groupName = undefined;
            this._hostId = undefined;
            this._hostResourceGroupArn = undefined;
            this._partitionNumber = undefined;
            this._spreadDomain = undefined;
            this._tenancy = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._affinity = value.affinity;
            this._availabilityZone = value.availabilityZone;
            this._groupName = value.groupName;
            this._hostId = value.hostId;
            this._hostResourceGroupArn = value.hostResourceGroupArn;
            this._partitionNumber = value.partitionNumber;
            this._spreadDomain = value.spreadDomain;
            this._tenancy = value.tenancy;
        }
    }
    get affinity() {
        return this.getStringAttribute('affinity');
    }
    set affinity(value) {
        this._affinity = value;
    }
    resetAffinity() {
        this._affinity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get affinityInput() {
        return this._affinity;
    }
    get availabilityZone() {
        return this.getStringAttribute('availability_zone');
    }
    set availabilityZone(value) {
        this._availabilityZone = value;
    }
    resetAvailabilityZone() {
        this._availabilityZone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityZoneInput() {
        return this._availabilityZone;
    }
    get groupName() {
        return this.getStringAttribute('group_name');
    }
    set groupName(value) {
        this._groupName = value;
    }
    resetGroupName() {
        this._groupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupNameInput() {
        return this._groupName;
    }
    get hostId() {
        return this.getStringAttribute('host_id');
    }
    set hostId(value) {
        this._hostId = value;
    }
    resetHostId() {
        this._hostId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostIdInput() {
        return this._hostId;
    }
    get hostResourceGroupArn() {
        return this.getStringAttribute('host_resource_group_arn');
    }
    set hostResourceGroupArn(value) {
        this._hostResourceGroupArn = value;
    }
    resetHostResourceGroupArn() {
        this._hostResourceGroupArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostResourceGroupArnInput() {
        return this._hostResourceGroupArn;
    }
    get partitionNumber() {
        return this.getNumberAttribute('partition_number');
    }
    set partitionNumber(value) {
        this._partitionNumber = value;
    }
    resetPartitionNumber() {
        this._partitionNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get partitionNumberInput() {
        return this._partitionNumber;
    }
    get spreadDomain() {
        return this.getStringAttribute('spread_domain');
    }
    set spreadDomain(value) {
        this._spreadDomain = value;
    }
    resetSpreadDomain() {
        this._spreadDomain = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spreadDomainInput() {
        return this._spreadDomain;
    }
    get tenancy() {
        return this.getStringAttribute('tenancy');
    }
    set tenancy(value) {
        this._tenancy = value;
    }
    resetTenancy() {
        this._tenancy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tenancyInput() {
        return this._tenancy;
    }
}
exports.LaunchTemplatePlacementOutputReference = LaunchTemplatePlacementOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
LaunchTemplatePlacementOutputReference[_7] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplatePlacementOutputReference", version: "10.0.12" };
function launchTemplatePrivateDnsNameOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_resource_name_dns_a_record: cdktf.booleanToTerraform(struct.enableResourceNameDnsARecord),
        enable_resource_name_dns_aaaa_record: cdktf.booleanToTerraform(struct.enableResourceNameDnsAaaaRecord),
        hostname_type: cdktf.stringToTerraform(struct.hostnameType),
    };
}
exports.launchTemplatePrivateDnsNameOptionsToTerraform = launchTemplatePrivateDnsNameOptionsToTerraform;
class LaunchTemplatePrivateDnsNameOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableResourceNameDnsARecord !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableResourceNameDnsARecord = this._enableResourceNameDnsARecord;
        }
        if (this._enableResourceNameDnsAaaaRecord !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableResourceNameDnsAaaaRecord = this._enableResourceNameDnsAaaaRecord;
        }
        if (this._hostnameType !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostnameType = this._hostnameType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableResourceNameDnsARecord = undefined;
            this._enableResourceNameDnsAaaaRecord = undefined;
            this._hostnameType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableResourceNameDnsARecord = value.enableResourceNameDnsARecord;
            this._enableResourceNameDnsAaaaRecord = value.enableResourceNameDnsAaaaRecord;
            this._hostnameType = value.hostnameType;
        }
    }
    get enableResourceNameDnsARecord() {
        return this.getBooleanAttribute('enable_resource_name_dns_a_record');
    }
    set enableResourceNameDnsARecord(value) {
        this._enableResourceNameDnsARecord = value;
    }
    resetEnableResourceNameDnsARecord() {
        this._enableResourceNameDnsARecord = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableResourceNameDnsARecordInput() {
        return this._enableResourceNameDnsARecord;
    }
    get enableResourceNameDnsAaaaRecord() {
        return this.getBooleanAttribute('enable_resource_name_dns_aaaa_record');
    }
    set enableResourceNameDnsAaaaRecord(value) {
        this._enableResourceNameDnsAaaaRecord = value;
    }
    resetEnableResourceNameDnsAaaaRecord() {
        this._enableResourceNameDnsAaaaRecord = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableResourceNameDnsAaaaRecordInput() {
        return this._enableResourceNameDnsAaaaRecord;
    }
    get hostnameType() {
        return this.getStringAttribute('hostname_type');
    }
    set hostnameType(value) {
        this._hostnameType = value;
    }
    resetHostnameType() {
        this._hostnameType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostnameTypeInput() {
        return this._hostnameType;
    }
}
exports.LaunchTemplatePrivateDnsNameOptionsOutputReference = LaunchTemplatePrivateDnsNameOptionsOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
LaunchTemplatePrivateDnsNameOptionsOutputReference[_8] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplatePrivateDnsNameOptionsOutputReference", version: "10.0.12" };
function launchTemplateTagSpecificationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resource_type: cdktf.stringToTerraform(struct.resourceType),
        tags: cdktf.hashMapper(cdktf.stringToTerraform)(struct.tags),
    };
}
exports.launchTemplateTagSpecificationsToTerraform = launchTemplateTagSpecificationsToTerraform;
class LaunchTemplateTagSpecificationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resourceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceType = this._resourceType;
        }
        if (this._tags !== undefined) {
            hasAnyValues = true;
            internalValueResult.tags = this._tags;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._resourceType = undefined;
            this._tags = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._resourceType = value.resourceType;
            this._tags = value.tags;
        }
    }
    get resourceType() {
        return this.getStringAttribute('resource_type');
    }
    set resourceType(value) {
        this._resourceType = value;
    }
    resetResourceType() {
        this._resourceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTypeInput() {
        return this._resourceType;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
}
exports.LaunchTemplateTagSpecificationsOutputReference = LaunchTemplateTagSpecificationsOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
LaunchTemplateTagSpecificationsOutputReference[_9] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateTagSpecificationsOutputReference", version: "10.0.12" };
class LaunchTemplateTagSpecificationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new LaunchTemplateTagSpecificationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.LaunchTemplateTagSpecificationsList = LaunchTemplateTagSpecificationsList;
_10 = JSII_RTTI_SYMBOL_1;
LaunchTemplateTagSpecificationsList[_10] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplateTagSpecificationsList", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/launch_template aws_launch_template}
*/
class LaunchTemplate extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/launch_template aws_launch_template} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options LaunchTemplateConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'aws_launch_template',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // block_device_mappings - computed: false, optional: true, required: false
        this._blockDeviceMappings = new LaunchTemplateBlockDeviceMappingsList(this, "block_device_mappings", false);
        // capacity_reservation_specification - computed: false, optional: true, required: false
        this._capacityReservationSpecification = new LaunchTemplateCapacityReservationSpecificationOutputReference(this, "capacity_reservation_specification");
        // cpu_options - computed: false, optional: true, required: false
        this._cpuOptions = new LaunchTemplateCpuOptionsOutputReference(this, "cpu_options");
        // credit_specification - computed: false, optional: true, required: false
        this._creditSpecification = new LaunchTemplateCreditSpecificationOutputReference(this, "credit_specification");
        // elastic_gpu_specifications - computed: false, optional: true, required: false
        this._elasticGpuSpecifications = new LaunchTemplateElasticGpuSpecificationsList(this, "elastic_gpu_specifications", false);
        // elastic_inference_accelerator - computed: false, optional: true, required: false
        this._elasticInferenceAccelerator = new LaunchTemplateElasticInferenceAcceleratorOutputReference(this, "elastic_inference_accelerator");
        // enclave_options - computed: false, optional: true, required: false
        this._enclaveOptions = new LaunchTemplateEnclaveOptionsOutputReference(this, "enclave_options");
        // hibernation_options - computed: false, optional: true, required: false
        this._hibernationOptions = new LaunchTemplateHibernationOptionsOutputReference(this, "hibernation_options");
        // iam_instance_profile - computed: false, optional: true, required: false
        this._iamInstanceProfile = new LaunchTemplateIamInstanceProfileOutputReference(this, "iam_instance_profile");
        // instance_market_options - computed: false, optional: true, required: false
        this._instanceMarketOptions = new LaunchTemplateInstanceMarketOptionsOutputReference(this, "instance_market_options");
        // instance_requirements - computed: false, optional: true, required: false
        this._instanceRequirements = new LaunchTemplateInstanceRequirementsOutputReference(this, "instance_requirements");
        // license_specification - computed: false, optional: true, required: false
        this._licenseSpecification = new LaunchTemplateLicenseSpecificationList(this, "license_specification", true);
        // maintenance_options - computed: false, optional: true, required: false
        this._maintenanceOptions = new LaunchTemplateMaintenanceOptionsOutputReference(this, "maintenance_options");
        // metadata_options - computed: false, optional: true, required: false
        this._metadataOptions = new LaunchTemplateMetadataOptionsOutputReference(this, "metadata_options");
        // monitoring - computed: false, optional: true, required: false
        this._monitoring = new LaunchTemplateMonitoringOutputReference(this, "monitoring");
        // network_interfaces - computed: false, optional: true, required: false
        this._networkInterfaces = new LaunchTemplateNetworkInterfacesList(this, "network_interfaces", false);
        // placement - computed: false, optional: true, required: false
        this._placement = new LaunchTemplatePlacementOutputReference(this, "placement");
        // private_dns_name_options - computed: false, optional: true, required: false
        this._privateDnsNameOptions = new LaunchTemplatePrivateDnsNameOptionsOutputReference(this, "private_dns_name_options");
        // tag_specifications - computed: false, optional: true, required: false
        this._tagSpecifications = new LaunchTemplateTagSpecificationsList(this, "tag_specifications", false);
        this._defaultVersion = config.defaultVersion;
        this._description = config.description;
        this._disableApiStop = config.disableApiStop;
        this._disableApiTermination = config.disableApiTermination;
        this._ebsOptimized = config.ebsOptimized;
        this._id = config.id;
        this._imageId = config.imageId;
        this._instanceInitiatedShutdownBehavior = config.instanceInitiatedShutdownBehavior;
        this._instanceType = config.instanceType;
        this._kernelId = config.kernelId;
        this._keyName = config.keyName;
        this._name = config.name;
        this._namePrefix = config.namePrefix;
        this._ramDiskId = config.ramDiskId;
        this._securityGroupNames = config.securityGroupNames;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._updateDefaultVersion = config.updateDefaultVersion;
        this._userData = config.userData;
        this._vpcSecurityGroupIds = config.vpcSecurityGroupIds;
        this._blockDeviceMappings.internalValue = config.blockDeviceMappings;
        this._capacityReservationSpecification.internalValue = config.capacityReservationSpecification;
        this._cpuOptions.internalValue = config.cpuOptions;
        this._creditSpecification.internalValue = config.creditSpecification;
        this._elasticGpuSpecifications.internalValue = config.elasticGpuSpecifications;
        this._elasticInferenceAccelerator.internalValue = config.elasticInferenceAccelerator;
        this._enclaveOptions.internalValue = config.enclaveOptions;
        this._hibernationOptions.internalValue = config.hibernationOptions;
        this._iamInstanceProfile.internalValue = config.iamInstanceProfile;
        this._instanceMarketOptions.internalValue = config.instanceMarketOptions;
        this._instanceRequirements.internalValue = config.instanceRequirements;
        this._licenseSpecification.internalValue = config.licenseSpecification;
        this._maintenanceOptions.internalValue = config.maintenanceOptions;
        this._metadataOptions.internalValue = config.metadataOptions;
        this._monitoring.internalValue = config.monitoring;
        this._networkInterfaces.internalValue = config.networkInterfaces;
        this._placement.internalValue = config.placement;
        this._privateDnsNameOptions.internalValue = config.privateDnsNameOptions;
        this._tagSpecifications.internalValue = config.tagSpecifications;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get defaultVersion() {
        return this.getNumberAttribute('default_version');
    }
    set defaultVersion(value) {
        this._defaultVersion = value;
    }
    resetDefaultVersion() {
        this._defaultVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultVersionInput() {
        return this._defaultVersion;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get disableApiStop() {
        return this.getBooleanAttribute('disable_api_stop');
    }
    set disableApiStop(value) {
        this._disableApiStop = value;
    }
    resetDisableApiStop() {
        this._disableApiStop = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disableApiStopInput() {
        return this._disableApiStop;
    }
    get disableApiTermination() {
        return this.getBooleanAttribute('disable_api_termination');
    }
    set disableApiTermination(value) {
        this._disableApiTermination = value;
    }
    resetDisableApiTermination() {
        this._disableApiTermination = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disableApiTerminationInput() {
        return this._disableApiTermination;
    }
    get ebsOptimized() {
        return this.getStringAttribute('ebs_optimized');
    }
    set ebsOptimized(value) {
        this._ebsOptimized = value;
    }
    resetEbsOptimized() {
        this._ebsOptimized = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebsOptimizedInput() {
        return this._ebsOptimized;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get imageId() {
        return this.getStringAttribute('image_id');
    }
    set imageId(value) {
        this._imageId = value;
    }
    resetImageId() {
        this._imageId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageIdInput() {
        return this._imageId;
    }
    get instanceInitiatedShutdownBehavior() {
        return this.getStringAttribute('instance_initiated_shutdown_behavior');
    }
    set instanceInitiatedShutdownBehavior(value) {
        this._instanceInitiatedShutdownBehavior = value;
    }
    resetInstanceInitiatedShutdownBehavior() {
        this._instanceInitiatedShutdownBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceInitiatedShutdownBehaviorInput() {
        return this._instanceInitiatedShutdownBehavior;
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get kernelId() {
        return this.getStringAttribute('kernel_id');
    }
    set kernelId(value) {
        this._kernelId = value;
    }
    resetKernelId() {
        this._kernelId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kernelIdInput() {
        return this._kernelId;
    }
    get keyName() {
        return this.getStringAttribute('key_name');
    }
    set keyName(value) {
        this._keyName = value;
    }
    resetKeyName() {
        this._keyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyNameInput() {
        return this._keyName;
    }
    // latest_version - computed: true, optional: false, required: false
    get latestVersion() {
        return this.getNumberAttribute('latest_version');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get namePrefix() {
        return this.getStringAttribute('name_prefix');
    }
    set namePrefix(value) {
        this._namePrefix = value;
    }
    resetNamePrefix() {
        this._namePrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get namePrefixInput() {
        return this._namePrefix;
    }
    get ramDiskId() {
        return this.getStringAttribute('ram_disk_id');
    }
    set ramDiskId(value) {
        this._ramDiskId = value;
    }
    resetRamDiskId() {
        this._ramDiskId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ramDiskIdInput() {
        return this._ramDiskId;
    }
    get securityGroupNames() {
        return cdktf.Fn.tolist(this.getListAttribute('security_group_names'));
    }
    set securityGroupNames(value) {
        this._securityGroupNames = value;
    }
    resetSecurityGroupNames() {
        this._securityGroupNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupNamesInput() {
        return this._securityGroupNames;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get updateDefaultVersion() {
        return this.getBooleanAttribute('update_default_version');
    }
    set updateDefaultVersion(value) {
        this._updateDefaultVersion = value;
    }
    resetUpdateDefaultVersion() {
        this._updateDefaultVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateDefaultVersionInput() {
        return this._updateDefaultVersion;
    }
    get userData() {
        return this.getStringAttribute('user_data');
    }
    set userData(value) {
        this._userData = value;
    }
    resetUserData() {
        this._userData = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userDataInput() {
        return this._userData;
    }
    get vpcSecurityGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('vpc_security_group_ids'));
    }
    set vpcSecurityGroupIds(value) {
        this._vpcSecurityGroupIds = value;
    }
    resetVpcSecurityGroupIds() {
        this._vpcSecurityGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcSecurityGroupIdsInput() {
        return this._vpcSecurityGroupIds;
    }
    get blockDeviceMappings() {
        return this._blockDeviceMappings;
    }
    putBlockDeviceMappings(value) {
        this._blockDeviceMappings.internalValue = value;
    }
    resetBlockDeviceMappings() {
        this._blockDeviceMappings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get blockDeviceMappingsInput() {
        return this._blockDeviceMappings.internalValue;
    }
    get capacityReservationSpecification() {
        return this._capacityReservationSpecification;
    }
    putCapacityReservationSpecification(value) {
        this._capacityReservationSpecification.internalValue = value;
    }
    resetCapacityReservationSpecification() {
        this._capacityReservationSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get capacityReservationSpecificationInput() {
        return this._capacityReservationSpecification.internalValue;
    }
    get cpuOptions() {
        return this._cpuOptions;
    }
    putCpuOptions(value) {
        this._cpuOptions.internalValue = value;
    }
    resetCpuOptions() {
        this._cpuOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuOptionsInput() {
        return this._cpuOptions.internalValue;
    }
    get creditSpecification() {
        return this._creditSpecification;
    }
    putCreditSpecification(value) {
        this._creditSpecification.internalValue = value;
    }
    resetCreditSpecification() {
        this._creditSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get creditSpecificationInput() {
        return this._creditSpecification.internalValue;
    }
    get elasticGpuSpecifications() {
        return this._elasticGpuSpecifications;
    }
    putElasticGpuSpecifications(value) {
        this._elasticGpuSpecifications.internalValue = value;
    }
    resetElasticGpuSpecifications() {
        this._elasticGpuSpecifications.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get elasticGpuSpecificationsInput() {
        return this._elasticGpuSpecifications.internalValue;
    }
    get elasticInferenceAccelerator() {
        return this._elasticInferenceAccelerator;
    }
    putElasticInferenceAccelerator(value) {
        this._elasticInferenceAccelerator.internalValue = value;
    }
    resetElasticInferenceAccelerator() {
        this._elasticInferenceAccelerator.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get elasticInferenceAcceleratorInput() {
        return this._elasticInferenceAccelerator.internalValue;
    }
    get enclaveOptions() {
        return this._enclaveOptions;
    }
    putEnclaveOptions(value) {
        this._enclaveOptions.internalValue = value;
    }
    resetEnclaveOptions() {
        this._enclaveOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enclaveOptionsInput() {
        return this._enclaveOptions.internalValue;
    }
    get hibernationOptions() {
        return this._hibernationOptions;
    }
    putHibernationOptions(value) {
        this._hibernationOptions.internalValue = value;
    }
    resetHibernationOptions() {
        this._hibernationOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hibernationOptionsInput() {
        return this._hibernationOptions.internalValue;
    }
    get iamInstanceProfile() {
        return this._iamInstanceProfile;
    }
    putIamInstanceProfile(value) {
        this._iamInstanceProfile.internalValue = value;
    }
    resetIamInstanceProfile() {
        this._iamInstanceProfile.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iamInstanceProfileInput() {
        return this._iamInstanceProfile.internalValue;
    }
    get instanceMarketOptions() {
        return this._instanceMarketOptions;
    }
    putInstanceMarketOptions(value) {
        this._instanceMarketOptions.internalValue = value;
    }
    resetInstanceMarketOptions() {
        this._instanceMarketOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceMarketOptionsInput() {
        return this._instanceMarketOptions.internalValue;
    }
    get instanceRequirements() {
        return this._instanceRequirements;
    }
    putInstanceRequirements(value) {
        this._instanceRequirements.internalValue = value;
    }
    resetInstanceRequirements() {
        this._instanceRequirements.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceRequirementsInput() {
        return this._instanceRequirements.internalValue;
    }
    get licenseSpecification() {
        return this._licenseSpecification;
    }
    putLicenseSpecification(value) {
        this._licenseSpecification.internalValue = value;
    }
    resetLicenseSpecification() {
        this._licenseSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get licenseSpecificationInput() {
        return this._licenseSpecification.internalValue;
    }
    get maintenanceOptions() {
        return this._maintenanceOptions;
    }
    putMaintenanceOptions(value) {
        this._maintenanceOptions.internalValue = value;
    }
    resetMaintenanceOptions() {
        this._maintenanceOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceOptionsInput() {
        return this._maintenanceOptions.internalValue;
    }
    get metadataOptions() {
        return this._metadataOptions;
    }
    putMetadataOptions(value) {
        this._metadataOptions.internalValue = value;
    }
    resetMetadataOptions() {
        this._metadataOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataOptionsInput() {
        return this._metadataOptions.internalValue;
    }
    get monitoring() {
        return this._monitoring;
    }
    putMonitoring(value) {
        this._monitoring.internalValue = value;
    }
    resetMonitoring() {
        this._monitoring.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monitoringInput() {
        return this._monitoring.internalValue;
    }
    get networkInterfaces() {
        return this._networkInterfaces;
    }
    putNetworkInterfaces(value) {
        this._networkInterfaces.internalValue = value;
    }
    resetNetworkInterfaces() {
        this._networkInterfaces.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInterfacesInput() {
        return this._networkInterfaces.internalValue;
    }
    get placement() {
        return this._placement;
    }
    putPlacement(value) {
        this._placement.internalValue = value;
    }
    resetPlacement() {
        this._placement.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get placementInput() {
        return this._placement.internalValue;
    }
    get privateDnsNameOptions() {
        return this._privateDnsNameOptions;
    }
    putPrivateDnsNameOptions(value) {
        this._privateDnsNameOptions.internalValue = value;
    }
    resetPrivateDnsNameOptions() {
        this._privateDnsNameOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateDnsNameOptionsInput() {
        return this._privateDnsNameOptions.internalValue;
    }
    get tagSpecifications() {
        return this._tagSpecifications;
    }
    putTagSpecifications(value) {
        this._tagSpecifications.internalValue = value;
    }
    resetTagSpecifications() {
        this._tagSpecifications.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagSpecificationsInput() {
        return this._tagSpecifications.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            default_version: cdktf.numberToTerraform(this._defaultVersion),
            description: cdktf.stringToTerraform(this._description),
            disable_api_stop: cdktf.booleanToTerraform(this._disableApiStop),
            disable_api_termination: cdktf.booleanToTerraform(this._disableApiTermination),
            ebs_optimized: cdktf.stringToTerraform(this._ebsOptimized),
            id: cdktf.stringToTerraform(this._id),
            image_id: cdktf.stringToTerraform(this._imageId),
            instance_initiated_shutdown_behavior: cdktf.stringToTerraform(this._instanceInitiatedShutdownBehavior),
            instance_type: cdktf.stringToTerraform(this._instanceType),
            kernel_id: cdktf.stringToTerraform(this._kernelId),
            key_name: cdktf.stringToTerraform(this._keyName),
            name: cdktf.stringToTerraform(this._name),
            name_prefix: cdktf.stringToTerraform(this._namePrefix),
            ram_disk_id: cdktf.stringToTerraform(this._ramDiskId),
            security_group_names: cdktf.listMapper(cdktf.stringToTerraform, false)(this._securityGroupNames),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            update_default_version: cdktf.booleanToTerraform(this._updateDefaultVersion),
            user_data: cdktf.stringToTerraform(this._userData),
            vpc_security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._vpcSecurityGroupIds),
            block_device_mappings: cdktf.listMapper(launchTemplateBlockDeviceMappingsToTerraform, true)(this._blockDeviceMappings.internalValue),
            capacity_reservation_specification: launchTemplateCapacityReservationSpecificationToTerraform(this._capacityReservationSpecification.internalValue),
            cpu_options: launchTemplateCpuOptionsToTerraform(this._cpuOptions.internalValue),
            credit_specification: launchTemplateCreditSpecificationToTerraform(this._creditSpecification.internalValue),
            elastic_gpu_specifications: cdktf.listMapper(launchTemplateElasticGpuSpecificationsToTerraform, true)(this._elasticGpuSpecifications.internalValue),
            elastic_inference_accelerator: launchTemplateElasticInferenceAcceleratorToTerraform(this._elasticInferenceAccelerator.internalValue),
            enclave_options: launchTemplateEnclaveOptionsToTerraform(this._enclaveOptions.internalValue),
            hibernation_options: launchTemplateHibernationOptionsToTerraform(this._hibernationOptions.internalValue),
            iam_instance_profile: launchTemplateIamInstanceProfileToTerraform(this._iamInstanceProfile.internalValue),
            instance_market_options: launchTemplateInstanceMarketOptionsToTerraform(this._instanceMarketOptions.internalValue),
            instance_requirements: launchTemplateInstanceRequirementsToTerraform(this._instanceRequirements.internalValue),
            license_specification: cdktf.listMapper(launchTemplateLicenseSpecificationToTerraform, true)(this._licenseSpecification.internalValue),
            maintenance_options: launchTemplateMaintenanceOptionsToTerraform(this._maintenanceOptions.internalValue),
            metadata_options: launchTemplateMetadataOptionsToTerraform(this._metadataOptions.internalValue),
            monitoring: launchTemplateMonitoringToTerraform(this._monitoring.internalValue),
            network_interfaces: cdktf.listMapper(launchTemplateNetworkInterfacesToTerraform, true)(this._networkInterfaces.internalValue),
            placement: launchTemplatePlacementToTerraform(this._placement.internalValue),
            private_dns_name_options: launchTemplatePrivateDnsNameOptionsToTerraform(this._privateDnsNameOptions.internalValue),
            tag_specifications: cdktf.listMapper(launchTemplateTagSpecificationsToTerraform, true)(this._tagSpecifications.internalValue),
        };
    }
}
exports.LaunchTemplate = LaunchTemplate;
_11 = JSII_RTTI_SYMBOL_1;
LaunchTemplate[_11] = { fqn: "@cdktf/provider-aws.launchTemplate.LaunchTemplate", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
LaunchTemplate.tfResourceType = "aws_launch_template";
//# sourceMappingURL=data:application/json;base64,