"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WafregionalByteMatchSet = exports.WafregionalByteMatchSetByteMatchTuplesList = exports.WafregionalByteMatchSetByteMatchTuplesOutputReference = exports.wafregionalByteMatchSetByteMatchTuplesToTerraform = exports.WafregionalByteMatchSetByteMatchTuplesFieldToMatchOutputReference = exports.wafregionalByteMatchSetByteMatchTuplesFieldToMatchToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function wafregionalByteMatchSetByteMatchTuplesFieldToMatchToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        data: cdktf.stringToTerraform(struct.data),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.wafregionalByteMatchSetByteMatchTuplesFieldToMatchToTerraform = wafregionalByteMatchSetByteMatchTuplesFieldToMatchToTerraform;
class WafregionalByteMatchSetByteMatchTuplesFieldToMatchOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._data !== undefined) {
            hasAnyValues = true;
            internalValueResult.data = this._data;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._data = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._data = value.data;
            this._type = value.type;
        }
    }
    get data() {
        return this.getStringAttribute('data');
    }
    set data(value) {
        this._data = value;
    }
    resetData() {
        this._data = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataInput() {
        return this._data;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.WafregionalByteMatchSetByteMatchTuplesFieldToMatchOutputReference = WafregionalByteMatchSetByteMatchTuplesFieldToMatchOutputReference;
_a = JSII_RTTI_SYMBOL_1;
WafregionalByteMatchSetByteMatchTuplesFieldToMatchOutputReference[_a] = { fqn: "@cdktf/provider-aws.wafregionalByteMatchSet.WafregionalByteMatchSetByteMatchTuplesFieldToMatchOutputReference", version: "10.0.12" };
function wafregionalByteMatchSetByteMatchTuplesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        positional_constraint: cdktf.stringToTerraform(struct.positionalConstraint),
        target_string: cdktf.stringToTerraform(struct.targetString),
        text_transformation: cdktf.stringToTerraform(struct.textTransformation),
        field_to_match: wafregionalByteMatchSetByteMatchTuplesFieldToMatchToTerraform(struct.fieldToMatch),
    };
}
exports.wafregionalByteMatchSetByteMatchTuplesToTerraform = wafregionalByteMatchSetByteMatchTuplesToTerraform;
class WafregionalByteMatchSetByteMatchTuplesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // field_to_match - computed: false, optional: false, required: true
        this._fieldToMatch = new WafregionalByteMatchSetByteMatchTuplesFieldToMatchOutputReference(this, "field_to_match");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._positionalConstraint !== undefined) {
            hasAnyValues = true;
            internalValueResult.positionalConstraint = this._positionalConstraint;
        }
        if (this._targetString !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetString = this._targetString;
        }
        if (this._textTransformation !== undefined) {
            hasAnyValues = true;
            internalValueResult.textTransformation = this._textTransformation;
        }
        if (this._fieldToMatch?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fieldToMatch = this._fieldToMatch?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._positionalConstraint = undefined;
            this._targetString = undefined;
            this._textTransformation = undefined;
            this._fieldToMatch.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._positionalConstraint = value.positionalConstraint;
            this._targetString = value.targetString;
            this._textTransformation = value.textTransformation;
            this._fieldToMatch.internalValue = value.fieldToMatch;
        }
    }
    get positionalConstraint() {
        return this.getStringAttribute('positional_constraint');
    }
    set positionalConstraint(value) {
        this._positionalConstraint = value;
    }
    // Temporarily expose input value. Use with caution.
    get positionalConstraintInput() {
        return this._positionalConstraint;
    }
    get targetString() {
        return this.getStringAttribute('target_string');
    }
    set targetString(value) {
        this._targetString = value;
    }
    resetTargetString() {
        this._targetString = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetStringInput() {
        return this._targetString;
    }
    get textTransformation() {
        return this.getStringAttribute('text_transformation');
    }
    set textTransformation(value) {
        this._textTransformation = value;
    }
    // Temporarily expose input value. Use with caution.
    get textTransformationInput() {
        return this._textTransformation;
    }
    get fieldToMatch() {
        return this._fieldToMatch;
    }
    putFieldToMatch(value) {
        this._fieldToMatch.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get fieldToMatchInput() {
        return this._fieldToMatch.internalValue;
    }
}
exports.WafregionalByteMatchSetByteMatchTuplesOutputReference = WafregionalByteMatchSetByteMatchTuplesOutputReference;
_b = JSII_RTTI_SYMBOL_1;
WafregionalByteMatchSetByteMatchTuplesOutputReference[_b] = { fqn: "@cdktf/provider-aws.wafregionalByteMatchSet.WafregionalByteMatchSetByteMatchTuplesOutputReference", version: "10.0.12" };
class WafregionalByteMatchSetByteMatchTuplesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new WafregionalByteMatchSetByteMatchTuplesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.WafregionalByteMatchSetByteMatchTuplesList = WafregionalByteMatchSetByteMatchTuplesList;
_c = JSII_RTTI_SYMBOL_1;
WafregionalByteMatchSetByteMatchTuplesList[_c] = { fqn: "@cdktf/provider-aws.wafregionalByteMatchSet.WafregionalByteMatchSetByteMatchTuplesList", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/wafregional_byte_match_set aws_wafregional_byte_match_set}
*/
class WafregionalByteMatchSet extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/wafregional_byte_match_set aws_wafregional_byte_match_set} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options WafregionalByteMatchSetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_wafregional_byte_match_set',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // byte_match_tuples - computed: false, optional: true, required: false
        this._byteMatchTuples = new WafregionalByteMatchSetByteMatchTuplesList(this, "byte_match_tuples", true);
        this._id = config.id;
        this._name = config.name;
        this._byteMatchTuples.internalValue = config.byteMatchTuples;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get byteMatchTuples() {
        return this._byteMatchTuples;
    }
    putByteMatchTuples(value) {
        this._byteMatchTuples.internalValue = value;
    }
    resetByteMatchTuples() {
        this._byteMatchTuples.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get byteMatchTuplesInput() {
        return this._byteMatchTuples.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            byte_match_tuples: cdktf.listMapper(wafregionalByteMatchSetByteMatchTuplesToTerraform, true)(this._byteMatchTuples.internalValue),
        };
    }
}
exports.WafregionalByteMatchSet = WafregionalByteMatchSet;
_d = JSII_RTTI_SYMBOL_1;
WafregionalByteMatchSet[_d] = { fqn: "@cdktf/provider-aws.wafregionalByteMatchSet.WafregionalByteMatchSet", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
WafregionalByteMatchSet.tfResourceType = "aws_wafregional_byte_match_set";
//# sourceMappingURL=data:application/json;base64,