"use strict";
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerWorkforce = exports.SagemakerWorkforceWorkforceVpcConfigOutputReference = exports.sagemakerWorkforceWorkforceVpcConfigToTerraform = exports.SagemakerWorkforceSourceIpConfigOutputReference = exports.sagemakerWorkforceSourceIpConfigToTerraform = exports.SagemakerWorkforceOidcConfigOutputReference = exports.sagemakerWorkforceOidcConfigToTerraform = exports.SagemakerWorkforceCognitoConfigOutputReference = exports.sagemakerWorkforceCognitoConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function sagemakerWorkforceCognitoConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_id: cdktf.stringToTerraform(struct.clientId),
        user_pool: cdktf.stringToTerraform(struct.userPool),
    };
}
exports.sagemakerWorkforceCognitoConfigToTerraform = sagemakerWorkforceCognitoConfigToTerraform;
class SagemakerWorkforceCognitoConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._userPool !== undefined) {
            hasAnyValues = true;
            internalValueResult.userPool = this._userPool;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientId = undefined;
            this._userPool = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientId = value.clientId;
            this._userPool = value.userPool;
        }
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get userPool() {
        return this.getStringAttribute('user_pool');
    }
    set userPool(value) {
        this._userPool = value;
    }
    // Temporarily expose input value. Use with caution.
    get userPoolInput() {
        return this._userPool;
    }
}
exports.SagemakerWorkforceCognitoConfigOutputReference = SagemakerWorkforceCognitoConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
SagemakerWorkforceCognitoConfigOutputReference[_a] = { fqn: "@cdktf/provider-aws.sagemakerWorkforce.SagemakerWorkforceCognitoConfigOutputReference", version: "10.0.12" };
function sagemakerWorkforceOidcConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        authorization_endpoint: cdktf.stringToTerraform(struct.authorizationEndpoint),
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret: cdktf.stringToTerraform(struct.clientSecret),
        issuer: cdktf.stringToTerraform(struct.issuer),
        jwks_uri: cdktf.stringToTerraform(struct.jwksUri),
        logout_endpoint: cdktf.stringToTerraform(struct.logoutEndpoint),
        token_endpoint: cdktf.stringToTerraform(struct.tokenEndpoint),
        user_info_endpoint: cdktf.stringToTerraform(struct.userInfoEndpoint),
    };
}
exports.sagemakerWorkforceOidcConfigToTerraform = sagemakerWorkforceOidcConfigToTerraform;
class SagemakerWorkforceOidcConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authorizationEndpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorizationEndpoint = this._authorizationEndpoint;
        }
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._clientSecret !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecret = this._clientSecret;
        }
        if (this._issuer !== undefined) {
            hasAnyValues = true;
            internalValueResult.issuer = this._issuer;
        }
        if (this._jwksUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.jwksUri = this._jwksUri;
        }
        if (this._logoutEndpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.logoutEndpoint = this._logoutEndpoint;
        }
        if (this._tokenEndpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.tokenEndpoint = this._tokenEndpoint;
        }
        if (this._userInfoEndpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.userInfoEndpoint = this._userInfoEndpoint;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authorizationEndpoint = undefined;
            this._clientId = undefined;
            this._clientSecret = undefined;
            this._issuer = undefined;
            this._jwksUri = undefined;
            this._logoutEndpoint = undefined;
            this._tokenEndpoint = undefined;
            this._userInfoEndpoint = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authorizationEndpoint = value.authorizationEndpoint;
            this._clientId = value.clientId;
            this._clientSecret = value.clientSecret;
            this._issuer = value.issuer;
            this._jwksUri = value.jwksUri;
            this._logoutEndpoint = value.logoutEndpoint;
            this._tokenEndpoint = value.tokenEndpoint;
            this._userInfoEndpoint = value.userInfoEndpoint;
        }
    }
    get authorizationEndpoint() {
        return this.getStringAttribute('authorization_endpoint');
    }
    set authorizationEndpoint(value) {
        this._authorizationEndpoint = value;
    }
    // Temporarily expose input value. Use with caution.
    get authorizationEndpointInput() {
        return this._authorizationEndpoint;
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get clientSecret() {
        return this.getStringAttribute('client_secret');
    }
    set clientSecret(value) {
        this._clientSecret = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretInput() {
        return this._clientSecret;
    }
    get issuer() {
        return this.getStringAttribute('issuer');
    }
    set issuer(value) {
        this._issuer = value;
    }
    // Temporarily expose input value. Use with caution.
    get issuerInput() {
        return this._issuer;
    }
    get jwksUri() {
        return this.getStringAttribute('jwks_uri');
    }
    set jwksUri(value) {
        this._jwksUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get jwksUriInput() {
        return this._jwksUri;
    }
    get logoutEndpoint() {
        return this.getStringAttribute('logout_endpoint');
    }
    set logoutEndpoint(value) {
        this._logoutEndpoint = value;
    }
    // Temporarily expose input value. Use with caution.
    get logoutEndpointInput() {
        return this._logoutEndpoint;
    }
    get tokenEndpoint() {
        return this.getStringAttribute('token_endpoint');
    }
    set tokenEndpoint(value) {
        this._tokenEndpoint = value;
    }
    // Temporarily expose input value. Use with caution.
    get tokenEndpointInput() {
        return this._tokenEndpoint;
    }
    get userInfoEndpoint() {
        return this.getStringAttribute('user_info_endpoint');
    }
    set userInfoEndpoint(value) {
        this._userInfoEndpoint = value;
    }
    // Temporarily expose input value. Use with caution.
    get userInfoEndpointInput() {
        return this._userInfoEndpoint;
    }
}
exports.SagemakerWorkforceOidcConfigOutputReference = SagemakerWorkforceOidcConfigOutputReference;
_b = JSII_RTTI_SYMBOL_1;
SagemakerWorkforceOidcConfigOutputReference[_b] = { fqn: "@cdktf/provider-aws.sagemakerWorkforce.SagemakerWorkforceOidcConfigOutputReference", version: "10.0.12" };
function sagemakerWorkforceSourceIpConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cidrs: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.cidrs),
    };
}
exports.sagemakerWorkforceSourceIpConfigToTerraform = sagemakerWorkforceSourceIpConfigToTerraform;
class SagemakerWorkforceSourceIpConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cidrs !== undefined) {
            hasAnyValues = true;
            internalValueResult.cidrs = this._cidrs;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cidrs = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cidrs = value.cidrs;
        }
    }
    get cidrs() {
        return cdktf.Fn.tolist(this.getListAttribute('cidrs'));
    }
    set cidrs(value) {
        this._cidrs = value;
    }
    // Temporarily expose input value. Use with caution.
    get cidrsInput() {
        return this._cidrs;
    }
}
exports.SagemakerWorkforceSourceIpConfigOutputReference = SagemakerWorkforceSourceIpConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
SagemakerWorkforceSourceIpConfigOutputReference[_c] = { fqn: "@cdktf/provider-aws.sagemakerWorkforce.SagemakerWorkforceSourceIpConfigOutputReference", version: "10.0.12" };
function sagemakerWorkforceWorkforceVpcConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroupIds),
        subnets: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.subnets),
        vpc_id: cdktf.stringToTerraform(struct.vpcId),
    };
}
exports.sagemakerWorkforceWorkforceVpcConfigToTerraform = sagemakerWorkforceWorkforceVpcConfigToTerraform;
class SagemakerWorkforceWorkforceVpcConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._securityGroupIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroupIds = this._securityGroupIds;
        }
        if (this._subnets !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnets = this._subnets;
        }
        if (this._vpcId !== undefined) {
            hasAnyValues = true;
            internalValueResult.vpcId = this._vpcId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._securityGroupIds = undefined;
            this._subnets = undefined;
            this._vpcId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._securityGroupIds = value.securityGroupIds;
            this._subnets = value.subnets;
            this._vpcId = value.vpcId;
        }
    }
    get securityGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('security_group_ids'));
    }
    set securityGroupIds(value) {
        this._securityGroupIds = value;
    }
    resetSecurityGroupIds() {
        this._securityGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupIdsInput() {
        return this._securityGroupIds;
    }
    get subnets() {
        return cdktf.Fn.tolist(this.getListAttribute('subnets'));
    }
    set subnets(value) {
        this._subnets = value;
    }
    resetSubnets() {
        this._subnets = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetsInput() {
        return this._subnets;
    }
    // vpc_endpoint_id - computed: true, optional: false, required: false
    get vpcEndpointId() {
        return this.getStringAttribute('vpc_endpoint_id');
    }
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
    set vpcId(value) {
        this._vpcId = value;
    }
    resetVpcId() {
        this._vpcId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcIdInput() {
        return this._vpcId;
    }
}
exports.SagemakerWorkforceWorkforceVpcConfigOutputReference = SagemakerWorkforceWorkforceVpcConfigOutputReference;
_d = JSII_RTTI_SYMBOL_1;
SagemakerWorkforceWorkforceVpcConfigOutputReference[_d] = { fqn: "@cdktf/provider-aws.sagemakerWorkforce.SagemakerWorkforceWorkforceVpcConfigOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/sagemaker_workforce aws_sagemaker_workforce}
*/
class SagemakerWorkforce extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/sagemaker_workforce aws_sagemaker_workforce} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerWorkforceConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_sagemaker_workforce',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // cognito_config - computed: false, optional: true, required: false
        this._cognitoConfig = new SagemakerWorkforceCognitoConfigOutputReference(this, "cognito_config");
        // oidc_config - computed: false, optional: true, required: false
        this._oidcConfig = new SagemakerWorkforceOidcConfigOutputReference(this, "oidc_config");
        // source_ip_config - computed: false, optional: true, required: false
        this._sourceIpConfig = new SagemakerWorkforceSourceIpConfigOutputReference(this, "source_ip_config");
        // workforce_vpc_config - computed: false, optional: true, required: false
        this._workforceVpcConfig = new SagemakerWorkforceWorkforceVpcConfigOutputReference(this, "workforce_vpc_config");
        this._id = config.id;
        this._workforceName = config.workforceName;
        this._cognitoConfig.internalValue = config.cognitoConfig;
        this._oidcConfig.internalValue = config.oidcConfig;
        this._sourceIpConfig.internalValue = config.sourceIpConfig;
        this._workforceVpcConfig.internalValue = config.workforceVpcConfig;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // subdomain - computed: true, optional: false, required: false
    get subdomain() {
        return this.getStringAttribute('subdomain');
    }
    get workforceName() {
        return this.getStringAttribute('workforce_name');
    }
    set workforceName(value) {
        this._workforceName = value;
    }
    // Temporarily expose input value. Use with caution.
    get workforceNameInput() {
        return this._workforceName;
    }
    get cognitoConfig() {
        return this._cognitoConfig;
    }
    putCognitoConfig(value) {
        this._cognitoConfig.internalValue = value;
    }
    resetCognitoConfig() {
        this._cognitoConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cognitoConfigInput() {
        return this._cognitoConfig.internalValue;
    }
    get oidcConfig() {
        return this._oidcConfig;
    }
    putOidcConfig(value) {
        this._oidcConfig.internalValue = value;
    }
    resetOidcConfig() {
        this._oidcConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oidcConfigInput() {
        return this._oidcConfig.internalValue;
    }
    get sourceIpConfig() {
        return this._sourceIpConfig;
    }
    putSourceIpConfig(value) {
        this._sourceIpConfig.internalValue = value;
    }
    resetSourceIpConfig() {
        this._sourceIpConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceIpConfigInput() {
        return this._sourceIpConfig.internalValue;
    }
    get workforceVpcConfig() {
        return this._workforceVpcConfig;
    }
    putWorkforceVpcConfig(value) {
        this._workforceVpcConfig.internalValue = value;
    }
    resetWorkforceVpcConfig() {
        this._workforceVpcConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workforceVpcConfigInput() {
        return this._workforceVpcConfig.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            workforce_name: cdktf.stringToTerraform(this._workforceName),
            cognito_config: sagemakerWorkforceCognitoConfigToTerraform(this._cognitoConfig.internalValue),
            oidc_config: sagemakerWorkforceOidcConfigToTerraform(this._oidcConfig.internalValue),
            source_ip_config: sagemakerWorkforceSourceIpConfigToTerraform(this._sourceIpConfig.internalValue),
            workforce_vpc_config: sagemakerWorkforceWorkforceVpcConfigToTerraform(this._workforceVpcConfig.internalValue),
        };
    }
}
exports.SagemakerWorkforce = SagemakerWorkforce;
_e = JSII_RTTI_SYMBOL_1;
SagemakerWorkforce[_e] = { fqn: "@cdktf/provider-aws.sagemakerWorkforce.SagemakerWorkforce", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
SagemakerWorkforce.tfResourceType = "aws_sagemaker_workforce";
//# sourceMappingURL=data:application/json;base64,