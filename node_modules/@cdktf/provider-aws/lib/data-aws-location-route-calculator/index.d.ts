import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
export interface DataAwsLocationRouteCalculatorConfig extends cdktf.TerraformMetaArguments {
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/d/location_route_calculator#calculator_name DataAwsLocationRouteCalculator#calculator_name}
    */
    readonly calculatorName: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/d/location_route_calculator#id DataAwsLocationRouteCalculator#id}
    *
    * Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
    * If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
    */
    readonly id?: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/d/location_route_calculator#tags DataAwsLocationRouteCalculator#tags}
    */
    readonly tags?: {
        [key: string]: string;
    };
}
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/d/location_route_calculator aws_location_route_calculator}
*/
export declare class DataAwsLocationRouteCalculator extends cdktf.TerraformDataSource {
    static readonly tfResourceType = "aws_location_route_calculator";
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/d/location_route_calculator aws_location_route_calculator} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsLocationRouteCalculatorConfig
    */
    constructor(scope: Construct, id: string, config: DataAwsLocationRouteCalculatorConfig);
    get calculatorArn(): string;
    private _calculatorName?;
    get calculatorName(): string;
    set calculatorName(value: string);
    get calculatorNameInput(): string | undefined;
    get createTime(): string;
    get dataSource(): string;
    get description(): string;
    private _id?;
    get id(): string;
    set id(value: string);
    resetId(): void;
    get idInput(): string | undefined;
    private _tags?;
    get tags(): {
        [key: string]: string;
    };
    set tags(value: {
        [key: string]: string;
    });
    resetTags(): void;
    get tagsInput(): {
        [key: string]: string;
    } | undefined;
    get updateTime(): string;
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
