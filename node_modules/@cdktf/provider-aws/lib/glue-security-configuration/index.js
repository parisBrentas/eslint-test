"use strict";
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlueSecurityConfiguration = exports.GlueSecurityConfigurationEncryptionConfigurationOutputReference = exports.glueSecurityConfigurationEncryptionConfigurationToTerraform = exports.GlueSecurityConfigurationEncryptionConfigurationS3EncryptionOutputReference = exports.glueSecurityConfigurationEncryptionConfigurationS3EncryptionToTerraform = exports.GlueSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutputReference = exports.glueSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionToTerraform = exports.GlueSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutputReference = exports.glueSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function glueSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloudwatch_encryption_mode: cdktf.stringToTerraform(struct.cloudwatchEncryptionMode),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
    };
}
exports.glueSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionToTerraform = glueSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionToTerraform;
class GlueSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudwatchEncryptionMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchEncryptionMode = this._cloudwatchEncryptionMode;
        }
        if (this._kmsKeyArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyArn = this._kmsKeyArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudwatchEncryptionMode = undefined;
            this._kmsKeyArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudwatchEncryptionMode = value.cloudwatchEncryptionMode;
            this._kmsKeyArn = value.kmsKeyArn;
        }
    }
    get cloudwatchEncryptionMode() {
        return this.getStringAttribute('cloudwatch_encryption_mode');
    }
    set cloudwatchEncryptionMode(value) {
        this._cloudwatchEncryptionMode = value;
    }
    resetCloudwatchEncryptionMode() {
        this._cloudwatchEncryptionMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchEncryptionModeInput() {
        return this._cloudwatchEncryptionMode;
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
}
exports.GlueSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutputReference = GlueSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutputReference;
_a = JSII_RTTI_SYMBOL_1;
GlueSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutputReference[_a] = { fqn: "@cdktf/provider-aws.glueSecurityConfiguration.GlueSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutputReference", version: "10.0.12" };
function glueSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        job_bookmarks_encryption_mode: cdktf.stringToTerraform(struct.jobBookmarksEncryptionMode),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
    };
}
exports.glueSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionToTerraform = glueSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionToTerraform;
class GlueSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._jobBookmarksEncryptionMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.jobBookmarksEncryptionMode = this._jobBookmarksEncryptionMode;
        }
        if (this._kmsKeyArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyArn = this._kmsKeyArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._jobBookmarksEncryptionMode = undefined;
            this._kmsKeyArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._jobBookmarksEncryptionMode = value.jobBookmarksEncryptionMode;
            this._kmsKeyArn = value.kmsKeyArn;
        }
    }
    get jobBookmarksEncryptionMode() {
        return this.getStringAttribute('job_bookmarks_encryption_mode');
    }
    set jobBookmarksEncryptionMode(value) {
        this._jobBookmarksEncryptionMode = value;
    }
    resetJobBookmarksEncryptionMode() {
        this._jobBookmarksEncryptionMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jobBookmarksEncryptionModeInput() {
        return this._jobBookmarksEncryptionMode;
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
}
exports.GlueSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutputReference = GlueSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutputReference;
_b = JSII_RTTI_SYMBOL_1;
GlueSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutputReference[_b] = { fqn: "@cdktf/provider-aws.glueSecurityConfiguration.GlueSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutputReference", version: "10.0.12" };
function glueSecurityConfigurationEncryptionConfigurationS3EncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
        s3_encryption_mode: cdktf.stringToTerraform(struct.s3EncryptionMode),
    };
}
exports.glueSecurityConfigurationEncryptionConfigurationS3EncryptionToTerraform = glueSecurityConfigurationEncryptionConfigurationS3EncryptionToTerraform;
class GlueSecurityConfigurationEncryptionConfigurationS3EncryptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyArn = this._kmsKeyArn;
        }
        if (this._s3EncryptionMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3EncryptionMode = this._s3EncryptionMode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyArn = undefined;
            this._s3EncryptionMode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyArn = value.kmsKeyArn;
            this._s3EncryptionMode = value.s3EncryptionMode;
        }
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
    get s3EncryptionMode() {
        return this.getStringAttribute('s3_encryption_mode');
    }
    set s3EncryptionMode(value) {
        this._s3EncryptionMode = value;
    }
    resetS3EncryptionMode() {
        this._s3EncryptionMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3EncryptionModeInput() {
        return this._s3EncryptionMode;
    }
}
exports.GlueSecurityConfigurationEncryptionConfigurationS3EncryptionOutputReference = GlueSecurityConfigurationEncryptionConfigurationS3EncryptionOutputReference;
_c = JSII_RTTI_SYMBOL_1;
GlueSecurityConfigurationEncryptionConfigurationS3EncryptionOutputReference[_c] = { fqn: "@cdktf/provider-aws.glueSecurityConfiguration.GlueSecurityConfigurationEncryptionConfigurationS3EncryptionOutputReference", version: "10.0.12" };
function glueSecurityConfigurationEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloudwatch_encryption: glueSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionToTerraform(struct.cloudwatchEncryption),
        job_bookmarks_encryption: glueSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionToTerraform(struct.jobBookmarksEncryption),
        s3_encryption: glueSecurityConfigurationEncryptionConfigurationS3EncryptionToTerraform(struct.s3Encryption),
    };
}
exports.glueSecurityConfigurationEncryptionConfigurationToTerraform = glueSecurityConfigurationEncryptionConfigurationToTerraform;
class GlueSecurityConfigurationEncryptionConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloudwatch_encryption - computed: false, optional: false, required: true
        this._cloudwatchEncryption = new GlueSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutputReference(this, "cloudwatch_encryption");
        // job_bookmarks_encryption - computed: false, optional: false, required: true
        this._jobBookmarksEncryption = new GlueSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutputReference(this, "job_bookmarks_encryption");
        // s3_encryption - computed: false, optional: false, required: true
        this._s3Encryption = new GlueSecurityConfigurationEncryptionConfigurationS3EncryptionOutputReference(this, "s3_encryption");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudwatchEncryption?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchEncryption = this._cloudwatchEncryption?.internalValue;
        }
        if (this._jobBookmarksEncryption?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.jobBookmarksEncryption = this._jobBookmarksEncryption?.internalValue;
        }
        if (this._s3Encryption?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Encryption = this._s3Encryption?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudwatchEncryption.internalValue = undefined;
            this._jobBookmarksEncryption.internalValue = undefined;
            this._s3Encryption.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudwatchEncryption.internalValue = value.cloudwatchEncryption;
            this._jobBookmarksEncryption.internalValue = value.jobBookmarksEncryption;
            this._s3Encryption.internalValue = value.s3Encryption;
        }
    }
    get cloudwatchEncryption() {
        return this._cloudwatchEncryption;
    }
    putCloudwatchEncryption(value) {
        this._cloudwatchEncryption.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchEncryptionInput() {
        return this._cloudwatchEncryption.internalValue;
    }
    get jobBookmarksEncryption() {
        return this._jobBookmarksEncryption;
    }
    putJobBookmarksEncryption(value) {
        this._jobBookmarksEncryption.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get jobBookmarksEncryptionInput() {
        return this._jobBookmarksEncryption.internalValue;
    }
    get s3Encryption() {
        return this._s3Encryption;
    }
    putS3Encryption(value) {
        this._s3Encryption.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3EncryptionInput() {
        return this._s3Encryption.internalValue;
    }
}
exports.GlueSecurityConfigurationEncryptionConfigurationOutputReference = GlueSecurityConfigurationEncryptionConfigurationOutputReference;
_d = JSII_RTTI_SYMBOL_1;
GlueSecurityConfigurationEncryptionConfigurationOutputReference[_d] = { fqn: "@cdktf/provider-aws.glueSecurityConfiguration.GlueSecurityConfigurationEncryptionConfigurationOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/glue_security_configuration aws_glue_security_configuration}
*/
class GlueSecurityConfiguration extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/glue_security_configuration aws_glue_security_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options GlueSecurityConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_glue_security_configuration',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // encryption_configuration - computed: false, optional: false, required: true
        this._encryptionConfiguration = new GlueSecurityConfigurationEncryptionConfigurationOutputReference(this, "encryption_configuration");
        this._id = config.id;
        this._name = config.name;
        this._encryptionConfiguration.internalValue = config.encryptionConfiguration;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get encryptionConfiguration() {
        return this._encryptionConfiguration;
    }
    putEncryptionConfiguration(value) {
        this._encryptionConfiguration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionConfigurationInput() {
        return this._encryptionConfiguration.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            encryption_configuration: glueSecurityConfigurationEncryptionConfigurationToTerraform(this._encryptionConfiguration.internalValue),
        };
    }
}
exports.GlueSecurityConfiguration = GlueSecurityConfiguration;
_e = JSII_RTTI_SYMBOL_1;
GlueSecurityConfiguration[_e] = { fqn: "@cdktf/provider-aws.glueSecurityConfiguration.GlueSecurityConfiguration", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
GlueSecurityConfiguration.tfResourceType = "aws_glue_security_configuration";
//# sourceMappingURL=data:application/json;base64,