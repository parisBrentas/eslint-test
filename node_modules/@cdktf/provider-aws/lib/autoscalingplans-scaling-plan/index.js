"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoscalingplansScalingPlan = exports.AutoscalingplansScalingPlanScalingInstructionList = exports.AutoscalingplansScalingPlanScalingInstructionOutputReference = exports.autoscalingplansScalingPlanScalingInstructionToTerraform = exports.AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationList = exports.AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationOutputReference = exports.autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationToTerraform = exports.AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationOutputReference = exports.autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationToTerraform = exports.AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationOutputReference = exports.autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationToTerraform = exports.AutoscalingplansScalingPlanScalingInstructionPredefinedLoadMetricSpecificationOutputReference = exports.autoscalingplansScalingPlanScalingInstructionPredefinedLoadMetricSpecificationToTerraform = exports.AutoscalingplansScalingPlanScalingInstructionCustomizedLoadMetricSpecificationOutputReference = exports.autoscalingplansScalingPlanScalingInstructionCustomizedLoadMetricSpecificationToTerraform = exports.AutoscalingplansScalingPlanApplicationSourceOutputReference = exports.autoscalingplansScalingPlanApplicationSourceToTerraform = exports.AutoscalingplansScalingPlanApplicationSourceTagFilterList = exports.AutoscalingplansScalingPlanApplicationSourceTagFilterOutputReference = exports.autoscalingplansScalingPlanApplicationSourceTagFilterToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function autoscalingplansScalingPlanApplicationSourceTagFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.autoscalingplansScalingPlanApplicationSourceTagFilterToTerraform = autoscalingplansScalingPlanApplicationSourceTagFilterToTerraform;
class AutoscalingplansScalingPlanApplicationSourceTagFilterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._key = undefined;
            this._values = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._key = value.key;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get values() {
        return cdktf.Fn.tolist(this.getListAttribute('values'));
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.AutoscalingplansScalingPlanApplicationSourceTagFilterOutputReference = AutoscalingplansScalingPlanApplicationSourceTagFilterOutputReference;
_a = JSII_RTTI_SYMBOL_1;
AutoscalingplansScalingPlanApplicationSourceTagFilterOutputReference[_a] = { fqn: "@cdktf/provider-aws.autoscalingplansScalingPlan.AutoscalingplansScalingPlanApplicationSourceTagFilterOutputReference", version: "10.0.12" };
class AutoscalingplansScalingPlanApplicationSourceTagFilterList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AutoscalingplansScalingPlanApplicationSourceTagFilterOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AutoscalingplansScalingPlanApplicationSourceTagFilterList = AutoscalingplansScalingPlanApplicationSourceTagFilterList;
_b = JSII_RTTI_SYMBOL_1;
AutoscalingplansScalingPlanApplicationSourceTagFilterList[_b] = { fqn: "@cdktf/provider-aws.autoscalingplansScalingPlan.AutoscalingplansScalingPlanApplicationSourceTagFilterList", version: "10.0.12" };
function autoscalingplansScalingPlanApplicationSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloudformation_stack_arn: cdktf.stringToTerraform(struct.cloudformationStackArn),
        tag_filter: cdktf.listMapper(autoscalingplansScalingPlanApplicationSourceTagFilterToTerraform, true)(struct.tagFilter),
    };
}
exports.autoscalingplansScalingPlanApplicationSourceToTerraform = autoscalingplansScalingPlanApplicationSourceToTerraform;
class AutoscalingplansScalingPlanApplicationSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // tag_filter - computed: false, optional: true, required: false
        this._tagFilter = new AutoscalingplansScalingPlanApplicationSourceTagFilterList(this, "tag_filter", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudformationStackArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudformationStackArn = this._cloudformationStackArn;
        }
        if (this._tagFilter?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagFilter = this._tagFilter?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudformationStackArn = undefined;
            this._tagFilter.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudformationStackArn = value.cloudformationStackArn;
            this._tagFilter.internalValue = value.tagFilter;
        }
    }
    get cloudformationStackArn() {
        return this.getStringAttribute('cloudformation_stack_arn');
    }
    set cloudformationStackArn(value) {
        this._cloudformationStackArn = value;
    }
    resetCloudformationStackArn() {
        this._cloudformationStackArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudformationStackArnInput() {
        return this._cloudformationStackArn;
    }
    get tagFilter() {
        return this._tagFilter;
    }
    putTagFilter(value) {
        this._tagFilter.internalValue = value;
    }
    resetTagFilter() {
        this._tagFilter.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagFilterInput() {
        return this._tagFilter.internalValue;
    }
}
exports.AutoscalingplansScalingPlanApplicationSourceOutputReference = AutoscalingplansScalingPlanApplicationSourceOutputReference;
_c = JSII_RTTI_SYMBOL_1;
AutoscalingplansScalingPlanApplicationSourceOutputReference[_c] = { fqn: "@cdktf/provider-aws.autoscalingplansScalingPlan.AutoscalingplansScalingPlanApplicationSourceOutputReference", version: "10.0.12" };
function autoscalingplansScalingPlanScalingInstructionCustomizedLoadMetricSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dimensions: cdktf.hashMapper(cdktf.stringToTerraform)(struct.dimensions),
        metric_name: cdktf.stringToTerraform(struct.metricName),
        namespace: cdktf.stringToTerraform(struct.namespace),
        statistic: cdktf.stringToTerraform(struct.statistic),
        unit: cdktf.stringToTerraform(struct.unit),
    };
}
exports.autoscalingplansScalingPlanScalingInstructionCustomizedLoadMetricSpecificationToTerraform = autoscalingplansScalingPlanScalingInstructionCustomizedLoadMetricSpecificationToTerraform;
class AutoscalingplansScalingPlanScalingInstructionCustomizedLoadMetricSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dimensions !== undefined) {
            hasAnyValues = true;
            internalValueResult.dimensions = this._dimensions;
        }
        if (this._metricName !== undefined) {
            hasAnyValues = true;
            internalValueResult.metricName = this._metricName;
        }
        if (this._namespace !== undefined) {
            hasAnyValues = true;
            internalValueResult.namespace = this._namespace;
        }
        if (this._statistic !== undefined) {
            hasAnyValues = true;
            internalValueResult.statistic = this._statistic;
        }
        if (this._unit !== undefined) {
            hasAnyValues = true;
            internalValueResult.unit = this._unit;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dimensions = undefined;
            this._metricName = undefined;
            this._namespace = undefined;
            this._statistic = undefined;
            this._unit = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dimensions = value.dimensions;
            this._metricName = value.metricName;
            this._namespace = value.namespace;
            this._statistic = value.statistic;
            this._unit = value.unit;
        }
    }
    get dimensions() {
        return this.getStringMapAttribute('dimensions');
    }
    set dimensions(value) {
        this._dimensions = value;
    }
    resetDimensions() {
        this._dimensions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dimensionsInput() {
        return this._dimensions;
    }
    get metricName() {
        return this.getStringAttribute('metric_name');
    }
    set metricName(value) {
        this._metricName = value;
    }
    // Temporarily expose input value. Use with caution.
    get metricNameInput() {
        return this._metricName;
    }
    get namespace() {
        return this.getStringAttribute('namespace');
    }
    set namespace(value) {
        this._namespace = value;
    }
    // Temporarily expose input value. Use with caution.
    get namespaceInput() {
        return this._namespace;
    }
    get statistic() {
        return this.getStringAttribute('statistic');
    }
    set statistic(value) {
        this._statistic = value;
    }
    // Temporarily expose input value. Use with caution.
    get statisticInput() {
        return this._statistic;
    }
    get unit() {
        return this.getStringAttribute('unit');
    }
    set unit(value) {
        this._unit = value;
    }
    resetUnit() {
        this._unit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unitInput() {
        return this._unit;
    }
}
exports.AutoscalingplansScalingPlanScalingInstructionCustomizedLoadMetricSpecificationOutputReference = AutoscalingplansScalingPlanScalingInstructionCustomizedLoadMetricSpecificationOutputReference;
_d = JSII_RTTI_SYMBOL_1;
AutoscalingplansScalingPlanScalingInstructionCustomizedLoadMetricSpecificationOutputReference[_d] = { fqn: "@cdktf/provider-aws.autoscalingplansScalingPlan.AutoscalingplansScalingPlanScalingInstructionCustomizedLoadMetricSpecificationOutputReference", version: "10.0.12" };
function autoscalingplansScalingPlanScalingInstructionPredefinedLoadMetricSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        predefined_load_metric_type: cdktf.stringToTerraform(struct.predefinedLoadMetricType),
        resource_label: cdktf.stringToTerraform(struct.resourceLabel),
    };
}
exports.autoscalingplansScalingPlanScalingInstructionPredefinedLoadMetricSpecificationToTerraform = autoscalingplansScalingPlanScalingInstructionPredefinedLoadMetricSpecificationToTerraform;
class AutoscalingplansScalingPlanScalingInstructionPredefinedLoadMetricSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._predefinedLoadMetricType !== undefined) {
            hasAnyValues = true;
            internalValueResult.predefinedLoadMetricType = this._predefinedLoadMetricType;
        }
        if (this._resourceLabel !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceLabel = this._resourceLabel;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._predefinedLoadMetricType = undefined;
            this._resourceLabel = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._predefinedLoadMetricType = value.predefinedLoadMetricType;
            this._resourceLabel = value.resourceLabel;
        }
    }
    get predefinedLoadMetricType() {
        return this.getStringAttribute('predefined_load_metric_type');
    }
    set predefinedLoadMetricType(value) {
        this._predefinedLoadMetricType = value;
    }
    // Temporarily expose input value. Use with caution.
    get predefinedLoadMetricTypeInput() {
        return this._predefinedLoadMetricType;
    }
    get resourceLabel() {
        return this.getStringAttribute('resource_label');
    }
    set resourceLabel(value) {
        this._resourceLabel = value;
    }
    resetResourceLabel() {
        this._resourceLabel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceLabelInput() {
        return this._resourceLabel;
    }
}
exports.AutoscalingplansScalingPlanScalingInstructionPredefinedLoadMetricSpecificationOutputReference = AutoscalingplansScalingPlanScalingInstructionPredefinedLoadMetricSpecificationOutputReference;
_e = JSII_RTTI_SYMBOL_1;
AutoscalingplansScalingPlanScalingInstructionPredefinedLoadMetricSpecificationOutputReference[_e] = { fqn: "@cdktf/provider-aws.autoscalingplansScalingPlan.AutoscalingplansScalingPlanScalingInstructionPredefinedLoadMetricSpecificationOutputReference", version: "10.0.12" };
function autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dimensions: cdktf.hashMapper(cdktf.stringToTerraform)(struct.dimensions),
        metric_name: cdktf.stringToTerraform(struct.metricName),
        namespace: cdktf.stringToTerraform(struct.namespace),
        statistic: cdktf.stringToTerraform(struct.statistic),
        unit: cdktf.stringToTerraform(struct.unit),
    };
}
exports.autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationToTerraform = autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationToTerraform;
class AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dimensions !== undefined) {
            hasAnyValues = true;
            internalValueResult.dimensions = this._dimensions;
        }
        if (this._metricName !== undefined) {
            hasAnyValues = true;
            internalValueResult.metricName = this._metricName;
        }
        if (this._namespace !== undefined) {
            hasAnyValues = true;
            internalValueResult.namespace = this._namespace;
        }
        if (this._statistic !== undefined) {
            hasAnyValues = true;
            internalValueResult.statistic = this._statistic;
        }
        if (this._unit !== undefined) {
            hasAnyValues = true;
            internalValueResult.unit = this._unit;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dimensions = undefined;
            this._metricName = undefined;
            this._namespace = undefined;
            this._statistic = undefined;
            this._unit = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dimensions = value.dimensions;
            this._metricName = value.metricName;
            this._namespace = value.namespace;
            this._statistic = value.statistic;
            this._unit = value.unit;
        }
    }
    get dimensions() {
        return this.getStringMapAttribute('dimensions');
    }
    set dimensions(value) {
        this._dimensions = value;
    }
    resetDimensions() {
        this._dimensions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dimensionsInput() {
        return this._dimensions;
    }
    get metricName() {
        return this.getStringAttribute('metric_name');
    }
    set metricName(value) {
        this._metricName = value;
    }
    // Temporarily expose input value. Use with caution.
    get metricNameInput() {
        return this._metricName;
    }
    get namespace() {
        return this.getStringAttribute('namespace');
    }
    set namespace(value) {
        this._namespace = value;
    }
    // Temporarily expose input value. Use with caution.
    get namespaceInput() {
        return this._namespace;
    }
    get statistic() {
        return this.getStringAttribute('statistic');
    }
    set statistic(value) {
        this._statistic = value;
    }
    // Temporarily expose input value. Use with caution.
    get statisticInput() {
        return this._statistic;
    }
    get unit() {
        return this.getStringAttribute('unit');
    }
    set unit(value) {
        this._unit = value;
    }
    resetUnit() {
        this._unit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unitInput() {
        return this._unit;
    }
}
exports.AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationOutputReference = AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationOutputReference;
_f = JSII_RTTI_SYMBOL_1;
AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationOutputReference[_f] = { fqn: "@cdktf/provider-aws.autoscalingplansScalingPlan.AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationOutputReference", version: "10.0.12" };
function autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        predefined_scaling_metric_type: cdktf.stringToTerraform(struct.predefinedScalingMetricType),
        resource_label: cdktf.stringToTerraform(struct.resourceLabel),
    };
}
exports.autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationToTerraform = autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationToTerraform;
class AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._predefinedScalingMetricType !== undefined) {
            hasAnyValues = true;
            internalValueResult.predefinedScalingMetricType = this._predefinedScalingMetricType;
        }
        if (this._resourceLabel !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceLabel = this._resourceLabel;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._predefinedScalingMetricType = undefined;
            this._resourceLabel = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._predefinedScalingMetricType = value.predefinedScalingMetricType;
            this._resourceLabel = value.resourceLabel;
        }
    }
    get predefinedScalingMetricType() {
        return this.getStringAttribute('predefined_scaling_metric_type');
    }
    set predefinedScalingMetricType(value) {
        this._predefinedScalingMetricType = value;
    }
    // Temporarily expose input value. Use with caution.
    get predefinedScalingMetricTypeInput() {
        return this._predefinedScalingMetricType;
    }
    get resourceLabel() {
        return this.getStringAttribute('resource_label');
    }
    set resourceLabel(value) {
        this._resourceLabel = value;
    }
    resetResourceLabel() {
        this._resourceLabel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceLabelInput() {
        return this._resourceLabel;
    }
}
exports.AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationOutputReference = AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationOutputReference;
_g = JSII_RTTI_SYMBOL_1;
AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationOutputReference[_g] = { fqn: "@cdktf/provider-aws.autoscalingplansScalingPlan.AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationOutputReference", version: "10.0.12" };
function autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disable_scale_in: cdktf.booleanToTerraform(struct.disableScaleIn),
        estimated_instance_warmup: cdktf.numberToTerraform(struct.estimatedInstanceWarmup),
        scale_in_cooldown: cdktf.numberToTerraform(struct.scaleInCooldown),
        scale_out_cooldown: cdktf.numberToTerraform(struct.scaleOutCooldown),
        target_value: cdktf.numberToTerraform(struct.targetValue),
        customized_scaling_metric_specification: autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationToTerraform(struct.customizedScalingMetricSpecification),
        predefined_scaling_metric_specification: autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationToTerraform(struct.predefinedScalingMetricSpecification),
    };
}
exports.autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationToTerraform = autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationToTerraform;
class AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // customized_scaling_metric_specification - computed: false, optional: true, required: false
        this._customizedScalingMetricSpecification = new AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationOutputReference(this, "customized_scaling_metric_specification");
        // predefined_scaling_metric_specification - computed: false, optional: true, required: false
        this._predefinedScalingMetricSpecification = new AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationOutputReference(this, "predefined_scaling_metric_specification");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disableScaleIn !== undefined) {
            hasAnyValues = true;
            internalValueResult.disableScaleIn = this._disableScaleIn;
        }
        if (this._estimatedInstanceWarmup !== undefined) {
            hasAnyValues = true;
            internalValueResult.estimatedInstanceWarmup = this._estimatedInstanceWarmup;
        }
        if (this._scaleInCooldown !== undefined) {
            hasAnyValues = true;
            internalValueResult.scaleInCooldown = this._scaleInCooldown;
        }
        if (this._scaleOutCooldown !== undefined) {
            hasAnyValues = true;
            internalValueResult.scaleOutCooldown = this._scaleOutCooldown;
        }
        if (this._targetValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetValue = this._targetValue;
        }
        if (this._customizedScalingMetricSpecification?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customizedScalingMetricSpecification = this._customizedScalingMetricSpecification?.internalValue;
        }
        if (this._predefinedScalingMetricSpecification?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.predefinedScalingMetricSpecification = this._predefinedScalingMetricSpecification?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._disableScaleIn = undefined;
            this._estimatedInstanceWarmup = undefined;
            this._scaleInCooldown = undefined;
            this._scaleOutCooldown = undefined;
            this._targetValue = undefined;
            this._customizedScalingMetricSpecification.internalValue = undefined;
            this._predefinedScalingMetricSpecification.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._disableScaleIn = value.disableScaleIn;
            this._estimatedInstanceWarmup = value.estimatedInstanceWarmup;
            this._scaleInCooldown = value.scaleInCooldown;
            this._scaleOutCooldown = value.scaleOutCooldown;
            this._targetValue = value.targetValue;
            this._customizedScalingMetricSpecification.internalValue = value.customizedScalingMetricSpecification;
            this._predefinedScalingMetricSpecification.internalValue = value.predefinedScalingMetricSpecification;
        }
    }
    get disableScaleIn() {
        return this.getBooleanAttribute('disable_scale_in');
    }
    set disableScaleIn(value) {
        this._disableScaleIn = value;
    }
    resetDisableScaleIn() {
        this._disableScaleIn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disableScaleInInput() {
        return this._disableScaleIn;
    }
    get estimatedInstanceWarmup() {
        return this.getNumberAttribute('estimated_instance_warmup');
    }
    set estimatedInstanceWarmup(value) {
        this._estimatedInstanceWarmup = value;
    }
    resetEstimatedInstanceWarmup() {
        this._estimatedInstanceWarmup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get estimatedInstanceWarmupInput() {
        return this._estimatedInstanceWarmup;
    }
    get scaleInCooldown() {
        return this.getNumberAttribute('scale_in_cooldown');
    }
    set scaleInCooldown(value) {
        this._scaleInCooldown = value;
    }
    resetScaleInCooldown() {
        this._scaleInCooldown = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scaleInCooldownInput() {
        return this._scaleInCooldown;
    }
    get scaleOutCooldown() {
        return this.getNumberAttribute('scale_out_cooldown');
    }
    set scaleOutCooldown(value) {
        this._scaleOutCooldown = value;
    }
    resetScaleOutCooldown() {
        this._scaleOutCooldown = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scaleOutCooldownInput() {
        return this._scaleOutCooldown;
    }
    get targetValue() {
        return this.getNumberAttribute('target_value');
    }
    set targetValue(value) {
        this._targetValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetValueInput() {
        return this._targetValue;
    }
    get customizedScalingMetricSpecification() {
        return this._customizedScalingMetricSpecification;
    }
    putCustomizedScalingMetricSpecification(value) {
        this._customizedScalingMetricSpecification.internalValue = value;
    }
    resetCustomizedScalingMetricSpecification() {
        this._customizedScalingMetricSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customizedScalingMetricSpecificationInput() {
        return this._customizedScalingMetricSpecification.internalValue;
    }
    get predefinedScalingMetricSpecification() {
        return this._predefinedScalingMetricSpecification;
    }
    putPredefinedScalingMetricSpecification(value) {
        this._predefinedScalingMetricSpecification.internalValue = value;
    }
    resetPredefinedScalingMetricSpecification() {
        this._predefinedScalingMetricSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get predefinedScalingMetricSpecificationInput() {
        return this._predefinedScalingMetricSpecification.internalValue;
    }
}
exports.AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationOutputReference = AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationOutputReference;
_h = JSII_RTTI_SYMBOL_1;
AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationOutputReference[_h] = { fqn: "@cdktf/provider-aws.autoscalingplansScalingPlan.AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationOutputReference", version: "10.0.12" };
class AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationList = AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationList;
_j = JSII_RTTI_SYMBOL_1;
AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationList[_j] = { fqn: "@cdktf/provider-aws.autoscalingplansScalingPlan.AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationList", version: "10.0.12" };
function autoscalingplansScalingPlanScalingInstructionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disable_dynamic_scaling: cdktf.booleanToTerraform(struct.disableDynamicScaling),
        max_capacity: cdktf.numberToTerraform(struct.maxCapacity),
        min_capacity: cdktf.numberToTerraform(struct.minCapacity),
        predictive_scaling_max_capacity_behavior: cdktf.stringToTerraform(struct.predictiveScalingMaxCapacityBehavior),
        predictive_scaling_max_capacity_buffer: cdktf.numberToTerraform(struct.predictiveScalingMaxCapacityBuffer),
        predictive_scaling_mode: cdktf.stringToTerraform(struct.predictiveScalingMode),
        resource_id: cdktf.stringToTerraform(struct.resourceId),
        scalable_dimension: cdktf.stringToTerraform(struct.scalableDimension),
        scaling_policy_update_behavior: cdktf.stringToTerraform(struct.scalingPolicyUpdateBehavior),
        scheduled_action_buffer_time: cdktf.numberToTerraform(struct.scheduledActionBufferTime),
        service_namespace: cdktf.stringToTerraform(struct.serviceNamespace),
        customized_load_metric_specification: autoscalingplansScalingPlanScalingInstructionCustomizedLoadMetricSpecificationToTerraform(struct.customizedLoadMetricSpecification),
        predefined_load_metric_specification: autoscalingplansScalingPlanScalingInstructionPredefinedLoadMetricSpecificationToTerraform(struct.predefinedLoadMetricSpecification),
        target_tracking_configuration: cdktf.listMapper(autoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationToTerraform, true)(struct.targetTrackingConfiguration),
    };
}
exports.autoscalingplansScalingPlanScalingInstructionToTerraform = autoscalingplansScalingPlanScalingInstructionToTerraform;
class AutoscalingplansScalingPlanScalingInstructionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // customized_load_metric_specification - computed: false, optional: true, required: false
        this._customizedLoadMetricSpecification = new AutoscalingplansScalingPlanScalingInstructionCustomizedLoadMetricSpecificationOutputReference(this, "customized_load_metric_specification");
        // predefined_load_metric_specification - computed: false, optional: true, required: false
        this._predefinedLoadMetricSpecification = new AutoscalingplansScalingPlanScalingInstructionPredefinedLoadMetricSpecificationOutputReference(this, "predefined_load_metric_specification");
        // target_tracking_configuration - computed: false, optional: false, required: true
        this._targetTrackingConfiguration = new AutoscalingplansScalingPlanScalingInstructionTargetTrackingConfigurationList(this, "target_tracking_configuration", true);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disableDynamicScaling !== undefined) {
            hasAnyValues = true;
            internalValueResult.disableDynamicScaling = this._disableDynamicScaling;
        }
        if (this._maxCapacity !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxCapacity = this._maxCapacity;
        }
        if (this._minCapacity !== undefined) {
            hasAnyValues = true;
            internalValueResult.minCapacity = this._minCapacity;
        }
        if (this._predictiveScalingMaxCapacityBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.predictiveScalingMaxCapacityBehavior = this._predictiveScalingMaxCapacityBehavior;
        }
        if (this._predictiveScalingMaxCapacityBuffer !== undefined) {
            hasAnyValues = true;
            internalValueResult.predictiveScalingMaxCapacityBuffer = this._predictiveScalingMaxCapacityBuffer;
        }
        if (this._predictiveScalingMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.predictiveScalingMode = this._predictiveScalingMode;
        }
        if (this._resourceId !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceId = this._resourceId;
        }
        if (this._scalableDimension !== undefined) {
            hasAnyValues = true;
            internalValueResult.scalableDimension = this._scalableDimension;
        }
        if (this._scalingPolicyUpdateBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.scalingPolicyUpdateBehavior = this._scalingPolicyUpdateBehavior;
        }
        if (this._scheduledActionBufferTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.scheduledActionBufferTime = this._scheduledActionBufferTime;
        }
        if (this._serviceNamespace !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceNamespace = this._serviceNamespace;
        }
        if (this._customizedLoadMetricSpecification?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customizedLoadMetricSpecification = this._customizedLoadMetricSpecification?.internalValue;
        }
        if (this._predefinedLoadMetricSpecification?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.predefinedLoadMetricSpecification = this._predefinedLoadMetricSpecification?.internalValue;
        }
        if (this._targetTrackingConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetTrackingConfiguration = this._targetTrackingConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._disableDynamicScaling = undefined;
            this._maxCapacity = undefined;
            this._minCapacity = undefined;
            this._predictiveScalingMaxCapacityBehavior = undefined;
            this._predictiveScalingMaxCapacityBuffer = undefined;
            this._predictiveScalingMode = undefined;
            this._resourceId = undefined;
            this._scalableDimension = undefined;
            this._scalingPolicyUpdateBehavior = undefined;
            this._scheduledActionBufferTime = undefined;
            this._serviceNamespace = undefined;
            this._customizedLoadMetricSpecification.internalValue = undefined;
            this._predefinedLoadMetricSpecification.internalValue = undefined;
            this._targetTrackingConfiguration.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._disableDynamicScaling = value.disableDynamicScaling;
            this._maxCapacity = value.maxCapacity;
            this._minCapacity = value.minCapacity;
            this._predictiveScalingMaxCapacityBehavior = value.predictiveScalingMaxCapacityBehavior;
            this._predictiveScalingMaxCapacityBuffer = value.predictiveScalingMaxCapacityBuffer;
            this._predictiveScalingMode = value.predictiveScalingMode;
            this._resourceId = value.resourceId;
            this._scalableDimension = value.scalableDimension;
            this._scalingPolicyUpdateBehavior = value.scalingPolicyUpdateBehavior;
            this._scheduledActionBufferTime = value.scheduledActionBufferTime;
            this._serviceNamespace = value.serviceNamespace;
            this._customizedLoadMetricSpecification.internalValue = value.customizedLoadMetricSpecification;
            this._predefinedLoadMetricSpecification.internalValue = value.predefinedLoadMetricSpecification;
            this._targetTrackingConfiguration.internalValue = value.targetTrackingConfiguration;
        }
    }
    get disableDynamicScaling() {
        return this.getBooleanAttribute('disable_dynamic_scaling');
    }
    set disableDynamicScaling(value) {
        this._disableDynamicScaling = value;
    }
    resetDisableDynamicScaling() {
        this._disableDynamicScaling = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disableDynamicScalingInput() {
        return this._disableDynamicScaling;
    }
    get maxCapacity() {
        return this.getNumberAttribute('max_capacity');
    }
    set maxCapacity(value) {
        this._maxCapacity = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxCapacityInput() {
        return this._maxCapacity;
    }
    get minCapacity() {
        return this.getNumberAttribute('min_capacity');
    }
    set minCapacity(value) {
        this._minCapacity = value;
    }
    // Temporarily expose input value. Use with caution.
    get minCapacityInput() {
        return this._minCapacity;
    }
    get predictiveScalingMaxCapacityBehavior() {
        return this.getStringAttribute('predictive_scaling_max_capacity_behavior');
    }
    set predictiveScalingMaxCapacityBehavior(value) {
        this._predictiveScalingMaxCapacityBehavior = value;
    }
    resetPredictiveScalingMaxCapacityBehavior() {
        this._predictiveScalingMaxCapacityBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get predictiveScalingMaxCapacityBehaviorInput() {
        return this._predictiveScalingMaxCapacityBehavior;
    }
    get predictiveScalingMaxCapacityBuffer() {
        return this.getNumberAttribute('predictive_scaling_max_capacity_buffer');
    }
    set predictiveScalingMaxCapacityBuffer(value) {
        this._predictiveScalingMaxCapacityBuffer = value;
    }
    resetPredictiveScalingMaxCapacityBuffer() {
        this._predictiveScalingMaxCapacityBuffer = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get predictiveScalingMaxCapacityBufferInput() {
        return this._predictiveScalingMaxCapacityBuffer;
    }
    get predictiveScalingMode() {
        return this.getStringAttribute('predictive_scaling_mode');
    }
    set predictiveScalingMode(value) {
        this._predictiveScalingMode = value;
    }
    resetPredictiveScalingMode() {
        this._predictiveScalingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get predictiveScalingModeInput() {
        return this._predictiveScalingMode;
    }
    get resourceId() {
        return this.getStringAttribute('resource_id');
    }
    set resourceId(value) {
        this._resourceId = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceIdInput() {
        return this._resourceId;
    }
    get scalableDimension() {
        return this.getStringAttribute('scalable_dimension');
    }
    set scalableDimension(value) {
        this._scalableDimension = value;
    }
    // Temporarily expose input value. Use with caution.
    get scalableDimensionInput() {
        return this._scalableDimension;
    }
    get scalingPolicyUpdateBehavior() {
        return this.getStringAttribute('scaling_policy_update_behavior');
    }
    set scalingPolicyUpdateBehavior(value) {
        this._scalingPolicyUpdateBehavior = value;
    }
    resetScalingPolicyUpdateBehavior() {
        this._scalingPolicyUpdateBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scalingPolicyUpdateBehaviorInput() {
        return this._scalingPolicyUpdateBehavior;
    }
    get scheduledActionBufferTime() {
        return this.getNumberAttribute('scheduled_action_buffer_time');
    }
    set scheduledActionBufferTime(value) {
        this._scheduledActionBufferTime = value;
    }
    resetScheduledActionBufferTime() {
        this._scheduledActionBufferTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduledActionBufferTimeInput() {
        return this._scheduledActionBufferTime;
    }
    get serviceNamespace() {
        return this.getStringAttribute('service_namespace');
    }
    set serviceNamespace(value) {
        this._serviceNamespace = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNamespaceInput() {
        return this._serviceNamespace;
    }
    get customizedLoadMetricSpecification() {
        return this._customizedLoadMetricSpecification;
    }
    putCustomizedLoadMetricSpecification(value) {
        this._customizedLoadMetricSpecification.internalValue = value;
    }
    resetCustomizedLoadMetricSpecification() {
        this._customizedLoadMetricSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customizedLoadMetricSpecificationInput() {
        return this._customizedLoadMetricSpecification.internalValue;
    }
    get predefinedLoadMetricSpecification() {
        return this._predefinedLoadMetricSpecification;
    }
    putPredefinedLoadMetricSpecification(value) {
        this._predefinedLoadMetricSpecification.internalValue = value;
    }
    resetPredefinedLoadMetricSpecification() {
        this._predefinedLoadMetricSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get predefinedLoadMetricSpecificationInput() {
        return this._predefinedLoadMetricSpecification.internalValue;
    }
    get targetTrackingConfiguration() {
        return this._targetTrackingConfiguration;
    }
    putTargetTrackingConfiguration(value) {
        this._targetTrackingConfiguration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetTrackingConfigurationInput() {
        return this._targetTrackingConfiguration.internalValue;
    }
}
exports.AutoscalingplansScalingPlanScalingInstructionOutputReference = AutoscalingplansScalingPlanScalingInstructionOutputReference;
_k = JSII_RTTI_SYMBOL_1;
AutoscalingplansScalingPlanScalingInstructionOutputReference[_k] = { fqn: "@cdktf/provider-aws.autoscalingplansScalingPlan.AutoscalingplansScalingPlanScalingInstructionOutputReference", version: "10.0.12" };
class AutoscalingplansScalingPlanScalingInstructionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AutoscalingplansScalingPlanScalingInstructionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AutoscalingplansScalingPlanScalingInstructionList = AutoscalingplansScalingPlanScalingInstructionList;
_l = JSII_RTTI_SYMBOL_1;
AutoscalingplansScalingPlanScalingInstructionList[_l] = { fqn: "@cdktf/provider-aws.autoscalingplansScalingPlan.AutoscalingplansScalingPlanScalingInstructionList", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/autoscalingplans_scaling_plan aws_autoscalingplans_scaling_plan}
*/
class AutoscalingplansScalingPlan extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/autoscalingplans_scaling_plan aws_autoscalingplans_scaling_plan} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AutoscalingplansScalingPlanConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_autoscalingplans_scaling_plan',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // application_source - computed: false, optional: false, required: true
        this._applicationSource = new AutoscalingplansScalingPlanApplicationSourceOutputReference(this, "application_source");
        // scaling_instruction - computed: false, optional: false, required: true
        this._scalingInstruction = new AutoscalingplansScalingPlanScalingInstructionList(this, "scaling_instruction", true);
        this._id = config.id;
        this._name = config.name;
        this._applicationSource.internalValue = config.applicationSource;
        this._scalingInstruction.internalValue = config.scalingInstruction;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // scaling_plan_version - computed: true, optional: false, required: false
    get scalingPlanVersion() {
        return this.getNumberAttribute('scaling_plan_version');
    }
    get applicationSource() {
        return this._applicationSource;
    }
    putApplicationSource(value) {
        this._applicationSource.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get applicationSourceInput() {
        return this._applicationSource.internalValue;
    }
    get scalingInstruction() {
        return this._scalingInstruction;
    }
    putScalingInstruction(value) {
        this._scalingInstruction.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get scalingInstructionInput() {
        return this._scalingInstruction.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            application_source: autoscalingplansScalingPlanApplicationSourceToTerraform(this._applicationSource.internalValue),
            scaling_instruction: cdktf.listMapper(autoscalingplansScalingPlanScalingInstructionToTerraform, true)(this._scalingInstruction.internalValue),
        };
    }
}
exports.AutoscalingplansScalingPlan = AutoscalingplansScalingPlan;
_m = JSII_RTTI_SYMBOL_1;
AutoscalingplansScalingPlan[_m] = { fqn: "@cdktf/provider-aws.autoscalingplansScalingPlan.AutoscalingplansScalingPlan", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
AutoscalingplansScalingPlan.tfResourceType = "aws_autoscalingplans_scaling_plan";
//# sourceMappingURL=data:application/json;base64,