"use strict";
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigRemediationConfiguration = exports.ConfigRemediationConfigurationParameterList = exports.ConfigRemediationConfigurationParameterOutputReference = exports.configRemediationConfigurationParameterToTerraform = exports.ConfigRemediationConfigurationExecutionControlsOutputReference = exports.configRemediationConfigurationExecutionControlsToTerraform = exports.ConfigRemediationConfigurationExecutionControlsSsmControlsOutputReference = exports.configRemediationConfigurationExecutionControlsSsmControlsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function configRemediationConfigurationExecutionControlsSsmControlsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        concurrent_execution_rate_percentage: cdktf.numberToTerraform(struct.concurrentExecutionRatePercentage),
        error_percentage: cdktf.numberToTerraform(struct.errorPercentage),
    };
}
exports.configRemediationConfigurationExecutionControlsSsmControlsToTerraform = configRemediationConfigurationExecutionControlsSsmControlsToTerraform;
class ConfigRemediationConfigurationExecutionControlsSsmControlsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._concurrentExecutionRatePercentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.concurrentExecutionRatePercentage = this._concurrentExecutionRatePercentage;
        }
        if (this._errorPercentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorPercentage = this._errorPercentage;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._concurrentExecutionRatePercentage = undefined;
            this._errorPercentage = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._concurrentExecutionRatePercentage = value.concurrentExecutionRatePercentage;
            this._errorPercentage = value.errorPercentage;
        }
    }
    get concurrentExecutionRatePercentage() {
        return this.getNumberAttribute('concurrent_execution_rate_percentage');
    }
    set concurrentExecutionRatePercentage(value) {
        this._concurrentExecutionRatePercentage = value;
    }
    resetConcurrentExecutionRatePercentage() {
        this._concurrentExecutionRatePercentage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get concurrentExecutionRatePercentageInput() {
        return this._concurrentExecutionRatePercentage;
    }
    get errorPercentage() {
        return this.getNumberAttribute('error_percentage');
    }
    set errorPercentage(value) {
        this._errorPercentage = value;
    }
    resetErrorPercentage() {
        this._errorPercentage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorPercentageInput() {
        return this._errorPercentage;
    }
}
exports.ConfigRemediationConfigurationExecutionControlsSsmControlsOutputReference = ConfigRemediationConfigurationExecutionControlsSsmControlsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ConfigRemediationConfigurationExecutionControlsSsmControlsOutputReference[_a] = { fqn: "@cdktf/provider-aws.configRemediationConfiguration.ConfigRemediationConfigurationExecutionControlsSsmControlsOutputReference", version: "10.0.12" };
function configRemediationConfigurationExecutionControlsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ssm_controls: configRemediationConfigurationExecutionControlsSsmControlsToTerraform(struct.ssmControls),
    };
}
exports.configRemediationConfigurationExecutionControlsToTerraform = configRemediationConfigurationExecutionControlsToTerraform;
class ConfigRemediationConfigurationExecutionControlsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // ssm_controls - computed: false, optional: true, required: false
        this._ssmControls = new ConfigRemediationConfigurationExecutionControlsSsmControlsOutputReference(this, "ssm_controls");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ssmControls?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssmControls = this._ssmControls?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._ssmControls.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._ssmControls.internalValue = value.ssmControls;
        }
    }
    get ssmControls() {
        return this._ssmControls;
    }
    putSsmControls(value) {
        this._ssmControls.internalValue = value;
    }
    resetSsmControls() {
        this._ssmControls.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ssmControlsInput() {
        return this._ssmControls.internalValue;
    }
}
exports.ConfigRemediationConfigurationExecutionControlsOutputReference = ConfigRemediationConfigurationExecutionControlsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
ConfigRemediationConfigurationExecutionControlsOutputReference[_b] = { fqn: "@cdktf/provider-aws.configRemediationConfiguration.ConfigRemediationConfigurationExecutionControlsOutputReference", version: "10.0.12" };
function configRemediationConfigurationParameterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        resource_value: cdktf.stringToTerraform(struct.resourceValue),
        static_value: cdktf.stringToTerraform(struct.staticValue),
        static_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.staticValues),
    };
}
exports.configRemediationConfigurationParameterToTerraform = configRemediationConfigurationParameterToTerraform;
class ConfigRemediationConfigurationParameterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._resourceValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceValue = this._resourceValue;
        }
        if (this._staticValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.staticValue = this._staticValue;
        }
        if (this._staticValues !== undefined) {
            hasAnyValues = true;
            internalValueResult.staticValues = this._staticValues;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._resourceValue = undefined;
            this._staticValue = undefined;
            this._staticValues = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._resourceValue = value.resourceValue;
            this._staticValue = value.staticValue;
            this._staticValues = value.staticValues;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get resourceValue() {
        return this.getStringAttribute('resource_value');
    }
    set resourceValue(value) {
        this._resourceValue = value;
    }
    resetResourceValue() {
        this._resourceValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceValueInput() {
        return this._resourceValue;
    }
    get staticValue() {
        return this.getStringAttribute('static_value');
    }
    set staticValue(value) {
        this._staticValue = value;
    }
    resetStaticValue() {
        this._staticValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get staticValueInput() {
        return this._staticValue;
    }
    get staticValues() {
        return this.getListAttribute('static_values');
    }
    set staticValues(value) {
        this._staticValues = value;
    }
    resetStaticValues() {
        this._staticValues = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get staticValuesInput() {
        return this._staticValues;
    }
}
exports.ConfigRemediationConfigurationParameterOutputReference = ConfigRemediationConfigurationParameterOutputReference;
_c = JSII_RTTI_SYMBOL_1;
ConfigRemediationConfigurationParameterOutputReference[_c] = { fqn: "@cdktf/provider-aws.configRemediationConfiguration.ConfigRemediationConfigurationParameterOutputReference", version: "10.0.12" };
class ConfigRemediationConfigurationParameterList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ConfigRemediationConfigurationParameterOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ConfigRemediationConfigurationParameterList = ConfigRemediationConfigurationParameterList;
_d = JSII_RTTI_SYMBOL_1;
ConfigRemediationConfigurationParameterList[_d] = { fqn: "@cdktf/provider-aws.configRemediationConfiguration.ConfigRemediationConfigurationParameterList", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/config_remediation_configuration aws_config_remediation_configuration}
*/
class ConfigRemediationConfiguration extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/config_remediation_configuration aws_config_remediation_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ConfigRemediationConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_config_remediation_configuration',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // execution_controls - computed: false, optional: true, required: false
        this._executionControls = new ConfigRemediationConfigurationExecutionControlsOutputReference(this, "execution_controls");
        // parameter - computed: false, optional: true, required: false
        this._parameter = new ConfigRemediationConfigurationParameterList(this, "parameter", true);
        this._automatic = config.automatic;
        this._configRuleName = config.configRuleName;
        this._id = config.id;
        this._maximumAutomaticAttempts = config.maximumAutomaticAttempts;
        this._resourceType = config.resourceType;
        this._retryAttemptSeconds = config.retryAttemptSeconds;
        this._targetId = config.targetId;
        this._targetType = config.targetType;
        this._targetVersion = config.targetVersion;
        this._executionControls.internalValue = config.executionControls;
        this._parameter.internalValue = config.parameter;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get automatic() {
        return this.getBooleanAttribute('automatic');
    }
    set automatic(value) {
        this._automatic = value;
    }
    resetAutomatic() {
        this._automatic = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get automaticInput() {
        return this._automatic;
    }
    get configRuleName() {
        return this.getStringAttribute('config_rule_name');
    }
    set configRuleName(value) {
        this._configRuleName = value;
    }
    // Temporarily expose input value. Use with caution.
    get configRuleNameInput() {
        return this._configRuleName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get maximumAutomaticAttempts() {
        return this.getNumberAttribute('maximum_automatic_attempts');
    }
    set maximumAutomaticAttempts(value) {
        this._maximumAutomaticAttempts = value;
    }
    resetMaximumAutomaticAttempts() {
        this._maximumAutomaticAttempts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maximumAutomaticAttemptsInput() {
        return this._maximumAutomaticAttempts;
    }
    get resourceType() {
        return this.getStringAttribute('resource_type');
    }
    set resourceType(value) {
        this._resourceType = value;
    }
    resetResourceType() {
        this._resourceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTypeInput() {
        return this._resourceType;
    }
    get retryAttemptSeconds() {
        return this.getNumberAttribute('retry_attempt_seconds');
    }
    set retryAttemptSeconds(value) {
        this._retryAttemptSeconds = value;
    }
    resetRetryAttemptSeconds() {
        this._retryAttemptSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryAttemptSecondsInput() {
        return this._retryAttemptSeconds;
    }
    get targetId() {
        return this.getStringAttribute('target_id');
    }
    set targetId(value) {
        this._targetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetIdInput() {
        return this._targetId;
    }
    get targetType() {
        return this.getStringAttribute('target_type');
    }
    set targetType(value) {
        this._targetType = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetTypeInput() {
        return this._targetType;
    }
    get targetVersion() {
        return this.getStringAttribute('target_version');
    }
    set targetVersion(value) {
        this._targetVersion = value;
    }
    resetTargetVersion() {
        this._targetVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetVersionInput() {
        return this._targetVersion;
    }
    get executionControls() {
        return this._executionControls;
    }
    putExecutionControls(value) {
        this._executionControls.internalValue = value;
    }
    resetExecutionControls() {
        this._executionControls.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get executionControlsInput() {
        return this._executionControls.internalValue;
    }
    get parameter() {
        return this._parameter;
    }
    putParameter(value) {
        this._parameter.internalValue = value;
    }
    resetParameter() {
        this._parameter.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parameterInput() {
        return this._parameter.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            automatic: cdktf.booleanToTerraform(this._automatic),
            config_rule_name: cdktf.stringToTerraform(this._configRuleName),
            id: cdktf.stringToTerraform(this._id),
            maximum_automatic_attempts: cdktf.numberToTerraform(this._maximumAutomaticAttempts),
            resource_type: cdktf.stringToTerraform(this._resourceType),
            retry_attempt_seconds: cdktf.numberToTerraform(this._retryAttemptSeconds),
            target_id: cdktf.stringToTerraform(this._targetId),
            target_type: cdktf.stringToTerraform(this._targetType),
            target_version: cdktf.stringToTerraform(this._targetVersion),
            execution_controls: configRemediationConfigurationExecutionControlsToTerraform(this._executionControls.internalValue),
            parameter: cdktf.listMapper(configRemediationConfigurationParameterToTerraform, true)(this._parameter.internalValue),
        };
    }
}
exports.ConfigRemediationConfiguration = ConfigRemediationConfiguration;
_e = JSII_RTTI_SYMBOL_1;
ConfigRemediationConfiguration[_e] = { fqn: "@cdktf/provider-aws.configRemediationConfiguration.ConfigRemediationConfiguration", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
ConfigRemediationConfiguration.tfResourceType = "aws_config_remediation_configuration";
//# sourceMappingURL=data:application/json;base64,