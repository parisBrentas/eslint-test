"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3BucketAnalyticsConfiguration = exports.S3BucketAnalyticsConfigurationStorageClassAnalysisOutputReference = exports.s3BucketAnalyticsConfigurationStorageClassAnalysisToTerraform = exports.S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportOutputReference = exports.s3BucketAnalyticsConfigurationStorageClassAnalysisDataExportToTerraform = exports.S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutputReference = exports.s3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationToTerraform = exports.S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutputReference = exports.s3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationToTerraform = exports.S3BucketAnalyticsConfigurationFilterOutputReference = exports.s3BucketAnalyticsConfigurationFilterToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function s3BucketAnalyticsConfigurationFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        prefix: cdktf.stringToTerraform(struct.prefix),
        tags: cdktf.hashMapper(cdktf.stringToTerraform)(struct.tags),
    };
}
exports.s3BucketAnalyticsConfigurationFilterToTerraform = s3BucketAnalyticsConfigurationFilterToTerraform;
class S3BucketAnalyticsConfigurationFilterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._prefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefix = this._prefix;
        }
        if (this._tags !== undefined) {
            hasAnyValues = true;
            internalValueResult.tags = this._tags;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._prefix = undefined;
            this._tags = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._prefix = value.prefix;
            this._tags = value.tags;
        }
    }
    get prefix() {
        return this.getStringAttribute('prefix');
    }
    set prefix(value) {
        this._prefix = value;
    }
    resetPrefix() {
        this._prefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixInput() {
        return this._prefix;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
}
exports.S3BucketAnalyticsConfigurationFilterOutputReference = S3BucketAnalyticsConfigurationFilterOutputReference;
_a = JSII_RTTI_SYMBOL_1;
S3BucketAnalyticsConfigurationFilterOutputReference[_a] = { fqn: "@cdktf/provider-aws.s3BucketAnalyticsConfiguration.S3BucketAnalyticsConfigurationFilterOutputReference", version: "10.0.12" };
function s3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_account_id: cdktf.stringToTerraform(struct.bucketAccountId),
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        format: cdktf.stringToTerraform(struct.format),
        prefix: cdktf.stringToTerraform(struct.prefix),
    };
}
exports.s3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationToTerraform = s3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationToTerraform;
class S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketAccountId !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketAccountId = this._bucketAccountId;
        }
        if (this._bucketArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketArn = this._bucketArn;
        }
        if (this._format !== undefined) {
            hasAnyValues = true;
            internalValueResult.format = this._format;
        }
        if (this._prefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefix = this._prefix;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketAccountId = undefined;
            this._bucketArn = undefined;
            this._format = undefined;
            this._prefix = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketAccountId = value.bucketAccountId;
            this._bucketArn = value.bucketArn;
            this._format = value.format;
            this._prefix = value.prefix;
        }
    }
    get bucketAccountId() {
        return this.getStringAttribute('bucket_account_id');
    }
    set bucketAccountId(value) {
        this._bucketAccountId = value;
    }
    resetBucketAccountId() {
        this._bucketAccountId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketAccountIdInput() {
        return this._bucketAccountId;
    }
    get bucketArn() {
        return this.getStringAttribute('bucket_arn');
    }
    set bucketArn(value) {
        this._bucketArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketArnInput() {
        return this._bucketArn;
    }
    get format() {
        return this.getStringAttribute('format');
    }
    set format(value) {
        this._format = value;
    }
    resetFormat() {
        this._format = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get formatInput() {
        return this._format;
    }
    get prefix() {
        return this.getStringAttribute('prefix');
    }
    set prefix(value) {
        this._prefix = value;
    }
    resetPrefix() {
        this._prefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixInput() {
        return this._prefix;
    }
}
exports.S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutputReference = S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutputReference;
_b = JSII_RTTI_SYMBOL_1;
S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutputReference[_b] = { fqn: "@cdktf/provider-aws.s3BucketAnalyticsConfiguration.S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutputReference", version: "10.0.12" };
function s3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        s3_bucket_destination: s3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationToTerraform(struct.s3BucketDestination),
    };
}
exports.s3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationToTerraform = s3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationToTerraform;
class S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // s3_bucket_destination - computed: false, optional: false, required: true
        this._s3BucketDestination = new S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestinationOutputReference(this, "s3_bucket_destination");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._s3BucketDestination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3BucketDestination = this._s3BucketDestination?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._s3BucketDestination.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._s3BucketDestination.internalValue = value.s3BucketDestination;
        }
    }
    get s3BucketDestination() {
        return this._s3BucketDestination;
    }
    putS3BucketDestination(value) {
        this._s3BucketDestination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3BucketDestinationInput() {
        return this._s3BucketDestination.internalValue;
    }
}
exports.S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutputReference = S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutputReference;
_c = JSII_RTTI_SYMBOL_1;
S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutputReference[_c] = { fqn: "@cdktf/provider-aws.s3BucketAnalyticsConfiguration.S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutputReference", version: "10.0.12" };
function s3BucketAnalyticsConfigurationStorageClassAnalysisDataExportToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        output_schema_version: cdktf.stringToTerraform(struct.outputSchemaVersion),
        destination: s3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationToTerraform(struct.destination),
    };
}
exports.s3BucketAnalyticsConfigurationStorageClassAnalysisDataExportToTerraform = s3BucketAnalyticsConfigurationStorageClassAnalysisDataExportToTerraform;
class S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // destination - computed: false, optional: false, required: true
        this._destination = new S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportDestinationOutputReference(this, "destination");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._outputSchemaVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputSchemaVersion = this._outputSchemaVersion;
        }
        if (this._destination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._outputSchemaVersion = undefined;
            this._destination.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._outputSchemaVersion = value.outputSchemaVersion;
            this._destination.internalValue = value.destination;
        }
    }
    get outputSchemaVersion() {
        return this.getStringAttribute('output_schema_version');
    }
    set outputSchemaVersion(value) {
        this._outputSchemaVersion = value;
    }
    resetOutputSchemaVersion() {
        this._outputSchemaVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputSchemaVersionInput() {
        return this._outputSchemaVersion;
    }
    get destination() {
        return this._destination;
    }
    putDestination(value) {
        this._destination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination.internalValue;
    }
}
exports.S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportOutputReference = S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportOutputReference;
_d = JSII_RTTI_SYMBOL_1;
S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportOutputReference[_d] = { fqn: "@cdktf/provider-aws.s3BucketAnalyticsConfiguration.S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportOutputReference", version: "10.0.12" };
function s3BucketAnalyticsConfigurationStorageClassAnalysisToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        data_export: s3BucketAnalyticsConfigurationStorageClassAnalysisDataExportToTerraform(struct.dataExport),
    };
}
exports.s3BucketAnalyticsConfigurationStorageClassAnalysisToTerraform = s3BucketAnalyticsConfigurationStorageClassAnalysisToTerraform;
class S3BucketAnalyticsConfigurationStorageClassAnalysisOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // data_export - computed: false, optional: false, required: true
        this._dataExport = new S3BucketAnalyticsConfigurationStorageClassAnalysisDataExportOutputReference(this, "data_export");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataExport?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataExport = this._dataExport?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dataExport.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dataExport.internalValue = value.dataExport;
        }
    }
    get dataExport() {
        return this._dataExport;
    }
    putDataExport(value) {
        this._dataExport.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataExportInput() {
        return this._dataExport.internalValue;
    }
}
exports.S3BucketAnalyticsConfigurationStorageClassAnalysisOutputReference = S3BucketAnalyticsConfigurationStorageClassAnalysisOutputReference;
_e = JSII_RTTI_SYMBOL_1;
S3BucketAnalyticsConfigurationStorageClassAnalysisOutputReference[_e] = { fqn: "@cdktf/provider-aws.s3BucketAnalyticsConfiguration.S3BucketAnalyticsConfigurationStorageClassAnalysisOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/s3_bucket_analytics_configuration aws_s3_bucket_analytics_configuration}
*/
class S3BucketAnalyticsConfiguration extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/s3_bucket_analytics_configuration aws_s3_bucket_analytics_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options S3BucketAnalyticsConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_s3_bucket_analytics_configuration',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // filter - computed: false, optional: true, required: false
        this._filter = new S3BucketAnalyticsConfigurationFilterOutputReference(this, "filter");
        // storage_class_analysis - computed: false, optional: true, required: false
        this._storageClassAnalysis = new S3BucketAnalyticsConfigurationStorageClassAnalysisOutputReference(this, "storage_class_analysis");
        this._bucket = config.bucket;
        this._id = config.id;
        this._name = config.name;
        this._filter.internalValue = config.filter;
        this._storageClassAnalysis.internalValue = config.storageClassAnalysis;
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get filter() {
        return this._filter;
    }
    putFilter(value) {
        this._filter.internalValue = value;
    }
    resetFilter() {
        this._filter.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterInput() {
        return this._filter.internalValue;
    }
    get storageClassAnalysis() {
        return this._storageClassAnalysis;
    }
    putStorageClassAnalysis(value) {
        this._storageClassAnalysis.internalValue = value;
    }
    resetStorageClassAnalysis() {
        this._storageClassAnalysis.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageClassAnalysisInput() {
        return this._storageClassAnalysis.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            bucket: cdktf.stringToTerraform(this._bucket),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            filter: s3BucketAnalyticsConfigurationFilterToTerraform(this._filter.internalValue),
            storage_class_analysis: s3BucketAnalyticsConfigurationStorageClassAnalysisToTerraform(this._storageClassAnalysis.internalValue),
        };
    }
}
exports.S3BucketAnalyticsConfiguration = S3BucketAnalyticsConfiguration;
_f = JSII_RTTI_SYMBOL_1;
S3BucketAnalyticsConfiguration[_f] = { fqn: "@cdktf/provider-aws.s3BucketAnalyticsConfiguration.S3BucketAnalyticsConfiguration", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
S3BucketAnalyticsConfiguration.tfResourceType = "aws_s3_bucket_analytics_configuration";
//# sourceMappingURL=data:application/json;base64,