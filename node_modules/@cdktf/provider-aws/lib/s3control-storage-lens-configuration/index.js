"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3ControlStorageLensConfiguration = exports.S3ControlStorageLensConfigurationStorageLensConfigurationOutputReference = exports.s3ControlStorageLensConfigurationStorageLensConfigurationToTerraform = exports.S3ControlStorageLensConfigurationStorageLensConfigurationIncludeOutputReference = exports.s3ControlStorageLensConfigurationStorageLensConfigurationIncludeToTerraform = exports.S3ControlStorageLensConfigurationStorageLensConfigurationExcludeOutputReference = exports.s3ControlStorageLensConfigurationStorageLensConfigurationExcludeToTerraform = exports.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportOutputReference = exports.s3ControlStorageLensConfigurationStorageLensConfigurationDataExportToTerraform = exports.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationOutputReference = exports.s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationToTerraform = exports.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionOutputReference = exports.s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionToTerraform = exports.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3List = exports.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3OutputReference = exports.s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3ToTerraform = exports.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsOutputReference = exports.s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsToTerraform = exports.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsOutputReference = exports.s3ControlStorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsToTerraform = exports.S3ControlStorageLensConfigurationStorageLensConfigurationAwsOrgOutputReference = exports.s3ControlStorageLensConfigurationStorageLensConfigurationAwsOrgToTerraform = exports.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelOutputReference = exports.s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelToTerraform = exports.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelOutputReference = exports.s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelToTerraform = exports.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelOutputReference = exports.s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelToTerraform = exports.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsOutputReference = exports.s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsToTerraform = exports.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaOutputReference = exports.s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaToTerraform = exports.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsOutputReference = exports.s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsToTerraform = exports.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsOutputReference = exports.s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsToTerraform = s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsToTerraform;
class S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsOutputReference = S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsOutputReference[_a] = { fqn: "@cdktf/provider-aws.s3ControlStorageLensConfiguration.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsOutputReference", version: "10.0.12" };
function s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsToTerraform = s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsToTerraform;
class S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsOutputReference = S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsOutputReference[_b] = { fqn: "@cdktf/provider-aws.s3ControlStorageLensConfiguration.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsOutputReference", version: "10.0.12" };
function s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        delimiter: cdktf.stringToTerraform(struct.delimiter),
        max_depth: cdktf.numberToTerraform(struct.maxDepth),
        min_storage_bytes_percentage: cdktf.numberToTerraform(struct.minStorageBytesPercentage),
    };
}
exports.s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaToTerraform = s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaToTerraform;
class S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._delimiter !== undefined) {
            hasAnyValues = true;
            internalValueResult.delimiter = this._delimiter;
        }
        if (this._maxDepth !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxDepth = this._maxDepth;
        }
        if (this._minStorageBytesPercentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.minStorageBytesPercentage = this._minStorageBytesPercentage;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._delimiter = undefined;
            this._maxDepth = undefined;
            this._minStorageBytesPercentage = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._delimiter = value.delimiter;
            this._maxDepth = value.maxDepth;
            this._minStorageBytesPercentage = value.minStorageBytesPercentage;
        }
    }
    get delimiter() {
        return this.getStringAttribute('delimiter');
    }
    set delimiter(value) {
        this._delimiter = value;
    }
    resetDelimiter() {
        this._delimiter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get delimiterInput() {
        return this._delimiter;
    }
    get maxDepth() {
        return this.getNumberAttribute('max_depth');
    }
    set maxDepth(value) {
        this._maxDepth = value;
    }
    resetMaxDepth() {
        this._maxDepth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxDepthInput() {
        return this._maxDepth;
    }
    get minStorageBytesPercentage() {
        return this.getNumberAttribute('min_storage_bytes_percentage');
    }
    set minStorageBytesPercentage(value) {
        this._minStorageBytesPercentage = value;
    }
    resetMinStorageBytesPercentage() {
        this._minStorageBytesPercentage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minStorageBytesPercentageInput() {
        return this._minStorageBytesPercentage;
    }
}
exports.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaOutputReference = S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaOutputReference;
_c = JSII_RTTI_SYMBOL_1;
S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaOutputReference[_c] = { fqn: "@cdktf/provider-aws.s3ControlStorageLensConfiguration.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaOutputReference", version: "10.0.12" };
function s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        selection_criteria: s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaToTerraform(struct.selectionCriteria),
    };
}
exports.s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsToTerraform = s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsToTerraform;
class S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // selection_criteria - computed: false, optional: true, required: false
        this._selectionCriteria = new S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaOutputReference(this, "selection_criteria");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._selectionCriteria?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.selectionCriteria = this._selectionCriteria?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._selectionCriteria.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._selectionCriteria.internalValue = value.selectionCriteria;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get selectionCriteria() {
        return this._selectionCriteria;
    }
    putSelectionCriteria(value) {
        this._selectionCriteria.internalValue = value;
    }
    resetSelectionCriteria() {
        this._selectionCriteria.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get selectionCriteriaInput() {
        return this._selectionCriteria.internalValue;
    }
}
exports.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsOutputReference = S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsOutputReference[_d] = { fqn: "@cdktf/provider-aws.s3ControlStorageLensConfiguration.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsOutputReference", version: "10.0.12" };
function s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        storage_metrics: s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsToTerraform(struct.storageMetrics),
    };
}
exports.s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelToTerraform = s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelToTerraform;
class S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // storage_metrics - computed: false, optional: false, required: true
        this._storageMetrics = new S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsOutputReference(this, "storage_metrics");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._storageMetrics?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageMetrics = this._storageMetrics?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._storageMetrics.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._storageMetrics.internalValue = value.storageMetrics;
        }
    }
    get storageMetrics() {
        return this._storageMetrics;
    }
    putStorageMetrics(value) {
        this._storageMetrics.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get storageMetricsInput() {
        return this._storageMetrics.internalValue;
    }
}
exports.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelOutputReference = S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelOutputReference;
_e = JSII_RTTI_SYMBOL_1;
S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelOutputReference[_e] = { fqn: "@cdktf/provider-aws.s3ControlStorageLensConfiguration.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelOutputReference", version: "10.0.12" };
function s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        activity_metrics: s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsToTerraform(struct.activityMetrics),
        prefix_level: s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelToTerraform(struct.prefixLevel),
    };
}
exports.s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelToTerraform = s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelToTerraform;
class S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // activity_metrics - computed: false, optional: true, required: false
        this._activityMetrics = new S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsOutputReference(this, "activity_metrics");
        // prefix_level - computed: false, optional: true, required: false
        this._prefixLevel = new S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelOutputReference(this, "prefix_level");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._activityMetrics?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.activityMetrics = this._activityMetrics?.internalValue;
        }
        if (this._prefixLevel?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixLevel = this._prefixLevel?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._activityMetrics.internalValue = undefined;
            this._prefixLevel.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._activityMetrics.internalValue = value.activityMetrics;
            this._prefixLevel.internalValue = value.prefixLevel;
        }
    }
    get activityMetrics() {
        return this._activityMetrics;
    }
    putActivityMetrics(value) {
        this._activityMetrics.internalValue = value;
    }
    resetActivityMetrics() {
        this._activityMetrics.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get activityMetricsInput() {
        return this._activityMetrics.internalValue;
    }
    get prefixLevel() {
        return this._prefixLevel;
    }
    putPrefixLevel(value) {
        this._prefixLevel.internalValue = value;
    }
    resetPrefixLevel() {
        this._prefixLevel.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixLevelInput() {
        return this._prefixLevel.internalValue;
    }
}
exports.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelOutputReference = S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelOutputReference;
_f = JSII_RTTI_SYMBOL_1;
S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelOutputReference[_f] = { fqn: "@cdktf/provider-aws.s3ControlStorageLensConfiguration.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelOutputReference", version: "10.0.12" };
function s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        activity_metrics: s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsToTerraform(struct.activityMetrics),
        bucket_level: s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelToTerraform(struct.bucketLevel),
    };
}
exports.s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelToTerraform = s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelToTerraform;
class S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // activity_metrics - computed: false, optional: true, required: false
        this._activityMetrics = new S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsOutputReference(this, "activity_metrics");
        // bucket_level - computed: false, optional: false, required: true
        this._bucketLevel = new S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelOutputReference(this, "bucket_level");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._activityMetrics?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.activityMetrics = this._activityMetrics?.internalValue;
        }
        if (this._bucketLevel?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketLevel = this._bucketLevel?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._activityMetrics.internalValue = undefined;
            this._bucketLevel.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._activityMetrics.internalValue = value.activityMetrics;
            this._bucketLevel.internalValue = value.bucketLevel;
        }
    }
    get activityMetrics() {
        return this._activityMetrics;
    }
    putActivityMetrics(value) {
        this._activityMetrics.internalValue = value;
    }
    resetActivityMetrics() {
        this._activityMetrics.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get activityMetricsInput() {
        return this._activityMetrics.internalValue;
    }
    get bucketLevel() {
        return this._bucketLevel;
    }
    putBucketLevel(value) {
        this._bucketLevel.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketLevelInput() {
        return this._bucketLevel.internalValue;
    }
}
exports.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelOutputReference = S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelOutputReference;
_g = JSII_RTTI_SYMBOL_1;
S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelOutputReference[_g] = { fqn: "@cdktf/provider-aws.s3ControlStorageLensConfiguration.S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelOutputReference", version: "10.0.12" };
function s3ControlStorageLensConfigurationStorageLensConfigurationAwsOrgToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
    };
}
exports.s3ControlStorageLensConfigurationStorageLensConfigurationAwsOrgToTerraform = s3ControlStorageLensConfigurationStorageLensConfigurationAwsOrgToTerraform;
class S3ControlStorageLensConfigurationStorageLensConfigurationAwsOrgOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._arn !== undefined) {
            hasAnyValues = true;
            internalValueResult.arn = this._arn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._arn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._arn = value.arn;
        }
    }
    get arn() {
        return this.getStringAttribute('arn');
    }
    set arn(value) {
        this._arn = value;
    }
    // Temporarily expose input value. Use with caution.
    get arnInput() {
        return this._arn;
    }
}
exports.S3ControlStorageLensConfigurationStorageLensConfigurationAwsOrgOutputReference = S3ControlStorageLensConfigurationStorageLensConfigurationAwsOrgOutputReference;
_h = JSII_RTTI_SYMBOL_1;
S3ControlStorageLensConfigurationStorageLensConfigurationAwsOrgOutputReference[_h] = { fqn: "@cdktf/provider-aws.s3ControlStorageLensConfiguration.S3ControlStorageLensConfigurationStorageLensConfigurationAwsOrgOutputReference", version: "10.0.12" };
function s3ControlStorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.s3ControlStorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsToTerraform = s3ControlStorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsToTerraform;
class S3ControlStorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsOutputReference = S3ControlStorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
S3ControlStorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsOutputReference[_j] = { fqn: "@cdktf/provider-aws.s3ControlStorageLensConfiguration.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsOutputReference", version: "10.0.12" };
function s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key_id: cdktf.stringToTerraform(struct.keyId),
    };
}
exports.s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsToTerraform = s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsToTerraform;
class S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._keyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyId = this._keyId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._keyId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._keyId = value.keyId;
        }
    }
    get keyId() {
        return this.getStringAttribute('key_id');
    }
    set keyId(value) {
        this._keyId = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyIdInput() {
        return this._keyId;
    }
}
exports.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsOutputReference = S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsOutputReference[_k] = { fqn: "@cdktf/provider-aws.s3ControlStorageLensConfiguration.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsOutputReference", version: "10.0.12" };
function s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3ToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3ToTerraform = s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3ToTerraform;
class S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3OutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
        }
    }
}
exports.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3OutputReference = S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3OutputReference;
_l = JSII_RTTI_SYMBOL_1;
S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3OutputReference[_l] = { fqn: "@cdktf/provider-aws.s3ControlStorageLensConfiguration.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3OutputReference", version: "10.0.12" };
class S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3List extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3OutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3List = S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3List;
_m = JSII_RTTI_SYMBOL_1;
S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3List[_m] = { fqn: "@cdktf/provider-aws.s3ControlStorageLensConfiguration.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3List", version: "10.0.12" };
function s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        sse_kms: s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsToTerraform(struct.sseKms),
        sse_s3: cdktf.listMapper(s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3ToTerraform, true)(struct.sseS3),
    };
}
exports.s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionToTerraform = s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionToTerraform;
class S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // sse_kms - computed: false, optional: true, required: false
        this._sseKms = new S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsOutputReference(this, "sse_kms");
        // sse_s3 - computed: false, optional: true, required: false
        this._sseS3 = new S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3List(this, "sse_s3", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sseKms?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sseKms = this._sseKms?.internalValue;
        }
        if (this._sseS3?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sseS3 = this._sseS3?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sseKms.internalValue = undefined;
            this._sseS3.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sseKms.internalValue = value.sseKms;
            this._sseS3.internalValue = value.sseS3;
        }
    }
    get sseKms() {
        return this._sseKms;
    }
    putSseKms(value) {
        this._sseKms.internalValue = value;
    }
    resetSseKms() {
        this._sseKms.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sseKmsInput() {
        return this._sseKms.internalValue;
    }
    get sseS3() {
        return this._sseS3;
    }
    putSseS3(value) {
        this._sseS3.internalValue = value;
    }
    resetSseS3() {
        this._sseS3.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sseS3Input() {
        return this._sseS3.internalValue;
    }
}
exports.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionOutputReference = S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionOutputReference;
_o = JSII_RTTI_SYMBOL_1;
S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionOutputReference[_o] = { fqn: "@cdktf/provider-aws.s3ControlStorageLensConfiguration.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionOutputReference", version: "10.0.12" };
function s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        account_id: cdktf.stringToTerraform(struct.accountId),
        arn: cdktf.stringToTerraform(struct.arn),
        format: cdktf.stringToTerraform(struct.format),
        output_schema_version: cdktf.stringToTerraform(struct.outputSchemaVersion),
        prefix: cdktf.stringToTerraform(struct.prefix),
        encryption: s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionToTerraform(struct.encryption),
    };
}
exports.s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationToTerraform = s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationToTerraform;
class S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // encryption - computed: false, optional: true, required: false
        this._encryption = new S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionOutputReference(this, "encryption");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accountId !== undefined) {
            hasAnyValues = true;
            internalValueResult.accountId = this._accountId;
        }
        if (this._arn !== undefined) {
            hasAnyValues = true;
            internalValueResult.arn = this._arn;
        }
        if (this._format !== undefined) {
            hasAnyValues = true;
            internalValueResult.format = this._format;
        }
        if (this._outputSchemaVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputSchemaVersion = this._outputSchemaVersion;
        }
        if (this._prefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefix = this._prefix;
        }
        if (this._encryption?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryption = this._encryption?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accountId = undefined;
            this._arn = undefined;
            this._format = undefined;
            this._outputSchemaVersion = undefined;
            this._prefix = undefined;
            this._encryption.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accountId = value.accountId;
            this._arn = value.arn;
            this._format = value.format;
            this._outputSchemaVersion = value.outputSchemaVersion;
            this._prefix = value.prefix;
            this._encryption.internalValue = value.encryption;
        }
    }
    get accountId() {
        return this.getStringAttribute('account_id');
    }
    set accountId(value) {
        this._accountId = value;
    }
    // Temporarily expose input value. Use with caution.
    get accountIdInput() {
        return this._accountId;
    }
    get arn() {
        return this.getStringAttribute('arn');
    }
    set arn(value) {
        this._arn = value;
    }
    // Temporarily expose input value. Use with caution.
    get arnInput() {
        return this._arn;
    }
    get format() {
        return this.getStringAttribute('format');
    }
    set format(value) {
        this._format = value;
    }
    // Temporarily expose input value. Use with caution.
    get formatInput() {
        return this._format;
    }
    get outputSchemaVersion() {
        return this.getStringAttribute('output_schema_version');
    }
    set outputSchemaVersion(value) {
        this._outputSchemaVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get outputSchemaVersionInput() {
        return this._outputSchemaVersion;
    }
    get prefix() {
        return this.getStringAttribute('prefix');
    }
    set prefix(value) {
        this._prefix = value;
    }
    resetPrefix() {
        this._prefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixInput() {
        return this._prefix;
    }
    get encryption() {
        return this._encryption;
    }
    putEncryption(value) {
        this._encryption.internalValue = value;
    }
    resetEncryption() {
        this._encryption.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionInput() {
        return this._encryption.internalValue;
    }
}
exports.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationOutputReference = S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationOutputReference;
_p = JSII_RTTI_SYMBOL_1;
S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationOutputReference[_p] = { fqn: "@cdktf/provider-aws.s3ControlStorageLensConfiguration.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationOutputReference", version: "10.0.12" };
function s3ControlStorageLensConfigurationStorageLensConfigurationDataExportToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloud_watch_metrics: s3ControlStorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsToTerraform(struct.cloudWatchMetrics),
        s3_bucket_destination: s3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationToTerraform(struct.s3BucketDestination),
    };
}
exports.s3ControlStorageLensConfigurationStorageLensConfigurationDataExportToTerraform = s3ControlStorageLensConfigurationStorageLensConfigurationDataExportToTerraform;
class S3ControlStorageLensConfigurationStorageLensConfigurationDataExportOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloud_watch_metrics - computed: false, optional: true, required: false
        this._cloudWatchMetrics = new S3ControlStorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsOutputReference(this, "cloud_watch_metrics");
        // s3_bucket_destination - computed: false, optional: true, required: false
        this._s3BucketDestination = new S3ControlStorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationOutputReference(this, "s3_bucket_destination");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudWatchMetrics?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudWatchMetrics = this._cloudWatchMetrics?.internalValue;
        }
        if (this._s3BucketDestination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3BucketDestination = this._s3BucketDestination?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudWatchMetrics.internalValue = undefined;
            this._s3BucketDestination.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudWatchMetrics.internalValue = value.cloudWatchMetrics;
            this._s3BucketDestination.internalValue = value.s3BucketDestination;
        }
    }
    get cloudWatchMetrics() {
        return this._cloudWatchMetrics;
    }
    putCloudWatchMetrics(value) {
        this._cloudWatchMetrics.internalValue = value;
    }
    resetCloudWatchMetrics() {
        this._cloudWatchMetrics.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudWatchMetricsInput() {
        return this._cloudWatchMetrics.internalValue;
    }
    get s3BucketDestination() {
        return this._s3BucketDestination;
    }
    putS3BucketDestination(value) {
        this._s3BucketDestination.internalValue = value;
    }
    resetS3BucketDestination() {
        this._s3BucketDestination.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3BucketDestinationInput() {
        return this._s3BucketDestination.internalValue;
    }
}
exports.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportOutputReference = S3ControlStorageLensConfigurationStorageLensConfigurationDataExportOutputReference;
_q = JSII_RTTI_SYMBOL_1;
S3ControlStorageLensConfigurationStorageLensConfigurationDataExportOutputReference[_q] = { fqn: "@cdktf/provider-aws.s3ControlStorageLensConfiguration.S3ControlStorageLensConfigurationStorageLensConfigurationDataExportOutputReference", version: "10.0.12" };
function s3ControlStorageLensConfigurationStorageLensConfigurationExcludeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        buckets: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.buckets),
        regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.regions),
    };
}
exports.s3ControlStorageLensConfigurationStorageLensConfigurationExcludeToTerraform = s3ControlStorageLensConfigurationStorageLensConfigurationExcludeToTerraform;
class S3ControlStorageLensConfigurationStorageLensConfigurationExcludeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._buckets !== undefined) {
            hasAnyValues = true;
            internalValueResult.buckets = this._buckets;
        }
        if (this._regions !== undefined) {
            hasAnyValues = true;
            internalValueResult.regions = this._regions;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._buckets = undefined;
            this._regions = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._buckets = value.buckets;
            this._regions = value.regions;
        }
    }
    get buckets() {
        return cdktf.Fn.tolist(this.getListAttribute('buckets'));
    }
    set buckets(value) {
        this._buckets = value;
    }
    resetBuckets() {
        this._buckets = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketsInput() {
        return this._buckets;
    }
    get regions() {
        return cdktf.Fn.tolist(this.getListAttribute('regions'));
    }
    set regions(value) {
        this._regions = value;
    }
    resetRegions() {
        this._regions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionsInput() {
        return this._regions;
    }
}
exports.S3ControlStorageLensConfigurationStorageLensConfigurationExcludeOutputReference = S3ControlStorageLensConfigurationStorageLensConfigurationExcludeOutputReference;
_r = JSII_RTTI_SYMBOL_1;
S3ControlStorageLensConfigurationStorageLensConfigurationExcludeOutputReference[_r] = { fqn: "@cdktf/provider-aws.s3ControlStorageLensConfiguration.S3ControlStorageLensConfigurationStorageLensConfigurationExcludeOutputReference", version: "10.0.12" };
function s3ControlStorageLensConfigurationStorageLensConfigurationIncludeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        buckets: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.buckets),
        regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.regions),
    };
}
exports.s3ControlStorageLensConfigurationStorageLensConfigurationIncludeToTerraform = s3ControlStorageLensConfigurationStorageLensConfigurationIncludeToTerraform;
class S3ControlStorageLensConfigurationStorageLensConfigurationIncludeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._buckets !== undefined) {
            hasAnyValues = true;
            internalValueResult.buckets = this._buckets;
        }
        if (this._regions !== undefined) {
            hasAnyValues = true;
            internalValueResult.regions = this._regions;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._buckets = undefined;
            this._regions = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._buckets = value.buckets;
            this._regions = value.regions;
        }
    }
    get buckets() {
        return cdktf.Fn.tolist(this.getListAttribute('buckets'));
    }
    set buckets(value) {
        this._buckets = value;
    }
    resetBuckets() {
        this._buckets = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketsInput() {
        return this._buckets;
    }
    get regions() {
        return cdktf.Fn.tolist(this.getListAttribute('regions'));
    }
    set regions(value) {
        this._regions = value;
    }
    resetRegions() {
        this._regions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionsInput() {
        return this._regions;
    }
}
exports.S3ControlStorageLensConfigurationStorageLensConfigurationIncludeOutputReference = S3ControlStorageLensConfigurationStorageLensConfigurationIncludeOutputReference;
_s = JSII_RTTI_SYMBOL_1;
S3ControlStorageLensConfigurationStorageLensConfigurationIncludeOutputReference[_s] = { fqn: "@cdktf/provider-aws.s3ControlStorageLensConfiguration.S3ControlStorageLensConfigurationStorageLensConfigurationIncludeOutputReference", version: "10.0.12" };
function s3ControlStorageLensConfigurationStorageLensConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        account_level: s3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelToTerraform(struct.accountLevel),
        aws_org: s3ControlStorageLensConfigurationStorageLensConfigurationAwsOrgToTerraform(struct.awsOrg),
        data_export: s3ControlStorageLensConfigurationStorageLensConfigurationDataExportToTerraform(struct.dataExport),
        exclude: s3ControlStorageLensConfigurationStorageLensConfigurationExcludeToTerraform(struct.exclude),
        include: s3ControlStorageLensConfigurationStorageLensConfigurationIncludeToTerraform(struct.include),
    };
}
exports.s3ControlStorageLensConfigurationStorageLensConfigurationToTerraform = s3ControlStorageLensConfigurationStorageLensConfigurationToTerraform;
class S3ControlStorageLensConfigurationStorageLensConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // account_level - computed: false, optional: false, required: true
        this._accountLevel = new S3ControlStorageLensConfigurationStorageLensConfigurationAccountLevelOutputReference(this, "account_level");
        // aws_org - computed: false, optional: true, required: false
        this._awsOrg = new S3ControlStorageLensConfigurationStorageLensConfigurationAwsOrgOutputReference(this, "aws_org");
        // data_export - computed: false, optional: true, required: false
        this._dataExport = new S3ControlStorageLensConfigurationStorageLensConfigurationDataExportOutputReference(this, "data_export");
        // exclude - computed: false, optional: true, required: false
        this._exclude = new S3ControlStorageLensConfigurationStorageLensConfigurationExcludeOutputReference(this, "exclude");
        // include - computed: false, optional: true, required: false
        this._include = new S3ControlStorageLensConfigurationStorageLensConfigurationIncludeOutputReference(this, "include");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._accountLevel?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.accountLevel = this._accountLevel?.internalValue;
        }
        if (this._awsOrg?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.awsOrg = this._awsOrg?.internalValue;
        }
        if (this._dataExport?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataExport = this._dataExport?.internalValue;
        }
        if (this._exclude?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclude = this._exclude?.internalValue;
        }
        if (this._include?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.include = this._include?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._accountLevel.internalValue = undefined;
            this._awsOrg.internalValue = undefined;
            this._dataExport.internalValue = undefined;
            this._exclude.internalValue = undefined;
            this._include.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._accountLevel.internalValue = value.accountLevel;
            this._awsOrg.internalValue = value.awsOrg;
            this._dataExport.internalValue = value.dataExport;
            this._exclude.internalValue = value.exclude;
            this._include.internalValue = value.include;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get accountLevel() {
        return this._accountLevel;
    }
    putAccountLevel(value) {
        this._accountLevel.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get accountLevelInput() {
        return this._accountLevel.internalValue;
    }
    get awsOrg() {
        return this._awsOrg;
    }
    putAwsOrg(value) {
        this._awsOrg.internalValue = value;
    }
    resetAwsOrg() {
        this._awsOrg.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get awsOrgInput() {
        return this._awsOrg.internalValue;
    }
    get dataExport() {
        return this._dataExport;
    }
    putDataExport(value) {
        this._dataExport.internalValue = value;
    }
    resetDataExport() {
        this._dataExport.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataExportInput() {
        return this._dataExport.internalValue;
    }
    get exclude() {
        return this._exclude;
    }
    putExclude(value) {
        this._exclude.internalValue = value;
    }
    resetExclude() {
        this._exclude.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeInput() {
        return this._exclude.internalValue;
    }
    get include() {
        return this._include;
    }
    putInclude(value) {
        this._include.internalValue = value;
    }
    resetInclude() {
        this._include.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeInput() {
        return this._include.internalValue;
    }
}
exports.S3ControlStorageLensConfigurationStorageLensConfigurationOutputReference = S3ControlStorageLensConfigurationStorageLensConfigurationOutputReference;
_t = JSII_RTTI_SYMBOL_1;
S3ControlStorageLensConfigurationStorageLensConfigurationOutputReference[_t] = { fqn: "@cdktf/provider-aws.s3ControlStorageLensConfiguration.S3ControlStorageLensConfigurationStorageLensConfigurationOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/s3control_storage_lens_configuration aws_s3control_storage_lens_configuration}
*/
class S3ControlStorageLensConfiguration extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/s3control_storage_lens_configuration aws_s3control_storage_lens_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options S3ControlStorageLensConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_s3control_storage_lens_configuration',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // storage_lens_configuration - computed: false, optional: false, required: true
        this._storageLensConfiguration = new S3ControlStorageLensConfigurationStorageLensConfigurationOutputReference(this, "storage_lens_configuration");
        this._accountId = config.accountId;
        this._configId = config.configId;
        this._id = config.id;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._storageLensConfiguration.internalValue = config.storageLensConfiguration;
    }
    get accountId() {
        return this.getStringAttribute('account_id');
    }
    set accountId(value) {
        this._accountId = value;
    }
    resetAccountId() {
        this._accountId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accountIdInput() {
        return this._accountId;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get configId() {
        return this.getStringAttribute('config_id');
    }
    set configId(value) {
        this._configId = value;
    }
    // Temporarily expose input value. Use with caution.
    get configIdInput() {
        return this._configId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get storageLensConfiguration() {
        return this._storageLensConfiguration;
    }
    putStorageLensConfiguration(value) {
        this._storageLensConfiguration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get storageLensConfigurationInput() {
        return this._storageLensConfiguration.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            account_id: cdktf.stringToTerraform(this._accountId),
            config_id: cdktf.stringToTerraform(this._configId),
            id: cdktf.stringToTerraform(this._id),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            storage_lens_configuration: s3ControlStorageLensConfigurationStorageLensConfigurationToTerraform(this._storageLensConfiguration.internalValue),
        };
    }
}
exports.S3ControlStorageLensConfiguration = S3ControlStorageLensConfiguration;
_u = JSII_RTTI_SYMBOL_1;
S3ControlStorageLensConfiguration[_u] = { fqn: "@cdktf/provider-aws.s3ControlStorageLensConfiguration.S3ControlStorageLensConfiguration", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
S3ControlStorageLensConfiguration.tfResourceType = "aws_s3control_storage_lens_configuration";
//# sourceMappingURL=data:application/json;base64,