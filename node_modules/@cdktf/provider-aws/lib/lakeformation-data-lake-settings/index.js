"use strict";
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LakeformationDataLakeSettings = exports.LakeformationDataLakeSettingsCreateTableDefaultPermissionsList = exports.LakeformationDataLakeSettingsCreateTableDefaultPermissionsOutputReference = exports.lakeformationDataLakeSettingsCreateTableDefaultPermissionsToTerraform = exports.LakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsList = exports.LakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsOutputReference = exports.lakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function lakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        permissions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.permissions),
        principal: cdktf.stringToTerraform(struct.principal),
    };
}
exports.lakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsToTerraform = lakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsToTerraform;
class LakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._permissions !== undefined) {
            hasAnyValues = true;
            internalValueResult.permissions = this._permissions;
        }
        if (this._principal !== undefined) {
            hasAnyValues = true;
            internalValueResult.principal = this._principal;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._permissions = undefined;
            this._principal = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._permissions = value.permissions;
            this._principal = value.principal;
        }
    }
    get permissions() {
        return cdktf.Fn.tolist(this.getListAttribute('permissions'));
    }
    set permissions(value) {
        this._permissions = value;
    }
    resetPermissions() {
        this._permissions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionsInput() {
        return this._permissions;
    }
    get principal() {
        return this.getStringAttribute('principal');
    }
    set principal(value) {
        this._principal = value;
    }
    resetPrincipal() {
        this._principal = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get principalInput() {
        return this._principal;
    }
}
exports.LakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsOutputReference = LakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
LakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsOutputReference[_a] = { fqn: "@cdktf/provider-aws.lakeformationDataLakeSettings.LakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsOutputReference", version: "10.0.12" };
class LakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new LakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.LakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsList = LakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsList;
_b = JSII_RTTI_SYMBOL_1;
LakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsList[_b] = { fqn: "@cdktf/provider-aws.lakeformationDataLakeSettings.LakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsList", version: "10.0.12" };
function lakeformationDataLakeSettingsCreateTableDefaultPermissionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        permissions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.permissions),
        principal: cdktf.stringToTerraform(struct.principal),
    };
}
exports.lakeformationDataLakeSettingsCreateTableDefaultPermissionsToTerraform = lakeformationDataLakeSettingsCreateTableDefaultPermissionsToTerraform;
class LakeformationDataLakeSettingsCreateTableDefaultPermissionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._permissions !== undefined) {
            hasAnyValues = true;
            internalValueResult.permissions = this._permissions;
        }
        if (this._principal !== undefined) {
            hasAnyValues = true;
            internalValueResult.principal = this._principal;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._permissions = undefined;
            this._principal = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._permissions = value.permissions;
            this._principal = value.principal;
        }
    }
    get permissions() {
        return cdktf.Fn.tolist(this.getListAttribute('permissions'));
    }
    set permissions(value) {
        this._permissions = value;
    }
    resetPermissions() {
        this._permissions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionsInput() {
        return this._permissions;
    }
    get principal() {
        return this.getStringAttribute('principal');
    }
    set principal(value) {
        this._principal = value;
    }
    resetPrincipal() {
        this._principal = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get principalInput() {
        return this._principal;
    }
}
exports.LakeformationDataLakeSettingsCreateTableDefaultPermissionsOutputReference = LakeformationDataLakeSettingsCreateTableDefaultPermissionsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
LakeformationDataLakeSettingsCreateTableDefaultPermissionsOutputReference[_c] = { fqn: "@cdktf/provider-aws.lakeformationDataLakeSettings.LakeformationDataLakeSettingsCreateTableDefaultPermissionsOutputReference", version: "10.0.12" };
class LakeformationDataLakeSettingsCreateTableDefaultPermissionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new LakeformationDataLakeSettingsCreateTableDefaultPermissionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.LakeformationDataLakeSettingsCreateTableDefaultPermissionsList = LakeformationDataLakeSettingsCreateTableDefaultPermissionsList;
_d = JSII_RTTI_SYMBOL_1;
LakeformationDataLakeSettingsCreateTableDefaultPermissionsList[_d] = { fqn: "@cdktf/provider-aws.lakeformationDataLakeSettings.LakeformationDataLakeSettingsCreateTableDefaultPermissionsList", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/lakeformation_data_lake_settings aws_lakeformation_data_lake_settings}
*/
class LakeformationDataLakeSettings extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/lakeformation_data_lake_settings aws_lakeformation_data_lake_settings} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options LakeformationDataLakeSettingsConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'aws_lakeformation_data_lake_settings',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // create_database_default_permissions - computed: false, optional: true, required: false
        this._createDatabaseDefaultPermissions = new LakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsList(this, "create_database_default_permissions", false);
        // create_table_default_permissions - computed: false, optional: true, required: false
        this._createTableDefaultPermissions = new LakeformationDataLakeSettingsCreateTableDefaultPermissionsList(this, "create_table_default_permissions", false);
        this._admins = config.admins;
        this._catalogId = config.catalogId;
        this._id = config.id;
        this._trustedResourceOwners = config.trustedResourceOwners;
        this._createDatabaseDefaultPermissions.internalValue = config.createDatabaseDefaultPermissions;
        this._createTableDefaultPermissions.internalValue = config.createTableDefaultPermissions;
    }
    get admins() {
        return cdktf.Fn.tolist(this.getListAttribute('admins'));
    }
    set admins(value) {
        this._admins = value;
    }
    resetAdmins() {
        this._admins = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get adminsInput() {
        return this._admins;
    }
    get catalogId() {
        return this.getStringAttribute('catalog_id');
    }
    set catalogId(value) {
        this._catalogId = value;
    }
    resetCatalogId() {
        this._catalogId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get catalogIdInput() {
        return this._catalogId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get trustedResourceOwners() {
        return this.getListAttribute('trusted_resource_owners');
    }
    set trustedResourceOwners(value) {
        this._trustedResourceOwners = value;
    }
    resetTrustedResourceOwners() {
        this._trustedResourceOwners = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trustedResourceOwnersInput() {
        return this._trustedResourceOwners;
    }
    get createDatabaseDefaultPermissions() {
        return this._createDatabaseDefaultPermissions;
    }
    putCreateDatabaseDefaultPermissions(value) {
        this._createDatabaseDefaultPermissions.internalValue = value;
    }
    resetCreateDatabaseDefaultPermissions() {
        this._createDatabaseDefaultPermissions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createDatabaseDefaultPermissionsInput() {
        return this._createDatabaseDefaultPermissions.internalValue;
    }
    get createTableDefaultPermissions() {
        return this._createTableDefaultPermissions;
    }
    putCreateTableDefaultPermissions(value) {
        this._createTableDefaultPermissions.internalValue = value;
    }
    resetCreateTableDefaultPermissions() {
        this._createTableDefaultPermissions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createTableDefaultPermissionsInput() {
        return this._createTableDefaultPermissions.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            admins: cdktf.listMapper(cdktf.stringToTerraform, false)(this._admins),
            catalog_id: cdktf.stringToTerraform(this._catalogId),
            id: cdktf.stringToTerraform(this._id),
            trusted_resource_owners: cdktf.listMapper(cdktf.stringToTerraform, false)(this._trustedResourceOwners),
            create_database_default_permissions: cdktf.listMapper(lakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsToTerraform, true)(this._createDatabaseDefaultPermissions.internalValue),
            create_table_default_permissions: cdktf.listMapper(lakeformationDataLakeSettingsCreateTableDefaultPermissionsToTerraform, true)(this._createTableDefaultPermissions.internalValue),
        };
    }
}
exports.LakeformationDataLakeSettings = LakeformationDataLakeSettings;
_e = JSII_RTTI_SYMBOL_1;
LakeformationDataLakeSettings[_e] = { fqn: "@cdktf/provider-aws.lakeformationDataLakeSettings.LakeformationDataLakeSettings", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
LakeformationDataLakeSettings.tfResourceType = "aws_lakeformation_data_lake_settings";
//# sourceMappingURL=data:application/json;base64,