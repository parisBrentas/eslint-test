"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppsyncGraphqlApi = exports.AppsyncGraphqlApiUserPoolConfigOutputReference = exports.appsyncGraphqlApiUserPoolConfigToTerraform = exports.AppsyncGraphqlApiOpenidConnectConfigOutputReference = exports.appsyncGraphqlApiOpenidConnectConfigToTerraform = exports.AppsyncGraphqlApiLogConfigOutputReference = exports.appsyncGraphqlApiLogConfigToTerraform = exports.AppsyncGraphqlApiLambdaAuthorizerConfigOutputReference = exports.appsyncGraphqlApiLambdaAuthorizerConfigToTerraform = exports.AppsyncGraphqlApiAdditionalAuthenticationProviderList = exports.AppsyncGraphqlApiAdditionalAuthenticationProviderOutputReference = exports.appsyncGraphqlApiAdditionalAuthenticationProviderToTerraform = exports.AppsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigOutputReference = exports.appsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigToTerraform = exports.AppsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigOutputReference = exports.appsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigToTerraform = exports.AppsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutputReference = exports.appsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function appsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        authorizer_result_ttl_in_seconds: cdktf.numberToTerraform(struct.authorizerResultTtlInSeconds),
        authorizer_uri: cdktf.stringToTerraform(struct.authorizerUri),
        identity_validation_expression: cdktf.stringToTerraform(struct.identityValidationExpression),
    };
}
exports.appsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigToTerraform = appsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigToTerraform;
class AppsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authorizerResultTtlInSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorizerResultTtlInSeconds = this._authorizerResultTtlInSeconds;
        }
        if (this._authorizerUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorizerUri = this._authorizerUri;
        }
        if (this._identityValidationExpression !== undefined) {
            hasAnyValues = true;
            internalValueResult.identityValidationExpression = this._identityValidationExpression;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authorizerResultTtlInSeconds = undefined;
            this._authorizerUri = undefined;
            this._identityValidationExpression = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authorizerResultTtlInSeconds = value.authorizerResultTtlInSeconds;
            this._authorizerUri = value.authorizerUri;
            this._identityValidationExpression = value.identityValidationExpression;
        }
    }
    get authorizerResultTtlInSeconds() {
        return this.getNumberAttribute('authorizer_result_ttl_in_seconds');
    }
    set authorizerResultTtlInSeconds(value) {
        this._authorizerResultTtlInSeconds = value;
    }
    resetAuthorizerResultTtlInSeconds() {
        this._authorizerResultTtlInSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authorizerResultTtlInSecondsInput() {
        return this._authorizerResultTtlInSeconds;
    }
    get authorizerUri() {
        return this.getStringAttribute('authorizer_uri');
    }
    set authorizerUri(value) {
        this._authorizerUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get authorizerUriInput() {
        return this._authorizerUri;
    }
    get identityValidationExpression() {
        return this.getStringAttribute('identity_validation_expression');
    }
    set identityValidationExpression(value) {
        this._identityValidationExpression = value;
    }
    resetIdentityValidationExpression() {
        this._identityValidationExpression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityValidationExpressionInput() {
        return this._identityValidationExpression;
    }
}
exports.AppsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutputReference = AppsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutputReference[_a] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutputReference", version: "10.0.12" };
function appsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_ttl: cdktf.numberToTerraform(struct.authTtl),
        client_id: cdktf.stringToTerraform(struct.clientId),
        iat_ttl: cdktf.numberToTerraform(struct.iatTtl),
        issuer: cdktf.stringToTerraform(struct.issuer),
    };
}
exports.appsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigToTerraform = appsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigToTerraform;
class AppsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.authTtl = this._authTtl;
        }
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._iatTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.iatTtl = this._iatTtl;
        }
        if (this._issuer !== undefined) {
            hasAnyValues = true;
            internalValueResult.issuer = this._issuer;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authTtl = undefined;
            this._clientId = undefined;
            this._iatTtl = undefined;
            this._issuer = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authTtl = value.authTtl;
            this._clientId = value.clientId;
            this._iatTtl = value.iatTtl;
            this._issuer = value.issuer;
        }
    }
    get authTtl() {
        return this.getNumberAttribute('auth_ttl');
    }
    set authTtl(value) {
        this._authTtl = value;
    }
    resetAuthTtl() {
        this._authTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authTtlInput() {
        return this._authTtl;
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    resetClientId() {
        this._clientId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get iatTtl() {
        return this.getNumberAttribute('iat_ttl');
    }
    set iatTtl(value) {
        this._iatTtl = value;
    }
    resetIatTtl() {
        this._iatTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iatTtlInput() {
        return this._iatTtl;
    }
    get issuer() {
        return this.getStringAttribute('issuer');
    }
    set issuer(value) {
        this._issuer = value;
    }
    // Temporarily expose input value. Use with caution.
    get issuerInput() {
        return this._issuer;
    }
}
exports.AppsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigOutputReference = AppsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigOutputReference;
_b = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigOutputReference[_b] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigOutputReference", version: "10.0.12" };
function appsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_id_client_regex: cdktf.stringToTerraform(struct.appIdClientRegex),
        aws_region: cdktf.stringToTerraform(struct.awsRegion),
        user_pool_id: cdktf.stringToTerraform(struct.userPoolId),
    };
}
exports.appsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigToTerraform = appsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigToTerraform;
class AppsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appIdClientRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.appIdClientRegex = this._appIdClientRegex;
        }
        if (this._awsRegion !== undefined) {
            hasAnyValues = true;
            internalValueResult.awsRegion = this._awsRegion;
        }
        if (this._userPoolId !== undefined) {
            hasAnyValues = true;
            internalValueResult.userPoolId = this._userPoolId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._appIdClientRegex = undefined;
            this._awsRegion = undefined;
            this._userPoolId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._appIdClientRegex = value.appIdClientRegex;
            this._awsRegion = value.awsRegion;
            this._userPoolId = value.userPoolId;
        }
    }
    get appIdClientRegex() {
        return this.getStringAttribute('app_id_client_regex');
    }
    set appIdClientRegex(value) {
        this._appIdClientRegex = value;
    }
    resetAppIdClientRegex() {
        this._appIdClientRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appIdClientRegexInput() {
        return this._appIdClientRegex;
    }
    get awsRegion() {
        return this.getStringAttribute('aws_region');
    }
    set awsRegion(value) {
        this._awsRegion = value;
    }
    resetAwsRegion() {
        this._awsRegion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get awsRegionInput() {
        return this._awsRegion;
    }
    get userPoolId() {
        return this.getStringAttribute('user_pool_id');
    }
    set userPoolId(value) {
        this._userPoolId = value;
    }
    // Temporarily expose input value. Use with caution.
    get userPoolIdInput() {
        return this._userPoolId;
    }
}
exports.AppsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigOutputReference = AppsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigOutputReference[_c] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigOutputReference", version: "10.0.12" };
function appsyncGraphqlApiAdditionalAuthenticationProviderToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        authentication_type: cdktf.stringToTerraform(struct.authenticationType),
        lambda_authorizer_config: appsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigToTerraform(struct.lambdaAuthorizerConfig),
        openid_connect_config: appsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigToTerraform(struct.openidConnectConfig),
        user_pool_config: appsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigToTerraform(struct.userPoolConfig),
    };
}
exports.appsyncGraphqlApiAdditionalAuthenticationProviderToTerraform = appsyncGraphqlApiAdditionalAuthenticationProviderToTerraform;
class AppsyncGraphqlApiAdditionalAuthenticationProviderOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // lambda_authorizer_config - computed: false, optional: true, required: false
        this._lambdaAuthorizerConfig = new AppsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutputReference(this, "lambda_authorizer_config");
        // openid_connect_config - computed: false, optional: true, required: false
        this._openidConnectConfig = new AppsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigOutputReference(this, "openid_connect_config");
        // user_pool_config - computed: false, optional: true, required: false
        this._userPoolConfig = new AppsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigOutputReference(this, "user_pool_config");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authenticationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.authenticationType = this._authenticationType;
        }
        if (this._lambdaAuthorizerConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.lambdaAuthorizerConfig = this._lambdaAuthorizerConfig?.internalValue;
        }
        if (this._openidConnectConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.openidConnectConfig = this._openidConnectConfig?.internalValue;
        }
        if (this._userPoolConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.userPoolConfig = this._userPoolConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._authenticationType = undefined;
            this._lambdaAuthorizerConfig.internalValue = undefined;
            this._openidConnectConfig.internalValue = undefined;
            this._userPoolConfig.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._authenticationType = value.authenticationType;
            this._lambdaAuthorizerConfig.internalValue = value.lambdaAuthorizerConfig;
            this._openidConnectConfig.internalValue = value.openidConnectConfig;
            this._userPoolConfig.internalValue = value.userPoolConfig;
        }
    }
    get authenticationType() {
        return this.getStringAttribute('authentication_type');
    }
    set authenticationType(value) {
        this._authenticationType = value;
    }
    // Temporarily expose input value. Use with caution.
    get authenticationTypeInput() {
        return this._authenticationType;
    }
    get lambdaAuthorizerConfig() {
        return this._lambdaAuthorizerConfig;
    }
    putLambdaAuthorizerConfig(value) {
        this._lambdaAuthorizerConfig.internalValue = value;
    }
    resetLambdaAuthorizerConfig() {
        this._lambdaAuthorizerConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaAuthorizerConfigInput() {
        return this._lambdaAuthorizerConfig.internalValue;
    }
    get openidConnectConfig() {
        return this._openidConnectConfig;
    }
    putOpenidConnectConfig(value) {
        this._openidConnectConfig.internalValue = value;
    }
    resetOpenidConnectConfig() {
        this._openidConnectConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get openidConnectConfigInput() {
        return this._openidConnectConfig.internalValue;
    }
    get userPoolConfig() {
        return this._userPoolConfig;
    }
    putUserPoolConfig(value) {
        this._userPoolConfig.internalValue = value;
    }
    resetUserPoolConfig() {
        this._userPoolConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userPoolConfigInput() {
        return this._userPoolConfig.internalValue;
    }
}
exports.AppsyncGraphqlApiAdditionalAuthenticationProviderOutputReference = AppsyncGraphqlApiAdditionalAuthenticationProviderOutputReference;
_d = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApiAdditionalAuthenticationProviderOutputReference[_d] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApiAdditionalAuthenticationProviderOutputReference", version: "10.0.12" };
class AppsyncGraphqlApiAdditionalAuthenticationProviderList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AppsyncGraphqlApiAdditionalAuthenticationProviderOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AppsyncGraphqlApiAdditionalAuthenticationProviderList = AppsyncGraphqlApiAdditionalAuthenticationProviderList;
_e = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApiAdditionalAuthenticationProviderList[_e] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApiAdditionalAuthenticationProviderList", version: "10.0.12" };
function appsyncGraphqlApiLambdaAuthorizerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        authorizer_result_ttl_in_seconds: cdktf.numberToTerraform(struct.authorizerResultTtlInSeconds),
        authorizer_uri: cdktf.stringToTerraform(struct.authorizerUri),
        identity_validation_expression: cdktf.stringToTerraform(struct.identityValidationExpression),
    };
}
exports.appsyncGraphqlApiLambdaAuthorizerConfigToTerraform = appsyncGraphqlApiLambdaAuthorizerConfigToTerraform;
class AppsyncGraphqlApiLambdaAuthorizerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authorizerResultTtlInSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorizerResultTtlInSeconds = this._authorizerResultTtlInSeconds;
        }
        if (this._authorizerUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorizerUri = this._authorizerUri;
        }
        if (this._identityValidationExpression !== undefined) {
            hasAnyValues = true;
            internalValueResult.identityValidationExpression = this._identityValidationExpression;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authorizerResultTtlInSeconds = undefined;
            this._authorizerUri = undefined;
            this._identityValidationExpression = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authorizerResultTtlInSeconds = value.authorizerResultTtlInSeconds;
            this._authorizerUri = value.authorizerUri;
            this._identityValidationExpression = value.identityValidationExpression;
        }
    }
    get authorizerResultTtlInSeconds() {
        return this.getNumberAttribute('authorizer_result_ttl_in_seconds');
    }
    set authorizerResultTtlInSeconds(value) {
        this._authorizerResultTtlInSeconds = value;
    }
    resetAuthorizerResultTtlInSeconds() {
        this._authorizerResultTtlInSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authorizerResultTtlInSecondsInput() {
        return this._authorizerResultTtlInSeconds;
    }
    get authorizerUri() {
        return this.getStringAttribute('authorizer_uri');
    }
    set authorizerUri(value) {
        this._authorizerUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get authorizerUriInput() {
        return this._authorizerUri;
    }
    get identityValidationExpression() {
        return this.getStringAttribute('identity_validation_expression');
    }
    set identityValidationExpression(value) {
        this._identityValidationExpression = value;
    }
    resetIdentityValidationExpression() {
        this._identityValidationExpression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityValidationExpressionInput() {
        return this._identityValidationExpression;
    }
}
exports.AppsyncGraphqlApiLambdaAuthorizerConfigOutputReference = AppsyncGraphqlApiLambdaAuthorizerConfigOutputReference;
_f = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApiLambdaAuthorizerConfigOutputReference[_f] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApiLambdaAuthorizerConfigOutputReference", version: "10.0.12" };
function appsyncGraphqlApiLogConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloudwatch_logs_role_arn: cdktf.stringToTerraform(struct.cloudwatchLogsRoleArn),
        exclude_verbose_content: cdktf.booleanToTerraform(struct.excludeVerboseContent),
        field_log_level: cdktf.stringToTerraform(struct.fieldLogLevel),
    };
}
exports.appsyncGraphqlApiLogConfigToTerraform = appsyncGraphqlApiLogConfigToTerraform;
class AppsyncGraphqlApiLogConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudwatchLogsRoleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchLogsRoleArn = this._cloudwatchLogsRoleArn;
        }
        if (this._excludeVerboseContent !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeVerboseContent = this._excludeVerboseContent;
        }
        if (this._fieldLogLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.fieldLogLevel = this._fieldLogLevel;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudwatchLogsRoleArn = undefined;
            this._excludeVerboseContent = undefined;
            this._fieldLogLevel = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudwatchLogsRoleArn = value.cloudwatchLogsRoleArn;
            this._excludeVerboseContent = value.excludeVerboseContent;
            this._fieldLogLevel = value.fieldLogLevel;
        }
    }
    get cloudwatchLogsRoleArn() {
        return this.getStringAttribute('cloudwatch_logs_role_arn');
    }
    set cloudwatchLogsRoleArn(value) {
        this._cloudwatchLogsRoleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLogsRoleArnInput() {
        return this._cloudwatchLogsRoleArn;
    }
    get excludeVerboseContent() {
        return this.getBooleanAttribute('exclude_verbose_content');
    }
    set excludeVerboseContent(value) {
        this._excludeVerboseContent = value;
    }
    resetExcludeVerboseContent() {
        this._excludeVerboseContent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeVerboseContentInput() {
        return this._excludeVerboseContent;
    }
    get fieldLogLevel() {
        return this.getStringAttribute('field_log_level');
    }
    set fieldLogLevel(value) {
        this._fieldLogLevel = value;
    }
    // Temporarily expose input value. Use with caution.
    get fieldLogLevelInput() {
        return this._fieldLogLevel;
    }
}
exports.AppsyncGraphqlApiLogConfigOutputReference = AppsyncGraphqlApiLogConfigOutputReference;
_g = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApiLogConfigOutputReference[_g] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApiLogConfigOutputReference", version: "10.0.12" };
function appsyncGraphqlApiOpenidConnectConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_ttl: cdktf.numberToTerraform(struct.authTtl),
        client_id: cdktf.stringToTerraform(struct.clientId),
        iat_ttl: cdktf.numberToTerraform(struct.iatTtl),
        issuer: cdktf.stringToTerraform(struct.issuer),
    };
}
exports.appsyncGraphqlApiOpenidConnectConfigToTerraform = appsyncGraphqlApiOpenidConnectConfigToTerraform;
class AppsyncGraphqlApiOpenidConnectConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.authTtl = this._authTtl;
        }
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._iatTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.iatTtl = this._iatTtl;
        }
        if (this._issuer !== undefined) {
            hasAnyValues = true;
            internalValueResult.issuer = this._issuer;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authTtl = undefined;
            this._clientId = undefined;
            this._iatTtl = undefined;
            this._issuer = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authTtl = value.authTtl;
            this._clientId = value.clientId;
            this._iatTtl = value.iatTtl;
            this._issuer = value.issuer;
        }
    }
    get authTtl() {
        return this.getNumberAttribute('auth_ttl');
    }
    set authTtl(value) {
        this._authTtl = value;
    }
    resetAuthTtl() {
        this._authTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authTtlInput() {
        return this._authTtl;
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    resetClientId() {
        this._clientId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get iatTtl() {
        return this.getNumberAttribute('iat_ttl');
    }
    set iatTtl(value) {
        this._iatTtl = value;
    }
    resetIatTtl() {
        this._iatTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iatTtlInput() {
        return this._iatTtl;
    }
    get issuer() {
        return this.getStringAttribute('issuer');
    }
    set issuer(value) {
        this._issuer = value;
    }
    // Temporarily expose input value. Use with caution.
    get issuerInput() {
        return this._issuer;
    }
}
exports.AppsyncGraphqlApiOpenidConnectConfigOutputReference = AppsyncGraphqlApiOpenidConnectConfigOutputReference;
_h = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApiOpenidConnectConfigOutputReference[_h] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApiOpenidConnectConfigOutputReference", version: "10.0.12" };
function appsyncGraphqlApiUserPoolConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_id_client_regex: cdktf.stringToTerraform(struct.appIdClientRegex),
        aws_region: cdktf.stringToTerraform(struct.awsRegion),
        default_action: cdktf.stringToTerraform(struct.defaultAction),
        user_pool_id: cdktf.stringToTerraform(struct.userPoolId),
    };
}
exports.appsyncGraphqlApiUserPoolConfigToTerraform = appsyncGraphqlApiUserPoolConfigToTerraform;
class AppsyncGraphqlApiUserPoolConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appIdClientRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.appIdClientRegex = this._appIdClientRegex;
        }
        if (this._awsRegion !== undefined) {
            hasAnyValues = true;
            internalValueResult.awsRegion = this._awsRegion;
        }
        if (this._defaultAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultAction = this._defaultAction;
        }
        if (this._userPoolId !== undefined) {
            hasAnyValues = true;
            internalValueResult.userPoolId = this._userPoolId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._appIdClientRegex = undefined;
            this._awsRegion = undefined;
            this._defaultAction = undefined;
            this._userPoolId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._appIdClientRegex = value.appIdClientRegex;
            this._awsRegion = value.awsRegion;
            this._defaultAction = value.defaultAction;
            this._userPoolId = value.userPoolId;
        }
    }
    get appIdClientRegex() {
        return this.getStringAttribute('app_id_client_regex');
    }
    set appIdClientRegex(value) {
        this._appIdClientRegex = value;
    }
    resetAppIdClientRegex() {
        this._appIdClientRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appIdClientRegexInput() {
        return this._appIdClientRegex;
    }
    get awsRegion() {
        return this.getStringAttribute('aws_region');
    }
    set awsRegion(value) {
        this._awsRegion = value;
    }
    resetAwsRegion() {
        this._awsRegion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get awsRegionInput() {
        return this._awsRegion;
    }
    get defaultAction() {
        return this.getStringAttribute('default_action');
    }
    set defaultAction(value) {
        this._defaultAction = value;
    }
    // Temporarily expose input value. Use with caution.
    get defaultActionInput() {
        return this._defaultAction;
    }
    get userPoolId() {
        return this.getStringAttribute('user_pool_id');
    }
    set userPoolId(value) {
        this._userPoolId = value;
    }
    // Temporarily expose input value. Use with caution.
    get userPoolIdInput() {
        return this._userPoolId;
    }
}
exports.AppsyncGraphqlApiUserPoolConfigOutputReference = AppsyncGraphqlApiUserPoolConfigOutputReference;
_j = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApiUserPoolConfigOutputReference[_j] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApiUserPoolConfigOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/appsync_graphql_api aws_appsync_graphql_api}
*/
class AppsyncGraphqlApi extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/appsync_graphql_api aws_appsync_graphql_api} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AppsyncGraphqlApiConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_appsync_graphql_api',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // uris - computed: true, optional: false, required: false
        this._uris = new cdktf.StringMap(this, "uris");
        // additional_authentication_provider - computed: false, optional: true, required: false
        this._additionalAuthenticationProvider = new AppsyncGraphqlApiAdditionalAuthenticationProviderList(this, "additional_authentication_provider", false);
        // lambda_authorizer_config - computed: false, optional: true, required: false
        this._lambdaAuthorizerConfig = new AppsyncGraphqlApiLambdaAuthorizerConfigOutputReference(this, "lambda_authorizer_config");
        // log_config - computed: false, optional: true, required: false
        this._logConfig = new AppsyncGraphqlApiLogConfigOutputReference(this, "log_config");
        // openid_connect_config - computed: false, optional: true, required: false
        this._openidConnectConfig = new AppsyncGraphqlApiOpenidConnectConfigOutputReference(this, "openid_connect_config");
        // user_pool_config - computed: false, optional: true, required: false
        this._userPoolConfig = new AppsyncGraphqlApiUserPoolConfigOutputReference(this, "user_pool_config");
        this._authenticationType = config.authenticationType;
        this._id = config.id;
        this._name = config.name;
        this._schema = config.schema;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._xrayEnabled = config.xrayEnabled;
        this._additionalAuthenticationProvider.internalValue = config.additionalAuthenticationProvider;
        this._lambdaAuthorizerConfig.internalValue = config.lambdaAuthorizerConfig;
        this._logConfig.internalValue = config.logConfig;
        this._openidConnectConfig.internalValue = config.openidConnectConfig;
        this._userPoolConfig.internalValue = config.userPoolConfig;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get authenticationType() {
        return this.getStringAttribute('authentication_type');
    }
    set authenticationType(value) {
        this._authenticationType = value;
    }
    // Temporarily expose input value. Use with caution.
    get authenticationTypeInput() {
        return this._authenticationType;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get schema() {
        return this.getStringAttribute('schema');
    }
    set schema(value) {
        this._schema = value;
    }
    resetSchema() {
        this._schema = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schemaInput() {
        return this._schema;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get uris() {
        return this._uris;
    }
    get xrayEnabled() {
        return this.getBooleanAttribute('xray_enabled');
    }
    set xrayEnabled(value) {
        this._xrayEnabled = value;
    }
    resetXrayEnabled() {
        this._xrayEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get xrayEnabledInput() {
        return this._xrayEnabled;
    }
    get additionalAuthenticationProvider() {
        return this._additionalAuthenticationProvider;
    }
    putAdditionalAuthenticationProvider(value) {
        this._additionalAuthenticationProvider.internalValue = value;
    }
    resetAdditionalAuthenticationProvider() {
        this._additionalAuthenticationProvider.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get additionalAuthenticationProviderInput() {
        return this._additionalAuthenticationProvider.internalValue;
    }
    get lambdaAuthorizerConfig() {
        return this._lambdaAuthorizerConfig;
    }
    putLambdaAuthorizerConfig(value) {
        this._lambdaAuthorizerConfig.internalValue = value;
    }
    resetLambdaAuthorizerConfig() {
        this._lambdaAuthorizerConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaAuthorizerConfigInput() {
        return this._lambdaAuthorizerConfig.internalValue;
    }
    get logConfig() {
        return this._logConfig;
    }
    putLogConfig(value) {
        this._logConfig.internalValue = value;
    }
    resetLogConfig() {
        this._logConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logConfigInput() {
        return this._logConfig.internalValue;
    }
    get openidConnectConfig() {
        return this._openidConnectConfig;
    }
    putOpenidConnectConfig(value) {
        this._openidConnectConfig.internalValue = value;
    }
    resetOpenidConnectConfig() {
        this._openidConnectConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get openidConnectConfigInput() {
        return this._openidConnectConfig.internalValue;
    }
    get userPoolConfig() {
        return this._userPoolConfig;
    }
    putUserPoolConfig(value) {
        this._userPoolConfig.internalValue = value;
    }
    resetUserPoolConfig() {
        this._userPoolConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userPoolConfigInput() {
        return this._userPoolConfig.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            authentication_type: cdktf.stringToTerraform(this._authenticationType),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            schema: cdktf.stringToTerraform(this._schema),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            xray_enabled: cdktf.booleanToTerraform(this._xrayEnabled),
            additional_authentication_provider: cdktf.listMapper(appsyncGraphqlApiAdditionalAuthenticationProviderToTerraform, true)(this._additionalAuthenticationProvider.internalValue),
            lambda_authorizer_config: appsyncGraphqlApiLambdaAuthorizerConfigToTerraform(this._lambdaAuthorizerConfig.internalValue),
            log_config: appsyncGraphqlApiLogConfigToTerraform(this._logConfig.internalValue),
            openid_connect_config: appsyncGraphqlApiOpenidConnectConfigToTerraform(this._openidConnectConfig.internalValue),
            user_pool_config: appsyncGraphqlApiUserPoolConfigToTerraform(this._userPoolConfig.internalValue),
        };
    }
}
exports.AppsyncGraphqlApi = AppsyncGraphqlApi;
_k = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApi[_k] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApi", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
AppsyncGraphqlApi.tfResourceType = "aws_appsync_graphql_api";
//# sourceMappingURL=data:application/json;base64,