"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AthenaWorkgroup = exports.AthenaWorkgroupConfigurationOutputReference = exports.athenaWorkgroupConfigurationToTerraform = exports.AthenaWorkgroupConfigurationResultConfigurationOutputReference = exports.athenaWorkgroupConfigurationResultConfigurationToTerraform = exports.AthenaWorkgroupConfigurationResultConfigurationEncryptionConfigurationOutputReference = exports.athenaWorkgroupConfigurationResultConfigurationEncryptionConfigurationToTerraform = exports.AthenaWorkgroupConfigurationResultConfigurationAclConfigurationOutputReference = exports.athenaWorkgroupConfigurationResultConfigurationAclConfigurationToTerraform = exports.AthenaWorkgroupConfigurationEngineVersionOutputReference = exports.athenaWorkgroupConfigurationEngineVersionToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function athenaWorkgroupConfigurationEngineVersionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        selected_engine_version: cdktf.stringToTerraform(struct.selectedEngineVersion),
    };
}
exports.athenaWorkgroupConfigurationEngineVersionToTerraform = athenaWorkgroupConfigurationEngineVersionToTerraform;
class AthenaWorkgroupConfigurationEngineVersionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._selectedEngineVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.selectedEngineVersion = this._selectedEngineVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._selectedEngineVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._selectedEngineVersion = value.selectedEngineVersion;
        }
    }
    // effective_engine_version - computed: true, optional: false, required: false
    get effectiveEngineVersion() {
        return this.getStringAttribute('effective_engine_version');
    }
    get selectedEngineVersion() {
        return this.getStringAttribute('selected_engine_version');
    }
    set selectedEngineVersion(value) {
        this._selectedEngineVersion = value;
    }
    resetSelectedEngineVersion() {
        this._selectedEngineVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get selectedEngineVersionInput() {
        return this._selectedEngineVersion;
    }
}
exports.AthenaWorkgroupConfigurationEngineVersionOutputReference = AthenaWorkgroupConfigurationEngineVersionOutputReference;
_a = JSII_RTTI_SYMBOL_1;
AthenaWorkgroupConfigurationEngineVersionOutputReference[_a] = { fqn: "@cdktf/provider-aws.athenaWorkgroup.AthenaWorkgroupConfigurationEngineVersionOutputReference", version: "10.0.12" };
function athenaWorkgroupConfigurationResultConfigurationAclConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        s3_acl_option: cdktf.stringToTerraform(struct.s3AclOption),
    };
}
exports.athenaWorkgroupConfigurationResultConfigurationAclConfigurationToTerraform = athenaWorkgroupConfigurationResultConfigurationAclConfigurationToTerraform;
class AthenaWorkgroupConfigurationResultConfigurationAclConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._s3AclOption !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3AclOption = this._s3AclOption;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._s3AclOption = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._s3AclOption = value.s3AclOption;
        }
    }
    get s3AclOption() {
        return this.getStringAttribute('s3_acl_option');
    }
    set s3AclOption(value) {
        this._s3AclOption = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3AclOptionInput() {
        return this._s3AclOption;
    }
}
exports.AthenaWorkgroupConfigurationResultConfigurationAclConfigurationOutputReference = AthenaWorkgroupConfigurationResultConfigurationAclConfigurationOutputReference;
_b = JSII_RTTI_SYMBOL_1;
AthenaWorkgroupConfigurationResultConfigurationAclConfigurationOutputReference[_b] = { fqn: "@cdktf/provider-aws.athenaWorkgroup.AthenaWorkgroupConfigurationResultConfigurationAclConfigurationOutputReference", version: "10.0.12" };
function athenaWorkgroupConfigurationResultConfigurationEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        encryption_option: cdktf.stringToTerraform(struct.encryptionOption),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
    };
}
exports.athenaWorkgroupConfigurationResultConfigurationEncryptionConfigurationToTerraform = athenaWorkgroupConfigurationResultConfigurationEncryptionConfigurationToTerraform;
class AthenaWorkgroupConfigurationResultConfigurationEncryptionConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._encryptionOption !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionOption = this._encryptionOption;
        }
        if (this._kmsKeyArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyArn = this._kmsKeyArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._encryptionOption = undefined;
            this._kmsKeyArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._encryptionOption = value.encryptionOption;
            this._kmsKeyArn = value.kmsKeyArn;
        }
    }
    get encryptionOption() {
        return this.getStringAttribute('encryption_option');
    }
    set encryptionOption(value) {
        this._encryptionOption = value;
    }
    resetEncryptionOption() {
        this._encryptionOption = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionOptionInput() {
        return this._encryptionOption;
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
}
exports.AthenaWorkgroupConfigurationResultConfigurationEncryptionConfigurationOutputReference = AthenaWorkgroupConfigurationResultConfigurationEncryptionConfigurationOutputReference;
_c = JSII_RTTI_SYMBOL_1;
AthenaWorkgroupConfigurationResultConfigurationEncryptionConfigurationOutputReference[_c] = { fqn: "@cdktf/provider-aws.athenaWorkgroup.AthenaWorkgroupConfigurationResultConfigurationEncryptionConfigurationOutputReference", version: "10.0.12" };
function athenaWorkgroupConfigurationResultConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        expected_bucket_owner: cdktf.stringToTerraform(struct.expectedBucketOwner),
        output_location: cdktf.stringToTerraform(struct.outputLocation),
        acl_configuration: athenaWorkgroupConfigurationResultConfigurationAclConfigurationToTerraform(struct.aclConfiguration),
        encryption_configuration: athenaWorkgroupConfigurationResultConfigurationEncryptionConfigurationToTerraform(struct.encryptionConfiguration),
    };
}
exports.athenaWorkgroupConfigurationResultConfigurationToTerraform = athenaWorkgroupConfigurationResultConfigurationToTerraform;
class AthenaWorkgroupConfigurationResultConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // acl_configuration - computed: false, optional: true, required: false
        this._aclConfiguration = new AthenaWorkgroupConfigurationResultConfigurationAclConfigurationOutputReference(this, "acl_configuration");
        // encryption_configuration - computed: false, optional: true, required: false
        this._encryptionConfiguration = new AthenaWorkgroupConfigurationResultConfigurationEncryptionConfigurationOutputReference(this, "encryption_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._expectedBucketOwner !== undefined) {
            hasAnyValues = true;
            internalValueResult.expectedBucketOwner = this._expectedBucketOwner;
        }
        if (this._outputLocation !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputLocation = this._outputLocation;
        }
        if (this._aclConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.aclConfiguration = this._aclConfiguration?.internalValue;
        }
        if (this._encryptionConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionConfiguration = this._encryptionConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._expectedBucketOwner = undefined;
            this._outputLocation = undefined;
            this._aclConfiguration.internalValue = undefined;
            this._encryptionConfiguration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._expectedBucketOwner = value.expectedBucketOwner;
            this._outputLocation = value.outputLocation;
            this._aclConfiguration.internalValue = value.aclConfiguration;
            this._encryptionConfiguration.internalValue = value.encryptionConfiguration;
        }
    }
    get expectedBucketOwner() {
        return this.getStringAttribute('expected_bucket_owner');
    }
    set expectedBucketOwner(value) {
        this._expectedBucketOwner = value;
    }
    resetExpectedBucketOwner() {
        this._expectedBucketOwner = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get expectedBucketOwnerInput() {
        return this._expectedBucketOwner;
    }
    get outputLocation() {
        return this.getStringAttribute('output_location');
    }
    set outputLocation(value) {
        this._outputLocation = value;
    }
    resetOutputLocation() {
        this._outputLocation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputLocationInput() {
        return this._outputLocation;
    }
    get aclConfiguration() {
        return this._aclConfiguration;
    }
    putAclConfiguration(value) {
        this._aclConfiguration.internalValue = value;
    }
    resetAclConfiguration() {
        this._aclConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aclConfigurationInput() {
        return this._aclConfiguration.internalValue;
    }
    get encryptionConfiguration() {
        return this._encryptionConfiguration;
    }
    putEncryptionConfiguration(value) {
        this._encryptionConfiguration.internalValue = value;
    }
    resetEncryptionConfiguration() {
        this._encryptionConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionConfigurationInput() {
        return this._encryptionConfiguration.internalValue;
    }
}
exports.AthenaWorkgroupConfigurationResultConfigurationOutputReference = AthenaWorkgroupConfigurationResultConfigurationOutputReference;
_d = JSII_RTTI_SYMBOL_1;
AthenaWorkgroupConfigurationResultConfigurationOutputReference[_d] = { fqn: "@cdktf/provider-aws.athenaWorkgroup.AthenaWorkgroupConfigurationResultConfigurationOutputReference", version: "10.0.12" };
function athenaWorkgroupConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bytes_scanned_cutoff_per_query: cdktf.numberToTerraform(struct.bytesScannedCutoffPerQuery),
        enforce_workgroup_configuration: cdktf.booleanToTerraform(struct.enforceWorkgroupConfiguration),
        publish_cloudwatch_metrics_enabled: cdktf.booleanToTerraform(struct.publishCloudwatchMetricsEnabled),
        requester_pays_enabled: cdktf.booleanToTerraform(struct.requesterPaysEnabled),
        engine_version: athenaWorkgroupConfigurationEngineVersionToTerraform(struct.engineVersion),
        result_configuration: athenaWorkgroupConfigurationResultConfigurationToTerraform(struct.resultConfiguration),
    };
}
exports.athenaWorkgroupConfigurationToTerraform = athenaWorkgroupConfigurationToTerraform;
class AthenaWorkgroupConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // engine_version - computed: false, optional: true, required: false
        this._engineVersion = new AthenaWorkgroupConfigurationEngineVersionOutputReference(this, "engine_version");
        // result_configuration - computed: false, optional: true, required: false
        this._resultConfiguration = new AthenaWorkgroupConfigurationResultConfigurationOutputReference(this, "result_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bytesScannedCutoffPerQuery !== undefined) {
            hasAnyValues = true;
            internalValueResult.bytesScannedCutoffPerQuery = this._bytesScannedCutoffPerQuery;
        }
        if (this._enforceWorkgroupConfiguration !== undefined) {
            hasAnyValues = true;
            internalValueResult.enforceWorkgroupConfiguration = this._enforceWorkgroupConfiguration;
        }
        if (this._publishCloudwatchMetricsEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.publishCloudwatchMetricsEnabled = this._publishCloudwatchMetricsEnabled;
        }
        if (this._requesterPaysEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.requesterPaysEnabled = this._requesterPaysEnabled;
        }
        if (this._engineVersion?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.engineVersion = this._engineVersion?.internalValue;
        }
        if (this._resultConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.resultConfiguration = this._resultConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bytesScannedCutoffPerQuery = undefined;
            this._enforceWorkgroupConfiguration = undefined;
            this._publishCloudwatchMetricsEnabled = undefined;
            this._requesterPaysEnabled = undefined;
            this._engineVersion.internalValue = undefined;
            this._resultConfiguration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bytesScannedCutoffPerQuery = value.bytesScannedCutoffPerQuery;
            this._enforceWorkgroupConfiguration = value.enforceWorkgroupConfiguration;
            this._publishCloudwatchMetricsEnabled = value.publishCloudwatchMetricsEnabled;
            this._requesterPaysEnabled = value.requesterPaysEnabled;
            this._engineVersion.internalValue = value.engineVersion;
            this._resultConfiguration.internalValue = value.resultConfiguration;
        }
    }
    get bytesScannedCutoffPerQuery() {
        return this.getNumberAttribute('bytes_scanned_cutoff_per_query');
    }
    set bytesScannedCutoffPerQuery(value) {
        this._bytesScannedCutoffPerQuery = value;
    }
    resetBytesScannedCutoffPerQuery() {
        this._bytesScannedCutoffPerQuery = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bytesScannedCutoffPerQueryInput() {
        return this._bytesScannedCutoffPerQuery;
    }
    get enforceWorkgroupConfiguration() {
        return this.getBooleanAttribute('enforce_workgroup_configuration');
    }
    set enforceWorkgroupConfiguration(value) {
        this._enforceWorkgroupConfiguration = value;
    }
    resetEnforceWorkgroupConfiguration() {
        this._enforceWorkgroupConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enforceWorkgroupConfigurationInput() {
        return this._enforceWorkgroupConfiguration;
    }
    get publishCloudwatchMetricsEnabled() {
        return this.getBooleanAttribute('publish_cloudwatch_metrics_enabled');
    }
    set publishCloudwatchMetricsEnabled(value) {
        this._publishCloudwatchMetricsEnabled = value;
    }
    resetPublishCloudwatchMetricsEnabled() {
        this._publishCloudwatchMetricsEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publishCloudwatchMetricsEnabledInput() {
        return this._publishCloudwatchMetricsEnabled;
    }
    get requesterPaysEnabled() {
        return this.getBooleanAttribute('requester_pays_enabled');
    }
    set requesterPaysEnabled(value) {
        this._requesterPaysEnabled = value;
    }
    resetRequesterPaysEnabled() {
        this._requesterPaysEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requesterPaysEnabledInput() {
        return this._requesterPaysEnabled;
    }
    get engineVersion() {
        return this._engineVersion;
    }
    putEngineVersion(value) {
        this._engineVersion.internalValue = value;
    }
    resetEngineVersion() {
        this._engineVersion.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get engineVersionInput() {
        return this._engineVersion.internalValue;
    }
    get resultConfiguration() {
        return this._resultConfiguration;
    }
    putResultConfiguration(value) {
        this._resultConfiguration.internalValue = value;
    }
    resetResultConfiguration() {
        this._resultConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resultConfigurationInput() {
        return this._resultConfiguration.internalValue;
    }
}
exports.AthenaWorkgroupConfigurationOutputReference = AthenaWorkgroupConfigurationOutputReference;
_e = JSII_RTTI_SYMBOL_1;
AthenaWorkgroupConfigurationOutputReference[_e] = { fqn: "@cdktf/provider-aws.athenaWorkgroup.AthenaWorkgroupConfigurationOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/athena_workgroup aws_athena_workgroup}
*/
class AthenaWorkgroup extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/athena_workgroup aws_athena_workgroup} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AthenaWorkgroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_athena_workgroup',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // configuration - computed: false, optional: true, required: false
        this._configuration = new AthenaWorkgroupConfigurationOutputReference(this, "configuration");
        this._description = config.description;
        this._forceDestroy = config.forceDestroy;
        this._id = config.id;
        this._name = config.name;
        this._state = config.state;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._configuration.internalValue = config.configuration;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get forceDestroy() {
        return this.getBooleanAttribute('force_destroy');
    }
    set forceDestroy(value) {
        this._forceDestroy = value;
    }
    resetForceDestroy() {
        this._forceDestroy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forceDestroyInput() {
        return this._forceDestroy;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get state() {
        return this.getStringAttribute('state');
    }
    set state(value) {
        this._state = value;
    }
    resetState() {
        this._state = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stateInput() {
        return this._state;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get configuration() {
        return this._configuration;
    }
    putConfiguration(value) {
        this._configuration.internalValue = value;
    }
    resetConfiguration() {
        this._configuration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configurationInput() {
        return this._configuration.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            force_destroy: cdktf.booleanToTerraform(this._forceDestroy),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            state: cdktf.stringToTerraform(this._state),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            configuration: athenaWorkgroupConfigurationToTerraform(this._configuration.internalValue),
        };
    }
}
exports.AthenaWorkgroup = AthenaWorkgroup;
_f = JSII_RTTI_SYMBOL_1;
AthenaWorkgroup[_f] = { fqn: "@cdktf/provider-aws.athenaWorkgroup.AthenaWorkgroup", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
AthenaWorkgroup.tfResourceType = "aws_athena_workgroup";
//# sourceMappingURL=data:application/json;base64,