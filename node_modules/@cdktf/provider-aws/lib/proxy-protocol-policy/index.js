"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProxyProtocolPolicy = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/proxy_protocol_policy aws_proxy_protocol_policy}
*/
class ProxyProtocolPolicy extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/proxy_protocol_policy aws_proxy_protocol_policy} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ProxyProtocolPolicyConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_proxy_protocol_policy',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._id = config.id;
        this._instancePorts = config.instancePorts;
        this._loadBalancer = config.loadBalancer;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get instancePorts() {
        return cdktf.Fn.tolist(this.getListAttribute('instance_ports'));
    }
    set instancePorts(value) {
        this._instancePorts = value;
    }
    // Temporarily expose input value. Use with caution.
    get instancePortsInput() {
        return this._instancePorts;
    }
    get loadBalancer() {
        return this.getStringAttribute('load_balancer');
    }
    set loadBalancer(value) {
        this._loadBalancer = value;
    }
    // Temporarily expose input value. Use with caution.
    get loadBalancerInput() {
        return this._loadBalancer;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            instance_ports: cdktf.listMapper(cdktf.stringToTerraform, false)(this._instancePorts),
            load_balancer: cdktf.stringToTerraform(this._loadBalancer),
        };
    }
}
exports.ProxyProtocolPolicy = ProxyProtocolPolicy;
_a = JSII_RTTI_SYMBOL_1;
ProxyProtocolPolicy[_a] = { fqn: "@cdktf/provider-aws.proxyProtocolPolicy.ProxyProtocolPolicy", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
ProxyProtocolPolicy.tfResourceType = "aws_proxy_protocol_policy";
//# sourceMappingURL=data:application/json;base64,