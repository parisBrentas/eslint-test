"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChimeVoiceConnectorStreaming = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/chime_voice_connector_streaming aws_chime_voice_connector_streaming}
*/
class ChimeVoiceConnectorStreaming extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/chime_voice_connector_streaming aws_chime_voice_connector_streaming} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ChimeVoiceConnectorStreamingConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_chime_voice_connector_streaming',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._dataRetention = config.dataRetention;
        this._disabled = config.disabled;
        this._id = config.id;
        this._streamingNotificationTargets = config.streamingNotificationTargets;
        this._voiceConnectorId = config.voiceConnectorId;
    }
    get dataRetention() {
        return this.getNumberAttribute('data_retention');
    }
    set dataRetention(value) {
        this._dataRetention = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataRetentionInput() {
        return this._dataRetention;
    }
    get disabled() {
        return this.getBooleanAttribute('disabled');
    }
    set disabled(value) {
        this._disabled = value;
    }
    resetDisabled() {
        this._disabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get streamingNotificationTargets() {
        return cdktf.Fn.tolist(this.getListAttribute('streaming_notification_targets'));
    }
    set streamingNotificationTargets(value) {
        this._streamingNotificationTargets = value;
    }
    resetStreamingNotificationTargets() {
        this._streamingNotificationTargets = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streamingNotificationTargetsInput() {
        return this._streamingNotificationTargets;
    }
    get voiceConnectorId() {
        return this.getStringAttribute('voice_connector_id');
    }
    set voiceConnectorId(value) {
        this._voiceConnectorId = value;
    }
    // Temporarily expose input value. Use with caution.
    get voiceConnectorIdInput() {
        return this._voiceConnectorId;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            data_retention: cdktf.numberToTerraform(this._dataRetention),
            disabled: cdktf.booleanToTerraform(this._disabled),
            id: cdktf.stringToTerraform(this._id),
            streaming_notification_targets: cdktf.listMapper(cdktf.stringToTerraform, false)(this._streamingNotificationTargets),
            voice_connector_id: cdktf.stringToTerraform(this._voiceConnectorId),
        };
    }
}
exports.ChimeVoiceConnectorStreaming = ChimeVoiceConnectorStreaming;
_a = JSII_RTTI_SYMBOL_1;
ChimeVoiceConnectorStreaming[_a] = { fqn: "@cdktf/provider-aws.chimeVoiceConnectorStreaming.ChimeVoiceConnectorStreaming", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
ChimeVoiceConnectorStreaming.tfResourceType = "aws_chime_voice_connector_streaming";
//# sourceMappingURL=data:application/json;base64,