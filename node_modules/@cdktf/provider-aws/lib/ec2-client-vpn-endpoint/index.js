"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ec2ClientVpnEndpoint = exports.Ec2ClientVpnEndpointConnectionLogOptionsOutputReference = exports.ec2ClientVpnEndpointConnectionLogOptionsToTerraform = exports.Ec2ClientVpnEndpointClientLoginBannerOptionsOutputReference = exports.ec2ClientVpnEndpointClientLoginBannerOptionsToTerraform = exports.Ec2ClientVpnEndpointClientConnectOptionsOutputReference = exports.ec2ClientVpnEndpointClientConnectOptionsToTerraform = exports.Ec2ClientVpnEndpointAuthenticationOptionsList = exports.Ec2ClientVpnEndpointAuthenticationOptionsOutputReference = exports.ec2ClientVpnEndpointAuthenticationOptionsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function ec2ClientVpnEndpointAuthenticationOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        active_directory_id: cdktf.stringToTerraform(struct.activeDirectoryId),
        root_certificate_chain_arn: cdktf.stringToTerraform(struct.rootCertificateChainArn),
        saml_provider_arn: cdktf.stringToTerraform(struct.samlProviderArn),
        self_service_saml_provider_arn: cdktf.stringToTerraform(struct.selfServiceSamlProviderArn),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ec2ClientVpnEndpointAuthenticationOptionsToTerraform = ec2ClientVpnEndpointAuthenticationOptionsToTerraform;
class Ec2ClientVpnEndpointAuthenticationOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._activeDirectoryId !== undefined) {
            hasAnyValues = true;
            internalValueResult.activeDirectoryId = this._activeDirectoryId;
        }
        if (this._rootCertificateChainArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.rootCertificateChainArn = this._rootCertificateChainArn;
        }
        if (this._samlProviderArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.samlProviderArn = this._samlProviderArn;
        }
        if (this._selfServiceSamlProviderArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.selfServiceSamlProviderArn = this._selfServiceSamlProviderArn;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._activeDirectoryId = undefined;
            this._rootCertificateChainArn = undefined;
            this._samlProviderArn = undefined;
            this._selfServiceSamlProviderArn = undefined;
            this._type = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._activeDirectoryId = value.activeDirectoryId;
            this._rootCertificateChainArn = value.rootCertificateChainArn;
            this._samlProviderArn = value.samlProviderArn;
            this._selfServiceSamlProviderArn = value.selfServiceSamlProviderArn;
            this._type = value.type;
        }
    }
    get activeDirectoryId() {
        return this.getStringAttribute('active_directory_id');
    }
    set activeDirectoryId(value) {
        this._activeDirectoryId = value;
    }
    resetActiveDirectoryId() {
        this._activeDirectoryId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get activeDirectoryIdInput() {
        return this._activeDirectoryId;
    }
    get rootCertificateChainArn() {
        return this.getStringAttribute('root_certificate_chain_arn');
    }
    set rootCertificateChainArn(value) {
        this._rootCertificateChainArn = value;
    }
    resetRootCertificateChainArn() {
        this._rootCertificateChainArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rootCertificateChainArnInput() {
        return this._rootCertificateChainArn;
    }
    get samlProviderArn() {
        return this.getStringAttribute('saml_provider_arn');
    }
    set samlProviderArn(value) {
        this._samlProviderArn = value;
    }
    resetSamlProviderArn() {
        this._samlProviderArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get samlProviderArnInput() {
        return this._samlProviderArn;
    }
    get selfServiceSamlProviderArn() {
        return this.getStringAttribute('self_service_saml_provider_arn');
    }
    set selfServiceSamlProviderArn(value) {
        this._selfServiceSamlProviderArn = value;
    }
    resetSelfServiceSamlProviderArn() {
        this._selfServiceSamlProviderArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get selfServiceSamlProviderArnInput() {
        return this._selfServiceSamlProviderArn;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.Ec2ClientVpnEndpointAuthenticationOptionsOutputReference = Ec2ClientVpnEndpointAuthenticationOptionsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
Ec2ClientVpnEndpointAuthenticationOptionsOutputReference[_a] = { fqn: "@cdktf/provider-aws.ec2ClientVpnEndpoint.Ec2ClientVpnEndpointAuthenticationOptionsOutputReference", version: "10.0.12" };
class Ec2ClientVpnEndpointAuthenticationOptionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Ec2ClientVpnEndpointAuthenticationOptionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Ec2ClientVpnEndpointAuthenticationOptionsList = Ec2ClientVpnEndpointAuthenticationOptionsList;
_b = JSII_RTTI_SYMBOL_1;
Ec2ClientVpnEndpointAuthenticationOptionsList[_b] = { fqn: "@cdktf/provider-aws.ec2ClientVpnEndpoint.Ec2ClientVpnEndpointAuthenticationOptionsList", version: "10.0.12" };
function ec2ClientVpnEndpointClientConnectOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        lambda_function_arn: cdktf.stringToTerraform(struct.lambdaFunctionArn),
    };
}
exports.ec2ClientVpnEndpointClientConnectOptionsToTerraform = ec2ClientVpnEndpointClientConnectOptionsToTerraform;
class Ec2ClientVpnEndpointClientConnectOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._lambdaFunctionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lambdaFunctionArn = this._lambdaFunctionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._lambdaFunctionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._lambdaFunctionArn = value.lambdaFunctionArn;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get lambdaFunctionArn() {
        return this.getStringAttribute('lambda_function_arn');
    }
    set lambdaFunctionArn(value) {
        this._lambdaFunctionArn = value;
    }
    resetLambdaFunctionArn() {
        this._lambdaFunctionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaFunctionArnInput() {
        return this._lambdaFunctionArn;
    }
}
exports.Ec2ClientVpnEndpointClientConnectOptionsOutputReference = Ec2ClientVpnEndpointClientConnectOptionsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
Ec2ClientVpnEndpointClientConnectOptionsOutputReference[_c] = { fqn: "@cdktf/provider-aws.ec2ClientVpnEndpoint.Ec2ClientVpnEndpointClientConnectOptionsOutputReference", version: "10.0.12" };
function ec2ClientVpnEndpointClientLoginBannerOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        banner_text: cdktf.stringToTerraform(struct.bannerText),
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.ec2ClientVpnEndpointClientLoginBannerOptionsToTerraform = ec2ClientVpnEndpointClientLoginBannerOptionsToTerraform;
class Ec2ClientVpnEndpointClientLoginBannerOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bannerText !== undefined) {
            hasAnyValues = true;
            internalValueResult.bannerText = this._bannerText;
        }
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bannerText = undefined;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bannerText = value.bannerText;
            this._enabled = value.enabled;
        }
    }
    get bannerText() {
        return this.getStringAttribute('banner_text');
    }
    set bannerText(value) {
        this._bannerText = value;
    }
    resetBannerText() {
        this._bannerText = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bannerTextInput() {
        return this._bannerText;
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.Ec2ClientVpnEndpointClientLoginBannerOptionsOutputReference = Ec2ClientVpnEndpointClientLoginBannerOptionsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
Ec2ClientVpnEndpointClientLoginBannerOptionsOutputReference[_d] = { fqn: "@cdktf/provider-aws.ec2ClientVpnEndpoint.Ec2ClientVpnEndpointClientLoginBannerOptionsOutputReference", version: "10.0.12" };
function ec2ClientVpnEndpointConnectionLogOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloudwatch_log_group: cdktf.stringToTerraform(struct.cloudwatchLogGroup),
        cloudwatch_log_stream: cdktf.stringToTerraform(struct.cloudwatchLogStream),
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.ec2ClientVpnEndpointConnectionLogOptionsToTerraform = ec2ClientVpnEndpointConnectionLogOptionsToTerraform;
class Ec2ClientVpnEndpointConnectionLogOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudwatchLogGroup !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchLogGroup = this._cloudwatchLogGroup;
        }
        if (this._cloudwatchLogStream !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchLogStream = this._cloudwatchLogStream;
        }
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudwatchLogGroup = undefined;
            this._cloudwatchLogStream = undefined;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudwatchLogGroup = value.cloudwatchLogGroup;
            this._cloudwatchLogStream = value.cloudwatchLogStream;
            this._enabled = value.enabled;
        }
    }
    get cloudwatchLogGroup() {
        return this.getStringAttribute('cloudwatch_log_group');
    }
    set cloudwatchLogGroup(value) {
        this._cloudwatchLogGroup = value;
    }
    resetCloudwatchLogGroup() {
        this._cloudwatchLogGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLogGroupInput() {
        return this._cloudwatchLogGroup;
    }
    get cloudwatchLogStream() {
        return this.getStringAttribute('cloudwatch_log_stream');
    }
    set cloudwatchLogStream(value) {
        this._cloudwatchLogStream = value;
    }
    resetCloudwatchLogStream() {
        this._cloudwatchLogStream = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLogStreamInput() {
        return this._cloudwatchLogStream;
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.Ec2ClientVpnEndpointConnectionLogOptionsOutputReference = Ec2ClientVpnEndpointConnectionLogOptionsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
Ec2ClientVpnEndpointConnectionLogOptionsOutputReference[_e] = { fqn: "@cdktf/provider-aws.ec2ClientVpnEndpoint.Ec2ClientVpnEndpointConnectionLogOptionsOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/ec2_client_vpn_endpoint aws_ec2_client_vpn_endpoint}
*/
class Ec2ClientVpnEndpoint extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/ec2_client_vpn_endpoint aws_ec2_client_vpn_endpoint} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Ec2ClientVpnEndpointConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_ec2_client_vpn_endpoint',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // authentication_options - computed: false, optional: false, required: true
        this._authenticationOptions = new Ec2ClientVpnEndpointAuthenticationOptionsList(this, "authentication_options", false);
        // client_connect_options - computed: false, optional: true, required: false
        this._clientConnectOptions = new Ec2ClientVpnEndpointClientConnectOptionsOutputReference(this, "client_connect_options");
        // client_login_banner_options - computed: false, optional: true, required: false
        this._clientLoginBannerOptions = new Ec2ClientVpnEndpointClientLoginBannerOptionsOutputReference(this, "client_login_banner_options");
        // connection_log_options - computed: false, optional: false, required: true
        this._connectionLogOptions = new Ec2ClientVpnEndpointConnectionLogOptionsOutputReference(this, "connection_log_options");
        this._clientCidrBlock = config.clientCidrBlock;
        this._description = config.description;
        this._dnsServers = config.dnsServers;
        this._id = config.id;
        this._securityGroupIds = config.securityGroupIds;
        this._selfServicePortal = config.selfServicePortal;
        this._serverCertificateArn = config.serverCertificateArn;
        this._sessionTimeoutHours = config.sessionTimeoutHours;
        this._splitTunnel = config.splitTunnel;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._transportProtocol = config.transportProtocol;
        this._vpcId = config.vpcId;
        this._vpnPort = config.vpnPort;
        this._authenticationOptions.internalValue = config.authenticationOptions;
        this._clientConnectOptions.internalValue = config.clientConnectOptions;
        this._clientLoginBannerOptions.internalValue = config.clientLoginBannerOptions;
        this._connectionLogOptions.internalValue = config.connectionLogOptions;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get clientCidrBlock() {
        return this.getStringAttribute('client_cidr_block');
    }
    set clientCidrBlock(value) {
        this._clientCidrBlock = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientCidrBlockInput() {
        return this._clientCidrBlock;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // dns_name - computed: true, optional: false, required: false
    get dnsName() {
        return this.getStringAttribute('dns_name');
    }
    get dnsServers() {
        return this.getListAttribute('dns_servers');
    }
    set dnsServers(value) {
        this._dnsServers = value;
    }
    resetDnsServers() {
        this._dnsServers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dnsServersInput() {
        return this._dnsServers;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get securityGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('security_group_ids'));
    }
    set securityGroupIds(value) {
        this._securityGroupIds = value;
    }
    resetSecurityGroupIds() {
        this._securityGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupIdsInput() {
        return this._securityGroupIds;
    }
    get selfServicePortal() {
        return this.getStringAttribute('self_service_portal');
    }
    set selfServicePortal(value) {
        this._selfServicePortal = value;
    }
    resetSelfServicePortal() {
        this._selfServicePortal = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get selfServicePortalInput() {
        return this._selfServicePortal;
    }
    get serverCertificateArn() {
        return this.getStringAttribute('server_certificate_arn');
    }
    set serverCertificateArn(value) {
        this._serverCertificateArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get serverCertificateArnInput() {
        return this._serverCertificateArn;
    }
    get sessionTimeoutHours() {
        return this.getNumberAttribute('session_timeout_hours');
    }
    set sessionTimeoutHours(value) {
        this._sessionTimeoutHours = value;
    }
    resetSessionTimeoutHours() {
        this._sessionTimeoutHours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sessionTimeoutHoursInput() {
        return this._sessionTimeoutHours;
    }
    get splitTunnel() {
        return this.getBooleanAttribute('split_tunnel');
    }
    set splitTunnel(value) {
        this._splitTunnel = value;
    }
    resetSplitTunnel() {
        this._splitTunnel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get splitTunnelInput() {
        return this._splitTunnel;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get transportProtocol() {
        return this.getStringAttribute('transport_protocol');
    }
    set transportProtocol(value) {
        this._transportProtocol = value;
    }
    resetTransportProtocol() {
        this._transportProtocol = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transportProtocolInput() {
        return this._transportProtocol;
    }
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
    set vpcId(value) {
        this._vpcId = value;
    }
    resetVpcId() {
        this._vpcId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcIdInput() {
        return this._vpcId;
    }
    get vpnPort() {
        return this.getNumberAttribute('vpn_port');
    }
    set vpnPort(value) {
        this._vpnPort = value;
    }
    resetVpnPort() {
        this._vpnPort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpnPortInput() {
        return this._vpnPort;
    }
    get authenticationOptions() {
        return this._authenticationOptions;
    }
    putAuthenticationOptions(value) {
        this._authenticationOptions.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get authenticationOptionsInput() {
        return this._authenticationOptions.internalValue;
    }
    get clientConnectOptions() {
        return this._clientConnectOptions;
    }
    putClientConnectOptions(value) {
        this._clientConnectOptions.internalValue = value;
    }
    resetClientConnectOptions() {
        this._clientConnectOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientConnectOptionsInput() {
        return this._clientConnectOptions.internalValue;
    }
    get clientLoginBannerOptions() {
        return this._clientLoginBannerOptions;
    }
    putClientLoginBannerOptions(value) {
        this._clientLoginBannerOptions.internalValue = value;
    }
    resetClientLoginBannerOptions() {
        this._clientLoginBannerOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientLoginBannerOptionsInput() {
        return this._clientLoginBannerOptions.internalValue;
    }
    get connectionLogOptions() {
        return this._connectionLogOptions;
    }
    putConnectionLogOptions(value) {
        this._connectionLogOptions.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectionLogOptionsInput() {
        return this._connectionLogOptions.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            client_cidr_block: cdktf.stringToTerraform(this._clientCidrBlock),
            description: cdktf.stringToTerraform(this._description),
            dns_servers: cdktf.listMapper(cdktf.stringToTerraform, false)(this._dnsServers),
            id: cdktf.stringToTerraform(this._id),
            security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._securityGroupIds),
            self_service_portal: cdktf.stringToTerraform(this._selfServicePortal),
            server_certificate_arn: cdktf.stringToTerraform(this._serverCertificateArn),
            session_timeout_hours: cdktf.numberToTerraform(this._sessionTimeoutHours),
            split_tunnel: cdktf.booleanToTerraform(this._splitTunnel),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            transport_protocol: cdktf.stringToTerraform(this._transportProtocol),
            vpc_id: cdktf.stringToTerraform(this._vpcId),
            vpn_port: cdktf.numberToTerraform(this._vpnPort),
            authentication_options: cdktf.listMapper(ec2ClientVpnEndpointAuthenticationOptionsToTerraform, true)(this._authenticationOptions.internalValue),
            client_connect_options: ec2ClientVpnEndpointClientConnectOptionsToTerraform(this._clientConnectOptions.internalValue),
            client_login_banner_options: ec2ClientVpnEndpointClientLoginBannerOptionsToTerraform(this._clientLoginBannerOptions.internalValue),
            connection_log_options: ec2ClientVpnEndpointConnectionLogOptionsToTerraform(this._connectionLogOptions.internalValue),
        };
    }
}
exports.Ec2ClientVpnEndpoint = Ec2ClientVpnEndpoint;
_f = JSII_RTTI_SYMBOL_1;
Ec2ClientVpnEndpoint[_f] = { fqn: "@cdktf/provider-aws.ec2ClientVpnEndpoint.Ec2ClientVpnEndpoint", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
Ec2ClientVpnEndpoint.tfResourceType = "aws_ec2_client_vpn_endpoint";
//# sourceMappingURL=data:application/json;base64,