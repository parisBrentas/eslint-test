"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerEndpoint = exports.SagemakerEndpointDeploymentConfigOutputReference = exports.sagemakerEndpointDeploymentConfigToTerraform = exports.SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyOutputReference = exports.sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyToTerraform = exports.SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationOutputReference = exports.sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationToTerraform = exports.SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeOutputReference = exports.sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeToTerraform = exports.SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeOutputReference = exports.sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeToTerraform = exports.SagemakerEndpointDeploymentConfigAutoRollbackConfigurationOutputReference = exports.sagemakerEndpointDeploymentConfigAutoRollbackConfigurationToTerraform = exports.SagemakerEndpointDeploymentConfigAutoRollbackConfigurationAlarmsList = exports.SagemakerEndpointDeploymentConfigAutoRollbackConfigurationAlarmsOutputReference = exports.sagemakerEndpointDeploymentConfigAutoRollbackConfigurationAlarmsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function sagemakerEndpointDeploymentConfigAutoRollbackConfigurationAlarmsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        alarm_name: cdktf.stringToTerraform(struct.alarmName),
    };
}
exports.sagemakerEndpointDeploymentConfigAutoRollbackConfigurationAlarmsToTerraform = sagemakerEndpointDeploymentConfigAutoRollbackConfigurationAlarmsToTerraform;
class SagemakerEndpointDeploymentConfigAutoRollbackConfigurationAlarmsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._alarmName !== undefined) {
            hasAnyValues = true;
            internalValueResult.alarmName = this._alarmName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._alarmName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._alarmName = value.alarmName;
        }
    }
    get alarmName() {
        return this.getStringAttribute('alarm_name');
    }
    set alarmName(value) {
        this._alarmName = value;
    }
    // Temporarily expose input value. Use with caution.
    get alarmNameInput() {
        return this._alarmName;
    }
}
exports.SagemakerEndpointDeploymentConfigAutoRollbackConfigurationAlarmsOutputReference = SagemakerEndpointDeploymentConfigAutoRollbackConfigurationAlarmsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
SagemakerEndpointDeploymentConfigAutoRollbackConfigurationAlarmsOutputReference[_a] = { fqn: "@cdktf/provider-aws.sagemakerEndpoint.SagemakerEndpointDeploymentConfigAutoRollbackConfigurationAlarmsOutputReference", version: "10.0.12" };
class SagemakerEndpointDeploymentConfigAutoRollbackConfigurationAlarmsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerEndpointDeploymentConfigAutoRollbackConfigurationAlarmsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerEndpointDeploymentConfigAutoRollbackConfigurationAlarmsList = SagemakerEndpointDeploymentConfigAutoRollbackConfigurationAlarmsList;
_b = JSII_RTTI_SYMBOL_1;
SagemakerEndpointDeploymentConfigAutoRollbackConfigurationAlarmsList[_b] = { fqn: "@cdktf/provider-aws.sagemakerEndpoint.SagemakerEndpointDeploymentConfigAutoRollbackConfigurationAlarmsList", version: "10.0.12" };
function sagemakerEndpointDeploymentConfigAutoRollbackConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        alarms: cdktf.listMapper(sagemakerEndpointDeploymentConfigAutoRollbackConfigurationAlarmsToTerraform, true)(struct.alarms),
    };
}
exports.sagemakerEndpointDeploymentConfigAutoRollbackConfigurationToTerraform = sagemakerEndpointDeploymentConfigAutoRollbackConfigurationToTerraform;
class SagemakerEndpointDeploymentConfigAutoRollbackConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // alarms - computed: false, optional: true, required: false
        this._alarms = new SagemakerEndpointDeploymentConfigAutoRollbackConfigurationAlarmsList(this, "alarms", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._alarms?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.alarms = this._alarms?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._alarms.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._alarms.internalValue = value.alarms;
        }
    }
    get alarms() {
        return this._alarms;
    }
    putAlarms(value) {
        this._alarms.internalValue = value;
    }
    resetAlarms() {
        this._alarms.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alarmsInput() {
        return this._alarms.internalValue;
    }
}
exports.SagemakerEndpointDeploymentConfigAutoRollbackConfigurationOutputReference = SagemakerEndpointDeploymentConfigAutoRollbackConfigurationOutputReference;
_c = JSII_RTTI_SYMBOL_1;
SagemakerEndpointDeploymentConfigAutoRollbackConfigurationOutputReference[_c] = { fqn: "@cdktf/provider-aws.sagemakerEndpoint.SagemakerEndpointDeploymentConfigAutoRollbackConfigurationOutputReference", version: "10.0.12" };
function sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeToTerraform = sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeToTerraform;
class SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._type = undefined;
            this._value = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._type = value.type;
            this._value = value.value;
        }
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get value() {
        return this.getNumberAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeOutputReference = SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeOutputReference;
_d = JSII_RTTI_SYMBOL_1;
SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeOutputReference[_d] = { fqn: "@cdktf/provider-aws.sagemakerEndpoint.SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeOutputReference", version: "10.0.12" };
function sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeToTerraform = sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeToTerraform;
class SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._type = undefined;
            this._value = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._type = value.type;
            this._value = value.value;
        }
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get value() {
        return this.getNumberAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeOutputReference = SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeOutputReference;
_e = JSII_RTTI_SYMBOL_1;
SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeOutputReference[_e] = { fqn: "@cdktf/provider-aws.sagemakerEndpoint.SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeOutputReference", version: "10.0.12" };
function sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        wait_interval_in_seconds: cdktf.numberToTerraform(struct.waitIntervalInSeconds),
        canary_size: sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeToTerraform(struct.canarySize),
        linear_step_size: sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeToTerraform(struct.linearStepSize),
    };
}
exports.sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationToTerraform = sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationToTerraform;
class SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // canary_size - computed: false, optional: true, required: false
        this._canarySize = new SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeOutputReference(this, "canary_size");
        // linear_step_size - computed: false, optional: true, required: false
        this._linearStepSize = new SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeOutputReference(this, "linear_step_size");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._waitIntervalInSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.waitIntervalInSeconds = this._waitIntervalInSeconds;
        }
        if (this._canarySize?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.canarySize = this._canarySize?.internalValue;
        }
        if (this._linearStepSize?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.linearStepSize = this._linearStepSize?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._type = undefined;
            this._waitIntervalInSeconds = undefined;
            this._canarySize.internalValue = undefined;
            this._linearStepSize.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._type = value.type;
            this._waitIntervalInSeconds = value.waitIntervalInSeconds;
            this._canarySize.internalValue = value.canarySize;
            this._linearStepSize.internalValue = value.linearStepSize;
        }
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get waitIntervalInSeconds() {
        return this.getNumberAttribute('wait_interval_in_seconds');
    }
    set waitIntervalInSeconds(value) {
        this._waitIntervalInSeconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get waitIntervalInSecondsInput() {
        return this._waitIntervalInSeconds;
    }
    get canarySize() {
        return this._canarySize;
    }
    putCanarySize(value) {
        this._canarySize.internalValue = value;
    }
    resetCanarySize() {
        this._canarySize.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get canarySizeInput() {
        return this._canarySize.internalValue;
    }
    get linearStepSize() {
        return this._linearStepSize;
    }
    putLinearStepSize(value) {
        this._linearStepSize.internalValue = value;
    }
    resetLinearStepSize() {
        this._linearStepSize.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get linearStepSizeInput() {
        return this._linearStepSize.internalValue;
    }
}
exports.SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationOutputReference = SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationOutputReference;
_f = JSII_RTTI_SYMBOL_1;
SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationOutputReference[_f] = { fqn: "@cdktf/provider-aws.sagemakerEndpoint.SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationOutputReference", version: "10.0.12" };
function sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        maximum_execution_timeout_in_seconds: cdktf.numberToTerraform(struct.maximumExecutionTimeoutInSeconds),
        termination_wait_in_seconds: cdktf.numberToTerraform(struct.terminationWaitInSeconds),
        traffic_routing_configuration: sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationToTerraform(struct.trafficRoutingConfiguration),
    };
}
exports.sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyToTerraform = sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyToTerraform;
class SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // traffic_routing_configuration - computed: false, optional: false, required: true
        this._trafficRoutingConfiguration = new SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationOutputReference(this, "traffic_routing_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maximumExecutionTimeoutInSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.maximumExecutionTimeoutInSeconds = this._maximumExecutionTimeoutInSeconds;
        }
        if (this._terminationWaitInSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.terminationWaitInSeconds = this._terminationWaitInSeconds;
        }
        if (this._trafficRoutingConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.trafficRoutingConfiguration = this._trafficRoutingConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maximumExecutionTimeoutInSeconds = undefined;
            this._terminationWaitInSeconds = undefined;
            this._trafficRoutingConfiguration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maximumExecutionTimeoutInSeconds = value.maximumExecutionTimeoutInSeconds;
            this._terminationWaitInSeconds = value.terminationWaitInSeconds;
            this._trafficRoutingConfiguration.internalValue = value.trafficRoutingConfiguration;
        }
    }
    get maximumExecutionTimeoutInSeconds() {
        return this.getNumberAttribute('maximum_execution_timeout_in_seconds');
    }
    set maximumExecutionTimeoutInSeconds(value) {
        this._maximumExecutionTimeoutInSeconds = value;
    }
    resetMaximumExecutionTimeoutInSeconds() {
        this._maximumExecutionTimeoutInSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maximumExecutionTimeoutInSecondsInput() {
        return this._maximumExecutionTimeoutInSeconds;
    }
    get terminationWaitInSeconds() {
        return this.getNumberAttribute('termination_wait_in_seconds');
    }
    set terminationWaitInSeconds(value) {
        this._terminationWaitInSeconds = value;
    }
    resetTerminationWaitInSeconds() {
        this._terminationWaitInSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get terminationWaitInSecondsInput() {
        return this._terminationWaitInSeconds;
    }
    get trafficRoutingConfiguration() {
        return this._trafficRoutingConfiguration;
    }
    putTrafficRoutingConfiguration(value) {
        this._trafficRoutingConfiguration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get trafficRoutingConfigurationInput() {
        return this._trafficRoutingConfiguration.internalValue;
    }
}
exports.SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyOutputReference = SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyOutputReference;
_g = JSII_RTTI_SYMBOL_1;
SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyOutputReference[_g] = { fqn: "@cdktf/provider-aws.sagemakerEndpoint.SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyOutputReference", version: "10.0.12" };
function sagemakerEndpointDeploymentConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_rollback_configuration: sagemakerEndpointDeploymentConfigAutoRollbackConfigurationToTerraform(struct.autoRollbackConfiguration),
        blue_green_update_policy: sagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyToTerraform(struct.blueGreenUpdatePolicy),
    };
}
exports.sagemakerEndpointDeploymentConfigToTerraform = sagemakerEndpointDeploymentConfigToTerraform;
class SagemakerEndpointDeploymentConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // auto_rollback_configuration - computed: false, optional: true, required: false
        this._autoRollbackConfiguration = new SagemakerEndpointDeploymentConfigAutoRollbackConfigurationOutputReference(this, "auto_rollback_configuration");
        // blue_green_update_policy - computed: false, optional: false, required: true
        this._blueGreenUpdatePolicy = new SagemakerEndpointDeploymentConfigBlueGreenUpdatePolicyOutputReference(this, "blue_green_update_policy");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoRollbackConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoRollbackConfiguration = this._autoRollbackConfiguration?.internalValue;
        }
        if (this._blueGreenUpdatePolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.blueGreenUpdatePolicy = this._blueGreenUpdatePolicy?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoRollbackConfiguration.internalValue = undefined;
            this._blueGreenUpdatePolicy.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoRollbackConfiguration.internalValue = value.autoRollbackConfiguration;
            this._blueGreenUpdatePolicy.internalValue = value.blueGreenUpdatePolicy;
        }
    }
    get autoRollbackConfiguration() {
        return this._autoRollbackConfiguration;
    }
    putAutoRollbackConfiguration(value) {
        this._autoRollbackConfiguration.internalValue = value;
    }
    resetAutoRollbackConfiguration() {
        this._autoRollbackConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoRollbackConfigurationInput() {
        return this._autoRollbackConfiguration.internalValue;
    }
    get blueGreenUpdatePolicy() {
        return this._blueGreenUpdatePolicy;
    }
    putBlueGreenUpdatePolicy(value) {
        this._blueGreenUpdatePolicy.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get blueGreenUpdatePolicyInput() {
        return this._blueGreenUpdatePolicy.internalValue;
    }
}
exports.SagemakerEndpointDeploymentConfigOutputReference = SagemakerEndpointDeploymentConfigOutputReference;
_h = JSII_RTTI_SYMBOL_1;
SagemakerEndpointDeploymentConfigOutputReference[_h] = { fqn: "@cdktf/provider-aws.sagemakerEndpoint.SagemakerEndpointDeploymentConfigOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/sagemaker_endpoint aws_sagemaker_endpoint}
*/
class SagemakerEndpoint extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/sagemaker_endpoint aws_sagemaker_endpoint} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerEndpointConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_sagemaker_endpoint',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // deployment_config - computed: false, optional: true, required: false
        this._deploymentConfig = new SagemakerEndpointDeploymentConfigOutputReference(this, "deployment_config");
        this._endpointConfigName = config.endpointConfigName;
        this._id = config.id;
        this._name = config.name;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._deploymentConfig.internalValue = config.deploymentConfig;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get endpointConfigName() {
        return this.getStringAttribute('endpoint_config_name');
    }
    set endpointConfigName(value) {
        this._endpointConfigName = value;
    }
    // Temporarily expose input value. Use with caution.
    get endpointConfigNameInput() {
        return this._endpointConfigName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get deploymentConfig() {
        return this._deploymentConfig;
    }
    putDeploymentConfig(value) {
        this._deploymentConfig.internalValue = value;
    }
    resetDeploymentConfig() {
        this._deploymentConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deploymentConfigInput() {
        return this._deploymentConfig.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            endpoint_config_name: cdktf.stringToTerraform(this._endpointConfigName),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            deployment_config: sagemakerEndpointDeploymentConfigToTerraform(this._deploymentConfig.internalValue),
        };
    }
}
exports.SagemakerEndpoint = SagemakerEndpoint;
_j = JSII_RTTI_SYMBOL_1;
SagemakerEndpoint[_j] = { fqn: "@cdktf/provider-aws.sagemakerEndpoint.SagemakerEndpoint", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
SagemakerEndpoint.tfResourceType = "aws_sagemaker_endpoint";
//# sourceMappingURL=data:application/json;base64,