"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudfrontDistribution = exports.CloudfrontDistributionViewerCertificateOutputReference = exports.cloudfrontDistributionViewerCertificateToTerraform = exports.CloudfrontDistributionRestrictionsOutputReference = exports.cloudfrontDistributionRestrictionsToTerraform = exports.CloudfrontDistributionRestrictionsGeoRestrictionOutputReference = exports.cloudfrontDistributionRestrictionsGeoRestrictionToTerraform = exports.CloudfrontDistributionOriginGroupList = exports.CloudfrontDistributionOriginGroupOutputReference = exports.cloudfrontDistributionOriginGroupToTerraform = exports.CloudfrontDistributionOriginGroupMemberList = exports.CloudfrontDistributionOriginGroupMemberOutputReference = exports.cloudfrontDistributionOriginGroupMemberToTerraform = exports.CloudfrontDistributionOriginGroupFailoverCriteriaOutputReference = exports.cloudfrontDistributionOriginGroupFailoverCriteriaToTerraform = exports.CloudfrontDistributionOriginList = exports.CloudfrontDistributionOriginOutputReference = exports.cloudfrontDistributionOriginToTerraform = exports.CloudfrontDistributionOriginS3OriginConfigOutputReference = exports.cloudfrontDistributionOriginS3OriginConfigToTerraform = exports.CloudfrontDistributionOriginOriginShieldOutputReference = exports.cloudfrontDistributionOriginOriginShieldToTerraform = exports.CloudfrontDistributionOriginCustomOriginConfigOutputReference = exports.cloudfrontDistributionOriginCustomOriginConfigToTerraform = exports.CloudfrontDistributionOriginCustomHeaderList = exports.CloudfrontDistributionOriginCustomHeaderOutputReference = exports.cloudfrontDistributionOriginCustomHeaderToTerraform = exports.CloudfrontDistributionOrderedCacheBehaviorList = exports.CloudfrontDistributionOrderedCacheBehaviorOutputReference = exports.cloudfrontDistributionOrderedCacheBehaviorToTerraform = exports.CloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationList = exports.CloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationOutputReference = exports.cloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationToTerraform = exports.CloudfrontDistributionOrderedCacheBehaviorFunctionAssociationList = exports.CloudfrontDistributionOrderedCacheBehaviorFunctionAssociationOutputReference = exports.cloudfrontDistributionOrderedCacheBehaviorFunctionAssociationToTerraform = exports.CloudfrontDistributionOrderedCacheBehaviorForwardedValuesOutputReference = exports.cloudfrontDistributionOrderedCacheBehaviorForwardedValuesToTerraform = exports.CloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesOutputReference = exports.cloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesToTerraform = exports.CloudfrontDistributionLoggingConfigOutputReference = exports.cloudfrontDistributionLoggingConfigToTerraform = exports.CloudfrontDistributionDefaultCacheBehaviorOutputReference = exports.cloudfrontDistributionDefaultCacheBehaviorToTerraform = exports.CloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationList = exports.CloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationOutputReference = exports.cloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationToTerraform = exports.CloudfrontDistributionDefaultCacheBehaviorFunctionAssociationList = exports.CloudfrontDistributionDefaultCacheBehaviorFunctionAssociationOutputReference = exports.cloudfrontDistributionDefaultCacheBehaviorFunctionAssociationToTerraform = exports.CloudfrontDistributionDefaultCacheBehaviorForwardedValuesOutputReference = exports.cloudfrontDistributionDefaultCacheBehaviorForwardedValuesToTerraform = exports.CloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesOutputReference = exports.cloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesToTerraform = exports.CloudfrontDistributionCustomErrorResponseList = exports.CloudfrontDistributionCustomErrorResponseOutputReference = exports.cloudfrontDistributionCustomErrorResponseToTerraform = exports.CloudfrontDistributionTrustedSignersList = exports.CloudfrontDistributionTrustedSignersOutputReference = exports.cloudfrontDistributionTrustedSignersToTerraform = exports.CloudfrontDistributionTrustedSignersItemsList = exports.CloudfrontDistributionTrustedSignersItemsOutputReference = exports.cloudfrontDistributionTrustedSignersItemsToTerraform = exports.CloudfrontDistributionTrustedKeyGroupsList = exports.CloudfrontDistributionTrustedKeyGroupsOutputReference = exports.cloudfrontDistributionTrustedKeyGroupsToTerraform = exports.CloudfrontDistributionTrustedKeyGroupsItemsList = exports.CloudfrontDistributionTrustedKeyGroupsItemsOutputReference = exports.cloudfrontDistributionTrustedKeyGroupsItemsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function cloudfrontDistributionTrustedKeyGroupsItemsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.cloudfrontDistributionTrustedKeyGroupsItemsToTerraform = cloudfrontDistributionTrustedKeyGroupsItemsToTerraform;
class CloudfrontDistributionTrustedKeyGroupsItemsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // key_group_id - computed: true, optional: false, required: false
    get keyGroupId() {
        return this.getStringAttribute('key_group_id');
    }
    // key_pair_ids - computed: true, optional: false, required: false
    get keyPairIds() {
        return cdktf.Fn.tolist(this.getListAttribute('key_pair_ids'));
    }
}
exports.CloudfrontDistributionTrustedKeyGroupsItemsOutputReference = CloudfrontDistributionTrustedKeyGroupsItemsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionTrustedKeyGroupsItemsOutputReference[_a] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionTrustedKeyGroupsItemsOutputReference", version: "10.0.12" };
class CloudfrontDistributionTrustedKeyGroupsItemsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudfrontDistributionTrustedKeyGroupsItemsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudfrontDistributionTrustedKeyGroupsItemsList = CloudfrontDistributionTrustedKeyGroupsItemsList;
_b = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionTrustedKeyGroupsItemsList[_b] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionTrustedKeyGroupsItemsList", version: "10.0.12" };
function cloudfrontDistributionTrustedKeyGroupsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.cloudfrontDistributionTrustedKeyGroupsToTerraform = cloudfrontDistributionTrustedKeyGroupsToTerraform;
class CloudfrontDistributionTrustedKeyGroupsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // items - computed: true, optional: false, required: false
        this._items = new CloudfrontDistributionTrustedKeyGroupsItemsList(this, "items", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // enabled - computed: true, optional: false, required: false
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    get items() {
        return this._items;
    }
}
exports.CloudfrontDistributionTrustedKeyGroupsOutputReference = CloudfrontDistributionTrustedKeyGroupsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionTrustedKeyGroupsOutputReference[_c] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionTrustedKeyGroupsOutputReference", version: "10.0.12" };
class CloudfrontDistributionTrustedKeyGroupsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudfrontDistributionTrustedKeyGroupsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudfrontDistributionTrustedKeyGroupsList = CloudfrontDistributionTrustedKeyGroupsList;
_d = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionTrustedKeyGroupsList[_d] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionTrustedKeyGroupsList", version: "10.0.12" };
function cloudfrontDistributionTrustedSignersItemsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.cloudfrontDistributionTrustedSignersItemsToTerraform = cloudfrontDistributionTrustedSignersItemsToTerraform;
class CloudfrontDistributionTrustedSignersItemsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // aws_account_number - computed: true, optional: false, required: false
    get awsAccountNumber() {
        return this.getStringAttribute('aws_account_number');
    }
    // key_pair_ids - computed: true, optional: false, required: false
    get keyPairIds() {
        return cdktf.Fn.tolist(this.getListAttribute('key_pair_ids'));
    }
}
exports.CloudfrontDistributionTrustedSignersItemsOutputReference = CloudfrontDistributionTrustedSignersItemsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionTrustedSignersItemsOutputReference[_e] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionTrustedSignersItemsOutputReference", version: "10.0.12" };
class CloudfrontDistributionTrustedSignersItemsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudfrontDistributionTrustedSignersItemsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudfrontDistributionTrustedSignersItemsList = CloudfrontDistributionTrustedSignersItemsList;
_f = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionTrustedSignersItemsList[_f] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionTrustedSignersItemsList", version: "10.0.12" };
function cloudfrontDistributionTrustedSignersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.cloudfrontDistributionTrustedSignersToTerraform = cloudfrontDistributionTrustedSignersToTerraform;
class CloudfrontDistributionTrustedSignersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // items - computed: true, optional: false, required: false
        this._items = new CloudfrontDistributionTrustedSignersItemsList(this, "items", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // enabled - computed: true, optional: false, required: false
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    get items() {
        return this._items;
    }
}
exports.CloudfrontDistributionTrustedSignersOutputReference = CloudfrontDistributionTrustedSignersOutputReference;
_g = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionTrustedSignersOutputReference[_g] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionTrustedSignersOutputReference", version: "10.0.12" };
class CloudfrontDistributionTrustedSignersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudfrontDistributionTrustedSignersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudfrontDistributionTrustedSignersList = CloudfrontDistributionTrustedSignersList;
_h = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionTrustedSignersList[_h] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionTrustedSignersList", version: "10.0.12" };
function cloudfrontDistributionCustomErrorResponseToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        error_caching_min_ttl: cdktf.numberToTerraform(struct.errorCachingMinTtl),
        error_code: cdktf.numberToTerraform(struct.errorCode),
        response_code: cdktf.numberToTerraform(struct.responseCode),
        response_page_path: cdktf.stringToTerraform(struct.responsePagePath),
    };
}
exports.cloudfrontDistributionCustomErrorResponseToTerraform = cloudfrontDistributionCustomErrorResponseToTerraform;
class CloudfrontDistributionCustomErrorResponseOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._errorCachingMinTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorCachingMinTtl = this._errorCachingMinTtl;
        }
        if (this._errorCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorCode = this._errorCode;
        }
        if (this._responseCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseCode = this._responseCode;
        }
        if (this._responsePagePath !== undefined) {
            hasAnyValues = true;
            internalValueResult.responsePagePath = this._responsePagePath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._errorCachingMinTtl = undefined;
            this._errorCode = undefined;
            this._responseCode = undefined;
            this._responsePagePath = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._errorCachingMinTtl = value.errorCachingMinTtl;
            this._errorCode = value.errorCode;
            this._responseCode = value.responseCode;
            this._responsePagePath = value.responsePagePath;
        }
    }
    get errorCachingMinTtl() {
        return this.getNumberAttribute('error_caching_min_ttl');
    }
    set errorCachingMinTtl(value) {
        this._errorCachingMinTtl = value;
    }
    resetErrorCachingMinTtl() {
        this._errorCachingMinTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorCachingMinTtlInput() {
        return this._errorCachingMinTtl;
    }
    get errorCode() {
        return this.getNumberAttribute('error_code');
    }
    set errorCode(value) {
        this._errorCode = value;
    }
    // Temporarily expose input value. Use with caution.
    get errorCodeInput() {
        return this._errorCode;
    }
    get responseCode() {
        return this.getNumberAttribute('response_code');
    }
    set responseCode(value) {
        this._responseCode = value;
    }
    resetResponseCode() {
        this._responseCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseCodeInput() {
        return this._responseCode;
    }
    get responsePagePath() {
        return this.getStringAttribute('response_page_path');
    }
    set responsePagePath(value) {
        this._responsePagePath = value;
    }
    resetResponsePagePath() {
        this._responsePagePath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responsePagePathInput() {
        return this._responsePagePath;
    }
}
exports.CloudfrontDistributionCustomErrorResponseOutputReference = CloudfrontDistributionCustomErrorResponseOutputReference;
_j = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionCustomErrorResponseOutputReference[_j] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionCustomErrorResponseOutputReference", version: "10.0.12" };
class CloudfrontDistributionCustomErrorResponseList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudfrontDistributionCustomErrorResponseOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudfrontDistributionCustomErrorResponseList = CloudfrontDistributionCustomErrorResponseList;
_k = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionCustomErrorResponseList[_k] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionCustomErrorResponseList", version: "10.0.12" };
function cloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        forward: cdktf.stringToTerraform(struct.forward),
        whitelisted_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.whitelistedNames),
    };
}
exports.cloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesToTerraform = cloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesToTerraform;
class CloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._forward !== undefined) {
            hasAnyValues = true;
            internalValueResult.forward = this._forward;
        }
        if (this._whitelistedNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.whitelistedNames = this._whitelistedNames;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._forward = undefined;
            this._whitelistedNames = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._forward = value.forward;
            this._whitelistedNames = value.whitelistedNames;
        }
    }
    get forward() {
        return this.getStringAttribute('forward');
    }
    set forward(value) {
        this._forward = value;
    }
    // Temporarily expose input value. Use with caution.
    get forwardInput() {
        return this._forward;
    }
    get whitelistedNames() {
        return cdktf.Fn.tolist(this.getListAttribute('whitelisted_names'));
    }
    set whitelistedNames(value) {
        this._whitelistedNames = value;
    }
    resetWhitelistedNames() {
        this._whitelistedNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get whitelistedNamesInput() {
        return this._whitelistedNames;
    }
}
exports.CloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesOutputReference = CloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesOutputReference;
_l = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesOutputReference[_l] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesOutputReference", version: "10.0.12" };
function cloudfrontDistributionDefaultCacheBehaviorForwardedValuesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.headers),
        query_string: cdktf.booleanToTerraform(struct.queryString),
        query_string_cache_keys: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.queryStringCacheKeys),
        cookies: cloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesToTerraform(struct.cookies),
    };
}
exports.cloudfrontDistributionDefaultCacheBehaviorForwardedValuesToTerraform = cloudfrontDistributionDefaultCacheBehaviorForwardedValuesToTerraform;
class CloudfrontDistributionDefaultCacheBehaviorForwardedValuesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cookies - computed: false, optional: false, required: true
        this._cookies = new CloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookiesOutputReference(this, "cookies");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headers !== undefined) {
            hasAnyValues = true;
            internalValueResult.headers = this._headers;
        }
        if (this._queryString !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryString = this._queryString;
        }
        if (this._queryStringCacheKeys !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryStringCacheKeys = this._queryStringCacheKeys;
        }
        if (this._cookies?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cookies = this._cookies?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._headers = undefined;
            this._queryString = undefined;
            this._queryStringCacheKeys = undefined;
            this._cookies.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._headers = value.headers;
            this._queryString = value.queryString;
            this._queryStringCacheKeys = value.queryStringCacheKeys;
            this._cookies.internalValue = value.cookies;
        }
    }
    get headers() {
        return cdktf.Fn.tolist(this.getListAttribute('headers'));
    }
    set headers(value) {
        this._headers = value;
    }
    resetHeaders() {
        this._headers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headersInput() {
        return this._headers;
    }
    get queryString() {
        return this.getBooleanAttribute('query_string');
    }
    set queryString(value) {
        this._queryString = value;
    }
    // Temporarily expose input value. Use with caution.
    get queryStringInput() {
        return this._queryString;
    }
    get queryStringCacheKeys() {
        return this.getListAttribute('query_string_cache_keys');
    }
    set queryStringCacheKeys(value) {
        this._queryStringCacheKeys = value;
    }
    resetQueryStringCacheKeys() {
        this._queryStringCacheKeys = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryStringCacheKeysInput() {
        return this._queryStringCacheKeys;
    }
    get cookies() {
        return this._cookies;
    }
    putCookies(value) {
        this._cookies.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get cookiesInput() {
        return this._cookies.internalValue;
    }
}
exports.CloudfrontDistributionDefaultCacheBehaviorForwardedValuesOutputReference = CloudfrontDistributionDefaultCacheBehaviorForwardedValuesOutputReference;
_m = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionDefaultCacheBehaviorForwardedValuesOutputReference[_m] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionDefaultCacheBehaviorForwardedValuesOutputReference", version: "10.0.12" };
function cloudfrontDistributionDefaultCacheBehaviorFunctionAssociationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        event_type: cdktf.stringToTerraform(struct.eventType),
        function_arn: cdktf.stringToTerraform(struct.functionArn),
    };
}
exports.cloudfrontDistributionDefaultCacheBehaviorFunctionAssociationToTerraform = cloudfrontDistributionDefaultCacheBehaviorFunctionAssociationToTerraform;
class CloudfrontDistributionDefaultCacheBehaviorFunctionAssociationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._eventType !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventType = this._eventType;
        }
        if (this._functionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.functionArn = this._functionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._eventType = undefined;
            this._functionArn = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._eventType = value.eventType;
            this._functionArn = value.functionArn;
        }
    }
    get eventType() {
        return this.getStringAttribute('event_type');
    }
    set eventType(value) {
        this._eventType = value;
    }
    // Temporarily expose input value. Use with caution.
    get eventTypeInput() {
        return this._eventType;
    }
    get functionArn() {
        return this.getStringAttribute('function_arn');
    }
    set functionArn(value) {
        this._functionArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get functionArnInput() {
        return this._functionArn;
    }
}
exports.CloudfrontDistributionDefaultCacheBehaviorFunctionAssociationOutputReference = CloudfrontDistributionDefaultCacheBehaviorFunctionAssociationOutputReference;
_o = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionDefaultCacheBehaviorFunctionAssociationOutputReference[_o] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionDefaultCacheBehaviorFunctionAssociationOutputReference", version: "10.0.12" };
class CloudfrontDistributionDefaultCacheBehaviorFunctionAssociationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudfrontDistributionDefaultCacheBehaviorFunctionAssociationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudfrontDistributionDefaultCacheBehaviorFunctionAssociationList = CloudfrontDistributionDefaultCacheBehaviorFunctionAssociationList;
_p = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionDefaultCacheBehaviorFunctionAssociationList[_p] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionDefaultCacheBehaviorFunctionAssociationList", version: "10.0.12" };
function cloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        event_type: cdktf.stringToTerraform(struct.eventType),
        include_body: cdktf.booleanToTerraform(struct.includeBody),
        lambda_arn: cdktf.stringToTerraform(struct.lambdaArn),
    };
}
exports.cloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationToTerraform = cloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationToTerraform;
class CloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._eventType !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventType = this._eventType;
        }
        if (this._includeBody !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeBody = this._includeBody;
        }
        if (this._lambdaArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lambdaArn = this._lambdaArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._eventType = undefined;
            this._includeBody = undefined;
            this._lambdaArn = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._eventType = value.eventType;
            this._includeBody = value.includeBody;
            this._lambdaArn = value.lambdaArn;
        }
    }
    get eventType() {
        return this.getStringAttribute('event_type');
    }
    set eventType(value) {
        this._eventType = value;
    }
    // Temporarily expose input value. Use with caution.
    get eventTypeInput() {
        return this._eventType;
    }
    get includeBody() {
        return this.getBooleanAttribute('include_body');
    }
    set includeBody(value) {
        this._includeBody = value;
    }
    resetIncludeBody() {
        this._includeBody = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeBodyInput() {
        return this._includeBody;
    }
    get lambdaArn() {
        return this.getStringAttribute('lambda_arn');
    }
    set lambdaArn(value) {
        this._lambdaArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaArnInput() {
        return this._lambdaArn;
    }
}
exports.CloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationOutputReference = CloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationOutputReference;
_q = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationOutputReference[_q] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationOutputReference", version: "10.0.12" };
class CloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationList = CloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationList;
_r = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationList[_r] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationList", version: "10.0.12" };
function cloudfrontDistributionDefaultCacheBehaviorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_methods: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedMethods),
        cache_policy_id: cdktf.stringToTerraform(struct.cachePolicyId),
        cached_methods: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.cachedMethods),
        compress: cdktf.booleanToTerraform(struct.compress),
        default_ttl: cdktf.numberToTerraform(struct.defaultTtl),
        field_level_encryption_id: cdktf.stringToTerraform(struct.fieldLevelEncryptionId),
        max_ttl: cdktf.numberToTerraform(struct.maxTtl),
        min_ttl: cdktf.numberToTerraform(struct.minTtl),
        origin_request_policy_id: cdktf.stringToTerraform(struct.originRequestPolicyId),
        realtime_log_config_arn: cdktf.stringToTerraform(struct.realtimeLogConfigArn),
        response_headers_policy_id: cdktf.stringToTerraform(struct.responseHeadersPolicyId),
        smooth_streaming: cdktf.booleanToTerraform(struct.smoothStreaming),
        target_origin_id: cdktf.stringToTerraform(struct.targetOriginId),
        trusted_key_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.trustedKeyGroups),
        trusted_signers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.trustedSigners),
        viewer_protocol_policy: cdktf.stringToTerraform(struct.viewerProtocolPolicy),
        forwarded_values: cloudfrontDistributionDefaultCacheBehaviorForwardedValuesToTerraform(struct.forwardedValues),
        function_association: cdktf.listMapper(cloudfrontDistributionDefaultCacheBehaviorFunctionAssociationToTerraform, true)(struct.functionAssociation),
        lambda_function_association: cdktf.listMapper(cloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationToTerraform, true)(struct.lambdaFunctionAssociation),
    };
}
exports.cloudfrontDistributionDefaultCacheBehaviorToTerraform = cloudfrontDistributionDefaultCacheBehaviorToTerraform;
class CloudfrontDistributionDefaultCacheBehaviorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // forwarded_values - computed: false, optional: true, required: false
        this._forwardedValues = new CloudfrontDistributionDefaultCacheBehaviorForwardedValuesOutputReference(this, "forwarded_values");
        // function_association - computed: false, optional: true, required: false
        this._functionAssociation = new CloudfrontDistributionDefaultCacheBehaviorFunctionAssociationList(this, "function_association", true);
        // lambda_function_association - computed: false, optional: true, required: false
        this._lambdaFunctionAssociation = new CloudfrontDistributionDefaultCacheBehaviorLambdaFunctionAssociationList(this, "lambda_function_association", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedMethods !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedMethods = this._allowedMethods;
        }
        if (this._cachePolicyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.cachePolicyId = this._cachePolicyId;
        }
        if (this._cachedMethods !== undefined) {
            hasAnyValues = true;
            internalValueResult.cachedMethods = this._cachedMethods;
        }
        if (this._compress !== undefined) {
            hasAnyValues = true;
            internalValueResult.compress = this._compress;
        }
        if (this._defaultTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultTtl = this._defaultTtl;
        }
        if (this._fieldLevelEncryptionId !== undefined) {
            hasAnyValues = true;
            internalValueResult.fieldLevelEncryptionId = this._fieldLevelEncryptionId;
        }
        if (this._maxTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxTtl = this._maxTtl;
        }
        if (this._minTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.minTtl = this._minTtl;
        }
        if (this._originRequestPolicyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.originRequestPolicyId = this._originRequestPolicyId;
        }
        if (this._realtimeLogConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.realtimeLogConfigArn = this._realtimeLogConfigArn;
        }
        if (this._responseHeadersPolicyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersPolicyId = this._responseHeadersPolicyId;
        }
        if (this._smoothStreaming !== undefined) {
            hasAnyValues = true;
            internalValueResult.smoothStreaming = this._smoothStreaming;
        }
        if (this._targetOriginId !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetOriginId = this._targetOriginId;
        }
        if (this._trustedKeyGroups !== undefined) {
            hasAnyValues = true;
            internalValueResult.trustedKeyGroups = this._trustedKeyGroups;
        }
        if (this._trustedSigners !== undefined) {
            hasAnyValues = true;
            internalValueResult.trustedSigners = this._trustedSigners;
        }
        if (this._viewerProtocolPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.viewerProtocolPolicy = this._viewerProtocolPolicy;
        }
        if (this._forwardedValues?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.forwardedValues = this._forwardedValues?.internalValue;
        }
        if (this._functionAssociation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.functionAssociation = this._functionAssociation?.internalValue;
        }
        if (this._lambdaFunctionAssociation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.lambdaFunctionAssociation = this._lambdaFunctionAssociation?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedMethods = undefined;
            this._cachePolicyId = undefined;
            this._cachedMethods = undefined;
            this._compress = undefined;
            this._defaultTtl = undefined;
            this._fieldLevelEncryptionId = undefined;
            this._maxTtl = undefined;
            this._minTtl = undefined;
            this._originRequestPolicyId = undefined;
            this._realtimeLogConfigArn = undefined;
            this._responseHeadersPolicyId = undefined;
            this._smoothStreaming = undefined;
            this._targetOriginId = undefined;
            this._trustedKeyGroups = undefined;
            this._trustedSigners = undefined;
            this._viewerProtocolPolicy = undefined;
            this._forwardedValues.internalValue = undefined;
            this._functionAssociation.internalValue = undefined;
            this._lambdaFunctionAssociation.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedMethods = value.allowedMethods;
            this._cachePolicyId = value.cachePolicyId;
            this._cachedMethods = value.cachedMethods;
            this._compress = value.compress;
            this._defaultTtl = value.defaultTtl;
            this._fieldLevelEncryptionId = value.fieldLevelEncryptionId;
            this._maxTtl = value.maxTtl;
            this._minTtl = value.minTtl;
            this._originRequestPolicyId = value.originRequestPolicyId;
            this._realtimeLogConfigArn = value.realtimeLogConfigArn;
            this._responseHeadersPolicyId = value.responseHeadersPolicyId;
            this._smoothStreaming = value.smoothStreaming;
            this._targetOriginId = value.targetOriginId;
            this._trustedKeyGroups = value.trustedKeyGroups;
            this._trustedSigners = value.trustedSigners;
            this._viewerProtocolPolicy = value.viewerProtocolPolicy;
            this._forwardedValues.internalValue = value.forwardedValues;
            this._functionAssociation.internalValue = value.functionAssociation;
            this._lambdaFunctionAssociation.internalValue = value.lambdaFunctionAssociation;
        }
    }
    get allowedMethods() {
        return cdktf.Fn.tolist(this.getListAttribute('allowed_methods'));
    }
    set allowedMethods(value) {
        this._allowedMethods = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowedMethodsInput() {
        return this._allowedMethods;
    }
    get cachePolicyId() {
        return this.getStringAttribute('cache_policy_id');
    }
    set cachePolicyId(value) {
        this._cachePolicyId = value;
    }
    resetCachePolicyId() {
        this._cachePolicyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cachePolicyIdInput() {
        return this._cachePolicyId;
    }
    get cachedMethods() {
        return cdktf.Fn.tolist(this.getListAttribute('cached_methods'));
    }
    set cachedMethods(value) {
        this._cachedMethods = value;
    }
    // Temporarily expose input value. Use with caution.
    get cachedMethodsInput() {
        return this._cachedMethods;
    }
    get compress() {
        return this.getBooleanAttribute('compress');
    }
    set compress(value) {
        this._compress = value;
    }
    resetCompress() {
        this._compress = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressInput() {
        return this._compress;
    }
    get defaultTtl() {
        return this.getNumberAttribute('default_ttl');
    }
    set defaultTtl(value) {
        this._defaultTtl = value;
    }
    resetDefaultTtl() {
        this._defaultTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultTtlInput() {
        return this._defaultTtl;
    }
    get fieldLevelEncryptionId() {
        return this.getStringAttribute('field_level_encryption_id');
    }
    set fieldLevelEncryptionId(value) {
        this._fieldLevelEncryptionId = value;
    }
    resetFieldLevelEncryptionId() {
        this._fieldLevelEncryptionId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fieldLevelEncryptionIdInput() {
        return this._fieldLevelEncryptionId;
    }
    get maxTtl() {
        return this.getNumberAttribute('max_ttl');
    }
    set maxTtl(value) {
        this._maxTtl = value;
    }
    resetMaxTtl() {
        this._maxTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxTtlInput() {
        return this._maxTtl;
    }
    get minTtl() {
        return this.getNumberAttribute('min_ttl');
    }
    set minTtl(value) {
        this._minTtl = value;
    }
    resetMinTtl() {
        this._minTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minTtlInput() {
        return this._minTtl;
    }
    get originRequestPolicyId() {
        return this.getStringAttribute('origin_request_policy_id');
    }
    set originRequestPolicyId(value) {
        this._originRequestPolicyId = value;
    }
    resetOriginRequestPolicyId() {
        this._originRequestPolicyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get originRequestPolicyIdInput() {
        return this._originRequestPolicyId;
    }
    get realtimeLogConfigArn() {
        return this.getStringAttribute('realtime_log_config_arn');
    }
    set realtimeLogConfigArn(value) {
        this._realtimeLogConfigArn = value;
    }
    resetRealtimeLogConfigArn() {
        this._realtimeLogConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get realtimeLogConfigArnInput() {
        return this._realtimeLogConfigArn;
    }
    get responseHeadersPolicyId() {
        return this.getStringAttribute('response_headers_policy_id');
    }
    set responseHeadersPolicyId(value) {
        this._responseHeadersPolicyId = value;
    }
    resetResponseHeadersPolicyId() {
        this._responseHeadersPolicyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersPolicyIdInput() {
        return this._responseHeadersPolicyId;
    }
    get smoothStreaming() {
        return this.getBooleanAttribute('smooth_streaming');
    }
    set smoothStreaming(value) {
        this._smoothStreaming = value;
    }
    resetSmoothStreaming() {
        this._smoothStreaming = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get smoothStreamingInput() {
        return this._smoothStreaming;
    }
    get targetOriginId() {
        return this.getStringAttribute('target_origin_id');
    }
    set targetOriginId(value) {
        this._targetOriginId = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetOriginIdInput() {
        return this._targetOriginId;
    }
    get trustedKeyGroups() {
        return this.getListAttribute('trusted_key_groups');
    }
    set trustedKeyGroups(value) {
        this._trustedKeyGroups = value;
    }
    resetTrustedKeyGroups() {
        this._trustedKeyGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trustedKeyGroupsInput() {
        return this._trustedKeyGroups;
    }
    get trustedSigners() {
        return this.getListAttribute('trusted_signers');
    }
    set trustedSigners(value) {
        this._trustedSigners = value;
    }
    resetTrustedSigners() {
        this._trustedSigners = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trustedSignersInput() {
        return this._trustedSigners;
    }
    get viewerProtocolPolicy() {
        return this.getStringAttribute('viewer_protocol_policy');
    }
    set viewerProtocolPolicy(value) {
        this._viewerProtocolPolicy = value;
    }
    // Temporarily expose input value. Use with caution.
    get viewerProtocolPolicyInput() {
        return this._viewerProtocolPolicy;
    }
    get forwardedValues() {
        return this._forwardedValues;
    }
    putForwardedValues(value) {
        this._forwardedValues.internalValue = value;
    }
    resetForwardedValues() {
        this._forwardedValues.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forwardedValuesInput() {
        return this._forwardedValues.internalValue;
    }
    get functionAssociation() {
        return this._functionAssociation;
    }
    putFunctionAssociation(value) {
        this._functionAssociation.internalValue = value;
    }
    resetFunctionAssociation() {
        this._functionAssociation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get functionAssociationInput() {
        return this._functionAssociation.internalValue;
    }
    get lambdaFunctionAssociation() {
        return this._lambdaFunctionAssociation;
    }
    putLambdaFunctionAssociation(value) {
        this._lambdaFunctionAssociation.internalValue = value;
    }
    resetLambdaFunctionAssociation() {
        this._lambdaFunctionAssociation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaFunctionAssociationInput() {
        return this._lambdaFunctionAssociation.internalValue;
    }
}
exports.CloudfrontDistributionDefaultCacheBehaviorOutputReference = CloudfrontDistributionDefaultCacheBehaviorOutputReference;
_s = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionDefaultCacheBehaviorOutputReference[_s] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionDefaultCacheBehaviorOutputReference", version: "10.0.12" };
function cloudfrontDistributionLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        include_cookies: cdktf.booleanToTerraform(struct.includeCookies),
        prefix: cdktf.stringToTerraform(struct.prefix),
    };
}
exports.cloudfrontDistributionLoggingConfigToTerraform = cloudfrontDistributionLoggingConfigToTerraform;
class CloudfrontDistributionLoggingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucket = this._bucket;
        }
        if (this._includeCookies !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeCookies = this._includeCookies;
        }
        if (this._prefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefix = this._prefix;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucket = undefined;
            this._includeCookies = undefined;
            this._prefix = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucket = value.bucket;
            this._includeCookies = value.includeCookies;
            this._prefix = value.prefix;
        }
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    get includeCookies() {
        return this.getBooleanAttribute('include_cookies');
    }
    set includeCookies(value) {
        this._includeCookies = value;
    }
    resetIncludeCookies() {
        this._includeCookies = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeCookiesInput() {
        return this._includeCookies;
    }
    get prefix() {
        return this.getStringAttribute('prefix');
    }
    set prefix(value) {
        this._prefix = value;
    }
    resetPrefix() {
        this._prefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixInput() {
        return this._prefix;
    }
}
exports.CloudfrontDistributionLoggingConfigOutputReference = CloudfrontDistributionLoggingConfigOutputReference;
_t = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionLoggingConfigOutputReference[_t] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionLoggingConfigOutputReference", version: "10.0.12" };
function cloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        forward: cdktf.stringToTerraform(struct.forward),
        whitelisted_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.whitelistedNames),
    };
}
exports.cloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesToTerraform = cloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesToTerraform;
class CloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._forward !== undefined) {
            hasAnyValues = true;
            internalValueResult.forward = this._forward;
        }
        if (this._whitelistedNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.whitelistedNames = this._whitelistedNames;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._forward = undefined;
            this._whitelistedNames = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._forward = value.forward;
            this._whitelistedNames = value.whitelistedNames;
        }
    }
    get forward() {
        return this.getStringAttribute('forward');
    }
    set forward(value) {
        this._forward = value;
    }
    // Temporarily expose input value. Use with caution.
    get forwardInput() {
        return this._forward;
    }
    get whitelistedNames() {
        return cdktf.Fn.tolist(this.getListAttribute('whitelisted_names'));
    }
    set whitelistedNames(value) {
        this._whitelistedNames = value;
    }
    resetWhitelistedNames() {
        this._whitelistedNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get whitelistedNamesInput() {
        return this._whitelistedNames;
    }
}
exports.CloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesOutputReference = CloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesOutputReference;
_u = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesOutputReference[_u] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesOutputReference", version: "10.0.12" };
function cloudfrontDistributionOrderedCacheBehaviorForwardedValuesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.headers),
        query_string: cdktf.booleanToTerraform(struct.queryString),
        query_string_cache_keys: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.queryStringCacheKeys),
        cookies: cloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesToTerraform(struct.cookies),
    };
}
exports.cloudfrontDistributionOrderedCacheBehaviorForwardedValuesToTerraform = cloudfrontDistributionOrderedCacheBehaviorForwardedValuesToTerraform;
class CloudfrontDistributionOrderedCacheBehaviorForwardedValuesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cookies - computed: false, optional: false, required: true
        this._cookies = new CloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookiesOutputReference(this, "cookies");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headers !== undefined) {
            hasAnyValues = true;
            internalValueResult.headers = this._headers;
        }
        if (this._queryString !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryString = this._queryString;
        }
        if (this._queryStringCacheKeys !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryStringCacheKeys = this._queryStringCacheKeys;
        }
        if (this._cookies?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cookies = this._cookies?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._headers = undefined;
            this._queryString = undefined;
            this._queryStringCacheKeys = undefined;
            this._cookies.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._headers = value.headers;
            this._queryString = value.queryString;
            this._queryStringCacheKeys = value.queryStringCacheKeys;
            this._cookies.internalValue = value.cookies;
        }
    }
    get headers() {
        return cdktf.Fn.tolist(this.getListAttribute('headers'));
    }
    set headers(value) {
        this._headers = value;
    }
    resetHeaders() {
        this._headers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headersInput() {
        return this._headers;
    }
    get queryString() {
        return this.getBooleanAttribute('query_string');
    }
    set queryString(value) {
        this._queryString = value;
    }
    // Temporarily expose input value. Use with caution.
    get queryStringInput() {
        return this._queryString;
    }
    get queryStringCacheKeys() {
        return this.getListAttribute('query_string_cache_keys');
    }
    set queryStringCacheKeys(value) {
        this._queryStringCacheKeys = value;
    }
    resetQueryStringCacheKeys() {
        this._queryStringCacheKeys = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryStringCacheKeysInput() {
        return this._queryStringCacheKeys;
    }
    get cookies() {
        return this._cookies;
    }
    putCookies(value) {
        this._cookies.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get cookiesInput() {
        return this._cookies.internalValue;
    }
}
exports.CloudfrontDistributionOrderedCacheBehaviorForwardedValuesOutputReference = CloudfrontDistributionOrderedCacheBehaviorForwardedValuesOutputReference;
_v = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOrderedCacheBehaviorForwardedValuesOutputReference[_v] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOrderedCacheBehaviorForwardedValuesOutputReference", version: "10.0.12" };
function cloudfrontDistributionOrderedCacheBehaviorFunctionAssociationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        event_type: cdktf.stringToTerraform(struct.eventType),
        function_arn: cdktf.stringToTerraform(struct.functionArn),
    };
}
exports.cloudfrontDistributionOrderedCacheBehaviorFunctionAssociationToTerraform = cloudfrontDistributionOrderedCacheBehaviorFunctionAssociationToTerraform;
class CloudfrontDistributionOrderedCacheBehaviorFunctionAssociationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._eventType !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventType = this._eventType;
        }
        if (this._functionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.functionArn = this._functionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._eventType = undefined;
            this._functionArn = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._eventType = value.eventType;
            this._functionArn = value.functionArn;
        }
    }
    get eventType() {
        return this.getStringAttribute('event_type');
    }
    set eventType(value) {
        this._eventType = value;
    }
    // Temporarily expose input value. Use with caution.
    get eventTypeInput() {
        return this._eventType;
    }
    get functionArn() {
        return this.getStringAttribute('function_arn');
    }
    set functionArn(value) {
        this._functionArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get functionArnInput() {
        return this._functionArn;
    }
}
exports.CloudfrontDistributionOrderedCacheBehaviorFunctionAssociationOutputReference = CloudfrontDistributionOrderedCacheBehaviorFunctionAssociationOutputReference;
_w = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOrderedCacheBehaviorFunctionAssociationOutputReference[_w] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOrderedCacheBehaviorFunctionAssociationOutputReference", version: "10.0.12" };
class CloudfrontDistributionOrderedCacheBehaviorFunctionAssociationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudfrontDistributionOrderedCacheBehaviorFunctionAssociationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudfrontDistributionOrderedCacheBehaviorFunctionAssociationList = CloudfrontDistributionOrderedCacheBehaviorFunctionAssociationList;
_x = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOrderedCacheBehaviorFunctionAssociationList[_x] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOrderedCacheBehaviorFunctionAssociationList", version: "10.0.12" };
function cloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        event_type: cdktf.stringToTerraform(struct.eventType),
        include_body: cdktf.booleanToTerraform(struct.includeBody),
        lambda_arn: cdktf.stringToTerraform(struct.lambdaArn),
    };
}
exports.cloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationToTerraform = cloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationToTerraform;
class CloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._eventType !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventType = this._eventType;
        }
        if (this._includeBody !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeBody = this._includeBody;
        }
        if (this._lambdaArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lambdaArn = this._lambdaArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._eventType = undefined;
            this._includeBody = undefined;
            this._lambdaArn = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._eventType = value.eventType;
            this._includeBody = value.includeBody;
            this._lambdaArn = value.lambdaArn;
        }
    }
    get eventType() {
        return this.getStringAttribute('event_type');
    }
    set eventType(value) {
        this._eventType = value;
    }
    // Temporarily expose input value. Use with caution.
    get eventTypeInput() {
        return this._eventType;
    }
    get includeBody() {
        return this.getBooleanAttribute('include_body');
    }
    set includeBody(value) {
        this._includeBody = value;
    }
    resetIncludeBody() {
        this._includeBody = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeBodyInput() {
        return this._includeBody;
    }
    get lambdaArn() {
        return this.getStringAttribute('lambda_arn');
    }
    set lambdaArn(value) {
        this._lambdaArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaArnInput() {
        return this._lambdaArn;
    }
}
exports.CloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationOutputReference = CloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationOutputReference;
_y = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationOutputReference[_y] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationOutputReference", version: "10.0.12" };
class CloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationList = CloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationList;
_z = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationList[_z] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationList", version: "10.0.12" };
function cloudfrontDistributionOrderedCacheBehaviorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_methods: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedMethods),
        cache_policy_id: cdktf.stringToTerraform(struct.cachePolicyId),
        cached_methods: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.cachedMethods),
        compress: cdktf.booleanToTerraform(struct.compress),
        default_ttl: cdktf.numberToTerraform(struct.defaultTtl),
        field_level_encryption_id: cdktf.stringToTerraform(struct.fieldLevelEncryptionId),
        max_ttl: cdktf.numberToTerraform(struct.maxTtl),
        min_ttl: cdktf.numberToTerraform(struct.minTtl),
        origin_request_policy_id: cdktf.stringToTerraform(struct.originRequestPolicyId),
        path_pattern: cdktf.stringToTerraform(struct.pathPattern),
        realtime_log_config_arn: cdktf.stringToTerraform(struct.realtimeLogConfigArn),
        response_headers_policy_id: cdktf.stringToTerraform(struct.responseHeadersPolicyId),
        smooth_streaming: cdktf.booleanToTerraform(struct.smoothStreaming),
        target_origin_id: cdktf.stringToTerraform(struct.targetOriginId),
        trusted_key_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.trustedKeyGroups),
        trusted_signers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.trustedSigners),
        viewer_protocol_policy: cdktf.stringToTerraform(struct.viewerProtocolPolicy),
        forwarded_values: cloudfrontDistributionOrderedCacheBehaviorForwardedValuesToTerraform(struct.forwardedValues),
        function_association: cdktf.listMapper(cloudfrontDistributionOrderedCacheBehaviorFunctionAssociationToTerraform, true)(struct.functionAssociation),
        lambda_function_association: cdktf.listMapper(cloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationToTerraform, true)(struct.lambdaFunctionAssociation),
    };
}
exports.cloudfrontDistributionOrderedCacheBehaviorToTerraform = cloudfrontDistributionOrderedCacheBehaviorToTerraform;
class CloudfrontDistributionOrderedCacheBehaviorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // forwarded_values - computed: false, optional: true, required: false
        this._forwardedValues = new CloudfrontDistributionOrderedCacheBehaviorForwardedValuesOutputReference(this, "forwarded_values");
        // function_association - computed: false, optional: true, required: false
        this._functionAssociation = new CloudfrontDistributionOrderedCacheBehaviorFunctionAssociationList(this, "function_association", true);
        // lambda_function_association - computed: false, optional: true, required: false
        this._lambdaFunctionAssociation = new CloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociationList(this, "lambda_function_association", true);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedMethods !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedMethods = this._allowedMethods;
        }
        if (this._cachePolicyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.cachePolicyId = this._cachePolicyId;
        }
        if (this._cachedMethods !== undefined) {
            hasAnyValues = true;
            internalValueResult.cachedMethods = this._cachedMethods;
        }
        if (this._compress !== undefined) {
            hasAnyValues = true;
            internalValueResult.compress = this._compress;
        }
        if (this._defaultTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultTtl = this._defaultTtl;
        }
        if (this._fieldLevelEncryptionId !== undefined) {
            hasAnyValues = true;
            internalValueResult.fieldLevelEncryptionId = this._fieldLevelEncryptionId;
        }
        if (this._maxTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxTtl = this._maxTtl;
        }
        if (this._minTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.minTtl = this._minTtl;
        }
        if (this._originRequestPolicyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.originRequestPolicyId = this._originRequestPolicyId;
        }
        if (this._pathPattern !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathPattern = this._pathPattern;
        }
        if (this._realtimeLogConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.realtimeLogConfigArn = this._realtimeLogConfigArn;
        }
        if (this._responseHeadersPolicyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersPolicyId = this._responseHeadersPolicyId;
        }
        if (this._smoothStreaming !== undefined) {
            hasAnyValues = true;
            internalValueResult.smoothStreaming = this._smoothStreaming;
        }
        if (this._targetOriginId !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetOriginId = this._targetOriginId;
        }
        if (this._trustedKeyGroups !== undefined) {
            hasAnyValues = true;
            internalValueResult.trustedKeyGroups = this._trustedKeyGroups;
        }
        if (this._trustedSigners !== undefined) {
            hasAnyValues = true;
            internalValueResult.trustedSigners = this._trustedSigners;
        }
        if (this._viewerProtocolPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.viewerProtocolPolicy = this._viewerProtocolPolicy;
        }
        if (this._forwardedValues?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.forwardedValues = this._forwardedValues?.internalValue;
        }
        if (this._functionAssociation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.functionAssociation = this._functionAssociation?.internalValue;
        }
        if (this._lambdaFunctionAssociation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.lambdaFunctionAssociation = this._lambdaFunctionAssociation?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._allowedMethods = undefined;
            this._cachePolicyId = undefined;
            this._cachedMethods = undefined;
            this._compress = undefined;
            this._defaultTtl = undefined;
            this._fieldLevelEncryptionId = undefined;
            this._maxTtl = undefined;
            this._minTtl = undefined;
            this._originRequestPolicyId = undefined;
            this._pathPattern = undefined;
            this._realtimeLogConfigArn = undefined;
            this._responseHeadersPolicyId = undefined;
            this._smoothStreaming = undefined;
            this._targetOriginId = undefined;
            this._trustedKeyGroups = undefined;
            this._trustedSigners = undefined;
            this._viewerProtocolPolicy = undefined;
            this._forwardedValues.internalValue = undefined;
            this._functionAssociation.internalValue = undefined;
            this._lambdaFunctionAssociation.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._allowedMethods = value.allowedMethods;
            this._cachePolicyId = value.cachePolicyId;
            this._cachedMethods = value.cachedMethods;
            this._compress = value.compress;
            this._defaultTtl = value.defaultTtl;
            this._fieldLevelEncryptionId = value.fieldLevelEncryptionId;
            this._maxTtl = value.maxTtl;
            this._minTtl = value.minTtl;
            this._originRequestPolicyId = value.originRequestPolicyId;
            this._pathPattern = value.pathPattern;
            this._realtimeLogConfigArn = value.realtimeLogConfigArn;
            this._responseHeadersPolicyId = value.responseHeadersPolicyId;
            this._smoothStreaming = value.smoothStreaming;
            this._targetOriginId = value.targetOriginId;
            this._trustedKeyGroups = value.trustedKeyGroups;
            this._trustedSigners = value.trustedSigners;
            this._viewerProtocolPolicy = value.viewerProtocolPolicy;
            this._forwardedValues.internalValue = value.forwardedValues;
            this._functionAssociation.internalValue = value.functionAssociation;
            this._lambdaFunctionAssociation.internalValue = value.lambdaFunctionAssociation;
        }
    }
    get allowedMethods() {
        return cdktf.Fn.tolist(this.getListAttribute('allowed_methods'));
    }
    set allowedMethods(value) {
        this._allowedMethods = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowedMethodsInput() {
        return this._allowedMethods;
    }
    get cachePolicyId() {
        return this.getStringAttribute('cache_policy_id');
    }
    set cachePolicyId(value) {
        this._cachePolicyId = value;
    }
    resetCachePolicyId() {
        this._cachePolicyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cachePolicyIdInput() {
        return this._cachePolicyId;
    }
    get cachedMethods() {
        return cdktf.Fn.tolist(this.getListAttribute('cached_methods'));
    }
    set cachedMethods(value) {
        this._cachedMethods = value;
    }
    // Temporarily expose input value. Use with caution.
    get cachedMethodsInput() {
        return this._cachedMethods;
    }
    get compress() {
        return this.getBooleanAttribute('compress');
    }
    set compress(value) {
        this._compress = value;
    }
    resetCompress() {
        this._compress = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressInput() {
        return this._compress;
    }
    get defaultTtl() {
        return this.getNumberAttribute('default_ttl');
    }
    set defaultTtl(value) {
        this._defaultTtl = value;
    }
    resetDefaultTtl() {
        this._defaultTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultTtlInput() {
        return this._defaultTtl;
    }
    get fieldLevelEncryptionId() {
        return this.getStringAttribute('field_level_encryption_id');
    }
    set fieldLevelEncryptionId(value) {
        this._fieldLevelEncryptionId = value;
    }
    resetFieldLevelEncryptionId() {
        this._fieldLevelEncryptionId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fieldLevelEncryptionIdInput() {
        return this._fieldLevelEncryptionId;
    }
    get maxTtl() {
        return this.getNumberAttribute('max_ttl');
    }
    set maxTtl(value) {
        this._maxTtl = value;
    }
    resetMaxTtl() {
        this._maxTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxTtlInput() {
        return this._maxTtl;
    }
    get minTtl() {
        return this.getNumberAttribute('min_ttl');
    }
    set minTtl(value) {
        this._minTtl = value;
    }
    resetMinTtl() {
        this._minTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minTtlInput() {
        return this._minTtl;
    }
    get originRequestPolicyId() {
        return this.getStringAttribute('origin_request_policy_id');
    }
    set originRequestPolicyId(value) {
        this._originRequestPolicyId = value;
    }
    resetOriginRequestPolicyId() {
        this._originRequestPolicyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get originRequestPolicyIdInput() {
        return this._originRequestPolicyId;
    }
    get pathPattern() {
        return this.getStringAttribute('path_pattern');
    }
    set pathPattern(value) {
        this._pathPattern = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathPatternInput() {
        return this._pathPattern;
    }
    get realtimeLogConfigArn() {
        return this.getStringAttribute('realtime_log_config_arn');
    }
    set realtimeLogConfigArn(value) {
        this._realtimeLogConfigArn = value;
    }
    resetRealtimeLogConfigArn() {
        this._realtimeLogConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get realtimeLogConfigArnInput() {
        return this._realtimeLogConfigArn;
    }
    get responseHeadersPolicyId() {
        return this.getStringAttribute('response_headers_policy_id');
    }
    set responseHeadersPolicyId(value) {
        this._responseHeadersPolicyId = value;
    }
    resetResponseHeadersPolicyId() {
        this._responseHeadersPolicyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersPolicyIdInput() {
        return this._responseHeadersPolicyId;
    }
    get smoothStreaming() {
        return this.getBooleanAttribute('smooth_streaming');
    }
    set smoothStreaming(value) {
        this._smoothStreaming = value;
    }
    resetSmoothStreaming() {
        this._smoothStreaming = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get smoothStreamingInput() {
        return this._smoothStreaming;
    }
    get targetOriginId() {
        return this.getStringAttribute('target_origin_id');
    }
    set targetOriginId(value) {
        this._targetOriginId = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetOriginIdInput() {
        return this._targetOriginId;
    }
    get trustedKeyGroups() {
        return this.getListAttribute('trusted_key_groups');
    }
    set trustedKeyGroups(value) {
        this._trustedKeyGroups = value;
    }
    resetTrustedKeyGroups() {
        this._trustedKeyGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trustedKeyGroupsInput() {
        return this._trustedKeyGroups;
    }
    get trustedSigners() {
        return this.getListAttribute('trusted_signers');
    }
    set trustedSigners(value) {
        this._trustedSigners = value;
    }
    resetTrustedSigners() {
        this._trustedSigners = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trustedSignersInput() {
        return this._trustedSigners;
    }
    get viewerProtocolPolicy() {
        return this.getStringAttribute('viewer_protocol_policy');
    }
    set viewerProtocolPolicy(value) {
        this._viewerProtocolPolicy = value;
    }
    // Temporarily expose input value. Use with caution.
    get viewerProtocolPolicyInput() {
        return this._viewerProtocolPolicy;
    }
    get forwardedValues() {
        return this._forwardedValues;
    }
    putForwardedValues(value) {
        this._forwardedValues.internalValue = value;
    }
    resetForwardedValues() {
        this._forwardedValues.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forwardedValuesInput() {
        return this._forwardedValues.internalValue;
    }
    get functionAssociation() {
        return this._functionAssociation;
    }
    putFunctionAssociation(value) {
        this._functionAssociation.internalValue = value;
    }
    resetFunctionAssociation() {
        this._functionAssociation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get functionAssociationInput() {
        return this._functionAssociation.internalValue;
    }
    get lambdaFunctionAssociation() {
        return this._lambdaFunctionAssociation;
    }
    putLambdaFunctionAssociation(value) {
        this._lambdaFunctionAssociation.internalValue = value;
    }
    resetLambdaFunctionAssociation() {
        this._lambdaFunctionAssociation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaFunctionAssociationInput() {
        return this._lambdaFunctionAssociation.internalValue;
    }
}
exports.CloudfrontDistributionOrderedCacheBehaviorOutputReference = CloudfrontDistributionOrderedCacheBehaviorOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOrderedCacheBehaviorOutputReference[_0] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOrderedCacheBehaviorOutputReference", version: "10.0.12" };
class CloudfrontDistributionOrderedCacheBehaviorList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudfrontDistributionOrderedCacheBehaviorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudfrontDistributionOrderedCacheBehaviorList = CloudfrontDistributionOrderedCacheBehaviorList;
_1 = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOrderedCacheBehaviorList[_1] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOrderedCacheBehaviorList", version: "10.0.12" };
function cloudfrontDistributionOriginCustomHeaderToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.cloudfrontDistributionOriginCustomHeaderToTerraform = cloudfrontDistributionOriginCustomHeaderToTerraform;
class CloudfrontDistributionOriginCustomHeaderOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._value = value.value;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.CloudfrontDistributionOriginCustomHeaderOutputReference = CloudfrontDistributionOriginCustomHeaderOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOriginCustomHeaderOutputReference[_2] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOriginCustomHeaderOutputReference", version: "10.0.12" };
class CloudfrontDistributionOriginCustomHeaderList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudfrontDistributionOriginCustomHeaderOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudfrontDistributionOriginCustomHeaderList = CloudfrontDistributionOriginCustomHeaderList;
_3 = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOriginCustomHeaderList[_3] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOriginCustomHeaderList", version: "10.0.12" };
function cloudfrontDistributionOriginCustomOriginConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        http_port: cdktf.numberToTerraform(struct.httpPort),
        https_port: cdktf.numberToTerraform(struct.httpsPort),
        origin_keepalive_timeout: cdktf.numberToTerraform(struct.originKeepaliveTimeout),
        origin_protocol_policy: cdktf.stringToTerraform(struct.originProtocolPolicy),
        origin_read_timeout: cdktf.numberToTerraform(struct.originReadTimeout),
        origin_ssl_protocols: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.originSslProtocols),
    };
}
exports.cloudfrontDistributionOriginCustomOriginConfigToTerraform = cloudfrontDistributionOriginCustomOriginConfigToTerraform;
class CloudfrontDistributionOriginCustomOriginConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._httpPort !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpPort = this._httpPort;
        }
        if (this._httpsPort !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpsPort = this._httpsPort;
        }
        if (this._originKeepaliveTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.originKeepaliveTimeout = this._originKeepaliveTimeout;
        }
        if (this._originProtocolPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.originProtocolPolicy = this._originProtocolPolicy;
        }
        if (this._originReadTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.originReadTimeout = this._originReadTimeout;
        }
        if (this._originSslProtocols !== undefined) {
            hasAnyValues = true;
            internalValueResult.originSslProtocols = this._originSslProtocols;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._httpPort = undefined;
            this._httpsPort = undefined;
            this._originKeepaliveTimeout = undefined;
            this._originProtocolPolicy = undefined;
            this._originReadTimeout = undefined;
            this._originSslProtocols = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._httpPort = value.httpPort;
            this._httpsPort = value.httpsPort;
            this._originKeepaliveTimeout = value.originKeepaliveTimeout;
            this._originProtocolPolicy = value.originProtocolPolicy;
            this._originReadTimeout = value.originReadTimeout;
            this._originSslProtocols = value.originSslProtocols;
        }
    }
    get httpPort() {
        return this.getNumberAttribute('http_port');
    }
    set httpPort(value) {
        this._httpPort = value;
    }
    // Temporarily expose input value. Use with caution.
    get httpPortInput() {
        return this._httpPort;
    }
    get httpsPort() {
        return this.getNumberAttribute('https_port');
    }
    set httpsPort(value) {
        this._httpsPort = value;
    }
    // Temporarily expose input value. Use with caution.
    get httpsPortInput() {
        return this._httpsPort;
    }
    get originKeepaliveTimeout() {
        return this.getNumberAttribute('origin_keepalive_timeout');
    }
    set originKeepaliveTimeout(value) {
        this._originKeepaliveTimeout = value;
    }
    resetOriginKeepaliveTimeout() {
        this._originKeepaliveTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get originKeepaliveTimeoutInput() {
        return this._originKeepaliveTimeout;
    }
    get originProtocolPolicy() {
        return this.getStringAttribute('origin_protocol_policy');
    }
    set originProtocolPolicy(value) {
        this._originProtocolPolicy = value;
    }
    // Temporarily expose input value. Use with caution.
    get originProtocolPolicyInput() {
        return this._originProtocolPolicy;
    }
    get originReadTimeout() {
        return this.getNumberAttribute('origin_read_timeout');
    }
    set originReadTimeout(value) {
        this._originReadTimeout = value;
    }
    resetOriginReadTimeout() {
        this._originReadTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get originReadTimeoutInput() {
        return this._originReadTimeout;
    }
    get originSslProtocols() {
        return cdktf.Fn.tolist(this.getListAttribute('origin_ssl_protocols'));
    }
    set originSslProtocols(value) {
        this._originSslProtocols = value;
    }
    // Temporarily expose input value. Use with caution.
    get originSslProtocolsInput() {
        return this._originSslProtocols;
    }
}
exports.CloudfrontDistributionOriginCustomOriginConfigOutputReference = CloudfrontDistributionOriginCustomOriginConfigOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOriginCustomOriginConfigOutputReference[_4] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOriginCustomOriginConfigOutputReference", version: "10.0.12" };
function cloudfrontDistributionOriginOriginShieldToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        origin_shield_region: cdktf.stringToTerraform(struct.originShieldRegion),
    };
}
exports.cloudfrontDistributionOriginOriginShieldToTerraform = cloudfrontDistributionOriginOriginShieldToTerraform;
class CloudfrontDistributionOriginOriginShieldOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._originShieldRegion !== undefined) {
            hasAnyValues = true;
            internalValueResult.originShieldRegion = this._originShieldRegion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._originShieldRegion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._originShieldRegion = value.originShieldRegion;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get originShieldRegion() {
        return this.getStringAttribute('origin_shield_region');
    }
    set originShieldRegion(value) {
        this._originShieldRegion = value;
    }
    // Temporarily expose input value. Use with caution.
    get originShieldRegionInput() {
        return this._originShieldRegion;
    }
}
exports.CloudfrontDistributionOriginOriginShieldOutputReference = CloudfrontDistributionOriginOriginShieldOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOriginOriginShieldOutputReference[_5] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOriginOriginShieldOutputReference", version: "10.0.12" };
function cloudfrontDistributionOriginS3OriginConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        origin_access_identity: cdktf.stringToTerraform(struct.originAccessIdentity),
    };
}
exports.cloudfrontDistributionOriginS3OriginConfigToTerraform = cloudfrontDistributionOriginS3OriginConfigToTerraform;
class CloudfrontDistributionOriginS3OriginConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._originAccessIdentity !== undefined) {
            hasAnyValues = true;
            internalValueResult.originAccessIdentity = this._originAccessIdentity;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._originAccessIdentity = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._originAccessIdentity = value.originAccessIdentity;
        }
    }
    get originAccessIdentity() {
        return this.getStringAttribute('origin_access_identity');
    }
    set originAccessIdentity(value) {
        this._originAccessIdentity = value;
    }
    // Temporarily expose input value. Use with caution.
    get originAccessIdentityInput() {
        return this._originAccessIdentity;
    }
}
exports.CloudfrontDistributionOriginS3OriginConfigOutputReference = CloudfrontDistributionOriginS3OriginConfigOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOriginS3OriginConfigOutputReference[_6] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOriginS3OriginConfigOutputReference", version: "10.0.12" };
function cloudfrontDistributionOriginToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_attempts: cdktf.numberToTerraform(struct.connectionAttempts),
        connection_timeout: cdktf.numberToTerraform(struct.connectionTimeout),
        domain_name: cdktf.stringToTerraform(struct.domainName),
        origin_access_control_id: cdktf.stringToTerraform(struct.originAccessControlId),
        origin_id: cdktf.stringToTerraform(struct.originId),
        origin_path: cdktf.stringToTerraform(struct.originPath),
        custom_header: cdktf.listMapper(cloudfrontDistributionOriginCustomHeaderToTerraform, true)(struct.customHeader),
        custom_origin_config: cloudfrontDistributionOriginCustomOriginConfigToTerraform(struct.customOriginConfig),
        origin_shield: cloudfrontDistributionOriginOriginShieldToTerraform(struct.originShield),
        s3_origin_config: cloudfrontDistributionOriginS3OriginConfigToTerraform(struct.s3OriginConfig),
    };
}
exports.cloudfrontDistributionOriginToTerraform = cloudfrontDistributionOriginToTerraform;
class CloudfrontDistributionOriginOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // custom_header - computed: false, optional: true, required: false
        this._customHeader = new CloudfrontDistributionOriginCustomHeaderList(this, "custom_header", true);
        // custom_origin_config - computed: false, optional: true, required: false
        this._customOriginConfig = new CloudfrontDistributionOriginCustomOriginConfigOutputReference(this, "custom_origin_config");
        // origin_shield - computed: false, optional: true, required: false
        this._originShield = new CloudfrontDistributionOriginOriginShieldOutputReference(this, "origin_shield");
        // s3_origin_config - computed: false, optional: true, required: false
        this._s3OriginConfig = new CloudfrontDistributionOriginS3OriginConfigOutputReference(this, "s3_origin_config");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionAttempts !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionAttempts = this._connectionAttempts;
        }
        if (this._connectionTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionTimeout = this._connectionTimeout;
        }
        if (this._domainName !== undefined) {
            hasAnyValues = true;
            internalValueResult.domainName = this._domainName;
        }
        if (this._originAccessControlId !== undefined) {
            hasAnyValues = true;
            internalValueResult.originAccessControlId = this._originAccessControlId;
        }
        if (this._originId !== undefined) {
            hasAnyValues = true;
            internalValueResult.originId = this._originId;
        }
        if (this._originPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.originPath = this._originPath;
        }
        if (this._customHeader?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customHeader = this._customHeader?.internalValue;
        }
        if (this._customOriginConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customOriginConfig = this._customOriginConfig?.internalValue;
        }
        if (this._originShield?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.originShield = this._originShield?.internalValue;
        }
        if (this._s3OriginConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3OriginConfig = this._s3OriginConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._connectionAttempts = undefined;
            this._connectionTimeout = undefined;
            this._domainName = undefined;
            this._originAccessControlId = undefined;
            this._originId = undefined;
            this._originPath = undefined;
            this._customHeader.internalValue = undefined;
            this._customOriginConfig.internalValue = undefined;
            this._originShield.internalValue = undefined;
            this._s3OriginConfig.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._connectionAttempts = value.connectionAttempts;
            this._connectionTimeout = value.connectionTimeout;
            this._domainName = value.domainName;
            this._originAccessControlId = value.originAccessControlId;
            this._originId = value.originId;
            this._originPath = value.originPath;
            this._customHeader.internalValue = value.customHeader;
            this._customOriginConfig.internalValue = value.customOriginConfig;
            this._originShield.internalValue = value.originShield;
            this._s3OriginConfig.internalValue = value.s3OriginConfig;
        }
    }
    get connectionAttempts() {
        return this.getNumberAttribute('connection_attempts');
    }
    set connectionAttempts(value) {
        this._connectionAttempts = value;
    }
    resetConnectionAttempts() {
        this._connectionAttempts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionAttemptsInput() {
        return this._connectionAttempts;
    }
    get connectionTimeout() {
        return this.getNumberAttribute('connection_timeout');
    }
    set connectionTimeout(value) {
        this._connectionTimeout = value;
    }
    resetConnectionTimeout() {
        this._connectionTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionTimeoutInput() {
        return this._connectionTimeout;
    }
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    set domainName(value) {
        this._domainName = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainNameInput() {
        return this._domainName;
    }
    get originAccessControlId() {
        return this.getStringAttribute('origin_access_control_id');
    }
    set originAccessControlId(value) {
        this._originAccessControlId = value;
    }
    resetOriginAccessControlId() {
        this._originAccessControlId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get originAccessControlIdInput() {
        return this._originAccessControlId;
    }
    get originId() {
        return this.getStringAttribute('origin_id');
    }
    set originId(value) {
        this._originId = value;
    }
    // Temporarily expose input value. Use with caution.
    get originIdInput() {
        return this._originId;
    }
    get originPath() {
        return this.getStringAttribute('origin_path');
    }
    set originPath(value) {
        this._originPath = value;
    }
    resetOriginPath() {
        this._originPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get originPathInput() {
        return this._originPath;
    }
    get customHeader() {
        return this._customHeader;
    }
    putCustomHeader(value) {
        this._customHeader.internalValue = value;
    }
    resetCustomHeader() {
        this._customHeader.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customHeaderInput() {
        return this._customHeader.internalValue;
    }
    get customOriginConfig() {
        return this._customOriginConfig;
    }
    putCustomOriginConfig(value) {
        this._customOriginConfig.internalValue = value;
    }
    resetCustomOriginConfig() {
        this._customOriginConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customOriginConfigInput() {
        return this._customOriginConfig.internalValue;
    }
    get originShield() {
        return this._originShield;
    }
    putOriginShield(value) {
        this._originShield.internalValue = value;
    }
    resetOriginShield() {
        this._originShield.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get originShieldInput() {
        return this._originShield.internalValue;
    }
    get s3OriginConfig() {
        return this._s3OriginConfig;
    }
    putS3OriginConfig(value) {
        this._s3OriginConfig.internalValue = value;
    }
    resetS3OriginConfig() {
        this._s3OriginConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3OriginConfigInput() {
        return this._s3OriginConfig.internalValue;
    }
}
exports.CloudfrontDistributionOriginOutputReference = CloudfrontDistributionOriginOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOriginOutputReference[_7] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOriginOutputReference", version: "10.0.12" };
class CloudfrontDistributionOriginList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudfrontDistributionOriginOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudfrontDistributionOriginList = CloudfrontDistributionOriginList;
_8 = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOriginList[_8] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOriginList", version: "10.0.12" };
function cloudfrontDistributionOriginGroupFailoverCriteriaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        status_codes: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.statusCodes),
    };
}
exports.cloudfrontDistributionOriginGroupFailoverCriteriaToTerraform = cloudfrontDistributionOriginGroupFailoverCriteriaToTerraform;
class CloudfrontDistributionOriginGroupFailoverCriteriaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._statusCodes !== undefined) {
            hasAnyValues = true;
            internalValueResult.statusCodes = this._statusCodes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._statusCodes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._statusCodes = value.statusCodes;
        }
    }
    get statusCodes() {
        return cdktf.Token.asNumberList(cdktf.Fn.tolist(this.getNumberListAttribute('status_codes')));
    }
    set statusCodes(value) {
        this._statusCodes = value;
    }
    // Temporarily expose input value. Use with caution.
    get statusCodesInput() {
        return this._statusCodes;
    }
}
exports.CloudfrontDistributionOriginGroupFailoverCriteriaOutputReference = CloudfrontDistributionOriginGroupFailoverCriteriaOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOriginGroupFailoverCriteriaOutputReference[_9] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOriginGroupFailoverCriteriaOutputReference", version: "10.0.12" };
function cloudfrontDistributionOriginGroupMemberToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        origin_id: cdktf.stringToTerraform(struct.originId),
    };
}
exports.cloudfrontDistributionOriginGroupMemberToTerraform = cloudfrontDistributionOriginGroupMemberToTerraform;
class CloudfrontDistributionOriginGroupMemberOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._originId !== undefined) {
            hasAnyValues = true;
            internalValueResult.originId = this._originId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._originId = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._originId = value.originId;
        }
    }
    get originId() {
        return this.getStringAttribute('origin_id');
    }
    set originId(value) {
        this._originId = value;
    }
    // Temporarily expose input value. Use with caution.
    get originIdInput() {
        return this._originId;
    }
}
exports.CloudfrontDistributionOriginGroupMemberOutputReference = CloudfrontDistributionOriginGroupMemberOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOriginGroupMemberOutputReference[_10] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOriginGroupMemberOutputReference", version: "10.0.12" };
class CloudfrontDistributionOriginGroupMemberList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudfrontDistributionOriginGroupMemberOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudfrontDistributionOriginGroupMemberList = CloudfrontDistributionOriginGroupMemberList;
_11 = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOriginGroupMemberList[_11] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOriginGroupMemberList", version: "10.0.12" };
function cloudfrontDistributionOriginGroupToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        origin_id: cdktf.stringToTerraform(struct.originId),
        failover_criteria: cloudfrontDistributionOriginGroupFailoverCriteriaToTerraform(struct.failoverCriteria),
        member: cdktf.listMapper(cloudfrontDistributionOriginGroupMemberToTerraform, true)(struct.member),
    };
}
exports.cloudfrontDistributionOriginGroupToTerraform = cloudfrontDistributionOriginGroupToTerraform;
class CloudfrontDistributionOriginGroupOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // failover_criteria - computed: false, optional: false, required: true
        this._failoverCriteria = new CloudfrontDistributionOriginGroupFailoverCriteriaOutputReference(this, "failover_criteria");
        // member - computed: false, optional: false, required: true
        this._member = new CloudfrontDistributionOriginGroupMemberList(this, "member", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._originId !== undefined) {
            hasAnyValues = true;
            internalValueResult.originId = this._originId;
        }
        if (this._failoverCriteria?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.failoverCriteria = this._failoverCriteria?.internalValue;
        }
        if (this._member?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.member = this._member?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._originId = undefined;
            this._failoverCriteria.internalValue = undefined;
            this._member.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._originId = value.originId;
            this._failoverCriteria.internalValue = value.failoverCriteria;
            this._member.internalValue = value.member;
        }
    }
    get originId() {
        return this.getStringAttribute('origin_id');
    }
    set originId(value) {
        this._originId = value;
    }
    // Temporarily expose input value. Use with caution.
    get originIdInput() {
        return this._originId;
    }
    get failoverCriteria() {
        return this._failoverCriteria;
    }
    putFailoverCriteria(value) {
        this._failoverCriteria.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get failoverCriteriaInput() {
        return this._failoverCriteria.internalValue;
    }
    get member() {
        return this._member;
    }
    putMember(value) {
        this._member.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get memberInput() {
        return this._member.internalValue;
    }
}
exports.CloudfrontDistributionOriginGroupOutputReference = CloudfrontDistributionOriginGroupOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOriginGroupOutputReference[_12] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOriginGroupOutputReference", version: "10.0.12" };
class CloudfrontDistributionOriginGroupList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudfrontDistributionOriginGroupOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudfrontDistributionOriginGroupList = CloudfrontDistributionOriginGroupList;
_13 = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionOriginGroupList[_13] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionOriginGroupList", version: "10.0.12" };
function cloudfrontDistributionRestrictionsGeoRestrictionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        locations: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.locations),
        restriction_type: cdktf.stringToTerraform(struct.restrictionType),
    };
}
exports.cloudfrontDistributionRestrictionsGeoRestrictionToTerraform = cloudfrontDistributionRestrictionsGeoRestrictionToTerraform;
class CloudfrontDistributionRestrictionsGeoRestrictionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._locations !== undefined) {
            hasAnyValues = true;
            internalValueResult.locations = this._locations;
        }
        if (this._restrictionType !== undefined) {
            hasAnyValues = true;
            internalValueResult.restrictionType = this._restrictionType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._locations = undefined;
            this._restrictionType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._locations = value.locations;
            this._restrictionType = value.restrictionType;
        }
    }
    get locations() {
        return cdktf.Fn.tolist(this.getListAttribute('locations'));
    }
    set locations(value) {
        this._locations = value;
    }
    resetLocations() {
        this._locations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationsInput() {
        return this._locations;
    }
    get restrictionType() {
        return this.getStringAttribute('restriction_type');
    }
    set restrictionType(value) {
        this._restrictionType = value;
    }
    // Temporarily expose input value. Use with caution.
    get restrictionTypeInput() {
        return this._restrictionType;
    }
}
exports.CloudfrontDistributionRestrictionsGeoRestrictionOutputReference = CloudfrontDistributionRestrictionsGeoRestrictionOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionRestrictionsGeoRestrictionOutputReference[_14] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionRestrictionsGeoRestrictionOutputReference", version: "10.0.12" };
function cloudfrontDistributionRestrictionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        geo_restriction: cloudfrontDistributionRestrictionsGeoRestrictionToTerraform(struct.geoRestriction),
    };
}
exports.cloudfrontDistributionRestrictionsToTerraform = cloudfrontDistributionRestrictionsToTerraform;
class CloudfrontDistributionRestrictionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // geo_restriction - computed: false, optional: false, required: true
        this._geoRestriction = new CloudfrontDistributionRestrictionsGeoRestrictionOutputReference(this, "geo_restriction");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._geoRestriction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.geoRestriction = this._geoRestriction?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._geoRestriction.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._geoRestriction.internalValue = value.geoRestriction;
        }
    }
    get geoRestriction() {
        return this._geoRestriction;
    }
    putGeoRestriction(value) {
        this._geoRestriction.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get geoRestrictionInput() {
        return this._geoRestriction.internalValue;
    }
}
exports.CloudfrontDistributionRestrictionsOutputReference = CloudfrontDistributionRestrictionsOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionRestrictionsOutputReference[_15] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionRestrictionsOutputReference", version: "10.0.12" };
function cloudfrontDistributionViewerCertificateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        acm_certificate_arn: cdktf.stringToTerraform(struct.acmCertificateArn),
        cloudfront_default_certificate: cdktf.booleanToTerraform(struct.cloudfrontDefaultCertificate),
        iam_certificate_id: cdktf.stringToTerraform(struct.iamCertificateId),
        minimum_protocol_version: cdktf.stringToTerraform(struct.minimumProtocolVersion),
        ssl_support_method: cdktf.stringToTerraform(struct.sslSupportMethod),
    };
}
exports.cloudfrontDistributionViewerCertificateToTerraform = cloudfrontDistributionViewerCertificateToTerraform;
class CloudfrontDistributionViewerCertificateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._acmCertificateArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.acmCertificateArn = this._acmCertificateArn;
        }
        if (this._cloudfrontDefaultCertificate !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudfrontDefaultCertificate = this._cloudfrontDefaultCertificate;
        }
        if (this._iamCertificateId !== undefined) {
            hasAnyValues = true;
            internalValueResult.iamCertificateId = this._iamCertificateId;
        }
        if (this._minimumProtocolVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.minimumProtocolVersion = this._minimumProtocolVersion;
        }
        if (this._sslSupportMethod !== undefined) {
            hasAnyValues = true;
            internalValueResult.sslSupportMethod = this._sslSupportMethod;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._acmCertificateArn = undefined;
            this._cloudfrontDefaultCertificate = undefined;
            this._iamCertificateId = undefined;
            this._minimumProtocolVersion = undefined;
            this._sslSupportMethod = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._acmCertificateArn = value.acmCertificateArn;
            this._cloudfrontDefaultCertificate = value.cloudfrontDefaultCertificate;
            this._iamCertificateId = value.iamCertificateId;
            this._minimumProtocolVersion = value.minimumProtocolVersion;
            this._sslSupportMethod = value.sslSupportMethod;
        }
    }
    get acmCertificateArn() {
        return this.getStringAttribute('acm_certificate_arn');
    }
    set acmCertificateArn(value) {
        this._acmCertificateArn = value;
    }
    resetAcmCertificateArn() {
        this._acmCertificateArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acmCertificateArnInput() {
        return this._acmCertificateArn;
    }
    get cloudfrontDefaultCertificate() {
        return this.getBooleanAttribute('cloudfront_default_certificate');
    }
    set cloudfrontDefaultCertificate(value) {
        this._cloudfrontDefaultCertificate = value;
    }
    resetCloudfrontDefaultCertificate() {
        this._cloudfrontDefaultCertificate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudfrontDefaultCertificateInput() {
        return this._cloudfrontDefaultCertificate;
    }
    get iamCertificateId() {
        return this.getStringAttribute('iam_certificate_id');
    }
    set iamCertificateId(value) {
        this._iamCertificateId = value;
    }
    resetIamCertificateId() {
        this._iamCertificateId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iamCertificateIdInput() {
        return this._iamCertificateId;
    }
    get minimumProtocolVersion() {
        return this.getStringAttribute('minimum_protocol_version');
    }
    set minimumProtocolVersion(value) {
        this._minimumProtocolVersion = value;
    }
    resetMinimumProtocolVersion() {
        this._minimumProtocolVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minimumProtocolVersionInput() {
        return this._minimumProtocolVersion;
    }
    get sslSupportMethod() {
        return this.getStringAttribute('ssl_support_method');
    }
    set sslSupportMethod(value) {
        this._sslSupportMethod = value;
    }
    resetSslSupportMethod() {
        this._sslSupportMethod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sslSupportMethodInput() {
        return this._sslSupportMethod;
    }
}
exports.CloudfrontDistributionViewerCertificateOutputReference = CloudfrontDistributionViewerCertificateOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
CloudfrontDistributionViewerCertificateOutputReference[_16] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistributionViewerCertificateOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/cloudfront_distribution aws_cloudfront_distribution}
*/
class CloudfrontDistribution extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/cloudfront_distribution aws_cloudfront_distribution} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CloudfrontDistributionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_cloudfront_distribution',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // trusted_key_groups - computed: true, optional: false, required: false
        this._trustedKeyGroups = new CloudfrontDistributionTrustedKeyGroupsList(this, "trusted_key_groups", false);
        // trusted_signers - computed: true, optional: false, required: false
        this._trustedSigners = new CloudfrontDistributionTrustedSignersList(this, "trusted_signers", false);
        // custom_error_response - computed: false, optional: true, required: false
        this._customErrorResponse = new CloudfrontDistributionCustomErrorResponseList(this, "custom_error_response", true);
        // default_cache_behavior - computed: false, optional: false, required: true
        this._defaultCacheBehavior = new CloudfrontDistributionDefaultCacheBehaviorOutputReference(this, "default_cache_behavior");
        // logging_config - computed: false, optional: true, required: false
        this._loggingConfig = new CloudfrontDistributionLoggingConfigOutputReference(this, "logging_config");
        // ordered_cache_behavior - computed: false, optional: true, required: false
        this._orderedCacheBehavior = new CloudfrontDistributionOrderedCacheBehaviorList(this, "ordered_cache_behavior", false);
        // origin - computed: false, optional: false, required: true
        this._origin = new CloudfrontDistributionOriginList(this, "origin", true);
        // origin_group - computed: false, optional: true, required: false
        this._originGroup = new CloudfrontDistributionOriginGroupList(this, "origin_group", true);
        // restrictions - computed: false, optional: false, required: true
        this._restrictions = new CloudfrontDistributionRestrictionsOutputReference(this, "restrictions");
        // viewer_certificate - computed: false, optional: false, required: true
        this._viewerCertificate = new CloudfrontDistributionViewerCertificateOutputReference(this, "viewer_certificate");
        this._aliases = config.aliases;
        this._comment = config.comment;
        this._defaultRootObject = config.defaultRootObject;
        this._enabled = config.enabled;
        this._httpVersion = config.httpVersion;
        this._id = config.id;
        this._isIpv6Enabled = config.isIpv6Enabled;
        this._priceClass = config.priceClass;
        this._retainOnDelete = config.retainOnDelete;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._waitForDeployment = config.waitForDeployment;
        this._webAclId = config.webAclId;
        this._customErrorResponse.internalValue = config.customErrorResponse;
        this._defaultCacheBehavior.internalValue = config.defaultCacheBehavior;
        this._loggingConfig.internalValue = config.loggingConfig;
        this._orderedCacheBehavior.internalValue = config.orderedCacheBehavior;
        this._origin.internalValue = config.origin;
        this._originGroup.internalValue = config.originGroup;
        this._restrictions.internalValue = config.restrictions;
        this._viewerCertificate.internalValue = config.viewerCertificate;
    }
    get aliases() {
        return cdktf.Fn.tolist(this.getListAttribute('aliases'));
    }
    set aliases(value) {
        this._aliases = value;
    }
    resetAliases() {
        this._aliases = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aliasesInput() {
        return this._aliases;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // caller_reference - computed: true, optional: false, required: false
    get callerReference() {
        return this.getStringAttribute('caller_reference');
    }
    get comment() {
        return this.getStringAttribute('comment');
    }
    set comment(value) {
        this._comment = value;
    }
    resetComment() {
        this._comment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get commentInput() {
        return this._comment;
    }
    get defaultRootObject() {
        return this.getStringAttribute('default_root_object');
    }
    set defaultRootObject(value) {
        this._defaultRootObject = value;
    }
    resetDefaultRootObject() {
        this._defaultRootObject = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultRootObjectInput() {
        return this._defaultRootObject;
    }
    // domain_name - computed: true, optional: false, required: false
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    // etag - computed: true, optional: false, required: false
    get etag() {
        return this.getStringAttribute('etag');
    }
    // hosted_zone_id - computed: true, optional: false, required: false
    get hostedZoneId() {
        return this.getStringAttribute('hosted_zone_id');
    }
    get httpVersion() {
        return this.getStringAttribute('http_version');
    }
    set httpVersion(value) {
        this._httpVersion = value;
    }
    resetHttpVersion() {
        this._httpVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpVersionInput() {
        return this._httpVersion;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // in_progress_validation_batches - computed: true, optional: false, required: false
    get inProgressValidationBatches() {
        return this.getNumberAttribute('in_progress_validation_batches');
    }
    get isIpv6Enabled() {
        return this.getBooleanAttribute('is_ipv6_enabled');
    }
    set isIpv6Enabled(value) {
        this._isIpv6Enabled = value;
    }
    resetIsIpv6Enabled() {
        this._isIpv6Enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isIpv6EnabledInput() {
        return this._isIpv6Enabled;
    }
    // last_modified_time - computed: true, optional: false, required: false
    get lastModifiedTime() {
        return this.getStringAttribute('last_modified_time');
    }
    get priceClass() {
        return this.getStringAttribute('price_class');
    }
    set priceClass(value) {
        this._priceClass = value;
    }
    resetPriceClass() {
        this._priceClass = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get priceClassInput() {
        return this._priceClass;
    }
    get retainOnDelete() {
        return this.getBooleanAttribute('retain_on_delete');
    }
    set retainOnDelete(value) {
        this._retainOnDelete = value;
    }
    resetRetainOnDelete() {
        this._retainOnDelete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retainOnDeleteInput() {
        return this._retainOnDelete;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get trustedKeyGroups() {
        return this._trustedKeyGroups;
    }
    get trustedSigners() {
        return this._trustedSigners;
    }
    get waitForDeployment() {
        return this.getBooleanAttribute('wait_for_deployment');
    }
    set waitForDeployment(value) {
        this._waitForDeployment = value;
    }
    resetWaitForDeployment() {
        this._waitForDeployment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get waitForDeploymentInput() {
        return this._waitForDeployment;
    }
    get webAclId() {
        return this.getStringAttribute('web_acl_id');
    }
    set webAclId(value) {
        this._webAclId = value;
    }
    resetWebAclId() {
        this._webAclId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webAclIdInput() {
        return this._webAclId;
    }
    get customErrorResponse() {
        return this._customErrorResponse;
    }
    putCustomErrorResponse(value) {
        this._customErrorResponse.internalValue = value;
    }
    resetCustomErrorResponse() {
        this._customErrorResponse.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customErrorResponseInput() {
        return this._customErrorResponse.internalValue;
    }
    get defaultCacheBehavior() {
        return this._defaultCacheBehavior;
    }
    putDefaultCacheBehavior(value) {
        this._defaultCacheBehavior.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get defaultCacheBehaviorInput() {
        return this._defaultCacheBehavior.internalValue;
    }
    get loggingConfig() {
        return this._loggingConfig;
    }
    putLoggingConfig(value) {
        this._loggingConfig.internalValue = value;
    }
    resetLoggingConfig() {
        this._loggingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigInput() {
        return this._loggingConfig.internalValue;
    }
    get orderedCacheBehavior() {
        return this._orderedCacheBehavior;
    }
    putOrderedCacheBehavior(value) {
        this._orderedCacheBehavior.internalValue = value;
    }
    resetOrderedCacheBehavior() {
        this._orderedCacheBehavior.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get orderedCacheBehaviorInput() {
        return this._orderedCacheBehavior.internalValue;
    }
    get origin() {
        return this._origin;
    }
    putOrigin(value) {
        this._origin.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get originInput() {
        return this._origin.internalValue;
    }
    get originGroup() {
        return this._originGroup;
    }
    putOriginGroup(value) {
        this._originGroup.internalValue = value;
    }
    resetOriginGroup() {
        this._originGroup.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get originGroupInput() {
        return this._originGroup.internalValue;
    }
    get restrictions() {
        return this._restrictions;
    }
    putRestrictions(value) {
        this._restrictions.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get restrictionsInput() {
        return this._restrictions.internalValue;
    }
    get viewerCertificate() {
        return this._viewerCertificate;
    }
    putViewerCertificate(value) {
        this._viewerCertificate.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get viewerCertificateInput() {
        return this._viewerCertificate.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            aliases: cdktf.listMapper(cdktf.stringToTerraform, false)(this._aliases),
            comment: cdktf.stringToTerraform(this._comment),
            default_root_object: cdktf.stringToTerraform(this._defaultRootObject),
            enabled: cdktf.booleanToTerraform(this._enabled),
            http_version: cdktf.stringToTerraform(this._httpVersion),
            id: cdktf.stringToTerraform(this._id),
            is_ipv6_enabled: cdktf.booleanToTerraform(this._isIpv6Enabled),
            price_class: cdktf.stringToTerraform(this._priceClass),
            retain_on_delete: cdktf.booleanToTerraform(this._retainOnDelete),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            wait_for_deployment: cdktf.booleanToTerraform(this._waitForDeployment),
            web_acl_id: cdktf.stringToTerraform(this._webAclId),
            custom_error_response: cdktf.listMapper(cloudfrontDistributionCustomErrorResponseToTerraform, true)(this._customErrorResponse.internalValue),
            default_cache_behavior: cloudfrontDistributionDefaultCacheBehaviorToTerraform(this._defaultCacheBehavior.internalValue),
            logging_config: cloudfrontDistributionLoggingConfigToTerraform(this._loggingConfig.internalValue),
            ordered_cache_behavior: cdktf.listMapper(cloudfrontDistributionOrderedCacheBehaviorToTerraform, true)(this._orderedCacheBehavior.internalValue),
            origin: cdktf.listMapper(cloudfrontDistributionOriginToTerraform, true)(this._origin.internalValue),
            origin_group: cdktf.listMapper(cloudfrontDistributionOriginGroupToTerraform, true)(this._originGroup.internalValue),
            restrictions: cloudfrontDistributionRestrictionsToTerraform(this._restrictions.internalValue),
            viewer_certificate: cloudfrontDistributionViewerCertificateToTerraform(this._viewerCertificate.internalValue),
        };
    }
}
exports.CloudfrontDistribution = CloudfrontDistribution;
_17 = JSII_RTTI_SYMBOL_1;
CloudfrontDistribution[_17] = { fqn: "@cdktf/provider-aws.cloudfrontDistribution.CloudfrontDistribution", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
CloudfrontDistribution.tfResourceType = "aws_cloudfront_distribution";
//# sourceMappingURL=data:application/json;base64,