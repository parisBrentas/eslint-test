"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmplifyBranch = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/amplify_branch aws_amplify_branch}
*/
class AmplifyBranch extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/amplify_branch aws_amplify_branch} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AmplifyBranchConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_amplify_branch',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._appId = config.appId;
        this._backendEnvironmentArn = config.backendEnvironmentArn;
        this._basicAuthCredentials = config.basicAuthCredentials;
        this._branchName = config.branchName;
        this._description = config.description;
        this._displayName = config.displayName;
        this._enableAutoBuild = config.enableAutoBuild;
        this._enableBasicAuth = config.enableBasicAuth;
        this._enableNotification = config.enableNotification;
        this._enablePerformanceMode = config.enablePerformanceMode;
        this._enablePullRequestPreview = config.enablePullRequestPreview;
        this._environmentVariables = config.environmentVariables;
        this._framework = config.framework;
        this._id = config.id;
        this._pullRequestEnvironmentName = config.pullRequestEnvironmentName;
        this._stage = config.stage;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._ttl = config.ttl;
    }
    get appId() {
        return this.getStringAttribute('app_id');
    }
    set appId(value) {
        this._appId = value;
    }
    // Temporarily expose input value. Use with caution.
    get appIdInput() {
        return this._appId;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // associated_resources - computed: true, optional: false, required: false
    get associatedResources() {
        return this.getListAttribute('associated_resources');
    }
    get backendEnvironmentArn() {
        return this.getStringAttribute('backend_environment_arn');
    }
    set backendEnvironmentArn(value) {
        this._backendEnvironmentArn = value;
    }
    resetBackendEnvironmentArn() {
        this._backendEnvironmentArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backendEnvironmentArnInput() {
        return this._backendEnvironmentArn;
    }
    get basicAuthCredentials() {
        return this.getStringAttribute('basic_auth_credentials');
    }
    set basicAuthCredentials(value) {
        this._basicAuthCredentials = value;
    }
    resetBasicAuthCredentials() {
        this._basicAuthCredentials = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get basicAuthCredentialsInput() {
        return this._basicAuthCredentials;
    }
    get branchName() {
        return this.getStringAttribute('branch_name');
    }
    set branchName(value) {
        this._branchName = value;
    }
    // Temporarily expose input value. Use with caution.
    get branchNameInput() {
        return this._branchName;
    }
    // custom_domains - computed: true, optional: false, required: false
    get customDomains() {
        return this.getListAttribute('custom_domains');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // destination_branch - computed: true, optional: false, required: false
    get destinationBranch() {
        return this.getStringAttribute('destination_branch');
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get enableAutoBuild() {
        return this.getBooleanAttribute('enable_auto_build');
    }
    set enableAutoBuild(value) {
        this._enableAutoBuild = value;
    }
    resetEnableAutoBuild() {
        this._enableAutoBuild = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableAutoBuildInput() {
        return this._enableAutoBuild;
    }
    get enableBasicAuth() {
        return this.getBooleanAttribute('enable_basic_auth');
    }
    set enableBasicAuth(value) {
        this._enableBasicAuth = value;
    }
    resetEnableBasicAuth() {
        this._enableBasicAuth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableBasicAuthInput() {
        return this._enableBasicAuth;
    }
    get enableNotification() {
        return this.getBooleanAttribute('enable_notification');
    }
    set enableNotification(value) {
        this._enableNotification = value;
    }
    resetEnableNotification() {
        this._enableNotification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableNotificationInput() {
        return this._enableNotification;
    }
    get enablePerformanceMode() {
        return this.getBooleanAttribute('enable_performance_mode');
    }
    set enablePerformanceMode(value) {
        this._enablePerformanceMode = value;
    }
    resetEnablePerformanceMode() {
        this._enablePerformanceMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePerformanceModeInput() {
        return this._enablePerformanceMode;
    }
    get enablePullRequestPreview() {
        return this.getBooleanAttribute('enable_pull_request_preview');
    }
    set enablePullRequestPreview(value) {
        this._enablePullRequestPreview = value;
    }
    resetEnablePullRequestPreview() {
        this._enablePullRequestPreview = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePullRequestPreviewInput() {
        return this._enablePullRequestPreview;
    }
    get environmentVariables() {
        return this.getStringMapAttribute('environment_variables');
    }
    set environmentVariables(value) {
        this._environmentVariables = value;
    }
    resetEnvironmentVariables() {
        this._environmentVariables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get environmentVariablesInput() {
        return this._environmentVariables;
    }
    get framework() {
        return this.getStringAttribute('framework');
    }
    set framework(value) {
        this._framework = value;
    }
    resetFramework() {
        this._framework = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get frameworkInput() {
        return this._framework;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get pullRequestEnvironmentName() {
        return this.getStringAttribute('pull_request_environment_name');
    }
    set pullRequestEnvironmentName(value) {
        this._pullRequestEnvironmentName = value;
    }
    resetPullRequestEnvironmentName() {
        this._pullRequestEnvironmentName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pullRequestEnvironmentNameInput() {
        return this._pullRequestEnvironmentName;
    }
    // source_branch - computed: true, optional: false, required: false
    get sourceBranch() {
        return this.getStringAttribute('source_branch');
    }
    get stage() {
        return this.getStringAttribute('stage');
    }
    set stage(value) {
        this._stage = value;
    }
    resetStage() {
        this._stage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stageInput() {
        return this._stage;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get ttl() {
        return this.getStringAttribute('ttl');
    }
    set ttl(value) {
        this._ttl = value;
    }
    resetTtl() {
        this._ttl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ttlInput() {
        return this._ttl;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            app_id: cdktf.stringToTerraform(this._appId),
            backend_environment_arn: cdktf.stringToTerraform(this._backendEnvironmentArn),
            basic_auth_credentials: cdktf.stringToTerraform(this._basicAuthCredentials),
            branch_name: cdktf.stringToTerraform(this._branchName),
            description: cdktf.stringToTerraform(this._description),
            display_name: cdktf.stringToTerraform(this._displayName),
            enable_auto_build: cdktf.booleanToTerraform(this._enableAutoBuild),
            enable_basic_auth: cdktf.booleanToTerraform(this._enableBasicAuth),
            enable_notification: cdktf.booleanToTerraform(this._enableNotification),
            enable_performance_mode: cdktf.booleanToTerraform(this._enablePerformanceMode),
            enable_pull_request_preview: cdktf.booleanToTerraform(this._enablePullRequestPreview),
            environment_variables: cdktf.hashMapper(cdktf.stringToTerraform)(this._environmentVariables),
            framework: cdktf.stringToTerraform(this._framework),
            id: cdktf.stringToTerraform(this._id),
            pull_request_environment_name: cdktf.stringToTerraform(this._pullRequestEnvironmentName),
            stage: cdktf.stringToTerraform(this._stage),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            ttl: cdktf.stringToTerraform(this._ttl),
        };
    }
}
exports.AmplifyBranch = AmplifyBranch;
_a = JSII_RTTI_SYMBOL_1;
AmplifyBranch[_a] = { fqn: "@cdktf/provider-aws.amplifyBranch.AmplifyBranch", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
AmplifyBranch.tfResourceType = "aws_amplify_branch";
//# sourceMappingURL=data:application/json;base64,