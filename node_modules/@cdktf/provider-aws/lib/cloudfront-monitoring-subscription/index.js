"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudfrontMonitoringSubscription = exports.CloudfrontMonitoringSubscriptionMonitoringSubscriptionOutputReference = exports.cloudfrontMonitoringSubscriptionMonitoringSubscriptionToTerraform = exports.CloudfrontMonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfigOutputReference = exports.cloudfrontMonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function cloudfrontMonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        realtime_metrics_subscription_status: cdktf.stringToTerraform(struct.realtimeMetricsSubscriptionStatus),
    };
}
exports.cloudfrontMonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfigToTerraform = cloudfrontMonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfigToTerraform;
class CloudfrontMonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._realtimeMetricsSubscriptionStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.realtimeMetricsSubscriptionStatus = this._realtimeMetricsSubscriptionStatus;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._realtimeMetricsSubscriptionStatus = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._realtimeMetricsSubscriptionStatus = value.realtimeMetricsSubscriptionStatus;
        }
    }
    get realtimeMetricsSubscriptionStatus() {
        return this.getStringAttribute('realtime_metrics_subscription_status');
    }
    set realtimeMetricsSubscriptionStatus(value) {
        this._realtimeMetricsSubscriptionStatus = value;
    }
    // Temporarily expose input value. Use with caution.
    get realtimeMetricsSubscriptionStatusInput() {
        return this._realtimeMetricsSubscriptionStatus;
    }
}
exports.CloudfrontMonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfigOutputReference = CloudfrontMonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
CloudfrontMonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfigOutputReference[_a] = { fqn: "@cdktf/provider-aws.cloudfrontMonitoringSubscription.CloudfrontMonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfigOutputReference", version: "10.0.12" };
function cloudfrontMonitoringSubscriptionMonitoringSubscriptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        realtime_metrics_subscription_config: cloudfrontMonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfigToTerraform(struct.realtimeMetricsSubscriptionConfig),
    };
}
exports.cloudfrontMonitoringSubscriptionMonitoringSubscriptionToTerraform = cloudfrontMonitoringSubscriptionMonitoringSubscriptionToTerraform;
class CloudfrontMonitoringSubscriptionMonitoringSubscriptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // realtime_metrics_subscription_config - computed: false, optional: false, required: true
        this._realtimeMetricsSubscriptionConfig = new CloudfrontMonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfigOutputReference(this, "realtime_metrics_subscription_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._realtimeMetricsSubscriptionConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.realtimeMetricsSubscriptionConfig = this._realtimeMetricsSubscriptionConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._realtimeMetricsSubscriptionConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._realtimeMetricsSubscriptionConfig.internalValue = value.realtimeMetricsSubscriptionConfig;
        }
    }
    get realtimeMetricsSubscriptionConfig() {
        return this._realtimeMetricsSubscriptionConfig;
    }
    putRealtimeMetricsSubscriptionConfig(value) {
        this._realtimeMetricsSubscriptionConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get realtimeMetricsSubscriptionConfigInput() {
        return this._realtimeMetricsSubscriptionConfig.internalValue;
    }
}
exports.CloudfrontMonitoringSubscriptionMonitoringSubscriptionOutputReference = CloudfrontMonitoringSubscriptionMonitoringSubscriptionOutputReference;
_b = JSII_RTTI_SYMBOL_1;
CloudfrontMonitoringSubscriptionMonitoringSubscriptionOutputReference[_b] = { fqn: "@cdktf/provider-aws.cloudfrontMonitoringSubscription.CloudfrontMonitoringSubscriptionMonitoringSubscriptionOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/cloudfront_monitoring_subscription aws_cloudfront_monitoring_subscription}
*/
class CloudfrontMonitoringSubscription extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/cloudfront_monitoring_subscription aws_cloudfront_monitoring_subscription} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CloudfrontMonitoringSubscriptionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_cloudfront_monitoring_subscription',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // monitoring_subscription - computed: false, optional: false, required: true
        this._monitoringSubscription = new CloudfrontMonitoringSubscriptionMonitoringSubscriptionOutputReference(this, "monitoring_subscription");
        this._distributionId = config.distributionId;
        this._id = config.id;
        this._monitoringSubscription.internalValue = config.monitoringSubscription;
    }
    get distributionId() {
        return this.getStringAttribute('distribution_id');
    }
    set distributionId(value) {
        this._distributionId = value;
    }
    // Temporarily expose input value. Use with caution.
    get distributionIdInput() {
        return this._distributionId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get monitoringSubscription() {
        return this._monitoringSubscription;
    }
    putMonitoringSubscription(value) {
        this._monitoringSubscription.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get monitoringSubscriptionInput() {
        return this._monitoringSubscription.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            distribution_id: cdktf.stringToTerraform(this._distributionId),
            id: cdktf.stringToTerraform(this._id),
            monitoring_subscription: cloudfrontMonitoringSubscriptionMonitoringSubscriptionToTerraform(this._monitoringSubscription.internalValue),
        };
    }
}
exports.CloudfrontMonitoringSubscription = CloudfrontMonitoringSubscription;
_c = JSII_RTTI_SYMBOL_1;
CloudfrontMonitoringSubscription[_c] = { fqn: "@cdktf/provider-aws.cloudfrontMonitoringSubscription.CloudfrontMonitoringSubscription", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
CloudfrontMonitoringSubscription.tfResourceType = "aws_cloudfront_monitoring_subscription";
//# sourceMappingURL=data:application/json;base64,