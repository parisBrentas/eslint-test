"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FsxLustreFileSystem = exports.FsxLustreFileSystemTimeoutsOutputReference = exports.fsxLustreFileSystemTimeoutsToTerraform = exports.FsxLustreFileSystemLogConfigurationOutputReference = exports.fsxLustreFileSystemLogConfigurationToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function fsxLustreFileSystemLogConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination: cdktf.stringToTerraform(struct.destination),
        level: cdktf.stringToTerraform(struct.level),
    };
}
exports.fsxLustreFileSystemLogConfigurationToTerraform = fsxLustreFileSystemLogConfigurationToTerraform;
class FsxLustreFileSystemLogConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destination !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination;
        }
        if (this._level !== undefined) {
            hasAnyValues = true;
            internalValueResult.level = this._level;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destination = undefined;
            this._level = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destination = value.destination;
            this._level = value.level;
        }
    }
    get destination() {
        return this.getStringAttribute('destination');
    }
    set destination(value) {
        this._destination = value;
    }
    resetDestination() {
        this._destination = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination;
    }
    get level() {
        return this.getStringAttribute('level');
    }
    set level(value) {
        this._level = value;
    }
    resetLevel() {
        this._level = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get levelInput() {
        return this._level;
    }
}
exports.FsxLustreFileSystemLogConfigurationOutputReference = FsxLustreFileSystemLogConfigurationOutputReference;
_a = JSII_RTTI_SYMBOL_1;
FsxLustreFileSystemLogConfigurationOutputReference[_a] = { fqn: "@cdktf/provider-aws.fsxLustreFileSystem.FsxLustreFileSystemLogConfigurationOutputReference", version: "10.0.12" };
function fsxLustreFileSystemTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.fsxLustreFileSystemTimeoutsToTerraform = fsxLustreFileSystemTimeoutsToTerraform;
class FsxLustreFileSystemTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.FsxLustreFileSystemTimeoutsOutputReference = FsxLustreFileSystemTimeoutsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
FsxLustreFileSystemTimeoutsOutputReference[_b] = { fqn: "@cdktf/provider-aws.fsxLustreFileSystem.FsxLustreFileSystemTimeoutsOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/fsx_lustre_file_system aws_fsx_lustre_file_system}
*/
class FsxLustreFileSystem extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/fsx_lustre_file_system aws_fsx_lustre_file_system} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options FsxLustreFileSystemConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_fsx_lustre_file_system',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // log_configuration - computed: false, optional: true, required: false
        this._logConfiguration = new FsxLustreFileSystemLogConfigurationOutputReference(this, "log_configuration");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new FsxLustreFileSystemTimeoutsOutputReference(this, "timeouts");
        this._autoImportPolicy = config.autoImportPolicy;
        this._automaticBackupRetentionDays = config.automaticBackupRetentionDays;
        this._backupId = config.backupId;
        this._copyTagsToBackups = config.copyTagsToBackups;
        this._dailyAutomaticBackupStartTime = config.dailyAutomaticBackupStartTime;
        this._dataCompressionType = config.dataCompressionType;
        this._deploymentType = config.deploymentType;
        this._driveCacheType = config.driveCacheType;
        this._exportPath = config.exportPath;
        this._fileSystemTypeVersion = config.fileSystemTypeVersion;
        this._id = config.id;
        this._importPath = config.importPath;
        this._importedFileChunkSize = config.importedFileChunkSize;
        this._kmsKeyId = config.kmsKeyId;
        this._perUnitStorageThroughput = config.perUnitStorageThroughput;
        this._securityGroupIds = config.securityGroupIds;
        this._storageCapacity = config.storageCapacity;
        this._storageType = config.storageType;
        this._subnetIds = config.subnetIds;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._weeklyMaintenanceStartTime = config.weeklyMaintenanceStartTime;
        this._logConfiguration.internalValue = config.logConfiguration;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get autoImportPolicy() {
        return this.getStringAttribute('auto_import_policy');
    }
    set autoImportPolicy(value) {
        this._autoImportPolicy = value;
    }
    resetAutoImportPolicy() {
        this._autoImportPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoImportPolicyInput() {
        return this._autoImportPolicy;
    }
    get automaticBackupRetentionDays() {
        return this.getNumberAttribute('automatic_backup_retention_days');
    }
    set automaticBackupRetentionDays(value) {
        this._automaticBackupRetentionDays = value;
    }
    resetAutomaticBackupRetentionDays() {
        this._automaticBackupRetentionDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get automaticBackupRetentionDaysInput() {
        return this._automaticBackupRetentionDays;
    }
    get backupId() {
        return this.getStringAttribute('backup_id');
    }
    set backupId(value) {
        this._backupId = value;
    }
    resetBackupId() {
        this._backupId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupIdInput() {
        return this._backupId;
    }
    get copyTagsToBackups() {
        return this.getBooleanAttribute('copy_tags_to_backups');
    }
    set copyTagsToBackups(value) {
        this._copyTagsToBackups = value;
    }
    resetCopyTagsToBackups() {
        this._copyTagsToBackups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get copyTagsToBackupsInput() {
        return this._copyTagsToBackups;
    }
    get dailyAutomaticBackupStartTime() {
        return this.getStringAttribute('daily_automatic_backup_start_time');
    }
    set dailyAutomaticBackupStartTime(value) {
        this._dailyAutomaticBackupStartTime = value;
    }
    resetDailyAutomaticBackupStartTime() {
        this._dailyAutomaticBackupStartTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dailyAutomaticBackupStartTimeInput() {
        return this._dailyAutomaticBackupStartTime;
    }
    get dataCompressionType() {
        return this.getStringAttribute('data_compression_type');
    }
    set dataCompressionType(value) {
        this._dataCompressionType = value;
    }
    resetDataCompressionType() {
        this._dataCompressionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataCompressionTypeInput() {
        return this._dataCompressionType;
    }
    get deploymentType() {
        return this.getStringAttribute('deployment_type');
    }
    set deploymentType(value) {
        this._deploymentType = value;
    }
    resetDeploymentType() {
        this._deploymentType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deploymentTypeInput() {
        return this._deploymentType;
    }
    // dns_name - computed: true, optional: false, required: false
    get dnsName() {
        return this.getStringAttribute('dns_name');
    }
    get driveCacheType() {
        return this.getStringAttribute('drive_cache_type');
    }
    set driveCacheType(value) {
        this._driveCacheType = value;
    }
    resetDriveCacheType() {
        this._driveCacheType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get driveCacheTypeInput() {
        return this._driveCacheType;
    }
    get exportPath() {
        return this.getStringAttribute('export_path');
    }
    set exportPath(value) {
        this._exportPath = value;
    }
    resetExportPath() {
        this._exportPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exportPathInput() {
        return this._exportPath;
    }
    get fileSystemTypeVersion() {
        return this.getStringAttribute('file_system_type_version');
    }
    set fileSystemTypeVersion(value) {
        this._fileSystemTypeVersion = value;
    }
    resetFileSystemTypeVersion() {
        this._fileSystemTypeVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileSystemTypeVersionInput() {
        return this._fileSystemTypeVersion;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get importPath() {
        return this.getStringAttribute('import_path');
    }
    set importPath(value) {
        this._importPath = value;
    }
    resetImportPath() {
        this._importPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get importPathInput() {
        return this._importPath;
    }
    get importedFileChunkSize() {
        return this.getNumberAttribute('imported_file_chunk_size');
    }
    set importedFileChunkSize(value) {
        this._importedFileChunkSize = value;
    }
    resetImportedFileChunkSize() {
        this._importedFileChunkSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get importedFileChunkSizeInput() {
        return this._importedFileChunkSize;
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    // mount_name - computed: true, optional: false, required: false
    get mountName() {
        return this.getStringAttribute('mount_name');
    }
    // network_interface_ids - computed: true, optional: false, required: false
    get networkInterfaceIds() {
        return this.getListAttribute('network_interface_ids');
    }
    // owner_id - computed: true, optional: false, required: false
    get ownerId() {
        return this.getStringAttribute('owner_id');
    }
    get perUnitStorageThroughput() {
        return this.getNumberAttribute('per_unit_storage_throughput');
    }
    set perUnitStorageThroughput(value) {
        this._perUnitStorageThroughput = value;
    }
    resetPerUnitStorageThroughput() {
        this._perUnitStorageThroughput = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perUnitStorageThroughputInput() {
        return this._perUnitStorageThroughput;
    }
    get securityGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('security_group_ids'));
    }
    set securityGroupIds(value) {
        this._securityGroupIds = value;
    }
    resetSecurityGroupIds() {
        this._securityGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupIdsInput() {
        return this._securityGroupIds;
    }
    get storageCapacity() {
        return this.getNumberAttribute('storage_capacity');
    }
    set storageCapacity(value) {
        this._storageCapacity = value;
    }
    resetStorageCapacity() {
        this._storageCapacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageCapacityInput() {
        return this._storageCapacity;
    }
    get storageType() {
        return this.getStringAttribute('storage_type');
    }
    set storageType(value) {
        this._storageType = value;
    }
    resetStorageType() {
        this._storageType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageTypeInput() {
        return this._storageType;
    }
    get subnetIds() {
        return this.getListAttribute('subnet_ids');
    }
    set subnetIds(value) {
        this._subnetIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdsInput() {
        return this._subnetIds;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    // vpc_id - computed: true, optional: false, required: false
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
    get weeklyMaintenanceStartTime() {
        return this.getStringAttribute('weekly_maintenance_start_time');
    }
    set weeklyMaintenanceStartTime(value) {
        this._weeklyMaintenanceStartTime = value;
    }
    resetWeeklyMaintenanceStartTime() {
        this._weeklyMaintenanceStartTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weeklyMaintenanceStartTimeInput() {
        return this._weeklyMaintenanceStartTime;
    }
    get logConfiguration() {
        return this._logConfiguration;
    }
    putLogConfiguration(value) {
        this._logConfiguration.internalValue = value;
    }
    resetLogConfiguration() {
        this._logConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logConfigurationInput() {
        return this._logConfiguration.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            auto_import_policy: cdktf.stringToTerraform(this._autoImportPolicy),
            automatic_backup_retention_days: cdktf.numberToTerraform(this._automaticBackupRetentionDays),
            backup_id: cdktf.stringToTerraform(this._backupId),
            copy_tags_to_backups: cdktf.booleanToTerraform(this._copyTagsToBackups),
            daily_automatic_backup_start_time: cdktf.stringToTerraform(this._dailyAutomaticBackupStartTime),
            data_compression_type: cdktf.stringToTerraform(this._dataCompressionType),
            deployment_type: cdktf.stringToTerraform(this._deploymentType),
            drive_cache_type: cdktf.stringToTerraform(this._driveCacheType),
            export_path: cdktf.stringToTerraform(this._exportPath),
            file_system_type_version: cdktf.stringToTerraform(this._fileSystemTypeVersion),
            id: cdktf.stringToTerraform(this._id),
            import_path: cdktf.stringToTerraform(this._importPath),
            imported_file_chunk_size: cdktf.numberToTerraform(this._importedFileChunkSize),
            kms_key_id: cdktf.stringToTerraform(this._kmsKeyId),
            per_unit_storage_throughput: cdktf.numberToTerraform(this._perUnitStorageThroughput),
            security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._securityGroupIds),
            storage_capacity: cdktf.numberToTerraform(this._storageCapacity),
            storage_type: cdktf.stringToTerraform(this._storageType),
            subnet_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._subnetIds),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            weekly_maintenance_start_time: cdktf.stringToTerraform(this._weeklyMaintenanceStartTime),
            log_configuration: fsxLustreFileSystemLogConfigurationToTerraform(this._logConfiguration.internalValue),
            timeouts: fsxLustreFileSystemTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.FsxLustreFileSystem = FsxLustreFileSystem;
_c = JSII_RTTI_SYMBOL_1;
FsxLustreFileSystem[_c] = { fqn: "@cdktf/provider-aws.fsxLustreFileSystem.FsxLustreFileSystem", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
FsxLustreFileSystem.tfResourceType = "aws_fsx_lustre_file_system";
//# sourceMappingURL=data:application/json;base64,