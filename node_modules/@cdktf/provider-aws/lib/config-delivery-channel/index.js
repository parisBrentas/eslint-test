"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigDeliveryChannel = exports.ConfigDeliveryChannelSnapshotDeliveryPropertiesOutputReference = exports.configDeliveryChannelSnapshotDeliveryPropertiesToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function configDeliveryChannelSnapshotDeliveryPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        delivery_frequency: cdktf.stringToTerraform(struct.deliveryFrequency),
    };
}
exports.configDeliveryChannelSnapshotDeliveryPropertiesToTerraform = configDeliveryChannelSnapshotDeliveryPropertiesToTerraform;
class ConfigDeliveryChannelSnapshotDeliveryPropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deliveryFrequency !== undefined) {
            hasAnyValues = true;
            internalValueResult.deliveryFrequency = this._deliveryFrequency;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._deliveryFrequency = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._deliveryFrequency = value.deliveryFrequency;
        }
    }
    get deliveryFrequency() {
        return this.getStringAttribute('delivery_frequency');
    }
    set deliveryFrequency(value) {
        this._deliveryFrequency = value;
    }
    resetDeliveryFrequency() {
        this._deliveryFrequency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deliveryFrequencyInput() {
        return this._deliveryFrequency;
    }
}
exports.ConfigDeliveryChannelSnapshotDeliveryPropertiesOutputReference = ConfigDeliveryChannelSnapshotDeliveryPropertiesOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ConfigDeliveryChannelSnapshotDeliveryPropertiesOutputReference[_a] = { fqn: "@cdktf/provider-aws.configDeliveryChannel.ConfigDeliveryChannelSnapshotDeliveryPropertiesOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/config_delivery_channel aws_config_delivery_channel}
*/
class ConfigDeliveryChannel extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/config_delivery_channel aws_config_delivery_channel} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ConfigDeliveryChannelConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_config_delivery_channel',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // snapshot_delivery_properties - computed: false, optional: true, required: false
        this._snapshotDeliveryProperties = new ConfigDeliveryChannelSnapshotDeliveryPropertiesOutputReference(this, "snapshot_delivery_properties");
        this._id = config.id;
        this._name = config.name;
        this._s3BucketName = config.s3BucketName;
        this._s3KeyPrefix = config.s3KeyPrefix;
        this._s3KmsKeyArn = config.s3KmsKeyArn;
        this._snsTopicArn = config.snsTopicArn;
        this._snapshotDeliveryProperties.internalValue = config.snapshotDeliveryProperties;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get s3BucketName() {
        return this.getStringAttribute('s3_bucket_name');
    }
    set s3BucketName(value) {
        this._s3BucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3BucketNameInput() {
        return this._s3BucketName;
    }
    get s3KeyPrefix() {
        return this.getStringAttribute('s3_key_prefix');
    }
    set s3KeyPrefix(value) {
        this._s3KeyPrefix = value;
    }
    resetS3KeyPrefix() {
        this._s3KeyPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3KeyPrefixInput() {
        return this._s3KeyPrefix;
    }
    get s3KmsKeyArn() {
        return this.getStringAttribute('s3_kms_key_arn');
    }
    set s3KmsKeyArn(value) {
        this._s3KmsKeyArn = value;
    }
    resetS3KmsKeyArn() {
        this._s3KmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3KmsKeyArnInput() {
        return this._s3KmsKeyArn;
    }
    get snsTopicArn() {
        return this.getStringAttribute('sns_topic_arn');
    }
    set snsTopicArn(value) {
        this._snsTopicArn = value;
    }
    resetSnsTopicArn() {
        this._snsTopicArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snsTopicArnInput() {
        return this._snsTopicArn;
    }
    get snapshotDeliveryProperties() {
        return this._snapshotDeliveryProperties;
    }
    putSnapshotDeliveryProperties(value) {
        this._snapshotDeliveryProperties.internalValue = value;
    }
    resetSnapshotDeliveryProperties() {
        this._snapshotDeliveryProperties.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snapshotDeliveryPropertiesInput() {
        return this._snapshotDeliveryProperties.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            s3_bucket_name: cdktf.stringToTerraform(this._s3BucketName),
            s3_key_prefix: cdktf.stringToTerraform(this._s3KeyPrefix),
            s3_kms_key_arn: cdktf.stringToTerraform(this._s3KmsKeyArn),
            sns_topic_arn: cdktf.stringToTerraform(this._snsTopicArn),
            snapshot_delivery_properties: configDeliveryChannelSnapshotDeliveryPropertiesToTerraform(this._snapshotDeliveryProperties.internalValue),
        };
    }
}
exports.ConfigDeliveryChannel = ConfigDeliveryChannel;
_b = JSII_RTTI_SYMBOL_1;
ConfigDeliveryChannel[_b] = { fqn: "@cdktf/provider-aws.configDeliveryChannel.ConfigDeliveryChannel", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
ConfigDeliveryChannel.tfResourceType = "aws_config_delivery_channel";
//# sourceMappingURL=data:application/json;base64,