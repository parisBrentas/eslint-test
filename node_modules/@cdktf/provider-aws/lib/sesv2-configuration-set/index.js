"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sesv2ConfigurationSet = exports.Sesv2ConfigurationSetTrackingOptionsOutputReference = exports.sesv2ConfigurationSetTrackingOptionsToTerraform = exports.Sesv2ConfigurationSetSuppressionOptionsOutputReference = exports.sesv2ConfigurationSetSuppressionOptionsToTerraform = exports.Sesv2ConfigurationSetSendingOptionsOutputReference = exports.sesv2ConfigurationSetSendingOptionsToTerraform = exports.Sesv2ConfigurationSetReputationOptionsOutputReference = exports.sesv2ConfigurationSetReputationOptionsToTerraform = exports.Sesv2ConfigurationSetDeliveryOptionsOutputReference = exports.sesv2ConfigurationSetDeliveryOptionsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function sesv2ConfigurationSetDeliveryOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        sending_pool_name: cdktf.stringToTerraform(struct.sendingPoolName),
        tls_policy: cdktf.stringToTerraform(struct.tlsPolicy),
    };
}
exports.sesv2ConfigurationSetDeliveryOptionsToTerraform = sesv2ConfigurationSetDeliveryOptionsToTerraform;
class Sesv2ConfigurationSetDeliveryOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sendingPoolName !== undefined) {
            hasAnyValues = true;
            internalValueResult.sendingPoolName = this._sendingPoolName;
        }
        if (this._tlsPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.tlsPolicy = this._tlsPolicy;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sendingPoolName = undefined;
            this._tlsPolicy = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sendingPoolName = value.sendingPoolName;
            this._tlsPolicy = value.tlsPolicy;
        }
    }
    get sendingPoolName() {
        return this.getStringAttribute('sending_pool_name');
    }
    set sendingPoolName(value) {
        this._sendingPoolName = value;
    }
    resetSendingPoolName() {
        this._sendingPoolName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sendingPoolNameInput() {
        return this._sendingPoolName;
    }
    get tlsPolicy() {
        return this.getStringAttribute('tls_policy');
    }
    set tlsPolicy(value) {
        this._tlsPolicy = value;
    }
    resetTlsPolicy() {
        this._tlsPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tlsPolicyInput() {
        return this._tlsPolicy;
    }
}
exports.Sesv2ConfigurationSetDeliveryOptionsOutputReference = Sesv2ConfigurationSetDeliveryOptionsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
Sesv2ConfigurationSetDeliveryOptionsOutputReference[_a] = { fqn: "@cdktf/provider-aws.sesv2ConfigurationSet.Sesv2ConfigurationSetDeliveryOptionsOutputReference", version: "10.0.12" };
function sesv2ConfigurationSetReputationOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        reputation_metrics_enabled: cdktf.booleanToTerraform(struct.reputationMetricsEnabled),
    };
}
exports.sesv2ConfigurationSetReputationOptionsToTerraform = sesv2ConfigurationSetReputationOptionsToTerraform;
class Sesv2ConfigurationSetReputationOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._reputationMetricsEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.reputationMetricsEnabled = this._reputationMetricsEnabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._reputationMetricsEnabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._reputationMetricsEnabled = value.reputationMetricsEnabled;
        }
    }
    // last_fresh_start - computed: true, optional: false, required: false
    get lastFreshStart() {
        return this.getStringAttribute('last_fresh_start');
    }
    get reputationMetricsEnabled() {
        return this.getBooleanAttribute('reputation_metrics_enabled');
    }
    set reputationMetricsEnabled(value) {
        this._reputationMetricsEnabled = value;
    }
    resetReputationMetricsEnabled() {
        this._reputationMetricsEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get reputationMetricsEnabledInput() {
        return this._reputationMetricsEnabled;
    }
}
exports.Sesv2ConfigurationSetReputationOptionsOutputReference = Sesv2ConfigurationSetReputationOptionsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
Sesv2ConfigurationSetReputationOptionsOutputReference[_b] = { fqn: "@cdktf/provider-aws.sesv2ConfigurationSet.Sesv2ConfigurationSetReputationOptionsOutputReference", version: "10.0.12" };
function sesv2ConfigurationSetSendingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        sending_enabled: cdktf.booleanToTerraform(struct.sendingEnabled),
    };
}
exports.sesv2ConfigurationSetSendingOptionsToTerraform = sesv2ConfigurationSetSendingOptionsToTerraform;
class Sesv2ConfigurationSetSendingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sendingEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.sendingEnabled = this._sendingEnabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sendingEnabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sendingEnabled = value.sendingEnabled;
        }
    }
    get sendingEnabled() {
        return this.getBooleanAttribute('sending_enabled');
    }
    set sendingEnabled(value) {
        this._sendingEnabled = value;
    }
    resetSendingEnabled() {
        this._sendingEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sendingEnabledInput() {
        return this._sendingEnabled;
    }
}
exports.Sesv2ConfigurationSetSendingOptionsOutputReference = Sesv2ConfigurationSetSendingOptionsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
Sesv2ConfigurationSetSendingOptionsOutputReference[_c] = { fqn: "@cdktf/provider-aws.sesv2ConfigurationSet.Sesv2ConfigurationSetSendingOptionsOutputReference", version: "10.0.12" };
function sesv2ConfigurationSetSuppressionOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        suppressed_reasons: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.suppressedReasons),
    };
}
exports.sesv2ConfigurationSetSuppressionOptionsToTerraform = sesv2ConfigurationSetSuppressionOptionsToTerraform;
class Sesv2ConfigurationSetSuppressionOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._suppressedReasons !== undefined) {
            hasAnyValues = true;
            internalValueResult.suppressedReasons = this._suppressedReasons;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._suppressedReasons = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._suppressedReasons = value.suppressedReasons;
        }
    }
    get suppressedReasons() {
        return this.getListAttribute('suppressed_reasons');
    }
    set suppressedReasons(value) {
        this._suppressedReasons = value;
    }
    resetSuppressedReasons() {
        this._suppressedReasons = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get suppressedReasonsInput() {
        return this._suppressedReasons;
    }
}
exports.Sesv2ConfigurationSetSuppressionOptionsOutputReference = Sesv2ConfigurationSetSuppressionOptionsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
Sesv2ConfigurationSetSuppressionOptionsOutputReference[_d] = { fqn: "@cdktf/provider-aws.sesv2ConfigurationSet.Sesv2ConfigurationSetSuppressionOptionsOutputReference", version: "10.0.12" };
function sesv2ConfigurationSetTrackingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_redirect_domain: cdktf.stringToTerraform(struct.customRedirectDomain),
    };
}
exports.sesv2ConfigurationSetTrackingOptionsToTerraform = sesv2ConfigurationSetTrackingOptionsToTerraform;
class Sesv2ConfigurationSetTrackingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customRedirectDomain !== undefined) {
            hasAnyValues = true;
            internalValueResult.customRedirectDomain = this._customRedirectDomain;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._customRedirectDomain = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._customRedirectDomain = value.customRedirectDomain;
        }
    }
    get customRedirectDomain() {
        return this.getStringAttribute('custom_redirect_domain');
    }
    set customRedirectDomain(value) {
        this._customRedirectDomain = value;
    }
    // Temporarily expose input value. Use with caution.
    get customRedirectDomainInput() {
        return this._customRedirectDomain;
    }
}
exports.Sesv2ConfigurationSetTrackingOptionsOutputReference = Sesv2ConfigurationSetTrackingOptionsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
Sesv2ConfigurationSetTrackingOptionsOutputReference[_e] = { fqn: "@cdktf/provider-aws.sesv2ConfigurationSet.Sesv2ConfigurationSetTrackingOptionsOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/sesv2_configuration_set aws_sesv2_configuration_set}
*/
class Sesv2ConfigurationSet extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/sesv2_configuration_set aws_sesv2_configuration_set} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Sesv2ConfigurationSetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_sesv2_configuration_set',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // delivery_options - computed: false, optional: true, required: false
        this._deliveryOptions = new Sesv2ConfigurationSetDeliveryOptionsOutputReference(this, "delivery_options");
        // reputation_options - computed: false, optional: true, required: false
        this._reputationOptions = new Sesv2ConfigurationSetReputationOptionsOutputReference(this, "reputation_options");
        // sending_options - computed: false, optional: true, required: false
        this._sendingOptions = new Sesv2ConfigurationSetSendingOptionsOutputReference(this, "sending_options");
        // suppression_options - computed: false, optional: true, required: false
        this._suppressionOptions = new Sesv2ConfigurationSetSuppressionOptionsOutputReference(this, "suppression_options");
        // tracking_options - computed: false, optional: true, required: false
        this._trackingOptions = new Sesv2ConfigurationSetTrackingOptionsOutputReference(this, "tracking_options");
        this._configurationSetName = config.configurationSetName;
        this._id = config.id;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._deliveryOptions.internalValue = config.deliveryOptions;
        this._reputationOptions.internalValue = config.reputationOptions;
        this._sendingOptions.internalValue = config.sendingOptions;
        this._suppressionOptions.internalValue = config.suppressionOptions;
        this._trackingOptions.internalValue = config.trackingOptions;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get configurationSetName() {
        return this.getStringAttribute('configuration_set_name');
    }
    set configurationSetName(value) {
        this._configurationSetName = value;
    }
    // Temporarily expose input value. Use with caution.
    get configurationSetNameInput() {
        return this._configurationSetName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get deliveryOptions() {
        return this._deliveryOptions;
    }
    putDeliveryOptions(value) {
        this._deliveryOptions.internalValue = value;
    }
    resetDeliveryOptions() {
        this._deliveryOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deliveryOptionsInput() {
        return this._deliveryOptions.internalValue;
    }
    get reputationOptions() {
        return this._reputationOptions;
    }
    putReputationOptions(value) {
        this._reputationOptions.internalValue = value;
    }
    resetReputationOptions() {
        this._reputationOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get reputationOptionsInput() {
        return this._reputationOptions.internalValue;
    }
    get sendingOptions() {
        return this._sendingOptions;
    }
    putSendingOptions(value) {
        this._sendingOptions.internalValue = value;
    }
    resetSendingOptions() {
        this._sendingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sendingOptionsInput() {
        return this._sendingOptions.internalValue;
    }
    get suppressionOptions() {
        return this._suppressionOptions;
    }
    putSuppressionOptions(value) {
        this._suppressionOptions.internalValue = value;
    }
    resetSuppressionOptions() {
        this._suppressionOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get suppressionOptionsInput() {
        return this._suppressionOptions.internalValue;
    }
    get trackingOptions() {
        return this._trackingOptions;
    }
    putTrackingOptions(value) {
        this._trackingOptions.internalValue = value;
    }
    resetTrackingOptions() {
        this._trackingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trackingOptionsInput() {
        return this._trackingOptions.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            configuration_set_name: cdktf.stringToTerraform(this._configurationSetName),
            id: cdktf.stringToTerraform(this._id),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            delivery_options: sesv2ConfigurationSetDeliveryOptionsToTerraform(this._deliveryOptions.internalValue),
            reputation_options: sesv2ConfigurationSetReputationOptionsToTerraform(this._reputationOptions.internalValue),
            sending_options: sesv2ConfigurationSetSendingOptionsToTerraform(this._sendingOptions.internalValue),
            suppression_options: sesv2ConfigurationSetSuppressionOptionsToTerraform(this._suppressionOptions.internalValue),
            tracking_options: sesv2ConfigurationSetTrackingOptionsToTerraform(this._trackingOptions.internalValue),
        };
    }
}
exports.Sesv2ConfigurationSet = Sesv2ConfigurationSet;
_f = JSII_RTTI_SYMBOL_1;
Sesv2ConfigurationSet[_f] = { fqn: "@cdktf/provider-aws.sesv2ConfigurationSet.Sesv2ConfigurationSet", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
Sesv2ConfigurationSet.tfResourceType = "aws_sesv2_configuration_set";
//# sourceMappingURL=data:application/json;base64,