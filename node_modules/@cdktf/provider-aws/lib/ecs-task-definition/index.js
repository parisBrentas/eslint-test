"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EcsTaskDefinition = exports.EcsTaskDefinitionVolumeList = exports.EcsTaskDefinitionVolumeOutputReference = exports.ecsTaskDefinitionVolumeToTerraform = exports.EcsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutputReference = exports.ecsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationToTerraform = exports.EcsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutputReference = exports.ecsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigToTerraform = exports.EcsTaskDefinitionVolumeEfsVolumeConfigurationOutputReference = exports.ecsTaskDefinitionVolumeEfsVolumeConfigurationToTerraform = exports.EcsTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutputReference = exports.ecsTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigToTerraform = exports.EcsTaskDefinitionVolumeDockerVolumeConfigurationOutputReference = exports.ecsTaskDefinitionVolumeDockerVolumeConfigurationToTerraform = exports.EcsTaskDefinitionRuntimePlatformOutputReference = exports.ecsTaskDefinitionRuntimePlatformToTerraform = exports.EcsTaskDefinitionProxyConfigurationOutputReference = exports.ecsTaskDefinitionProxyConfigurationToTerraform = exports.EcsTaskDefinitionPlacementConstraintsList = exports.EcsTaskDefinitionPlacementConstraintsOutputReference = exports.ecsTaskDefinitionPlacementConstraintsToTerraform = exports.EcsTaskDefinitionInferenceAcceleratorList = exports.EcsTaskDefinitionInferenceAcceleratorOutputReference = exports.ecsTaskDefinitionInferenceAcceleratorToTerraform = exports.EcsTaskDefinitionEphemeralStorageOutputReference = exports.ecsTaskDefinitionEphemeralStorageToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function ecsTaskDefinitionEphemeralStorageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        size_in_gib: cdktf.numberToTerraform(struct.sizeInGib),
    };
}
exports.ecsTaskDefinitionEphemeralStorageToTerraform = ecsTaskDefinitionEphemeralStorageToTerraform;
class EcsTaskDefinitionEphemeralStorageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sizeInGib !== undefined) {
            hasAnyValues = true;
            internalValueResult.sizeInGib = this._sizeInGib;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sizeInGib = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sizeInGib = value.sizeInGib;
        }
    }
    get sizeInGib() {
        return this.getNumberAttribute('size_in_gib');
    }
    set sizeInGib(value) {
        this._sizeInGib = value;
    }
    // Temporarily expose input value. Use with caution.
    get sizeInGibInput() {
        return this._sizeInGib;
    }
}
exports.EcsTaskDefinitionEphemeralStorageOutputReference = EcsTaskDefinitionEphemeralStorageOutputReference;
_a = JSII_RTTI_SYMBOL_1;
EcsTaskDefinitionEphemeralStorageOutputReference[_a] = { fqn: "@cdktf/provider-aws.ecsTaskDefinition.EcsTaskDefinitionEphemeralStorageOutputReference", version: "10.0.12" };
function ecsTaskDefinitionInferenceAcceleratorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        device_name: cdktf.stringToTerraform(struct.deviceName),
        device_type: cdktf.stringToTerraform(struct.deviceType),
    };
}
exports.ecsTaskDefinitionInferenceAcceleratorToTerraform = ecsTaskDefinitionInferenceAcceleratorToTerraform;
class EcsTaskDefinitionInferenceAcceleratorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceName = this._deviceName;
        }
        if (this._deviceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceType = this._deviceType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._deviceName = undefined;
            this._deviceType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._deviceName = value.deviceName;
            this._deviceType = value.deviceType;
        }
    }
    get deviceName() {
        return this.getStringAttribute('device_name');
    }
    set deviceName(value) {
        this._deviceName = value;
    }
    // Temporarily expose input value. Use with caution.
    get deviceNameInput() {
        return this._deviceName;
    }
    get deviceType() {
        return this.getStringAttribute('device_type');
    }
    set deviceType(value) {
        this._deviceType = value;
    }
    // Temporarily expose input value. Use with caution.
    get deviceTypeInput() {
        return this._deviceType;
    }
}
exports.EcsTaskDefinitionInferenceAcceleratorOutputReference = EcsTaskDefinitionInferenceAcceleratorOutputReference;
_b = JSII_RTTI_SYMBOL_1;
EcsTaskDefinitionInferenceAcceleratorOutputReference[_b] = { fqn: "@cdktf/provider-aws.ecsTaskDefinition.EcsTaskDefinitionInferenceAcceleratorOutputReference", version: "10.0.12" };
class EcsTaskDefinitionInferenceAcceleratorList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new EcsTaskDefinitionInferenceAcceleratorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.EcsTaskDefinitionInferenceAcceleratorList = EcsTaskDefinitionInferenceAcceleratorList;
_c = JSII_RTTI_SYMBOL_1;
EcsTaskDefinitionInferenceAcceleratorList[_c] = { fqn: "@cdktf/provider-aws.ecsTaskDefinition.EcsTaskDefinitionInferenceAcceleratorList", version: "10.0.12" };
function ecsTaskDefinitionPlacementConstraintsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        expression: cdktf.stringToTerraform(struct.expression),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ecsTaskDefinitionPlacementConstraintsToTerraform = ecsTaskDefinitionPlacementConstraintsToTerraform;
class EcsTaskDefinitionPlacementConstraintsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._expression !== undefined) {
            hasAnyValues = true;
            internalValueResult.expression = this._expression;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._expression = undefined;
            this._type = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._expression = value.expression;
            this._type = value.type;
        }
    }
    get expression() {
        return this.getStringAttribute('expression');
    }
    set expression(value) {
        this._expression = value;
    }
    resetExpression() {
        this._expression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get expressionInput() {
        return this._expression;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.EcsTaskDefinitionPlacementConstraintsOutputReference = EcsTaskDefinitionPlacementConstraintsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
EcsTaskDefinitionPlacementConstraintsOutputReference[_d] = { fqn: "@cdktf/provider-aws.ecsTaskDefinition.EcsTaskDefinitionPlacementConstraintsOutputReference", version: "10.0.12" };
class EcsTaskDefinitionPlacementConstraintsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new EcsTaskDefinitionPlacementConstraintsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.EcsTaskDefinitionPlacementConstraintsList = EcsTaskDefinitionPlacementConstraintsList;
_e = JSII_RTTI_SYMBOL_1;
EcsTaskDefinitionPlacementConstraintsList[_e] = { fqn: "@cdktf/provider-aws.ecsTaskDefinition.EcsTaskDefinitionPlacementConstraintsList", version: "10.0.12" };
function ecsTaskDefinitionProxyConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        container_name: cdktf.stringToTerraform(struct.containerName),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.ecsTaskDefinitionProxyConfigurationToTerraform = ecsTaskDefinitionProxyConfigurationToTerraform;
class EcsTaskDefinitionProxyConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._containerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerName = this._containerName;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._containerName = undefined;
            this._properties = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._containerName = value.containerName;
            this._properties = value.properties;
            this._type = value.type;
        }
    }
    get containerName() {
        return this.getStringAttribute('container_name');
    }
    set containerName(value) {
        this._containerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get containerNameInput() {
        return this._containerName;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.EcsTaskDefinitionProxyConfigurationOutputReference = EcsTaskDefinitionProxyConfigurationOutputReference;
_f = JSII_RTTI_SYMBOL_1;
EcsTaskDefinitionProxyConfigurationOutputReference[_f] = { fqn: "@cdktf/provider-aws.ecsTaskDefinition.EcsTaskDefinitionProxyConfigurationOutputReference", version: "10.0.12" };
function ecsTaskDefinitionRuntimePlatformToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cpu_architecture: cdktf.stringToTerraform(struct.cpuArchitecture),
        operating_system_family: cdktf.stringToTerraform(struct.operatingSystemFamily),
    };
}
exports.ecsTaskDefinitionRuntimePlatformToTerraform = ecsTaskDefinitionRuntimePlatformToTerraform;
class EcsTaskDefinitionRuntimePlatformOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cpuArchitecture !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpuArchitecture = this._cpuArchitecture;
        }
        if (this._operatingSystemFamily !== undefined) {
            hasAnyValues = true;
            internalValueResult.operatingSystemFamily = this._operatingSystemFamily;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cpuArchitecture = undefined;
            this._operatingSystemFamily = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cpuArchitecture = value.cpuArchitecture;
            this._operatingSystemFamily = value.operatingSystemFamily;
        }
    }
    get cpuArchitecture() {
        return this.getStringAttribute('cpu_architecture');
    }
    set cpuArchitecture(value) {
        this._cpuArchitecture = value;
    }
    resetCpuArchitecture() {
        this._cpuArchitecture = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuArchitectureInput() {
        return this._cpuArchitecture;
    }
    get operatingSystemFamily() {
        return this.getStringAttribute('operating_system_family');
    }
    set operatingSystemFamily(value) {
        this._operatingSystemFamily = value;
    }
    resetOperatingSystemFamily() {
        this._operatingSystemFamily = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get operatingSystemFamilyInput() {
        return this._operatingSystemFamily;
    }
}
exports.EcsTaskDefinitionRuntimePlatformOutputReference = EcsTaskDefinitionRuntimePlatformOutputReference;
_g = JSII_RTTI_SYMBOL_1;
EcsTaskDefinitionRuntimePlatformOutputReference[_g] = { fqn: "@cdktf/provider-aws.ecsTaskDefinition.EcsTaskDefinitionRuntimePlatformOutputReference", version: "10.0.12" };
function ecsTaskDefinitionVolumeDockerVolumeConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        autoprovision: cdktf.booleanToTerraform(struct.autoprovision),
        driver: cdktf.stringToTerraform(struct.driver),
        driver_opts: cdktf.hashMapper(cdktf.stringToTerraform)(struct.driverOpts),
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
        scope: cdktf.stringToTerraform(struct.scope),
    };
}
exports.ecsTaskDefinitionVolumeDockerVolumeConfigurationToTerraform = ecsTaskDefinitionVolumeDockerVolumeConfigurationToTerraform;
class EcsTaskDefinitionVolumeDockerVolumeConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoprovision !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoprovision = this._autoprovision;
        }
        if (this._driver !== undefined) {
            hasAnyValues = true;
            internalValueResult.driver = this._driver;
        }
        if (this._driverOpts !== undefined) {
            hasAnyValues = true;
            internalValueResult.driverOpts = this._driverOpts;
        }
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        if (this._scope !== undefined) {
            hasAnyValues = true;
            internalValueResult.scope = this._scope;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoprovision = undefined;
            this._driver = undefined;
            this._driverOpts = undefined;
            this._labels = undefined;
            this._scope = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoprovision = value.autoprovision;
            this._driver = value.driver;
            this._driverOpts = value.driverOpts;
            this._labels = value.labels;
            this._scope = value.scope;
        }
    }
    get autoprovision() {
        return this.getBooleanAttribute('autoprovision');
    }
    set autoprovision(value) {
        this._autoprovision = value;
    }
    resetAutoprovision() {
        this._autoprovision = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoprovisionInput() {
        return this._autoprovision;
    }
    get driver() {
        return this.getStringAttribute('driver');
    }
    set driver(value) {
        this._driver = value;
    }
    resetDriver() {
        this._driver = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get driverInput() {
        return this._driver;
    }
    get driverOpts() {
        return this.getStringMapAttribute('driver_opts');
    }
    set driverOpts(value) {
        this._driverOpts = value;
    }
    resetDriverOpts() {
        this._driverOpts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get driverOptsInput() {
        return this._driverOpts;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get scope() {
        return this.getStringAttribute('scope');
    }
    set scope(value) {
        this._scope = value;
    }
    resetScope() {
        this._scope = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scopeInput() {
        return this._scope;
    }
}
exports.EcsTaskDefinitionVolumeDockerVolumeConfigurationOutputReference = EcsTaskDefinitionVolumeDockerVolumeConfigurationOutputReference;
_h = JSII_RTTI_SYMBOL_1;
EcsTaskDefinitionVolumeDockerVolumeConfigurationOutputReference[_h] = { fqn: "@cdktf/provider-aws.ecsTaskDefinition.EcsTaskDefinitionVolumeDockerVolumeConfigurationOutputReference", version: "10.0.12" };
function ecsTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_point_id: cdktf.stringToTerraform(struct.accessPointId),
        iam: cdktf.stringToTerraform(struct.iam),
    };
}
exports.ecsTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigToTerraform = ecsTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigToTerraform;
class EcsTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessPointId !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessPointId = this._accessPointId;
        }
        if (this._iam !== undefined) {
            hasAnyValues = true;
            internalValueResult.iam = this._iam;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessPointId = undefined;
            this._iam = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessPointId = value.accessPointId;
            this._iam = value.iam;
        }
    }
    get accessPointId() {
        return this.getStringAttribute('access_point_id');
    }
    set accessPointId(value) {
        this._accessPointId = value;
    }
    resetAccessPointId() {
        this._accessPointId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessPointIdInput() {
        return this._accessPointId;
    }
    get iam() {
        return this.getStringAttribute('iam');
    }
    set iam(value) {
        this._iam = value;
    }
    resetIam() {
        this._iam = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iamInput() {
        return this._iam;
    }
}
exports.EcsTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutputReference = EcsTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutputReference;
_j = JSII_RTTI_SYMBOL_1;
EcsTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutputReference[_j] = { fqn: "@cdktf/provider-aws.ecsTaskDefinition.EcsTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutputReference", version: "10.0.12" };
function ecsTaskDefinitionVolumeEfsVolumeConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        file_system_id: cdktf.stringToTerraform(struct.fileSystemId),
        root_directory: cdktf.stringToTerraform(struct.rootDirectory),
        transit_encryption: cdktf.stringToTerraform(struct.transitEncryption),
        transit_encryption_port: cdktf.numberToTerraform(struct.transitEncryptionPort),
        authorization_config: ecsTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigToTerraform(struct.authorizationConfig),
    };
}
exports.ecsTaskDefinitionVolumeEfsVolumeConfigurationToTerraform = ecsTaskDefinitionVolumeEfsVolumeConfigurationToTerraform;
class EcsTaskDefinitionVolumeEfsVolumeConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // authorization_config - computed: false, optional: true, required: false
        this._authorizationConfig = new EcsTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutputReference(this, "authorization_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fileSystemId !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileSystemId = this._fileSystemId;
        }
        if (this._rootDirectory !== undefined) {
            hasAnyValues = true;
            internalValueResult.rootDirectory = this._rootDirectory;
        }
        if (this._transitEncryption !== undefined) {
            hasAnyValues = true;
            internalValueResult.transitEncryption = this._transitEncryption;
        }
        if (this._transitEncryptionPort !== undefined) {
            hasAnyValues = true;
            internalValueResult.transitEncryptionPort = this._transitEncryptionPort;
        }
        if (this._authorizationConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorizationConfig = this._authorizationConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fileSystemId = undefined;
            this._rootDirectory = undefined;
            this._transitEncryption = undefined;
            this._transitEncryptionPort = undefined;
            this._authorizationConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fileSystemId = value.fileSystemId;
            this._rootDirectory = value.rootDirectory;
            this._transitEncryption = value.transitEncryption;
            this._transitEncryptionPort = value.transitEncryptionPort;
            this._authorizationConfig.internalValue = value.authorizationConfig;
        }
    }
    get fileSystemId() {
        return this.getStringAttribute('file_system_id');
    }
    set fileSystemId(value) {
        this._fileSystemId = value;
    }
    // Temporarily expose input value. Use with caution.
    get fileSystemIdInput() {
        return this._fileSystemId;
    }
    get rootDirectory() {
        return this.getStringAttribute('root_directory');
    }
    set rootDirectory(value) {
        this._rootDirectory = value;
    }
    resetRootDirectory() {
        this._rootDirectory = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rootDirectoryInput() {
        return this._rootDirectory;
    }
    get transitEncryption() {
        return this.getStringAttribute('transit_encryption');
    }
    set transitEncryption(value) {
        this._transitEncryption = value;
    }
    resetTransitEncryption() {
        this._transitEncryption = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transitEncryptionInput() {
        return this._transitEncryption;
    }
    get transitEncryptionPort() {
        return this.getNumberAttribute('transit_encryption_port');
    }
    set transitEncryptionPort(value) {
        this._transitEncryptionPort = value;
    }
    resetTransitEncryptionPort() {
        this._transitEncryptionPort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transitEncryptionPortInput() {
        return this._transitEncryptionPort;
    }
    get authorizationConfig() {
        return this._authorizationConfig;
    }
    putAuthorizationConfig(value) {
        this._authorizationConfig.internalValue = value;
    }
    resetAuthorizationConfig() {
        this._authorizationConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authorizationConfigInput() {
        return this._authorizationConfig.internalValue;
    }
}
exports.EcsTaskDefinitionVolumeEfsVolumeConfigurationOutputReference = EcsTaskDefinitionVolumeEfsVolumeConfigurationOutputReference;
_k = JSII_RTTI_SYMBOL_1;
EcsTaskDefinitionVolumeEfsVolumeConfigurationOutputReference[_k] = { fqn: "@cdktf/provider-aws.ecsTaskDefinition.EcsTaskDefinitionVolumeEfsVolumeConfigurationOutputReference", version: "10.0.12" };
function ecsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        credentials_parameter: cdktf.stringToTerraform(struct.credentialsParameter),
        domain: cdktf.stringToTerraform(struct.domain),
    };
}
exports.ecsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigToTerraform = ecsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigToTerraform;
class EcsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._credentialsParameter !== undefined) {
            hasAnyValues = true;
            internalValueResult.credentialsParameter = this._credentialsParameter;
        }
        if (this._domain !== undefined) {
            hasAnyValues = true;
            internalValueResult.domain = this._domain;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._credentialsParameter = undefined;
            this._domain = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._credentialsParameter = value.credentialsParameter;
            this._domain = value.domain;
        }
    }
    get credentialsParameter() {
        return this.getStringAttribute('credentials_parameter');
    }
    set credentialsParameter(value) {
        this._credentialsParameter = value;
    }
    // Temporarily expose input value. Use with caution.
    get credentialsParameterInput() {
        return this._credentialsParameter;
    }
    get domain() {
        return this.getStringAttribute('domain');
    }
    set domain(value) {
        this._domain = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainInput() {
        return this._domain;
    }
}
exports.EcsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutputReference = EcsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutputReference;
_l = JSII_RTTI_SYMBOL_1;
EcsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutputReference[_l] = { fqn: "@cdktf/provider-aws.ecsTaskDefinition.EcsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutputReference", version: "10.0.12" };
function ecsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        file_system_id: cdktf.stringToTerraform(struct.fileSystemId),
        root_directory: cdktf.stringToTerraform(struct.rootDirectory),
        authorization_config: ecsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigToTerraform(struct.authorizationConfig),
    };
}
exports.ecsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationToTerraform = ecsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationToTerraform;
class EcsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // authorization_config - computed: false, optional: false, required: true
        this._authorizationConfig = new EcsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutputReference(this, "authorization_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fileSystemId !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileSystemId = this._fileSystemId;
        }
        if (this._rootDirectory !== undefined) {
            hasAnyValues = true;
            internalValueResult.rootDirectory = this._rootDirectory;
        }
        if (this._authorizationConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorizationConfig = this._authorizationConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fileSystemId = undefined;
            this._rootDirectory = undefined;
            this._authorizationConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fileSystemId = value.fileSystemId;
            this._rootDirectory = value.rootDirectory;
            this._authorizationConfig.internalValue = value.authorizationConfig;
        }
    }
    get fileSystemId() {
        return this.getStringAttribute('file_system_id');
    }
    set fileSystemId(value) {
        this._fileSystemId = value;
    }
    // Temporarily expose input value. Use with caution.
    get fileSystemIdInput() {
        return this._fileSystemId;
    }
    get rootDirectory() {
        return this.getStringAttribute('root_directory');
    }
    set rootDirectory(value) {
        this._rootDirectory = value;
    }
    // Temporarily expose input value. Use with caution.
    get rootDirectoryInput() {
        return this._rootDirectory;
    }
    get authorizationConfig() {
        return this._authorizationConfig;
    }
    putAuthorizationConfig(value) {
        this._authorizationConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get authorizationConfigInput() {
        return this._authorizationConfig.internalValue;
    }
}
exports.EcsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutputReference = EcsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutputReference;
_m = JSII_RTTI_SYMBOL_1;
EcsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutputReference[_m] = { fqn: "@cdktf/provider-aws.ecsTaskDefinition.EcsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutputReference", version: "10.0.12" };
function ecsTaskDefinitionVolumeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_path: cdktf.stringToTerraform(struct.hostPath),
        name: cdktf.stringToTerraform(struct.name),
        docker_volume_configuration: ecsTaskDefinitionVolumeDockerVolumeConfigurationToTerraform(struct.dockerVolumeConfiguration),
        efs_volume_configuration: ecsTaskDefinitionVolumeEfsVolumeConfigurationToTerraform(struct.efsVolumeConfiguration),
        fsx_windows_file_server_volume_configuration: ecsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationToTerraform(struct.fsxWindowsFileServerVolumeConfiguration),
    };
}
exports.ecsTaskDefinitionVolumeToTerraform = ecsTaskDefinitionVolumeToTerraform;
class EcsTaskDefinitionVolumeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // docker_volume_configuration - computed: false, optional: true, required: false
        this._dockerVolumeConfiguration = new EcsTaskDefinitionVolumeDockerVolumeConfigurationOutputReference(this, "docker_volume_configuration");
        // efs_volume_configuration - computed: false, optional: true, required: false
        this._efsVolumeConfiguration = new EcsTaskDefinitionVolumeEfsVolumeConfigurationOutputReference(this, "efs_volume_configuration");
        // fsx_windows_file_server_volume_configuration - computed: false, optional: true, required: false
        this._fsxWindowsFileServerVolumeConfiguration = new EcsTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutputReference(this, "fsx_windows_file_server_volume_configuration");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostPath = this._hostPath;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._dockerVolumeConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dockerVolumeConfiguration = this._dockerVolumeConfiguration?.internalValue;
        }
        if (this._efsVolumeConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.efsVolumeConfiguration = this._efsVolumeConfiguration?.internalValue;
        }
        if (this._fsxWindowsFileServerVolumeConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fsxWindowsFileServerVolumeConfiguration = this._fsxWindowsFileServerVolumeConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._hostPath = undefined;
            this._name = undefined;
            this._dockerVolumeConfiguration.internalValue = undefined;
            this._efsVolumeConfiguration.internalValue = undefined;
            this._fsxWindowsFileServerVolumeConfiguration.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._hostPath = value.hostPath;
            this._name = value.name;
            this._dockerVolumeConfiguration.internalValue = value.dockerVolumeConfiguration;
            this._efsVolumeConfiguration.internalValue = value.efsVolumeConfiguration;
            this._fsxWindowsFileServerVolumeConfiguration.internalValue = value.fsxWindowsFileServerVolumeConfiguration;
        }
    }
    get hostPath() {
        return this.getStringAttribute('host_path');
    }
    set hostPath(value) {
        this._hostPath = value;
    }
    resetHostPath() {
        this._hostPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostPathInput() {
        return this._hostPath;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get dockerVolumeConfiguration() {
        return this._dockerVolumeConfiguration;
    }
    putDockerVolumeConfiguration(value) {
        this._dockerVolumeConfiguration.internalValue = value;
    }
    resetDockerVolumeConfiguration() {
        this._dockerVolumeConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dockerVolumeConfigurationInput() {
        return this._dockerVolumeConfiguration.internalValue;
    }
    get efsVolumeConfiguration() {
        return this._efsVolumeConfiguration;
    }
    putEfsVolumeConfiguration(value) {
        this._efsVolumeConfiguration.internalValue = value;
    }
    resetEfsVolumeConfiguration() {
        this._efsVolumeConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get efsVolumeConfigurationInput() {
        return this._efsVolumeConfiguration.internalValue;
    }
    get fsxWindowsFileServerVolumeConfiguration() {
        return this._fsxWindowsFileServerVolumeConfiguration;
    }
    putFsxWindowsFileServerVolumeConfiguration(value) {
        this._fsxWindowsFileServerVolumeConfiguration.internalValue = value;
    }
    resetFsxWindowsFileServerVolumeConfiguration() {
        this._fsxWindowsFileServerVolumeConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fsxWindowsFileServerVolumeConfigurationInput() {
        return this._fsxWindowsFileServerVolumeConfiguration.internalValue;
    }
}
exports.EcsTaskDefinitionVolumeOutputReference = EcsTaskDefinitionVolumeOutputReference;
_o = JSII_RTTI_SYMBOL_1;
EcsTaskDefinitionVolumeOutputReference[_o] = { fqn: "@cdktf/provider-aws.ecsTaskDefinition.EcsTaskDefinitionVolumeOutputReference", version: "10.0.12" };
class EcsTaskDefinitionVolumeList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new EcsTaskDefinitionVolumeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.EcsTaskDefinitionVolumeList = EcsTaskDefinitionVolumeList;
_p = JSII_RTTI_SYMBOL_1;
EcsTaskDefinitionVolumeList[_p] = { fqn: "@cdktf/provider-aws.ecsTaskDefinition.EcsTaskDefinitionVolumeList", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/ecs_task_definition aws_ecs_task_definition}
*/
class EcsTaskDefinition extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/ecs_task_definition aws_ecs_task_definition} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options EcsTaskDefinitionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_ecs_task_definition',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // ephemeral_storage - computed: false, optional: true, required: false
        this._ephemeralStorage = new EcsTaskDefinitionEphemeralStorageOutputReference(this, "ephemeral_storage");
        // inference_accelerator - computed: false, optional: true, required: false
        this._inferenceAccelerator = new EcsTaskDefinitionInferenceAcceleratorList(this, "inference_accelerator", true);
        // placement_constraints - computed: false, optional: true, required: false
        this._placementConstraints = new EcsTaskDefinitionPlacementConstraintsList(this, "placement_constraints", true);
        // proxy_configuration - computed: false, optional: true, required: false
        this._proxyConfiguration = new EcsTaskDefinitionProxyConfigurationOutputReference(this, "proxy_configuration");
        // runtime_platform - computed: false, optional: true, required: false
        this._runtimePlatform = new EcsTaskDefinitionRuntimePlatformOutputReference(this, "runtime_platform");
        // volume - computed: false, optional: true, required: false
        this._volume = new EcsTaskDefinitionVolumeList(this, "volume", true);
        this._containerDefinitions = config.containerDefinitions;
        this._cpu = config.cpu;
        this._executionRoleArn = config.executionRoleArn;
        this._family = config.family;
        this._id = config.id;
        this._ipcMode = config.ipcMode;
        this._memory = config.memory;
        this._networkMode = config.networkMode;
        this._pidMode = config.pidMode;
        this._requiresCompatibilities = config.requiresCompatibilities;
        this._skipDestroy = config.skipDestroy;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._taskRoleArn = config.taskRoleArn;
        this._ephemeralStorage.internalValue = config.ephemeralStorage;
        this._inferenceAccelerator.internalValue = config.inferenceAccelerator;
        this._placementConstraints.internalValue = config.placementConstraints;
        this._proxyConfiguration.internalValue = config.proxyConfiguration;
        this._runtimePlatform.internalValue = config.runtimePlatform;
        this._volume.internalValue = config.volume;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get containerDefinitions() {
        return this.getStringAttribute('container_definitions');
    }
    set containerDefinitions(value) {
        this._containerDefinitions = value;
    }
    // Temporarily expose input value. Use with caution.
    get containerDefinitionsInput() {
        return this._containerDefinitions;
    }
    get cpu() {
        return this.getStringAttribute('cpu');
    }
    set cpu(value) {
        this._cpu = value;
    }
    resetCpu() {
        this._cpu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuInput() {
        return this._cpu;
    }
    get executionRoleArn() {
        return this.getStringAttribute('execution_role_arn');
    }
    set executionRoleArn(value) {
        this._executionRoleArn = value;
    }
    resetExecutionRoleArn() {
        this._executionRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get executionRoleArnInput() {
        return this._executionRoleArn;
    }
    get family() {
        return this.getStringAttribute('family');
    }
    set family(value) {
        this._family = value;
    }
    // Temporarily expose input value. Use with caution.
    get familyInput() {
        return this._family;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get ipcMode() {
        return this.getStringAttribute('ipc_mode');
    }
    set ipcMode(value) {
        this._ipcMode = value;
    }
    resetIpcMode() {
        this._ipcMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipcModeInput() {
        return this._ipcMode;
    }
    get memory() {
        return this.getStringAttribute('memory');
    }
    set memory(value) {
        this._memory = value;
    }
    resetMemory() {
        this._memory = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryInput() {
        return this._memory;
    }
    get networkMode() {
        return this.getStringAttribute('network_mode');
    }
    set networkMode(value) {
        this._networkMode = value;
    }
    resetNetworkMode() {
        this._networkMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkModeInput() {
        return this._networkMode;
    }
    get pidMode() {
        return this.getStringAttribute('pid_mode');
    }
    set pidMode(value) {
        this._pidMode = value;
    }
    resetPidMode() {
        this._pidMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pidModeInput() {
        return this._pidMode;
    }
    get requiresCompatibilities() {
        return cdktf.Fn.tolist(this.getListAttribute('requires_compatibilities'));
    }
    set requiresCompatibilities(value) {
        this._requiresCompatibilities = value;
    }
    resetRequiresCompatibilities() {
        this._requiresCompatibilities = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requiresCompatibilitiesInput() {
        return this._requiresCompatibilities;
    }
    // revision - computed: true, optional: false, required: false
    get revision() {
        return this.getNumberAttribute('revision');
    }
    get skipDestroy() {
        return this.getBooleanAttribute('skip_destroy');
    }
    set skipDestroy(value) {
        this._skipDestroy = value;
    }
    resetSkipDestroy() {
        this._skipDestroy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get skipDestroyInput() {
        return this._skipDestroy;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get taskRoleArn() {
        return this.getStringAttribute('task_role_arn');
    }
    set taskRoleArn(value) {
        this._taskRoleArn = value;
    }
    resetTaskRoleArn() {
        this._taskRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get taskRoleArnInput() {
        return this._taskRoleArn;
    }
    get ephemeralStorage() {
        return this._ephemeralStorage;
    }
    putEphemeralStorage(value) {
        this._ephemeralStorage.internalValue = value;
    }
    resetEphemeralStorage() {
        this._ephemeralStorage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ephemeralStorageInput() {
        return this._ephemeralStorage.internalValue;
    }
    get inferenceAccelerator() {
        return this._inferenceAccelerator;
    }
    putInferenceAccelerator(value) {
        this._inferenceAccelerator.internalValue = value;
    }
    resetInferenceAccelerator() {
        this._inferenceAccelerator.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inferenceAcceleratorInput() {
        return this._inferenceAccelerator.internalValue;
    }
    get placementConstraints() {
        return this._placementConstraints;
    }
    putPlacementConstraints(value) {
        this._placementConstraints.internalValue = value;
    }
    resetPlacementConstraints() {
        this._placementConstraints.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get placementConstraintsInput() {
        return this._placementConstraints.internalValue;
    }
    get proxyConfiguration() {
        return this._proxyConfiguration;
    }
    putProxyConfiguration(value) {
        this._proxyConfiguration.internalValue = value;
    }
    resetProxyConfiguration() {
        this._proxyConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get proxyConfigurationInput() {
        return this._proxyConfiguration.internalValue;
    }
    get runtimePlatform() {
        return this._runtimePlatform;
    }
    putRuntimePlatform(value) {
        this._runtimePlatform.internalValue = value;
    }
    resetRuntimePlatform() {
        this._runtimePlatform.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get runtimePlatformInput() {
        return this._runtimePlatform.internalValue;
    }
    get volume() {
        return this._volume;
    }
    putVolume(value) {
        this._volume.internalValue = value;
    }
    resetVolume() {
        this._volume.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumeInput() {
        return this._volume.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            container_definitions: cdktf.stringToTerraform(this._containerDefinitions),
            cpu: cdktf.stringToTerraform(this._cpu),
            execution_role_arn: cdktf.stringToTerraform(this._executionRoleArn),
            family: cdktf.stringToTerraform(this._family),
            id: cdktf.stringToTerraform(this._id),
            ipc_mode: cdktf.stringToTerraform(this._ipcMode),
            memory: cdktf.stringToTerraform(this._memory),
            network_mode: cdktf.stringToTerraform(this._networkMode),
            pid_mode: cdktf.stringToTerraform(this._pidMode),
            requires_compatibilities: cdktf.listMapper(cdktf.stringToTerraform, false)(this._requiresCompatibilities),
            skip_destroy: cdktf.booleanToTerraform(this._skipDestroy),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            task_role_arn: cdktf.stringToTerraform(this._taskRoleArn),
            ephemeral_storage: ecsTaskDefinitionEphemeralStorageToTerraform(this._ephemeralStorage.internalValue),
            inference_accelerator: cdktf.listMapper(ecsTaskDefinitionInferenceAcceleratorToTerraform, true)(this._inferenceAccelerator.internalValue),
            placement_constraints: cdktf.listMapper(ecsTaskDefinitionPlacementConstraintsToTerraform, true)(this._placementConstraints.internalValue),
            proxy_configuration: ecsTaskDefinitionProxyConfigurationToTerraform(this._proxyConfiguration.internalValue),
            runtime_platform: ecsTaskDefinitionRuntimePlatformToTerraform(this._runtimePlatform.internalValue),
            volume: cdktf.listMapper(ecsTaskDefinitionVolumeToTerraform, true)(this._volume.internalValue),
        };
    }
}
exports.EcsTaskDefinition = EcsTaskDefinition;
_q = JSII_RTTI_SYMBOL_1;
EcsTaskDefinition[_q] = { fqn: "@cdktf/provider-aws.ecsTaskDefinition.EcsTaskDefinition", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
EcsTaskDefinition.tfResourceType = "aws_ecs_task_definition";
//# sourceMappingURL=data:application/json;base64,