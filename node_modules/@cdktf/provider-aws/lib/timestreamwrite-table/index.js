"use strict";
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimestreamwriteTable = exports.TimestreamwriteTableRetentionPropertiesOutputReference = exports.timestreamwriteTableRetentionPropertiesToTerraform = exports.TimestreamwriteTableMagneticStoreWritePropertiesOutputReference = exports.timestreamwriteTableMagneticStoreWritePropertiesToTerraform = exports.TimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutputReference = exports.timestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationToTerraform = exports.TimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutputReference = exports.timestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function timestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        encryption_option: cdktf.stringToTerraform(struct.encryptionOption),
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        object_key_prefix: cdktf.stringToTerraform(struct.objectKeyPrefix),
    };
}
exports.timestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationToTerraform = timestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationToTerraform;
class TimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._encryptionOption !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionOption = this._encryptionOption;
        }
        if (this._kmsKeyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyId = this._kmsKeyId;
        }
        if (this._objectKeyPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectKeyPrefix = this._objectKeyPrefix;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._encryptionOption = undefined;
            this._kmsKeyId = undefined;
            this._objectKeyPrefix = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._encryptionOption = value.encryptionOption;
            this._kmsKeyId = value.kmsKeyId;
            this._objectKeyPrefix = value.objectKeyPrefix;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    resetBucketName() {
        this._bucketName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get encryptionOption() {
        return this.getStringAttribute('encryption_option');
    }
    set encryptionOption(value) {
        this._encryptionOption = value;
    }
    resetEncryptionOption() {
        this._encryptionOption = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionOptionInput() {
        return this._encryptionOption;
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    get objectKeyPrefix() {
        return this.getStringAttribute('object_key_prefix');
    }
    set objectKeyPrefix(value) {
        this._objectKeyPrefix = value;
    }
    resetObjectKeyPrefix() {
        this._objectKeyPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get objectKeyPrefixInput() {
        return this._objectKeyPrefix;
    }
}
exports.TimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutputReference = TimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutputReference;
_a = JSII_RTTI_SYMBOL_1;
TimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutputReference[_a] = { fqn: "@cdktf/provider-aws.timestreamwriteTable.TimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutputReference", version: "10.0.12" };
function timestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        s3_configuration: timestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationToTerraform(struct.s3Configuration),
    };
}
exports.timestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationToTerraform = timestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationToTerraform;
class TimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // s3_configuration - computed: false, optional: true, required: false
        this._s3Configuration = new TimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutputReference(this, "s3_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._s3Configuration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Configuration = this._s3Configuration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._s3Configuration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._s3Configuration.internalValue = value.s3Configuration;
        }
    }
    get s3Configuration() {
        return this._s3Configuration;
    }
    putS3Configuration(value) {
        this._s3Configuration.internalValue = value;
    }
    resetS3Configuration() {
        this._s3Configuration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3ConfigurationInput() {
        return this._s3Configuration.internalValue;
    }
}
exports.TimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutputReference = TimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutputReference;
_b = JSII_RTTI_SYMBOL_1;
TimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutputReference[_b] = { fqn: "@cdktf/provider-aws.timestreamwriteTable.TimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutputReference", version: "10.0.12" };
function timestreamwriteTableMagneticStoreWritePropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_magnetic_store_writes: cdktf.booleanToTerraform(struct.enableMagneticStoreWrites),
        magnetic_store_rejected_data_location: timestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationToTerraform(struct.magneticStoreRejectedDataLocation),
    };
}
exports.timestreamwriteTableMagneticStoreWritePropertiesToTerraform = timestreamwriteTableMagneticStoreWritePropertiesToTerraform;
class TimestreamwriteTableMagneticStoreWritePropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // magnetic_store_rejected_data_location - computed: false, optional: true, required: false
        this._magneticStoreRejectedDataLocation = new TimestreamwriteTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutputReference(this, "magnetic_store_rejected_data_location");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableMagneticStoreWrites !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableMagneticStoreWrites = this._enableMagneticStoreWrites;
        }
        if (this._magneticStoreRejectedDataLocation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.magneticStoreRejectedDataLocation = this._magneticStoreRejectedDataLocation?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableMagneticStoreWrites = undefined;
            this._magneticStoreRejectedDataLocation.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableMagneticStoreWrites = value.enableMagneticStoreWrites;
            this._magneticStoreRejectedDataLocation.internalValue = value.magneticStoreRejectedDataLocation;
        }
    }
    get enableMagneticStoreWrites() {
        return this.getBooleanAttribute('enable_magnetic_store_writes');
    }
    set enableMagneticStoreWrites(value) {
        this._enableMagneticStoreWrites = value;
    }
    resetEnableMagneticStoreWrites() {
        this._enableMagneticStoreWrites = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableMagneticStoreWritesInput() {
        return this._enableMagneticStoreWrites;
    }
    get magneticStoreRejectedDataLocation() {
        return this._magneticStoreRejectedDataLocation;
    }
    putMagneticStoreRejectedDataLocation(value) {
        this._magneticStoreRejectedDataLocation.internalValue = value;
    }
    resetMagneticStoreRejectedDataLocation() {
        this._magneticStoreRejectedDataLocation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get magneticStoreRejectedDataLocationInput() {
        return this._magneticStoreRejectedDataLocation.internalValue;
    }
}
exports.TimestreamwriteTableMagneticStoreWritePropertiesOutputReference = TimestreamwriteTableMagneticStoreWritePropertiesOutputReference;
_c = JSII_RTTI_SYMBOL_1;
TimestreamwriteTableMagneticStoreWritePropertiesOutputReference[_c] = { fqn: "@cdktf/provider-aws.timestreamwriteTable.TimestreamwriteTableMagneticStoreWritePropertiesOutputReference", version: "10.0.12" };
function timestreamwriteTableRetentionPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        magnetic_store_retention_period_in_days: cdktf.numberToTerraform(struct.magneticStoreRetentionPeriodInDays),
        memory_store_retention_period_in_hours: cdktf.numberToTerraform(struct.memoryStoreRetentionPeriodInHours),
    };
}
exports.timestreamwriteTableRetentionPropertiesToTerraform = timestreamwriteTableRetentionPropertiesToTerraform;
class TimestreamwriteTableRetentionPropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._magneticStoreRetentionPeriodInDays !== undefined) {
            hasAnyValues = true;
            internalValueResult.magneticStoreRetentionPeriodInDays = this._magneticStoreRetentionPeriodInDays;
        }
        if (this._memoryStoreRetentionPeriodInHours !== undefined) {
            hasAnyValues = true;
            internalValueResult.memoryStoreRetentionPeriodInHours = this._memoryStoreRetentionPeriodInHours;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._magneticStoreRetentionPeriodInDays = undefined;
            this._memoryStoreRetentionPeriodInHours = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._magneticStoreRetentionPeriodInDays = value.magneticStoreRetentionPeriodInDays;
            this._memoryStoreRetentionPeriodInHours = value.memoryStoreRetentionPeriodInHours;
        }
    }
    get magneticStoreRetentionPeriodInDays() {
        return this.getNumberAttribute('magnetic_store_retention_period_in_days');
    }
    set magneticStoreRetentionPeriodInDays(value) {
        this._magneticStoreRetentionPeriodInDays = value;
    }
    // Temporarily expose input value. Use with caution.
    get magneticStoreRetentionPeriodInDaysInput() {
        return this._magneticStoreRetentionPeriodInDays;
    }
    get memoryStoreRetentionPeriodInHours() {
        return this.getNumberAttribute('memory_store_retention_period_in_hours');
    }
    set memoryStoreRetentionPeriodInHours(value) {
        this._memoryStoreRetentionPeriodInHours = value;
    }
    // Temporarily expose input value. Use with caution.
    get memoryStoreRetentionPeriodInHoursInput() {
        return this._memoryStoreRetentionPeriodInHours;
    }
}
exports.TimestreamwriteTableRetentionPropertiesOutputReference = TimestreamwriteTableRetentionPropertiesOutputReference;
_d = JSII_RTTI_SYMBOL_1;
TimestreamwriteTableRetentionPropertiesOutputReference[_d] = { fqn: "@cdktf/provider-aws.timestreamwriteTable.TimestreamwriteTableRetentionPropertiesOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/timestreamwrite_table aws_timestreamwrite_table}
*/
class TimestreamwriteTable extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/timestreamwrite_table aws_timestreamwrite_table} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options TimestreamwriteTableConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_timestreamwrite_table',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // magnetic_store_write_properties - computed: false, optional: true, required: false
        this._magneticStoreWriteProperties = new TimestreamwriteTableMagneticStoreWritePropertiesOutputReference(this, "magnetic_store_write_properties");
        // retention_properties - computed: false, optional: true, required: false
        this._retentionProperties = new TimestreamwriteTableRetentionPropertiesOutputReference(this, "retention_properties");
        this._databaseName = config.databaseName;
        this._id = config.id;
        this._tableName = config.tableName;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._magneticStoreWriteProperties.internalValue = config.magneticStoreWriteProperties;
        this._retentionProperties.internalValue = config.retentionProperties;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get databaseName() {
        return this.getStringAttribute('database_name');
    }
    set databaseName(value) {
        this._databaseName = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseNameInput() {
        return this._databaseName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get tableName() {
        return this.getStringAttribute('table_name');
    }
    set tableName(value) {
        this._tableName = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableNameInput() {
        return this._tableName;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get magneticStoreWriteProperties() {
        return this._magneticStoreWriteProperties;
    }
    putMagneticStoreWriteProperties(value) {
        this._magneticStoreWriteProperties.internalValue = value;
    }
    resetMagneticStoreWriteProperties() {
        this._magneticStoreWriteProperties.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get magneticStoreWritePropertiesInput() {
        return this._magneticStoreWriteProperties.internalValue;
    }
    get retentionProperties() {
        return this._retentionProperties;
    }
    putRetentionProperties(value) {
        this._retentionProperties.internalValue = value;
    }
    resetRetentionProperties() {
        this._retentionProperties.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retentionPropertiesInput() {
        return this._retentionProperties.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            database_name: cdktf.stringToTerraform(this._databaseName),
            id: cdktf.stringToTerraform(this._id),
            table_name: cdktf.stringToTerraform(this._tableName),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            magnetic_store_write_properties: timestreamwriteTableMagneticStoreWritePropertiesToTerraform(this._magneticStoreWriteProperties.internalValue),
            retention_properties: timestreamwriteTableRetentionPropertiesToTerraform(this._retentionProperties.internalValue),
        };
    }
}
exports.TimestreamwriteTable = TimestreamwriteTable;
_e = JSII_RTTI_SYMBOL_1;
TimestreamwriteTable[_e] = { fqn: "@cdktf/provider-aws.timestreamwriteTable.TimestreamwriteTable", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
TimestreamwriteTable.tfResourceType = "aws_timestreamwrite_table";
//# sourceMappingURL=data:application/json;base64,