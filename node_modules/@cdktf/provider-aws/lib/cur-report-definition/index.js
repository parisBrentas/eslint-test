"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CurReportDefinition = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/cur_report_definition aws_cur_report_definition}
*/
class CurReportDefinition extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/cur_report_definition aws_cur_report_definition} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CurReportDefinitionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_cur_report_definition',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._additionalArtifacts = config.additionalArtifacts;
        this._additionalSchemaElements = config.additionalSchemaElements;
        this._compression = config.compression;
        this._format = config.format;
        this._id = config.id;
        this._refreshClosedReports = config.refreshClosedReports;
        this._reportName = config.reportName;
        this._reportVersioning = config.reportVersioning;
        this._s3Bucket = config.s3Bucket;
        this._s3Prefix = config.s3Prefix;
        this._s3Region = config.s3Region;
        this._timeUnit = config.timeUnit;
    }
    get additionalArtifacts() {
        return cdktf.Fn.tolist(this.getListAttribute('additional_artifacts'));
    }
    set additionalArtifacts(value) {
        this._additionalArtifacts = value;
    }
    resetAdditionalArtifacts() {
        this._additionalArtifacts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get additionalArtifactsInput() {
        return this._additionalArtifacts;
    }
    get additionalSchemaElements() {
        return cdktf.Fn.tolist(this.getListAttribute('additional_schema_elements'));
    }
    set additionalSchemaElements(value) {
        this._additionalSchemaElements = value;
    }
    // Temporarily expose input value. Use with caution.
    get additionalSchemaElementsInput() {
        return this._additionalSchemaElements;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get compression() {
        return this.getStringAttribute('compression');
    }
    set compression(value) {
        this._compression = value;
    }
    // Temporarily expose input value. Use with caution.
    get compressionInput() {
        return this._compression;
    }
    get format() {
        return this.getStringAttribute('format');
    }
    set format(value) {
        this._format = value;
    }
    // Temporarily expose input value. Use with caution.
    get formatInput() {
        return this._format;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get refreshClosedReports() {
        return this.getBooleanAttribute('refresh_closed_reports');
    }
    set refreshClosedReports(value) {
        this._refreshClosedReports = value;
    }
    resetRefreshClosedReports() {
        this._refreshClosedReports = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get refreshClosedReportsInput() {
        return this._refreshClosedReports;
    }
    get reportName() {
        return this.getStringAttribute('report_name');
    }
    set reportName(value) {
        this._reportName = value;
    }
    // Temporarily expose input value. Use with caution.
    get reportNameInput() {
        return this._reportName;
    }
    get reportVersioning() {
        return this.getStringAttribute('report_versioning');
    }
    set reportVersioning(value) {
        this._reportVersioning = value;
    }
    resetReportVersioning() {
        this._reportVersioning = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get reportVersioningInput() {
        return this._reportVersioning;
    }
    get s3Bucket() {
        return this.getStringAttribute('s3_bucket');
    }
    set s3Bucket(value) {
        this._s3Bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3BucketInput() {
        return this._s3Bucket;
    }
    get s3Prefix() {
        return this.getStringAttribute('s3_prefix');
    }
    set s3Prefix(value) {
        this._s3Prefix = value;
    }
    resetS3Prefix() {
        this._s3Prefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3PrefixInput() {
        return this._s3Prefix;
    }
    get s3Region() {
        return this.getStringAttribute('s3_region');
    }
    set s3Region(value) {
        this._s3Region = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3RegionInput() {
        return this._s3Region;
    }
    get timeUnit() {
        return this.getStringAttribute('time_unit');
    }
    set timeUnit(value) {
        this._timeUnit = value;
    }
    // Temporarily expose input value. Use with caution.
    get timeUnitInput() {
        return this._timeUnit;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            additional_artifacts: cdktf.listMapper(cdktf.stringToTerraform, false)(this._additionalArtifacts),
            additional_schema_elements: cdktf.listMapper(cdktf.stringToTerraform, false)(this._additionalSchemaElements),
            compression: cdktf.stringToTerraform(this._compression),
            format: cdktf.stringToTerraform(this._format),
            id: cdktf.stringToTerraform(this._id),
            refresh_closed_reports: cdktf.booleanToTerraform(this._refreshClosedReports),
            report_name: cdktf.stringToTerraform(this._reportName),
            report_versioning: cdktf.stringToTerraform(this._reportVersioning),
            s3_bucket: cdktf.stringToTerraform(this._s3Bucket),
            s3_prefix: cdktf.stringToTerraform(this._s3Prefix),
            s3_region: cdktf.stringToTerraform(this._s3Region),
            time_unit: cdktf.stringToTerraform(this._timeUnit),
        };
    }
}
exports.CurReportDefinition = CurReportDefinition;
_a = JSII_RTTI_SYMBOL_1;
CurReportDefinition[_a] = { fqn: "@cdktf/provider-aws.curReportDefinition.CurReportDefinition", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
CurReportDefinition.tfResourceType = "aws_cur_report_definition";
//# sourceMappingURL=data:application/json;base64,