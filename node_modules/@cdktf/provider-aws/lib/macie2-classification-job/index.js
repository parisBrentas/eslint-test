"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Macie2ClassificationJob = exports.Macie2ClassificationJobScheduleFrequencyOutputReference = exports.macie2ClassificationJobScheduleFrequencyToTerraform = exports.Macie2ClassificationJobS3JobDefinitionOutputReference = exports.macie2ClassificationJobS3JobDefinitionToTerraform = exports.Macie2ClassificationJobS3JobDefinitionScopingOutputReference = exports.macie2ClassificationJobS3JobDefinitionScopingToTerraform = exports.Macie2ClassificationJobS3JobDefinitionScopingIncludesOutputReference = exports.macie2ClassificationJobS3JobDefinitionScopingIncludesToTerraform = exports.Macie2ClassificationJobS3JobDefinitionScopingIncludesAndList = exports.Macie2ClassificationJobS3JobDefinitionScopingIncludesAndOutputReference = exports.macie2ClassificationJobS3JobDefinitionScopingIncludesAndToTerraform = exports.Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutputReference = exports.macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermToTerraform = exports.Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValuesList = exports.Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValuesOutputReference = exports.macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValuesToTerraform = exports.Macie2ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutputReference = exports.macie2ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermToTerraform = exports.Macie2ClassificationJobS3JobDefinitionScopingExcludesOutputReference = exports.macie2ClassificationJobS3JobDefinitionScopingExcludesToTerraform = exports.Macie2ClassificationJobS3JobDefinitionScopingExcludesAndList = exports.Macie2ClassificationJobS3JobDefinitionScopingExcludesAndOutputReference = exports.macie2ClassificationJobS3JobDefinitionScopingExcludesAndToTerraform = exports.Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutputReference = exports.macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermToTerraform = exports.Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValuesList = exports.Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValuesOutputReference = exports.macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValuesToTerraform = exports.Macie2ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutputReference = exports.macie2ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermToTerraform = exports.Macie2ClassificationJobS3JobDefinitionBucketDefinitionsList = exports.Macie2ClassificationJobS3JobDefinitionBucketDefinitionsOutputReference = exports.macie2ClassificationJobS3JobDefinitionBucketDefinitionsToTerraform = exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaOutputReference = exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaToTerraform = exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutputReference = exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesToTerraform = exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndList = exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutputReference = exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndToTerraform = exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutputReference = exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionToTerraform = exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValuesList = exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValuesOutputReference = exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValuesToTerraform = exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutputReference = exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionToTerraform = exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutputReference = exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesToTerraform = exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndList = exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutputReference = exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndToTerraform = exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutputReference = exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionToTerraform = exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValuesList = exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValuesOutputReference = exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValuesToTerraform = exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutputReference = exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionToTerraform = exports.Macie2ClassificationJobUserPausedDetailsList = exports.Macie2ClassificationJobUserPausedDetailsOutputReference = exports.macie2ClassificationJobUserPausedDetailsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function macie2ClassificationJobUserPausedDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.macie2ClassificationJobUserPausedDetailsToTerraform = macie2ClassificationJobUserPausedDetailsToTerraform;
class Macie2ClassificationJobUserPausedDetailsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // job_expires_at - computed: true, optional: false, required: false
    get jobExpiresAt() {
        return this.getStringAttribute('job_expires_at');
    }
    // job_imminent_expiration_health_event_arn - computed: true, optional: false, required: false
    get jobImminentExpirationHealthEventArn() {
        return this.getStringAttribute('job_imminent_expiration_health_event_arn');
    }
    // job_paused_at - computed: true, optional: false, required: false
    get jobPausedAt() {
        return this.getStringAttribute('job_paused_at');
    }
}
exports.Macie2ClassificationJobUserPausedDetailsOutputReference = Macie2ClassificationJobUserPausedDetailsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobUserPausedDetailsOutputReference[_a] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobUserPausedDetailsOutputReference", version: "10.0.12" };
class Macie2ClassificationJobUserPausedDetailsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Macie2ClassificationJobUserPausedDetailsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Macie2ClassificationJobUserPausedDetailsList = Macie2ClassificationJobUserPausedDetailsList;
_b = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobUserPausedDetailsList[_b] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobUserPausedDetailsList", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        comparator: cdktf.stringToTerraform(struct.comparator),
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionToTerraform = macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionToTerraform;
class Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._comparator !== undefined) {
            hasAnyValues = true;
            internalValueResult.comparator = this._comparator;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._comparator = undefined;
            this._key = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._comparator = value.comparator;
            this._key = value.key;
            this._values = value.values;
        }
    }
    get comparator() {
        return this.getStringAttribute('comparator');
    }
    set comparator(value) {
        this._comparator = value;
    }
    resetComparator() {
        this._comparator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get comparatorInput() {
        return this._comparator;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get values() {
        return this.getListAttribute('values');
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutputReference = Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutputReference;
_c = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutputReference[_c] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutputReference", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValuesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValuesToTerraform = macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValuesToTerraform;
class Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValuesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._key = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._key = value.key;
            this._value = value.value;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    resetValue() {
        this._value = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValuesOutputReference = Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValuesOutputReference;
_d = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValuesOutputReference[_d] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValuesOutputReference", version: "10.0.12" };
class Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValuesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValuesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValuesList = Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValuesList;
_e = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValuesList[_e] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValuesList", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        comparator: cdktf.stringToTerraform(struct.comparator),
        tag_values: cdktf.listMapper(macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValuesToTerraform, true)(struct.tagValues),
    };
}
exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionToTerraform = macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionToTerraform;
class Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // tag_values - computed: false, optional: true, required: false
        this._tagValues = new Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionTagValuesList(this, "tag_values", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._comparator !== undefined) {
            hasAnyValues = true;
            internalValueResult.comparator = this._comparator;
        }
        if (this._tagValues?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagValues = this._tagValues?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._comparator = undefined;
            this._tagValues.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._comparator = value.comparator;
            this._tagValues.internalValue = value.tagValues;
        }
    }
    get comparator() {
        return this.getStringAttribute('comparator');
    }
    set comparator(value) {
        this._comparator = value;
    }
    resetComparator() {
        this._comparator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get comparatorInput() {
        return this._comparator;
    }
    get tagValues() {
        return this._tagValues;
    }
    putTagValues(value) {
        this._tagValues.internalValue = value;
    }
    resetTagValues() {
        this._tagValues.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagValuesInput() {
        return this._tagValues.internalValue;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutputReference = Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutputReference;
_f = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutputReference[_f] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutputReference", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        simple_criterion: macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionToTerraform(struct.simpleCriterion),
        tag_criterion: macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionToTerraform(struct.tagCriterion),
    };
}
exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndToTerraform = macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndToTerraform;
class Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // simple_criterion - computed: false, optional: true, required: false
        this._simpleCriterion = new Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndSimpleCriterionOutputReference(this, "simple_criterion");
        // tag_criterion - computed: false, optional: true, required: false
        this._tagCriterion = new Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndTagCriterionOutputReference(this, "tag_criterion");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._simpleCriterion?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.simpleCriterion = this._simpleCriterion?.internalValue;
        }
        if (this._tagCriterion?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagCriterion = this._tagCriterion?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._simpleCriterion.internalValue = undefined;
            this._tagCriterion.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._simpleCriterion.internalValue = value.simpleCriterion;
            this._tagCriterion.internalValue = value.tagCriterion;
        }
    }
    get simpleCriterion() {
        return this._simpleCriterion;
    }
    putSimpleCriterion(value) {
        this._simpleCriterion.internalValue = value;
    }
    resetSimpleCriterion() {
        this._simpleCriterion.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get simpleCriterionInput() {
        return this._simpleCriterion.internalValue;
    }
    get tagCriterion() {
        return this._tagCriterion;
    }
    putTagCriterion(value) {
        this._tagCriterion.internalValue = value;
    }
    resetTagCriterion() {
        this._tagCriterion.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagCriterionInput() {
        return this._tagCriterion.internalValue;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutputReference = Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutputReference;
_g = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutputReference[_g] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutputReference", version: "10.0.12" };
class Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndList = Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndList;
_h = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndList[_h] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndList", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        and: cdktf.listMapper(macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndToTerraform, true)(struct.and),
    };
}
exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesToTerraform = macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesToTerraform;
class Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // and - computed: false, optional: true, required: false
        this._and = new Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesAndList(this, "and", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._and?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.and = this._and?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._and.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._and.internalValue = value.and;
        }
    }
    get and() {
        return this._and;
    }
    putAnd(value) {
        this._and.internalValue = value;
    }
    resetAnd() {
        this._and.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get andInput() {
        return this._and.internalValue;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutputReference = Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutputReference;
_j = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutputReference[_j] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutputReference", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        comparator: cdktf.stringToTerraform(struct.comparator),
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionToTerraform = macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionToTerraform;
class Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._comparator !== undefined) {
            hasAnyValues = true;
            internalValueResult.comparator = this._comparator;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._comparator = undefined;
            this._key = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._comparator = value.comparator;
            this._key = value.key;
            this._values = value.values;
        }
    }
    get comparator() {
        return this.getStringAttribute('comparator');
    }
    set comparator(value) {
        this._comparator = value;
    }
    resetComparator() {
        this._comparator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get comparatorInput() {
        return this._comparator;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get values() {
        return this.getListAttribute('values');
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutputReference = Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutputReference;
_k = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutputReference[_k] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutputReference", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValuesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValuesToTerraform = macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValuesToTerraform;
class Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValuesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._key = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._key = value.key;
            this._value = value.value;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    resetValue() {
        this._value = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValuesOutputReference = Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValuesOutputReference;
_l = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValuesOutputReference[_l] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValuesOutputReference", version: "10.0.12" };
class Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValuesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValuesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValuesList = Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValuesList;
_m = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValuesList[_m] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValuesList", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        comparator: cdktf.stringToTerraform(struct.comparator),
        tag_values: cdktf.listMapper(macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValuesToTerraform, true)(struct.tagValues),
    };
}
exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionToTerraform = macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionToTerraform;
class Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // tag_values - computed: false, optional: true, required: false
        this._tagValues = new Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionTagValuesList(this, "tag_values", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._comparator !== undefined) {
            hasAnyValues = true;
            internalValueResult.comparator = this._comparator;
        }
        if (this._tagValues?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagValues = this._tagValues?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._comparator = undefined;
            this._tagValues.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._comparator = value.comparator;
            this._tagValues.internalValue = value.tagValues;
        }
    }
    get comparator() {
        return this.getStringAttribute('comparator');
    }
    set comparator(value) {
        this._comparator = value;
    }
    resetComparator() {
        this._comparator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get comparatorInput() {
        return this._comparator;
    }
    get tagValues() {
        return this._tagValues;
    }
    putTagValues(value) {
        this._tagValues.internalValue = value;
    }
    resetTagValues() {
        this._tagValues.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagValuesInput() {
        return this._tagValues.internalValue;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutputReference = Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutputReference;
_o = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutputReference[_o] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutputReference", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        simple_criterion: macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionToTerraform(struct.simpleCriterion),
        tag_criterion: macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionToTerraform(struct.tagCriterion),
    };
}
exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndToTerraform = macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndToTerraform;
class Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // simple_criterion - computed: false, optional: true, required: false
        this._simpleCriterion = new Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndSimpleCriterionOutputReference(this, "simple_criterion");
        // tag_criterion - computed: false, optional: true, required: false
        this._tagCriterion = new Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndTagCriterionOutputReference(this, "tag_criterion");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._simpleCriterion?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.simpleCriterion = this._simpleCriterion?.internalValue;
        }
        if (this._tagCriterion?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagCriterion = this._tagCriterion?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._simpleCriterion.internalValue = undefined;
            this._tagCriterion.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._simpleCriterion.internalValue = value.simpleCriterion;
            this._tagCriterion.internalValue = value.tagCriterion;
        }
    }
    get simpleCriterion() {
        return this._simpleCriterion;
    }
    putSimpleCriterion(value) {
        this._simpleCriterion.internalValue = value;
    }
    resetSimpleCriterion() {
        this._simpleCriterion.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get simpleCriterionInput() {
        return this._simpleCriterion.internalValue;
    }
    get tagCriterion() {
        return this._tagCriterion;
    }
    putTagCriterion(value) {
        this._tagCriterion.internalValue = value;
    }
    resetTagCriterion() {
        this._tagCriterion.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagCriterionInput() {
        return this._tagCriterion.internalValue;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutputReference = Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutputReference;
_p = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutputReference[_p] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutputReference", version: "10.0.12" };
class Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndList = Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndList;
_q = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndList[_q] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndList", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        and: cdktf.listMapper(macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndToTerraform, true)(struct.and),
    };
}
exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesToTerraform = macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesToTerraform;
class Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // and - computed: false, optional: true, required: false
        this._and = new Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesAndList(this, "and", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._and?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.and = this._and?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._and.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._and.internalValue = value.and;
        }
    }
    get and() {
        return this._and;
    }
    putAnd(value) {
        this._and.internalValue = value;
    }
    resetAnd() {
        this._and.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get andInput() {
        return this._and.internalValue;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutputReference = Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutputReference;
_r = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutputReference[_r] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutputReference", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionBucketCriteriaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        excludes: macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesToTerraform(struct.excludes),
        includes: macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesToTerraform(struct.includes),
    };
}
exports.macie2ClassificationJobS3JobDefinitionBucketCriteriaToTerraform = macie2ClassificationJobS3JobDefinitionBucketCriteriaToTerraform;
class Macie2ClassificationJobS3JobDefinitionBucketCriteriaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // excludes - computed: false, optional: true, required: false
        this._excludes = new Macie2ClassificationJobS3JobDefinitionBucketCriteriaExcludesOutputReference(this, "excludes");
        // includes - computed: false, optional: true, required: false
        this._includes = new Macie2ClassificationJobS3JobDefinitionBucketCriteriaIncludesOutputReference(this, "includes");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._excludes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludes = this._excludes?.internalValue;
        }
        if (this._includes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.includes = this._includes?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._excludes.internalValue = undefined;
            this._includes.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._excludes.internalValue = value.excludes;
            this._includes.internalValue = value.includes;
        }
    }
    get excludes() {
        return this._excludes;
    }
    putExcludes(value) {
        this._excludes.internalValue = value;
    }
    resetExcludes() {
        this._excludes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludesInput() {
        return this._excludes.internalValue;
    }
    get includes() {
        return this._includes;
    }
    putIncludes(value) {
        this._includes.internalValue = value;
    }
    resetIncludes() {
        this._includes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includesInput() {
        return this._includes.internalValue;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionBucketCriteriaOutputReference = Macie2ClassificationJobS3JobDefinitionBucketCriteriaOutputReference;
_s = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionBucketCriteriaOutputReference[_s] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionBucketCriteriaOutputReference", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionBucketDefinitionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        account_id: cdktf.stringToTerraform(struct.accountId),
        buckets: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.buckets),
    };
}
exports.macie2ClassificationJobS3JobDefinitionBucketDefinitionsToTerraform = macie2ClassificationJobS3JobDefinitionBucketDefinitionsToTerraform;
class Macie2ClassificationJobS3JobDefinitionBucketDefinitionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accountId !== undefined) {
            hasAnyValues = true;
            internalValueResult.accountId = this._accountId;
        }
        if (this._buckets !== undefined) {
            hasAnyValues = true;
            internalValueResult.buckets = this._buckets;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._accountId = undefined;
            this._buckets = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._accountId = value.accountId;
            this._buckets = value.buckets;
        }
    }
    get accountId() {
        return this.getStringAttribute('account_id');
    }
    set accountId(value) {
        this._accountId = value;
    }
    // Temporarily expose input value. Use with caution.
    get accountIdInput() {
        return this._accountId;
    }
    get buckets() {
        return this.getListAttribute('buckets');
    }
    set buckets(value) {
        this._buckets = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketsInput() {
        return this._buckets;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionBucketDefinitionsOutputReference = Macie2ClassificationJobS3JobDefinitionBucketDefinitionsOutputReference;
_t = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionBucketDefinitionsOutputReference[_t] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionBucketDefinitionsOutputReference", version: "10.0.12" };
class Macie2ClassificationJobS3JobDefinitionBucketDefinitionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Macie2ClassificationJobS3JobDefinitionBucketDefinitionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Macie2ClassificationJobS3JobDefinitionBucketDefinitionsList = Macie2ClassificationJobS3JobDefinitionBucketDefinitionsList;
_u = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionBucketDefinitionsList[_u] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionBucketDefinitionsList", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        comparator: cdktf.stringToTerraform(struct.comparator),
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.macie2ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermToTerraform = macie2ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermToTerraform;
class Macie2ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._comparator !== undefined) {
            hasAnyValues = true;
            internalValueResult.comparator = this._comparator;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._comparator = undefined;
            this._key = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._comparator = value.comparator;
            this._key = value.key;
            this._values = value.values;
        }
    }
    get comparator() {
        return this.getStringAttribute('comparator');
    }
    set comparator(value) {
        this._comparator = value;
    }
    resetComparator() {
        this._comparator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get comparatorInput() {
        return this._comparator;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get values() {
        return this.getListAttribute('values');
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutputReference = Macie2ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutputReference;
_v = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutputReference[_v] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutputReference", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValuesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValuesToTerraform = macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValuesToTerraform;
class Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValuesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._key = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._key = value.key;
            this._value = value.value;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    resetValue() {
        this._value = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValuesOutputReference = Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValuesOutputReference;
_w = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValuesOutputReference[_w] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValuesOutputReference", version: "10.0.12" };
class Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValuesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValuesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValuesList = Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValuesList;
_x = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValuesList[_x] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValuesList", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        comparator: cdktf.stringToTerraform(struct.comparator),
        key: cdktf.stringToTerraform(struct.key),
        target: cdktf.stringToTerraform(struct.target),
        tag_values: cdktf.listMapper(macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValuesToTerraform, true)(struct.tagValues),
    };
}
exports.macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermToTerraform = macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermToTerraform;
class Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // tag_values - computed: false, optional: true, required: false
        this._tagValues = new Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValuesList(this, "tag_values", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._comparator !== undefined) {
            hasAnyValues = true;
            internalValueResult.comparator = this._comparator;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._target !== undefined) {
            hasAnyValues = true;
            internalValueResult.target = this._target;
        }
        if (this._tagValues?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagValues = this._tagValues?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._comparator = undefined;
            this._key = undefined;
            this._target = undefined;
            this._tagValues.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._comparator = value.comparator;
            this._key = value.key;
            this._target = value.target;
            this._tagValues.internalValue = value.tagValues;
        }
    }
    get comparator() {
        return this.getStringAttribute('comparator');
    }
    set comparator(value) {
        this._comparator = value;
    }
    resetComparator() {
        this._comparator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get comparatorInput() {
        return this._comparator;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get target() {
        return this.getStringAttribute('target');
    }
    set target(value) {
        this._target = value;
    }
    resetTarget() {
        this._target = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetInput() {
        return this._target;
    }
    get tagValues() {
        return this._tagValues;
    }
    putTagValues(value) {
        this._tagValues.internalValue = value;
    }
    resetTagValues() {
        this._tagValues.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagValuesInput() {
        return this._tagValues.internalValue;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutputReference = Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutputReference;
_y = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutputReference[_y] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutputReference", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionScopingExcludesAndToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        simple_scope_term: macie2ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermToTerraform(struct.simpleScopeTerm),
        tag_scope_term: macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermToTerraform(struct.tagScopeTerm),
    };
}
exports.macie2ClassificationJobS3JobDefinitionScopingExcludesAndToTerraform = macie2ClassificationJobS3JobDefinitionScopingExcludesAndToTerraform;
class Macie2ClassificationJobS3JobDefinitionScopingExcludesAndOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // simple_scope_term - computed: false, optional: true, required: false
        this._simpleScopeTerm = new Macie2ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutputReference(this, "simple_scope_term");
        // tag_scope_term - computed: false, optional: true, required: false
        this._tagScopeTerm = new Macie2ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutputReference(this, "tag_scope_term");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._simpleScopeTerm?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.simpleScopeTerm = this._simpleScopeTerm?.internalValue;
        }
        if (this._tagScopeTerm?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagScopeTerm = this._tagScopeTerm?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._simpleScopeTerm.internalValue = undefined;
            this._tagScopeTerm.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._simpleScopeTerm.internalValue = value.simpleScopeTerm;
            this._tagScopeTerm.internalValue = value.tagScopeTerm;
        }
    }
    get simpleScopeTerm() {
        return this._simpleScopeTerm;
    }
    putSimpleScopeTerm(value) {
        this._simpleScopeTerm.internalValue = value;
    }
    resetSimpleScopeTerm() {
        this._simpleScopeTerm.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get simpleScopeTermInput() {
        return this._simpleScopeTerm.internalValue;
    }
    get tagScopeTerm() {
        return this._tagScopeTerm;
    }
    putTagScopeTerm(value) {
        this._tagScopeTerm.internalValue = value;
    }
    resetTagScopeTerm() {
        this._tagScopeTerm.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagScopeTermInput() {
        return this._tagScopeTerm.internalValue;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionScopingExcludesAndOutputReference = Macie2ClassificationJobS3JobDefinitionScopingExcludesAndOutputReference;
_z = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionScopingExcludesAndOutputReference[_z] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionScopingExcludesAndOutputReference", version: "10.0.12" };
class Macie2ClassificationJobS3JobDefinitionScopingExcludesAndList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Macie2ClassificationJobS3JobDefinitionScopingExcludesAndOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Macie2ClassificationJobS3JobDefinitionScopingExcludesAndList = Macie2ClassificationJobS3JobDefinitionScopingExcludesAndList;
_0 = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionScopingExcludesAndList[_0] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionScopingExcludesAndList", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionScopingExcludesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        and: cdktf.listMapper(macie2ClassificationJobS3JobDefinitionScopingExcludesAndToTerraform, true)(struct.and),
    };
}
exports.macie2ClassificationJobS3JobDefinitionScopingExcludesToTerraform = macie2ClassificationJobS3JobDefinitionScopingExcludesToTerraform;
class Macie2ClassificationJobS3JobDefinitionScopingExcludesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // and - computed: false, optional: true, required: false
        this._and = new Macie2ClassificationJobS3JobDefinitionScopingExcludesAndList(this, "and", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._and?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.and = this._and?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._and.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._and.internalValue = value.and;
        }
    }
    get and() {
        return this._and;
    }
    putAnd(value) {
        this._and.internalValue = value;
    }
    resetAnd() {
        this._and.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get andInput() {
        return this._and.internalValue;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionScopingExcludesOutputReference = Macie2ClassificationJobS3JobDefinitionScopingExcludesOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionScopingExcludesOutputReference[_1] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionScopingExcludesOutputReference", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        comparator: cdktf.stringToTerraform(struct.comparator),
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.macie2ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermToTerraform = macie2ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermToTerraform;
class Macie2ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._comparator !== undefined) {
            hasAnyValues = true;
            internalValueResult.comparator = this._comparator;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._comparator = undefined;
            this._key = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._comparator = value.comparator;
            this._key = value.key;
            this._values = value.values;
        }
    }
    get comparator() {
        return this.getStringAttribute('comparator');
    }
    set comparator(value) {
        this._comparator = value;
    }
    resetComparator() {
        this._comparator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get comparatorInput() {
        return this._comparator;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get values() {
        return this.getListAttribute('values');
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutputReference = Macie2ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutputReference[_2] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutputReference", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValuesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValuesToTerraform = macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValuesToTerraform;
class Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValuesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._key = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._key = value.key;
            this._value = value.value;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    resetValue() {
        this._value = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValuesOutputReference = Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValuesOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValuesOutputReference[_3] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValuesOutputReference", version: "10.0.12" };
class Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValuesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValuesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValuesList = Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValuesList;
_4 = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValuesList[_4] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValuesList", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        comparator: cdktf.stringToTerraform(struct.comparator),
        key: cdktf.stringToTerraform(struct.key),
        target: cdktf.stringToTerraform(struct.target),
        tag_values: cdktf.listMapper(macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValuesToTerraform, true)(struct.tagValues),
    };
}
exports.macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermToTerraform = macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermToTerraform;
class Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // tag_values - computed: false, optional: true, required: false
        this._tagValues = new Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValuesList(this, "tag_values", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._comparator !== undefined) {
            hasAnyValues = true;
            internalValueResult.comparator = this._comparator;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._target !== undefined) {
            hasAnyValues = true;
            internalValueResult.target = this._target;
        }
        if (this._tagValues?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagValues = this._tagValues?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._comparator = undefined;
            this._key = undefined;
            this._target = undefined;
            this._tagValues.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._comparator = value.comparator;
            this._key = value.key;
            this._target = value.target;
            this._tagValues.internalValue = value.tagValues;
        }
    }
    get comparator() {
        return this.getStringAttribute('comparator');
    }
    set comparator(value) {
        this._comparator = value;
    }
    resetComparator() {
        this._comparator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get comparatorInput() {
        return this._comparator;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get target() {
        return this.getStringAttribute('target');
    }
    set target(value) {
        this._target = value;
    }
    resetTarget() {
        this._target = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetInput() {
        return this._target;
    }
    get tagValues() {
        return this._tagValues;
    }
    putTagValues(value) {
        this._tagValues.internalValue = value;
    }
    resetTagValues() {
        this._tagValues.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagValuesInput() {
        return this._tagValues.internalValue;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutputReference = Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutputReference[_5] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutputReference", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionScopingIncludesAndToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        simple_scope_term: macie2ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermToTerraform(struct.simpleScopeTerm),
        tag_scope_term: macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermToTerraform(struct.tagScopeTerm),
    };
}
exports.macie2ClassificationJobS3JobDefinitionScopingIncludesAndToTerraform = macie2ClassificationJobS3JobDefinitionScopingIncludesAndToTerraform;
class Macie2ClassificationJobS3JobDefinitionScopingIncludesAndOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // simple_scope_term - computed: false, optional: true, required: false
        this._simpleScopeTerm = new Macie2ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutputReference(this, "simple_scope_term");
        // tag_scope_term - computed: false, optional: true, required: false
        this._tagScopeTerm = new Macie2ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutputReference(this, "tag_scope_term");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._simpleScopeTerm?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.simpleScopeTerm = this._simpleScopeTerm?.internalValue;
        }
        if (this._tagScopeTerm?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagScopeTerm = this._tagScopeTerm?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._simpleScopeTerm.internalValue = undefined;
            this._tagScopeTerm.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._simpleScopeTerm.internalValue = value.simpleScopeTerm;
            this._tagScopeTerm.internalValue = value.tagScopeTerm;
        }
    }
    get simpleScopeTerm() {
        return this._simpleScopeTerm;
    }
    putSimpleScopeTerm(value) {
        this._simpleScopeTerm.internalValue = value;
    }
    resetSimpleScopeTerm() {
        this._simpleScopeTerm.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get simpleScopeTermInput() {
        return this._simpleScopeTerm.internalValue;
    }
    get tagScopeTerm() {
        return this._tagScopeTerm;
    }
    putTagScopeTerm(value) {
        this._tagScopeTerm.internalValue = value;
    }
    resetTagScopeTerm() {
        this._tagScopeTerm.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagScopeTermInput() {
        return this._tagScopeTerm.internalValue;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionScopingIncludesAndOutputReference = Macie2ClassificationJobS3JobDefinitionScopingIncludesAndOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionScopingIncludesAndOutputReference[_6] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionScopingIncludesAndOutputReference", version: "10.0.12" };
class Macie2ClassificationJobS3JobDefinitionScopingIncludesAndList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Macie2ClassificationJobS3JobDefinitionScopingIncludesAndOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Macie2ClassificationJobS3JobDefinitionScopingIncludesAndList = Macie2ClassificationJobS3JobDefinitionScopingIncludesAndList;
_7 = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionScopingIncludesAndList[_7] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionScopingIncludesAndList", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionScopingIncludesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        and: cdktf.listMapper(macie2ClassificationJobS3JobDefinitionScopingIncludesAndToTerraform, true)(struct.and),
    };
}
exports.macie2ClassificationJobS3JobDefinitionScopingIncludesToTerraform = macie2ClassificationJobS3JobDefinitionScopingIncludesToTerraform;
class Macie2ClassificationJobS3JobDefinitionScopingIncludesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // and - computed: false, optional: true, required: false
        this._and = new Macie2ClassificationJobS3JobDefinitionScopingIncludesAndList(this, "and", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._and?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.and = this._and?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._and.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._and.internalValue = value.and;
        }
    }
    get and() {
        return this._and;
    }
    putAnd(value) {
        this._and.internalValue = value;
    }
    resetAnd() {
        this._and.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get andInput() {
        return this._and.internalValue;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionScopingIncludesOutputReference = Macie2ClassificationJobS3JobDefinitionScopingIncludesOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionScopingIncludesOutputReference[_8] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionScopingIncludesOutputReference", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionScopingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        excludes: macie2ClassificationJobS3JobDefinitionScopingExcludesToTerraform(struct.excludes),
        includes: macie2ClassificationJobS3JobDefinitionScopingIncludesToTerraform(struct.includes),
    };
}
exports.macie2ClassificationJobS3JobDefinitionScopingToTerraform = macie2ClassificationJobS3JobDefinitionScopingToTerraform;
class Macie2ClassificationJobS3JobDefinitionScopingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // excludes - computed: false, optional: true, required: false
        this._excludes = new Macie2ClassificationJobS3JobDefinitionScopingExcludesOutputReference(this, "excludes");
        // includes - computed: false, optional: true, required: false
        this._includes = new Macie2ClassificationJobS3JobDefinitionScopingIncludesOutputReference(this, "includes");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._excludes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludes = this._excludes?.internalValue;
        }
        if (this._includes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.includes = this._includes?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._excludes.internalValue = undefined;
            this._includes.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._excludes.internalValue = value.excludes;
            this._includes.internalValue = value.includes;
        }
    }
    get excludes() {
        return this._excludes;
    }
    putExcludes(value) {
        this._excludes.internalValue = value;
    }
    resetExcludes() {
        this._excludes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludesInput() {
        return this._excludes.internalValue;
    }
    get includes() {
        return this._includes;
    }
    putIncludes(value) {
        this._includes.internalValue = value;
    }
    resetIncludes() {
        this._includes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includesInput() {
        return this._includes.internalValue;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionScopingOutputReference = Macie2ClassificationJobS3JobDefinitionScopingOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionScopingOutputReference[_9] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionScopingOutputReference", version: "10.0.12" };
function macie2ClassificationJobS3JobDefinitionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_criteria: macie2ClassificationJobS3JobDefinitionBucketCriteriaToTerraform(struct.bucketCriteria),
        bucket_definitions: cdktf.listMapper(macie2ClassificationJobS3JobDefinitionBucketDefinitionsToTerraform, true)(struct.bucketDefinitions),
        scoping: macie2ClassificationJobS3JobDefinitionScopingToTerraform(struct.scoping),
    };
}
exports.macie2ClassificationJobS3JobDefinitionToTerraform = macie2ClassificationJobS3JobDefinitionToTerraform;
class Macie2ClassificationJobS3JobDefinitionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // bucket_criteria - computed: false, optional: true, required: false
        this._bucketCriteria = new Macie2ClassificationJobS3JobDefinitionBucketCriteriaOutputReference(this, "bucket_criteria");
        // bucket_definitions - computed: false, optional: true, required: false
        this._bucketDefinitions = new Macie2ClassificationJobS3JobDefinitionBucketDefinitionsList(this, "bucket_definitions", false);
        // scoping - computed: false, optional: true, required: false
        this._scoping = new Macie2ClassificationJobS3JobDefinitionScopingOutputReference(this, "scoping");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketCriteria?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketCriteria = this._bucketCriteria?.internalValue;
        }
        if (this._bucketDefinitions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketDefinitions = this._bucketDefinitions?.internalValue;
        }
        if (this._scoping?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.scoping = this._scoping?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketCriteria.internalValue = undefined;
            this._bucketDefinitions.internalValue = undefined;
            this._scoping.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketCriteria.internalValue = value.bucketCriteria;
            this._bucketDefinitions.internalValue = value.bucketDefinitions;
            this._scoping.internalValue = value.scoping;
        }
    }
    get bucketCriteria() {
        return this._bucketCriteria;
    }
    putBucketCriteria(value) {
        this._bucketCriteria.internalValue = value;
    }
    resetBucketCriteria() {
        this._bucketCriteria.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketCriteriaInput() {
        return this._bucketCriteria.internalValue;
    }
    get bucketDefinitions() {
        return this._bucketDefinitions;
    }
    putBucketDefinitions(value) {
        this._bucketDefinitions.internalValue = value;
    }
    resetBucketDefinitions() {
        this._bucketDefinitions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketDefinitionsInput() {
        return this._bucketDefinitions.internalValue;
    }
    get scoping() {
        return this._scoping;
    }
    putScoping(value) {
        this._scoping.internalValue = value;
    }
    resetScoping() {
        this._scoping.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scopingInput() {
        return this._scoping.internalValue;
    }
}
exports.Macie2ClassificationJobS3JobDefinitionOutputReference = Macie2ClassificationJobS3JobDefinitionOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobS3JobDefinitionOutputReference[_10] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobS3JobDefinitionOutputReference", version: "10.0.12" };
function macie2ClassificationJobScheduleFrequencyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        daily_schedule: cdktf.booleanToTerraform(struct.dailySchedule),
        monthly_schedule: cdktf.numberToTerraform(struct.monthlySchedule),
        weekly_schedule: cdktf.stringToTerraform(struct.weeklySchedule),
    };
}
exports.macie2ClassificationJobScheduleFrequencyToTerraform = macie2ClassificationJobScheduleFrequencyToTerraform;
class Macie2ClassificationJobScheduleFrequencyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dailySchedule !== undefined) {
            hasAnyValues = true;
            internalValueResult.dailySchedule = this._dailySchedule;
        }
        if (this._monthlySchedule !== undefined) {
            hasAnyValues = true;
            internalValueResult.monthlySchedule = this._monthlySchedule;
        }
        if (this._weeklySchedule !== undefined) {
            hasAnyValues = true;
            internalValueResult.weeklySchedule = this._weeklySchedule;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dailySchedule = undefined;
            this._monthlySchedule = undefined;
            this._weeklySchedule = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dailySchedule = value.dailySchedule;
            this._monthlySchedule = value.monthlySchedule;
            this._weeklySchedule = value.weeklySchedule;
        }
    }
    get dailySchedule() {
        return this.getBooleanAttribute('daily_schedule');
    }
    set dailySchedule(value) {
        this._dailySchedule = value;
    }
    resetDailySchedule() {
        this._dailySchedule = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dailyScheduleInput() {
        return this._dailySchedule;
    }
    get monthlySchedule() {
        return this.getNumberAttribute('monthly_schedule');
    }
    set monthlySchedule(value) {
        this._monthlySchedule = value;
    }
    resetMonthlySchedule() {
        this._monthlySchedule = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monthlyScheduleInput() {
        return this._monthlySchedule;
    }
    get weeklySchedule() {
        return this.getStringAttribute('weekly_schedule');
    }
    set weeklySchedule(value) {
        this._weeklySchedule = value;
    }
    resetWeeklySchedule() {
        this._weeklySchedule = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weeklyScheduleInput() {
        return this._weeklySchedule;
    }
}
exports.Macie2ClassificationJobScheduleFrequencyOutputReference = Macie2ClassificationJobScheduleFrequencyOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJobScheduleFrequencyOutputReference[_11] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJobScheduleFrequencyOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/macie2_classification_job aws_macie2_classification_job}
*/
class Macie2ClassificationJob extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/macie2_classification_job aws_macie2_classification_job} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Macie2ClassificationJobConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_macie2_classification_job',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // user_paused_details - computed: true, optional: false, required: false
        this._userPausedDetails = new Macie2ClassificationJobUserPausedDetailsList(this, "user_paused_details", false);
        // s3_job_definition - computed: false, optional: false, required: true
        this._s3JobDefinition = new Macie2ClassificationJobS3JobDefinitionOutputReference(this, "s3_job_definition");
        // schedule_frequency - computed: false, optional: true, required: false
        this._scheduleFrequency = new Macie2ClassificationJobScheduleFrequencyOutputReference(this, "schedule_frequency");
        this._customDataIdentifierIds = config.customDataIdentifierIds;
        this._description = config.description;
        this._id = config.id;
        this._initialRun = config.initialRun;
        this._jobStatus = config.jobStatus;
        this._jobType = config.jobType;
        this._name = config.name;
        this._namePrefix = config.namePrefix;
        this._samplingPercentage = config.samplingPercentage;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._s3JobDefinition.internalValue = config.s3JobDefinition;
        this._scheduleFrequency.internalValue = config.scheduleFrequency;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // created_at - computed: true, optional: false, required: false
    get createdAt() {
        return this.getStringAttribute('created_at');
    }
    get customDataIdentifierIds() {
        return this.getListAttribute('custom_data_identifier_ids');
    }
    set customDataIdentifierIds(value) {
        this._customDataIdentifierIds = value;
    }
    resetCustomDataIdentifierIds() {
        this._customDataIdentifierIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customDataIdentifierIdsInput() {
        return this._customDataIdentifierIds;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get initialRun() {
        return this.getBooleanAttribute('initial_run');
    }
    set initialRun(value) {
        this._initialRun = value;
    }
    resetInitialRun() {
        this._initialRun = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get initialRunInput() {
        return this._initialRun;
    }
    // job_arn - computed: true, optional: false, required: false
    get jobArn() {
        return this.getStringAttribute('job_arn');
    }
    // job_id - computed: true, optional: false, required: false
    get jobId() {
        return this.getStringAttribute('job_id');
    }
    get jobStatus() {
        return this.getStringAttribute('job_status');
    }
    set jobStatus(value) {
        this._jobStatus = value;
    }
    resetJobStatus() {
        this._jobStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jobStatusInput() {
        return this._jobStatus;
    }
    get jobType() {
        return this.getStringAttribute('job_type');
    }
    set jobType(value) {
        this._jobType = value;
    }
    // Temporarily expose input value. Use with caution.
    get jobTypeInput() {
        return this._jobType;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get namePrefix() {
        return this.getStringAttribute('name_prefix');
    }
    set namePrefix(value) {
        this._namePrefix = value;
    }
    resetNamePrefix() {
        this._namePrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get namePrefixInput() {
        return this._namePrefix;
    }
    get samplingPercentage() {
        return this.getNumberAttribute('sampling_percentage');
    }
    set samplingPercentage(value) {
        this._samplingPercentage = value;
    }
    resetSamplingPercentage() {
        this._samplingPercentage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get samplingPercentageInput() {
        return this._samplingPercentage;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get userPausedDetails() {
        return this._userPausedDetails;
    }
    get s3JobDefinition() {
        return this._s3JobDefinition;
    }
    putS3JobDefinition(value) {
        this._s3JobDefinition.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3JobDefinitionInput() {
        return this._s3JobDefinition.internalValue;
    }
    get scheduleFrequency() {
        return this._scheduleFrequency;
    }
    putScheduleFrequency(value) {
        this._scheduleFrequency.internalValue = value;
    }
    resetScheduleFrequency() {
        this._scheduleFrequency.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleFrequencyInput() {
        return this._scheduleFrequency.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            custom_data_identifier_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._customDataIdentifierIds),
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            initial_run: cdktf.booleanToTerraform(this._initialRun),
            job_status: cdktf.stringToTerraform(this._jobStatus),
            job_type: cdktf.stringToTerraform(this._jobType),
            name: cdktf.stringToTerraform(this._name),
            name_prefix: cdktf.stringToTerraform(this._namePrefix),
            sampling_percentage: cdktf.numberToTerraform(this._samplingPercentage),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            s3_job_definition: macie2ClassificationJobS3JobDefinitionToTerraform(this._s3JobDefinition.internalValue),
            schedule_frequency: macie2ClassificationJobScheduleFrequencyToTerraform(this._scheduleFrequency.internalValue),
        };
    }
}
exports.Macie2ClassificationJob = Macie2ClassificationJob;
_12 = JSII_RTTI_SYMBOL_1;
Macie2ClassificationJob[_12] = { fqn: "@cdktf/provider-aws.macie2ClassificationJob.Macie2ClassificationJob", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
Macie2ClassificationJob.tfResourceType = "aws_macie2_classification_job";
//# sourceMappingURL=data:application/json;base64,