"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmrInstanceFleet = exports.EmrInstanceFleetLaunchSpecificationsOutputReference = exports.emrInstanceFleetLaunchSpecificationsToTerraform = exports.EmrInstanceFleetLaunchSpecificationsSpotSpecificationList = exports.EmrInstanceFleetLaunchSpecificationsSpotSpecificationOutputReference = exports.emrInstanceFleetLaunchSpecificationsSpotSpecificationToTerraform = exports.EmrInstanceFleetLaunchSpecificationsOnDemandSpecificationList = exports.EmrInstanceFleetLaunchSpecificationsOnDemandSpecificationOutputReference = exports.emrInstanceFleetLaunchSpecificationsOnDemandSpecificationToTerraform = exports.EmrInstanceFleetInstanceTypeConfigsList = exports.EmrInstanceFleetInstanceTypeConfigsOutputReference = exports.emrInstanceFleetInstanceTypeConfigsToTerraform = exports.EmrInstanceFleetInstanceTypeConfigsEbsConfigList = exports.EmrInstanceFleetInstanceTypeConfigsEbsConfigOutputReference = exports.emrInstanceFleetInstanceTypeConfigsEbsConfigToTerraform = exports.EmrInstanceFleetInstanceTypeConfigsConfigurationsList = exports.EmrInstanceFleetInstanceTypeConfigsConfigurationsOutputReference = exports.emrInstanceFleetInstanceTypeConfigsConfigurationsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function emrInstanceFleetInstanceTypeConfigsConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        classification: cdktf.stringToTerraform(struct.classification),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
    };
}
exports.emrInstanceFleetInstanceTypeConfigsConfigurationsToTerraform = emrInstanceFleetInstanceTypeConfigsConfigurationsToTerraform;
class EmrInstanceFleetInstanceTypeConfigsConfigurationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._classification !== undefined) {
            hasAnyValues = true;
            internalValueResult.classification = this._classification;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._classification = undefined;
            this._properties = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._classification = value.classification;
            this._properties = value.properties;
        }
    }
    get classification() {
        return this.getStringAttribute('classification');
    }
    set classification(value) {
        this._classification = value;
    }
    resetClassification() {
        this._classification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get classificationInput() {
        return this._classification;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
}
exports.EmrInstanceFleetInstanceTypeConfigsConfigurationsOutputReference = EmrInstanceFleetInstanceTypeConfigsConfigurationsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
EmrInstanceFleetInstanceTypeConfigsConfigurationsOutputReference[_a] = { fqn: "@cdktf/provider-aws.emrInstanceFleet.EmrInstanceFleetInstanceTypeConfigsConfigurationsOutputReference", version: "10.0.12" };
class EmrInstanceFleetInstanceTypeConfigsConfigurationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new EmrInstanceFleetInstanceTypeConfigsConfigurationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.EmrInstanceFleetInstanceTypeConfigsConfigurationsList = EmrInstanceFleetInstanceTypeConfigsConfigurationsList;
_b = JSII_RTTI_SYMBOL_1;
EmrInstanceFleetInstanceTypeConfigsConfigurationsList[_b] = { fqn: "@cdktf/provider-aws.emrInstanceFleet.EmrInstanceFleetInstanceTypeConfigsConfigurationsList", version: "10.0.12" };
function emrInstanceFleetInstanceTypeConfigsEbsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        iops: cdktf.numberToTerraform(struct.iops),
        size: cdktf.numberToTerraform(struct.size),
        type: cdktf.stringToTerraform(struct.type),
        volumes_per_instance: cdktf.numberToTerraform(struct.volumesPerInstance),
    };
}
exports.emrInstanceFleetInstanceTypeConfigsEbsConfigToTerraform = emrInstanceFleetInstanceTypeConfigsEbsConfigToTerraform;
class EmrInstanceFleetInstanceTypeConfigsEbsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._iops !== undefined) {
            hasAnyValues = true;
            internalValueResult.iops = this._iops;
        }
        if (this._size !== undefined) {
            hasAnyValues = true;
            internalValueResult.size = this._size;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._volumesPerInstance !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumesPerInstance = this._volumesPerInstance;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._iops = undefined;
            this._size = undefined;
            this._type = undefined;
            this._volumesPerInstance = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._iops = value.iops;
            this._size = value.size;
            this._type = value.type;
            this._volumesPerInstance = value.volumesPerInstance;
        }
    }
    get iops() {
        return this.getNumberAttribute('iops');
    }
    set iops(value) {
        this._iops = value;
    }
    resetIops() {
        this._iops = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iopsInput() {
        return this._iops;
    }
    get size() {
        return this.getNumberAttribute('size');
    }
    set size(value) {
        this._size = value;
    }
    // Temporarily expose input value. Use with caution.
    get sizeInput() {
        return this._size;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get volumesPerInstance() {
        return this.getNumberAttribute('volumes_per_instance');
    }
    set volumesPerInstance(value) {
        this._volumesPerInstance = value;
    }
    resetVolumesPerInstance() {
        this._volumesPerInstance = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumesPerInstanceInput() {
        return this._volumesPerInstance;
    }
}
exports.EmrInstanceFleetInstanceTypeConfigsEbsConfigOutputReference = EmrInstanceFleetInstanceTypeConfigsEbsConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
EmrInstanceFleetInstanceTypeConfigsEbsConfigOutputReference[_c] = { fqn: "@cdktf/provider-aws.emrInstanceFleet.EmrInstanceFleetInstanceTypeConfigsEbsConfigOutputReference", version: "10.0.12" };
class EmrInstanceFleetInstanceTypeConfigsEbsConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new EmrInstanceFleetInstanceTypeConfigsEbsConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.EmrInstanceFleetInstanceTypeConfigsEbsConfigList = EmrInstanceFleetInstanceTypeConfigsEbsConfigList;
_d = JSII_RTTI_SYMBOL_1;
EmrInstanceFleetInstanceTypeConfigsEbsConfigList[_d] = { fqn: "@cdktf/provider-aws.emrInstanceFleet.EmrInstanceFleetInstanceTypeConfigsEbsConfigList", version: "10.0.12" };
function emrInstanceFleetInstanceTypeConfigsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bid_price: cdktf.stringToTerraform(struct.bidPrice),
        bid_price_as_percentage_of_on_demand_price: cdktf.numberToTerraform(struct.bidPriceAsPercentageOfOnDemandPrice),
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        weighted_capacity: cdktf.numberToTerraform(struct.weightedCapacity),
        configurations: cdktf.listMapper(emrInstanceFleetInstanceTypeConfigsConfigurationsToTerraform, true)(struct.configurations),
        ebs_config: cdktf.listMapper(emrInstanceFleetInstanceTypeConfigsEbsConfigToTerraform, true)(struct.ebsConfig),
    };
}
exports.emrInstanceFleetInstanceTypeConfigsToTerraform = emrInstanceFleetInstanceTypeConfigsToTerraform;
class EmrInstanceFleetInstanceTypeConfigsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // configurations - computed: false, optional: true, required: false
        this._configurations = new EmrInstanceFleetInstanceTypeConfigsConfigurationsList(this, "configurations", true);
        // ebs_config - computed: false, optional: true, required: false
        this._ebsConfig = new EmrInstanceFleetInstanceTypeConfigsEbsConfigList(this, "ebs_config", true);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bidPrice !== undefined) {
            hasAnyValues = true;
            internalValueResult.bidPrice = this._bidPrice;
        }
        if (this._bidPriceAsPercentageOfOnDemandPrice !== undefined) {
            hasAnyValues = true;
            internalValueResult.bidPriceAsPercentageOfOnDemandPrice = this._bidPriceAsPercentageOfOnDemandPrice;
        }
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._weightedCapacity !== undefined) {
            hasAnyValues = true;
            internalValueResult.weightedCapacity = this._weightedCapacity;
        }
        if (this._configurations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.configurations = this._configurations?.internalValue;
        }
        if (this._ebsConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebsConfig = this._ebsConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._bidPrice = undefined;
            this._bidPriceAsPercentageOfOnDemandPrice = undefined;
            this._instanceType = undefined;
            this._weightedCapacity = undefined;
            this._configurations.internalValue = undefined;
            this._ebsConfig.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._bidPrice = value.bidPrice;
            this._bidPriceAsPercentageOfOnDemandPrice = value.bidPriceAsPercentageOfOnDemandPrice;
            this._instanceType = value.instanceType;
            this._weightedCapacity = value.weightedCapacity;
            this._configurations.internalValue = value.configurations;
            this._ebsConfig.internalValue = value.ebsConfig;
        }
    }
    get bidPrice() {
        return this.getStringAttribute('bid_price');
    }
    set bidPrice(value) {
        this._bidPrice = value;
    }
    resetBidPrice() {
        this._bidPrice = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bidPriceInput() {
        return this._bidPrice;
    }
    get bidPriceAsPercentageOfOnDemandPrice() {
        return this.getNumberAttribute('bid_price_as_percentage_of_on_demand_price');
    }
    set bidPriceAsPercentageOfOnDemandPrice(value) {
        this._bidPriceAsPercentageOfOnDemandPrice = value;
    }
    resetBidPriceAsPercentageOfOnDemandPrice() {
        this._bidPriceAsPercentageOfOnDemandPrice = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bidPriceAsPercentageOfOnDemandPriceInput() {
        return this._bidPriceAsPercentageOfOnDemandPrice;
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get weightedCapacity() {
        return this.getNumberAttribute('weighted_capacity');
    }
    set weightedCapacity(value) {
        this._weightedCapacity = value;
    }
    resetWeightedCapacity() {
        this._weightedCapacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weightedCapacityInput() {
        return this._weightedCapacity;
    }
    get configurations() {
        return this._configurations;
    }
    putConfigurations(value) {
        this._configurations.internalValue = value;
    }
    resetConfigurations() {
        this._configurations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configurationsInput() {
        return this._configurations.internalValue;
    }
    get ebsConfig() {
        return this._ebsConfig;
    }
    putEbsConfig(value) {
        this._ebsConfig.internalValue = value;
    }
    resetEbsConfig() {
        this._ebsConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebsConfigInput() {
        return this._ebsConfig.internalValue;
    }
}
exports.EmrInstanceFleetInstanceTypeConfigsOutputReference = EmrInstanceFleetInstanceTypeConfigsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
EmrInstanceFleetInstanceTypeConfigsOutputReference[_e] = { fqn: "@cdktf/provider-aws.emrInstanceFleet.EmrInstanceFleetInstanceTypeConfigsOutputReference", version: "10.0.12" };
class EmrInstanceFleetInstanceTypeConfigsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new EmrInstanceFleetInstanceTypeConfigsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.EmrInstanceFleetInstanceTypeConfigsList = EmrInstanceFleetInstanceTypeConfigsList;
_f = JSII_RTTI_SYMBOL_1;
EmrInstanceFleetInstanceTypeConfigsList[_f] = { fqn: "@cdktf/provider-aws.emrInstanceFleet.EmrInstanceFleetInstanceTypeConfigsList", version: "10.0.12" };
function emrInstanceFleetLaunchSpecificationsOnDemandSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allocation_strategy: cdktf.stringToTerraform(struct.allocationStrategy),
    };
}
exports.emrInstanceFleetLaunchSpecificationsOnDemandSpecificationToTerraform = emrInstanceFleetLaunchSpecificationsOnDemandSpecificationToTerraform;
class EmrInstanceFleetLaunchSpecificationsOnDemandSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allocationStrategy !== undefined) {
            hasAnyValues = true;
            internalValueResult.allocationStrategy = this._allocationStrategy;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._allocationStrategy = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._allocationStrategy = value.allocationStrategy;
        }
    }
    get allocationStrategy() {
        return this.getStringAttribute('allocation_strategy');
    }
    set allocationStrategy(value) {
        this._allocationStrategy = value;
    }
    // Temporarily expose input value. Use with caution.
    get allocationStrategyInput() {
        return this._allocationStrategy;
    }
}
exports.EmrInstanceFleetLaunchSpecificationsOnDemandSpecificationOutputReference = EmrInstanceFleetLaunchSpecificationsOnDemandSpecificationOutputReference;
_g = JSII_RTTI_SYMBOL_1;
EmrInstanceFleetLaunchSpecificationsOnDemandSpecificationOutputReference[_g] = { fqn: "@cdktf/provider-aws.emrInstanceFleet.EmrInstanceFleetLaunchSpecificationsOnDemandSpecificationOutputReference", version: "10.0.12" };
class EmrInstanceFleetLaunchSpecificationsOnDemandSpecificationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new EmrInstanceFleetLaunchSpecificationsOnDemandSpecificationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.EmrInstanceFleetLaunchSpecificationsOnDemandSpecificationList = EmrInstanceFleetLaunchSpecificationsOnDemandSpecificationList;
_h = JSII_RTTI_SYMBOL_1;
EmrInstanceFleetLaunchSpecificationsOnDemandSpecificationList[_h] = { fqn: "@cdktf/provider-aws.emrInstanceFleet.EmrInstanceFleetLaunchSpecificationsOnDemandSpecificationList", version: "10.0.12" };
function emrInstanceFleetLaunchSpecificationsSpotSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allocation_strategy: cdktf.stringToTerraform(struct.allocationStrategy),
        block_duration_minutes: cdktf.numberToTerraform(struct.blockDurationMinutes),
        timeout_action: cdktf.stringToTerraform(struct.timeoutAction),
        timeout_duration_minutes: cdktf.numberToTerraform(struct.timeoutDurationMinutes),
    };
}
exports.emrInstanceFleetLaunchSpecificationsSpotSpecificationToTerraform = emrInstanceFleetLaunchSpecificationsSpotSpecificationToTerraform;
class EmrInstanceFleetLaunchSpecificationsSpotSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allocationStrategy !== undefined) {
            hasAnyValues = true;
            internalValueResult.allocationStrategy = this._allocationStrategy;
        }
        if (this._blockDurationMinutes !== undefined) {
            hasAnyValues = true;
            internalValueResult.blockDurationMinutes = this._blockDurationMinutes;
        }
        if (this._timeoutAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeoutAction = this._timeoutAction;
        }
        if (this._timeoutDurationMinutes !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeoutDurationMinutes = this._timeoutDurationMinutes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._allocationStrategy = undefined;
            this._blockDurationMinutes = undefined;
            this._timeoutAction = undefined;
            this._timeoutDurationMinutes = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._allocationStrategy = value.allocationStrategy;
            this._blockDurationMinutes = value.blockDurationMinutes;
            this._timeoutAction = value.timeoutAction;
            this._timeoutDurationMinutes = value.timeoutDurationMinutes;
        }
    }
    get allocationStrategy() {
        return this.getStringAttribute('allocation_strategy');
    }
    set allocationStrategy(value) {
        this._allocationStrategy = value;
    }
    // Temporarily expose input value. Use with caution.
    get allocationStrategyInput() {
        return this._allocationStrategy;
    }
    get blockDurationMinutes() {
        return this.getNumberAttribute('block_duration_minutes');
    }
    set blockDurationMinutes(value) {
        this._blockDurationMinutes = value;
    }
    resetBlockDurationMinutes() {
        this._blockDurationMinutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get blockDurationMinutesInput() {
        return this._blockDurationMinutes;
    }
    get timeoutAction() {
        return this.getStringAttribute('timeout_action');
    }
    set timeoutAction(value) {
        this._timeoutAction = value;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutActionInput() {
        return this._timeoutAction;
    }
    get timeoutDurationMinutes() {
        return this.getNumberAttribute('timeout_duration_minutes');
    }
    set timeoutDurationMinutes(value) {
        this._timeoutDurationMinutes = value;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutDurationMinutesInput() {
        return this._timeoutDurationMinutes;
    }
}
exports.EmrInstanceFleetLaunchSpecificationsSpotSpecificationOutputReference = EmrInstanceFleetLaunchSpecificationsSpotSpecificationOutputReference;
_j = JSII_RTTI_SYMBOL_1;
EmrInstanceFleetLaunchSpecificationsSpotSpecificationOutputReference[_j] = { fqn: "@cdktf/provider-aws.emrInstanceFleet.EmrInstanceFleetLaunchSpecificationsSpotSpecificationOutputReference", version: "10.0.12" };
class EmrInstanceFleetLaunchSpecificationsSpotSpecificationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new EmrInstanceFleetLaunchSpecificationsSpotSpecificationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.EmrInstanceFleetLaunchSpecificationsSpotSpecificationList = EmrInstanceFleetLaunchSpecificationsSpotSpecificationList;
_k = JSII_RTTI_SYMBOL_1;
EmrInstanceFleetLaunchSpecificationsSpotSpecificationList[_k] = { fqn: "@cdktf/provider-aws.emrInstanceFleet.EmrInstanceFleetLaunchSpecificationsSpotSpecificationList", version: "10.0.12" };
function emrInstanceFleetLaunchSpecificationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        on_demand_specification: cdktf.listMapper(emrInstanceFleetLaunchSpecificationsOnDemandSpecificationToTerraform, true)(struct.onDemandSpecification),
        spot_specification: cdktf.listMapper(emrInstanceFleetLaunchSpecificationsSpotSpecificationToTerraform, true)(struct.spotSpecification),
    };
}
exports.emrInstanceFleetLaunchSpecificationsToTerraform = emrInstanceFleetLaunchSpecificationsToTerraform;
class EmrInstanceFleetLaunchSpecificationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // on_demand_specification - computed: false, optional: true, required: false
        this._onDemandSpecification = new EmrInstanceFleetLaunchSpecificationsOnDemandSpecificationList(this, "on_demand_specification", false);
        // spot_specification - computed: false, optional: true, required: false
        this._spotSpecification = new EmrInstanceFleetLaunchSpecificationsSpotSpecificationList(this, "spot_specification", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._onDemandSpecification?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.onDemandSpecification = this._onDemandSpecification?.internalValue;
        }
        if (this._spotSpecification?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.spotSpecification = this._spotSpecification?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._onDemandSpecification.internalValue = undefined;
            this._spotSpecification.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._onDemandSpecification.internalValue = value.onDemandSpecification;
            this._spotSpecification.internalValue = value.spotSpecification;
        }
    }
    get onDemandSpecification() {
        return this._onDemandSpecification;
    }
    putOnDemandSpecification(value) {
        this._onDemandSpecification.internalValue = value;
    }
    resetOnDemandSpecification() {
        this._onDemandSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onDemandSpecificationInput() {
        return this._onDemandSpecification.internalValue;
    }
    get spotSpecification() {
        return this._spotSpecification;
    }
    putSpotSpecification(value) {
        this._spotSpecification.internalValue = value;
    }
    resetSpotSpecification() {
        this._spotSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spotSpecificationInput() {
        return this._spotSpecification.internalValue;
    }
}
exports.EmrInstanceFleetLaunchSpecificationsOutputReference = EmrInstanceFleetLaunchSpecificationsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
EmrInstanceFleetLaunchSpecificationsOutputReference[_l] = { fqn: "@cdktf/provider-aws.emrInstanceFleet.EmrInstanceFleetLaunchSpecificationsOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/emr_instance_fleet aws_emr_instance_fleet}
*/
class EmrInstanceFleet extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/emr_instance_fleet aws_emr_instance_fleet} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options EmrInstanceFleetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_emr_instance_fleet',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // instance_type_configs - computed: false, optional: true, required: false
        this._instanceTypeConfigs = new EmrInstanceFleetInstanceTypeConfigsList(this, "instance_type_configs", true);
        // launch_specifications - computed: false, optional: true, required: false
        this._launchSpecifications = new EmrInstanceFleetLaunchSpecificationsOutputReference(this, "launch_specifications");
        this._clusterId = config.clusterId;
        this._id = config.id;
        this._name = config.name;
        this._targetOnDemandCapacity = config.targetOnDemandCapacity;
        this._targetSpotCapacity = config.targetSpotCapacity;
        this._instanceTypeConfigs.internalValue = config.instanceTypeConfigs;
        this._launchSpecifications.internalValue = config.launchSpecifications;
    }
    get clusterId() {
        return this.getStringAttribute('cluster_id');
    }
    set clusterId(value) {
        this._clusterId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterIdInput() {
        return this._clusterId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // provisioned_on_demand_capacity - computed: true, optional: false, required: false
    get provisionedOnDemandCapacity() {
        return this.getNumberAttribute('provisioned_on_demand_capacity');
    }
    // provisioned_spot_capacity - computed: true, optional: false, required: false
    get provisionedSpotCapacity() {
        return this.getNumberAttribute('provisioned_spot_capacity');
    }
    get targetOnDemandCapacity() {
        return this.getNumberAttribute('target_on_demand_capacity');
    }
    set targetOnDemandCapacity(value) {
        this._targetOnDemandCapacity = value;
    }
    resetTargetOnDemandCapacity() {
        this._targetOnDemandCapacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetOnDemandCapacityInput() {
        return this._targetOnDemandCapacity;
    }
    get targetSpotCapacity() {
        return this.getNumberAttribute('target_spot_capacity');
    }
    set targetSpotCapacity(value) {
        this._targetSpotCapacity = value;
    }
    resetTargetSpotCapacity() {
        this._targetSpotCapacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetSpotCapacityInput() {
        return this._targetSpotCapacity;
    }
    get instanceTypeConfigs() {
        return this._instanceTypeConfigs;
    }
    putInstanceTypeConfigs(value) {
        this._instanceTypeConfigs.internalValue = value;
    }
    resetInstanceTypeConfigs() {
        this._instanceTypeConfigs.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeConfigsInput() {
        return this._instanceTypeConfigs.internalValue;
    }
    get launchSpecifications() {
        return this._launchSpecifications;
    }
    putLaunchSpecifications(value) {
        this._launchSpecifications.internalValue = value;
    }
    resetLaunchSpecifications() {
        this._launchSpecifications.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get launchSpecificationsInput() {
        return this._launchSpecifications.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cluster_id: cdktf.stringToTerraform(this._clusterId),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            target_on_demand_capacity: cdktf.numberToTerraform(this._targetOnDemandCapacity),
            target_spot_capacity: cdktf.numberToTerraform(this._targetSpotCapacity),
            instance_type_configs: cdktf.listMapper(emrInstanceFleetInstanceTypeConfigsToTerraform, true)(this._instanceTypeConfigs.internalValue),
            launch_specifications: emrInstanceFleetLaunchSpecificationsToTerraform(this._launchSpecifications.internalValue),
        };
    }
}
exports.EmrInstanceFleet = EmrInstanceFleet;
_m = JSII_RTTI_SYMBOL_1;
EmrInstanceFleet[_m] = { fqn: "@cdktf/provider-aws.emrInstanceFleet.EmrInstanceFleet", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
EmrInstanceFleet.tfResourceType = "aws_emr_instance_fleet";
//# sourceMappingURL=data:application/json;base64,