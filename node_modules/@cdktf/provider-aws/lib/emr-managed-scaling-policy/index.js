"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmrManagedScalingPolicy = exports.EmrManagedScalingPolicyComputeLimitsList = exports.EmrManagedScalingPolicyComputeLimitsOutputReference = exports.emrManagedScalingPolicyComputeLimitsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function emrManagedScalingPolicyComputeLimitsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        maximum_capacity_units: cdktf.numberToTerraform(struct.maximumCapacityUnits),
        maximum_core_capacity_units: cdktf.numberToTerraform(struct.maximumCoreCapacityUnits),
        maximum_ondemand_capacity_units: cdktf.numberToTerraform(struct.maximumOndemandCapacityUnits),
        minimum_capacity_units: cdktf.numberToTerraform(struct.minimumCapacityUnits),
        unit_type: cdktf.stringToTerraform(struct.unitType),
    };
}
exports.emrManagedScalingPolicyComputeLimitsToTerraform = emrManagedScalingPolicyComputeLimitsToTerraform;
class EmrManagedScalingPolicyComputeLimitsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maximumCapacityUnits !== undefined) {
            hasAnyValues = true;
            internalValueResult.maximumCapacityUnits = this._maximumCapacityUnits;
        }
        if (this._maximumCoreCapacityUnits !== undefined) {
            hasAnyValues = true;
            internalValueResult.maximumCoreCapacityUnits = this._maximumCoreCapacityUnits;
        }
        if (this._maximumOndemandCapacityUnits !== undefined) {
            hasAnyValues = true;
            internalValueResult.maximumOndemandCapacityUnits = this._maximumOndemandCapacityUnits;
        }
        if (this._minimumCapacityUnits !== undefined) {
            hasAnyValues = true;
            internalValueResult.minimumCapacityUnits = this._minimumCapacityUnits;
        }
        if (this._unitType !== undefined) {
            hasAnyValues = true;
            internalValueResult.unitType = this._unitType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._maximumCapacityUnits = undefined;
            this._maximumCoreCapacityUnits = undefined;
            this._maximumOndemandCapacityUnits = undefined;
            this._minimumCapacityUnits = undefined;
            this._unitType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._maximumCapacityUnits = value.maximumCapacityUnits;
            this._maximumCoreCapacityUnits = value.maximumCoreCapacityUnits;
            this._maximumOndemandCapacityUnits = value.maximumOndemandCapacityUnits;
            this._minimumCapacityUnits = value.minimumCapacityUnits;
            this._unitType = value.unitType;
        }
    }
    get maximumCapacityUnits() {
        return this.getNumberAttribute('maximum_capacity_units');
    }
    set maximumCapacityUnits(value) {
        this._maximumCapacityUnits = value;
    }
    // Temporarily expose input value. Use with caution.
    get maximumCapacityUnitsInput() {
        return this._maximumCapacityUnits;
    }
    get maximumCoreCapacityUnits() {
        return this.getNumberAttribute('maximum_core_capacity_units');
    }
    set maximumCoreCapacityUnits(value) {
        this._maximumCoreCapacityUnits = value;
    }
    resetMaximumCoreCapacityUnits() {
        this._maximumCoreCapacityUnits = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maximumCoreCapacityUnitsInput() {
        return this._maximumCoreCapacityUnits;
    }
    get maximumOndemandCapacityUnits() {
        return this.getNumberAttribute('maximum_ondemand_capacity_units');
    }
    set maximumOndemandCapacityUnits(value) {
        this._maximumOndemandCapacityUnits = value;
    }
    resetMaximumOndemandCapacityUnits() {
        this._maximumOndemandCapacityUnits = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maximumOndemandCapacityUnitsInput() {
        return this._maximumOndemandCapacityUnits;
    }
    get minimumCapacityUnits() {
        return this.getNumberAttribute('minimum_capacity_units');
    }
    set minimumCapacityUnits(value) {
        this._minimumCapacityUnits = value;
    }
    // Temporarily expose input value. Use with caution.
    get minimumCapacityUnitsInput() {
        return this._minimumCapacityUnits;
    }
    get unitType() {
        return this.getStringAttribute('unit_type');
    }
    set unitType(value) {
        this._unitType = value;
    }
    // Temporarily expose input value. Use with caution.
    get unitTypeInput() {
        return this._unitType;
    }
}
exports.EmrManagedScalingPolicyComputeLimitsOutputReference = EmrManagedScalingPolicyComputeLimitsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
EmrManagedScalingPolicyComputeLimitsOutputReference[_a] = { fqn: "@cdktf/provider-aws.emrManagedScalingPolicy.EmrManagedScalingPolicyComputeLimitsOutputReference", version: "10.0.12" };
class EmrManagedScalingPolicyComputeLimitsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new EmrManagedScalingPolicyComputeLimitsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.EmrManagedScalingPolicyComputeLimitsList = EmrManagedScalingPolicyComputeLimitsList;
_b = JSII_RTTI_SYMBOL_1;
EmrManagedScalingPolicyComputeLimitsList[_b] = { fqn: "@cdktf/provider-aws.emrManagedScalingPolicy.EmrManagedScalingPolicyComputeLimitsList", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/emr_managed_scaling_policy aws_emr_managed_scaling_policy}
*/
class EmrManagedScalingPolicy extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/emr_managed_scaling_policy aws_emr_managed_scaling_policy} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options EmrManagedScalingPolicyConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_emr_managed_scaling_policy',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // compute_limits - computed: false, optional: false, required: true
        this._computeLimits = new EmrManagedScalingPolicyComputeLimitsList(this, "compute_limits", true);
        this._clusterId = config.clusterId;
        this._id = config.id;
        this._computeLimits.internalValue = config.computeLimits;
    }
    get clusterId() {
        return this.getStringAttribute('cluster_id');
    }
    set clusterId(value) {
        this._clusterId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterIdInput() {
        return this._clusterId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get computeLimits() {
        return this._computeLimits;
    }
    putComputeLimits(value) {
        this._computeLimits.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get computeLimitsInput() {
        return this._computeLimits.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cluster_id: cdktf.stringToTerraform(this._clusterId),
            id: cdktf.stringToTerraform(this._id),
            compute_limits: cdktf.listMapper(emrManagedScalingPolicyComputeLimitsToTerraform, true)(this._computeLimits.internalValue),
        };
    }
}
exports.EmrManagedScalingPolicy = EmrManagedScalingPolicy;
_c = JSII_RTTI_SYMBOL_1;
EmrManagedScalingPolicy[_c] = { fqn: "@cdktf/provider-aws.emrManagedScalingPolicy.EmrManagedScalingPolicy", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
EmrManagedScalingPolicy.tfResourceType = "aws_emr_managed_scaling_policy";
//# sourceMappingURL=data:application/json;base64,