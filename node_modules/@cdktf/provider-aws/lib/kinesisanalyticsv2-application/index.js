"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Kinesisanalyticsv2Application = exports.Kinesisanalyticsv2ApplicationTimeoutsOutputReference = exports.kinesisanalyticsv2ApplicationTimeoutsToTerraform = exports.Kinesisanalyticsv2ApplicationCloudwatchLoggingOptionsOutputReference = exports.kinesisanalyticsv2ApplicationCloudwatchLoggingOptionsToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationVpcConfigurationOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationVpcConfigurationToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSourceOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSourceToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersJsonMappingParametersOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersJsonMappingParametersToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersCsvMappingParametersOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersCsvMappingParametersToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnList = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputList = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputLambdaOutputOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputLambdaOutputToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisStreamsOutputOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisStreamsOutputToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisFirehoseOutputOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisFirehoseOutputToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputDestinationSchemaOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputDestinationSchemaToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationList = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersJsonMappingParametersOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersJsonMappingParametersToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersCsvMappingParametersOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersCsvMappingParametersToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnList = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationInputLambdaProcessorOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationInputLambdaProcessorToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationFlinkRunConfigurationOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationFlinkRunConfigurationToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationApplicationRestoreConfigurationOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationApplicationRestoreConfigurationToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroupList = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroupOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroupToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationSnapshotConfigurationOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationApplicationSnapshotConfigurationToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentToTerraform = exports.Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentS3ContentLocationOutputReference = exports.kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentS3ContentLocationToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentS3ContentLocationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        file_key: cdktf.stringToTerraform(struct.fileKey),
        object_version: cdktf.stringToTerraform(struct.objectVersion),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentS3ContentLocationToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentS3ContentLocationToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentS3ContentLocationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketArn = this._bucketArn;
        }
        if (this._fileKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileKey = this._fileKey;
        }
        if (this._objectVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectVersion = this._objectVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketArn = undefined;
            this._fileKey = undefined;
            this._objectVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketArn = value.bucketArn;
            this._fileKey = value.fileKey;
            this._objectVersion = value.objectVersion;
        }
    }
    get bucketArn() {
        return this.getStringAttribute('bucket_arn');
    }
    set bucketArn(value) {
        this._bucketArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketArnInput() {
        return this._bucketArn;
    }
    get fileKey() {
        return this.getStringAttribute('file_key');
    }
    set fileKey(value) {
        this._fileKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get fileKeyInput() {
        return this._fileKey;
    }
    get objectVersion() {
        return this.getStringAttribute('object_version');
    }
    set objectVersion(value) {
        this._objectVersion = value;
    }
    resetObjectVersion() {
        this._objectVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get objectVersionInput() {
        return this._objectVersion;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentS3ContentLocationOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentS3ContentLocationOutputReference;
_a = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentS3ContentLocationOutputReference[_a] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentS3ContentLocationOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text_content: cdktf.stringToTerraform(struct.textContent),
        s3_content_location: kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentS3ContentLocationToTerraform(struct.s3ContentLocation),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // s3_content_location - computed: false, optional: true, required: false
        this._s3ContentLocation = new Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentS3ContentLocationOutputReference(this, "s3_content_location");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._textContent !== undefined) {
            hasAnyValues = true;
            internalValueResult.textContent = this._textContent;
        }
        if (this._s3ContentLocation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3ContentLocation = this._s3ContentLocation?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._textContent = undefined;
            this._s3ContentLocation.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._textContent = value.textContent;
            this._s3ContentLocation.internalValue = value.s3ContentLocation;
        }
    }
    get textContent() {
        return this.getStringAttribute('text_content');
    }
    set textContent(value) {
        this._textContent = value;
    }
    resetTextContent() {
        this._textContent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textContentInput() {
        return this._textContent;
    }
    get s3ContentLocation() {
        return this._s3ContentLocation;
    }
    putS3ContentLocation(value) {
        this._s3ContentLocation.internalValue = value;
    }
    resetS3ContentLocation() {
        this._s3ContentLocation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3ContentLocationInput() {
        return this._s3ContentLocation.internalValue;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentOutputReference;
_b = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentOutputReference[_b] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        code_content_type: cdktf.stringToTerraform(struct.codeContentType),
        code_content: kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentToTerraform(struct.codeContent),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // code_content - computed: false, optional: true, required: false
        this._codeContent = new Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentOutputReference(this, "code_content");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._codeContentType !== undefined) {
            hasAnyValues = true;
            internalValueResult.codeContentType = this._codeContentType;
        }
        if (this._codeContent?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.codeContent = this._codeContent?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._codeContentType = undefined;
            this._codeContent.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._codeContentType = value.codeContentType;
            this._codeContent.internalValue = value.codeContent;
        }
    }
    get codeContentType() {
        return this.getStringAttribute('code_content_type');
    }
    set codeContentType(value) {
        this._codeContentType = value;
    }
    // Temporarily expose input value. Use with caution.
    get codeContentTypeInput() {
        return this._codeContentType;
    }
    get codeContent() {
        return this._codeContent;
    }
    putCodeContent(value) {
        this._codeContent.internalValue = value;
    }
    resetCodeContent() {
        this._codeContent.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeContentInput() {
        return this._codeContent.internalValue;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationOutputReference;
_c = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationOutputReference[_c] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationApplicationSnapshotConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        snapshots_enabled: cdktf.booleanToTerraform(struct.snapshotsEnabled),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationApplicationSnapshotConfigurationToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationApplicationSnapshotConfigurationToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationSnapshotConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._snapshotsEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.snapshotsEnabled = this._snapshotsEnabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._snapshotsEnabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._snapshotsEnabled = value.snapshotsEnabled;
        }
    }
    get snapshotsEnabled() {
        return this.getBooleanAttribute('snapshots_enabled');
    }
    set snapshotsEnabled(value) {
        this._snapshotsEnabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get snapshotsEnabledInput() {
        return this._snapshotsEnabled;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationSnapshotConfigurationOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationSnapshotConfigurationOutputReference;
_d = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationSnapshotConfigurationOutputReference[_d] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationSnapshotConfigurationOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroupToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        property_group_id: cdktf.stringToTerraform(struct.propertyGroupId),
        property_map: cdktf.hashMapper(cdktf.stringToTerraform)(struct.propertyMap),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroupToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroupToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroupOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._propertyGroupId !== undefined) {
            hasAnyValues = true;
            internalValueResult.propertyGroupId = this._propertyGroupId;
        }
        if (this._propertyMap !== undefined) {
            hasAnyValues = true;
            internalValueResult.propertyMap = this._propertyMap;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._propertyGroupId = undefined;
            this._propertyMap = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._propertyGroupId = value.propertyGroupId;
            this._propertyMap = value.propertyMap;
        }
    }
    get propertyGroupId() {
        return this.getStringAttribute('property_group_id');
    }
    set propertyGroupId(value) {
        this._propertyGroupId = value;
    }
    // Temporarily expose input value. Use with caution.
    get propertyGroupIdInput() {
        return this._propertyGroupId;
    }
    get propertyMap() {
        return this.getStringMapAttribute('property_map');
    }
    set propertyMap(value) {
        this._propertyMap = value;
    }
    // Temporarily expose input value. Use with caution.
    get propertyMapInput() {
        return this._propertyMap;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroupOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroupOutputReference;
_e = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroupOutputReference[_e] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroupOutputReference", version: "10.0.12" };
class Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroupList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroupOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroupList = Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroupList;
_f = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroupList[_f] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroupList", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        property_group: cdktf.listMapper(kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroupToTerraform, true)(struct.propertyGroup),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // property_group - computed: false, optional: false, required: true
        this._propertyGroup = new Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroupList(this, "property_group", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._propertyGroup?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.propertyGroup = this._propertyGroup?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._propertyGroup.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._propertyGroup.internalValue = value.propertyGroup;
        }
    }
    get propertyGroup() {
        return this._propertyGroup;
    }
    putPropertyGroup(value) {
        this._propertyGroup.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get propertyGroupInput() {
        return this._propertyGroup.internalValue;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesOutputReference;
_g = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesOutputReference[_g] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        checkpoint_interval: cdktf.numberToTerraform(struct.checkpointInterval),
        checkpointing_enabled: cdktf.booleanToTerraform(struct.checkpointingEnabled),
        configuration_type: cdktf.stringToTerraform(struct.configurationType),
        min_pause_between_checkpoints: cdktf.numberToTerraform(struct.minPauseBetweenCheckpoints),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._checkpointInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.checkpointInterval = this._checkpointInterval;
        }
        if (this._checkpointingEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.checkpointingEnabled = this._checkpointingEnabled;
        }
        if (this._configurationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.configurationType = this._configurationType;
        }
        if (this._minPauseBetweenCheckpoints !== undefined) {
            hasAnyValues = true;
            internalValueResult.minPauseBetweenCheckpoints = this._minPauseBetweenCheckpoints;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._checkpointInterval = undefined;
            this._checkpointingEnabled = undefined;
            this._configurationType = undefined;
            this._minPauseBetweenCheckpoints = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._checkpointInterval = value.checkpointInterval;
            this._checkpointingEnabled = value.checkpointingEnabled;
            this._configurationType = value.configurationType;
            this._minPauseBetweenCheckpoints = value.minPauseBetweenCheckpoints;
        }
    }
    get checkpointInterval() {
        return this.getNumberAttribute('checkpoint_interval');
    }
    set checkpointInterval(value) {
        this._checkpointInterval = value;
    }
    resetCheckpointInterval() {
        this._checkpointInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get checkpointIntervalInput() {
        return this._checkpointInterval;
    }
    get checkpointingEnabled() {
        return this.getBooleanAttribute('checkpointing_enabled');
    }
    set checkpointingEnabled(value) {
        this._checkpointingEnabled = value;
    }
    resetCheckpointingEnabled() {
        this._checkpointingEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get checkpointingEnabledInput() {
        return this._checkpointingEnabled;
    }
    get configurationType() {
        return this.getStringAttribute('configuration_type');
    }
    set configurationType(value) {
        this._configurationType = value;
    }
    // Temporarily expose input value. Use with caution.
    get configurationTypeInput() {
        return this._configurationType;
    }
    get minPauseBetweenCheckpoints() {
        return this.getNumberAttribute('min_pause_between_checkpoints');
    }
    set minPauseBetweenCheckpoints(value) {
        this._minPauseBetweenCheckpoints = value;
    }
    resetMinPauseBetweenCheckpoints() {
        this._minPauseBetweenCheckpoints = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minPauseBetweenCheckpointsInput() {
        return this._minPauseBetweenCheckpoints;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationOutputReference;
_h = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationOutputReference[_h] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        configuration_type: cdktf.stringToTerraform(struct.configurationType),
        log_level: cdktf.stringToTerraform(struct.logLevel),
        metrics_level: cdktf.stringToTerraform(struct.metricsLevel),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._configurationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.configurationType = this._configurationType;
        }
        if (this._logLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.logLevel = this._logLevel;
        }
        if (this._metricsLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.metricsLevel = this._metricsLevel;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._configurationType = undefined;
            this._logLevel = undefined;
            this._metricsLevel = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._configurationType = value.configurationType;
            this._logLevel = value.logLevel;
            this._metricsLevel = value.metricsLevel;
        }
    }
    get configurationType() {
        return this.getStringAttribute('configuration_type');
    }
    set configurationType(value) {
        this._configurationType = value;
    }
    // Temporarily expose input value. Use with caution.
    get configurationTypeInput() {
        return this._configurationType;
    }
    get logLevel() {
        return this.getStringAttribute('log_level');
    }
    set logLevel(value) {
        this._logLevel = value;
    }
    resetLogLevel() {
        this._logLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logLevelInput() {
        return this._logLevel;
    }
    get metricsLevel() {
        return this.getStringAttribute('metrics_level');
    }
    set metricsLevel(value) {
        this._metricsLevel = value;
    }
    resetMetricsLevel() {
        this._metricsLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metricsLevelInput() {
        return this._metricsLevel;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationOutputReference;
_j = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationOutputReference[_j] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_scaling_enabled: cdktf.booleanToTerraform(struct.autoScalingEnabled),
        configuration_type: cdktf.stringToTerraform(struct.configurationType),
        parallelism: cdktf.numberToTerraform(struct.parallelism),
        parallelism_per_kpu: cdktf.numberToTerraform(struct.parallelismPerKpu),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoScalingEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoScalingEnabled = this._autoScalingEnabled;
        }
        if (this._configurationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.configurationType = this._configurationType;
        }
        if (this._parallelism !== undefined) {
            hasAnyValues = true;
            internalValueResult.parallelism = this._parallelism;
        }
        if (this._parallelismPerKpu !== undefined) {
            hasAnyValues = true;
            internalValueResult.parallelismPerKpu = this._parallelismPerKpu;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoScalingEnabled = undefined;
            this._configurationType = undefined;
            this._parallelism = undefined;
            this._parallelismPerKpu = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoScalingEnabled = value.autoScalingEnabled;
            this._configurationType = value.configurationType;
            this._parallelism = value.parallelism;
            this._parallelismPerKpu = value.parallelismPerKpu;
        }
    }
    get autoScalingEnabled() {
        return this.getBooleanAttribute('auto_scaling_enabled');
    }
    set autoScalingEnabled(value) {
        this._autoScalingEnabled = value;
    }
    resetAutoScalingEnabled() {
        this._autoScalingEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoScalingEnabledInput() {
        return this._autoScalingEnabled;
    }
    get configurationType() {
        return this.getStringAttribute('configuration_type');
    }
    set configurationType(value) {
        this._configurationType = value;
    }
    // Temporarily expose input value. Use with caution.
    get configurationTypeInput() {
        return this._configurationType;
    }
    get parallelism() {
        return this.getNumberAttribute('parallelism');
    }
    set parallelism(value) {
        this._parallelism = value;
    }
    resetParallelism() {
        this._parallelism = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parallelismInput() {
        return this._parallelism;
    }
    get parallelismPerKpu() {
        return this.getNumberAttribute('parallelism_per_kpu');
    }
    set parallelismPerKpu(value) {
        this._parallelismPerKpu = value;
    }
    resetParallelismPerKpu() {
        this._parallelismPerKpu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parallelismPerKpuInput() {
        return this._parallelismPerKpu;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationOutputReference;
_k = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationOutputReference[_k] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        checkpoint_configuration: kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationToTerraform(struct.checkpointConfiguration),
        monitoring_configuration: kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationToTerraform(struct.monitoringConfiguration),
        parallelism_configuration: kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationToTerraform(struct.parallelismConfiguration),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // checkpoint_configuration - computed: false, optional: true, required: false
        this._checkpointConfiguration = new Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationOutputReference(this, "checkpoint_configuration");
        // monitoring_configuration - computed: false, optional: true, required: false
        this._monitoringConfiguration = new Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationOutputReference(this, "monitoring_configuration");
        // parallelism_configuration - computed: false, optional: true, required: false
        this._parallelismConfiguration = new Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationOutputReference(this, "parallelism_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._checkpointConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.checkpointConfiguration = this._checkpointConfiguration?.internalValue;
        }
        if (this._monitoringConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.monitoringConfiguration = this._monitoringConfiguration?.internalValue;
        }
        if (this._parallelismConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parallelismConfiguration = this._parallelismConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._checkpointConfiguration.internalValue = undefined;
            this._monitoringConfiguration.internalValue = undefined;
            this._parallelismConfiguration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._checkpointConfiguration.internalValue = value.checkpointConfiguration;
            this._monitoringConfiguration.internalValue = value.monitoringConfiguration;
            this._parallelismConfiguration.internalValue = value.parallelismConfiguration;
        }
    }
    get checkpointConfiguration() {
        return this._checkpointConfiguration;
    }
    putCheckpointConfiguration(value) {
        this._checkpointConfiguration.internalValue = value;
    }
    resetCheckpointConfiguration() {
        this._checkpointConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get checkpointConfigurationInput() {
        return this._checkpointConfiguration.internalValue;
    }
    get monitoringConfiguration() {
        return this._monitoringConfiguration;
    }
    putMonitoringConfiguration(value) {
        this._monitoringConfiguration.internalValue = value;
    }
    resetMonitoringConfiguration() {
        this._monitoringConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monitoringConfigurationInput() {
        return this._monitoringConfiguration.internalValue;
    }
    get parallelismConfiguration() {
        return this._parallelismConfiguration;
    }
    putParallelismConfiguration(value) {
        this._parallelismConfiguration.internalValue = value;
    }
    resetParallelismConfiguration() {
        this._parallelismConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parallelismConfigurationInput() {
        return this._parallelismConfiguration.internalValue;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationOutputReference;
_l = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationOutputReference[_l] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationApplicationRestoreConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        application_restore_type: cdktf.stringToTerraform(struct.applicationRestoreType),
        snapshot_name: cdktf.stringToTerraform(struct.snapshotName),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationApplicationRestoreConfigurationToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationApplicationRestoreConfigurationToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationApplicationRestoreConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._applicationRestoreType !== undefined) {
            hasAnyValues = true;
            internalValueResult.applicationRestoreType = this._applicationRestoreType;
        }
        if (this._snapshotName !== undefined) {
            hasAnyValues = true;
            internalValueResult.snapshotName = this._snapshotName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._applicationRestoreType = undefined;
            this._snapshotName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._applicationRestoreType = value.applicationRestoreType;
            this._snapshotName = value.snapshotName;
        }
    }
    get applicationRestoreType() {
        return this.getStringAttribute('application_restore_type');
    }
    set applicationRestoreType(value) {
        this._applicationRestoreType = value;
    }
    resetApplicationRestoreType() {
        this._applicationRestoreType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get applicationRestoreTypeInput() {
        return this._applicationRestoreType;
    }
    get snapshotName() {
        return this.getStringAttribute('snapshot_name');
    }
    set snapshotName(value) {
        this._snapshotName = value;
    }
    resetSnapshotName() {
        this._snapshotName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snapshotNameInput() {
        return this._snapshotName;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationApplicationRestoreConfigurationOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationApplicationRestoreConfigurationOutputReference;
_m = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationApplicationRestoreConfigurationOutputReference[_m] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationApplicationRestoreConfigurationOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationFlinkRunConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_non_restored_state: cdktf.booleanToTerraform(struct.allowNonRestoredState),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationFlinkRunConfigurationToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationFlinkRunConfigurationToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationFlinkRunConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowNonRestoredState !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowNonRestoredState = this._allowNonRestoredState;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowNonRestoredState = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowNonRestoredState = value.allowNonRestoredState;
        }
    }
    get allowNonRestoredState() {
        return this.getBooleanAttribute('allow_non_restored_state');
    }
    set allowNonRestoredState(value) {
        this._allowNonRestoredState = value;
    }
    resetAllowNonRestoredState() {
        this._allowNonRestoredState = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowNonRestoredStateInput() {
        return this._allowNonRestoredState;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationFlinkRunConfigurationOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationFlinkRunConfigurationOutputReference;
_o = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationFlinkRunConfigurationOutputReference[_o] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationFlinkRunConfigurationOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        application_restore_configuration: kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationApplicationRestoreConfigurationToTerraform(struct.applicationRestoreConfiguration),
        flink_run_configuration: kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationFlinkRunConfigurationToTerraform(struct.flinkRunConfiguration),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // application_restore_configuration - computed: false, optional: true, required: false
        this._applicationRestoreConfiguration = new Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationApplicationRestoreConfigurationOutputReference(this, "application_restore_configuration");
        // flink_run_configuration - computed: false, optional: true, required: false
        this._flinkRunConfiguration = new Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationFlinkRunConfigurationOutputReference(this, "flink_run_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._applicationRestoreConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.applicationRestoreConfiguration = this._applicationRestoreConfiguration?.internalValue;
        }
        if (this._flinkRunConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.flinkRunConfiguration = this._flinkRunConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._applicationRestoreConfiguration.internalValue = undefined;
            this._flinkRunConfiguration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._applicationRestoreConfiguration.internalValue = value.applicationRestoreConfiguration;
            this._flinkRunConfiguration.internalValue = value.flinkRunConfiguration;
        }
    }
    get applicationRestoreConfiguration() {
        return this._applicationRestoreConfiguration;
    }
    putApplicationRestoreConfiguration(value) {
        this._applicationRestoreConfiguration.internalValue = value;
    }
    resetApplicationRestoreConfiguration() {
        this._applicationRestoreConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get applicationRestoreConfigurationInput() {
        return this._applicationRestoreConfiguration.internalValue;
    }
    get flinkRunConfiguration() {
        return this._flinkRunConfiguration;
    }
    putFlinkRunConfiguration(value) {
        this._flinkRunConfiguration.internalValue = value;
    }
    resetFlinkRunConfiguration() {
        this._flinkRunConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get flinkRunConfigurationInput() {
        return this._flinkRunConfiguration.internalValue;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationOutputReference;
_p = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationOutputReference[_p] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        count: cdktf.numberToTerraform(struct.count),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._count !== undefined) {
            hasAnyValues = true;
            internalValueResult.count = this._count;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._count = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._count = value.count;
        }
    }
    get count() {
        return this.getNumberAttribute('count');
    }
    set count(value) {
        this._count = value;
    }
    resetCount() {
        this._count = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get countInput() {
        return this._count;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismOutputReference;
_q = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismOutputReference[_q] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationInputLambdaProcessorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resource_arn: cdktf.stringToTerraform(struct.resourceArn),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationInputLambdaProcessorToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationInputLambdaProcessorToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationInputLambdaProcessorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resourceArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceArn = this._resourceArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._resourceArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._resourceArn = value.resourceArn;
        }
    }
    get resourceArn() {
        return this.getStringAttribute('resource_arn');
    }
    set resourceArn(value) {
        this._resourceArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceArnInput() {
        return this._resourceArn;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationInputLambdaProcessorOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationInputLambdaProcessorOutputReference;
_r = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationInputLambdaProcessorOutputReference[_r] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationInputLambdaProcessorOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        input_lambda_processor: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationInputLambdaProcessorToTerraform(struct.inputLambdaProcessor),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // input_lambda_processor - computed: false, optional: false, required: true
        this._inputLambdaProcessor = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationInputLambdaProcessorOutputReference(this, "input_lambda_processor");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._inputLambdaProcessor?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputLambdaProcessor = this._inputLambdaProcessor?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._inputLambdaProcessor.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._inputLambdaProcessor.internalValue = value.inputLambdaProcessor;
        }
    }
    get inputLambdaProcessor() {
        return this._inputLambdaProcessor;
    }
    putInputLambdaProcessor(value) {
        this._inputLambdaProcessor.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get inputLambdaProcessorInput() {
        return this._inputLambdaProcessor.internalValue;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationOutputReference;
_s = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationOutputReference[_s] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mapping: cdktf.stringToTerraform(struct.mapping),
        name: cdktf.stringToTerraform(struct.name),
        sql_type: cdktf.stringToTerraform(struct.sqlType),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mapping !== undefined) {
            hasAnyValues = true;
            internalValueResult.mapping = this._mapping;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._sqlType !== undefined) {
            hasAnyValues = true;
            internalValueResult.sqlType = this._sqlType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._mapping = undefined;
            this._name = undefined;
            this._sqlType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._mapping = value.mapping;
            this._name = value.name;
            this._sqlType = value.sqlType;
        }
    }
    get mapping() {
        return this.getStringAttribute('mapping');
    }
    set mapping(value) {
        this._mapping = value;
    }
    resetMapping() {
        this._mapping = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mappingInput() {
        return this._mapping;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get sqlType() {
        return this.getStringAttribute('sql_type');
    }
    set sqlType(value) {
        this._sqlType = value;
    }
    // Temporarily expose input value. Use with caution.
    get sqlTypeInput() {
        return this._sqlType;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnOutputReference;
_t = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnOutputReference[_t] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnOutputReference", version: "10.0.12" };
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnList = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnList;
_u = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnList[_u] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnList", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersCsvMappingParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        record_column_delimiter: cdktf.stringToTerraform(struct.recordColumnDelimiter),
        record_row_delimiter: cdktf.stringToTerraform(struct.recordRowDelimiter),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersCsvMappingParametersToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersCsvMappingParametersToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersCsvMappingParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._recordColumnDelimiter !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordColumnDelimiter = this._recordColumnDelimiter;
        }
        if (this._recordRowDelimiter !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordRowDelimiter = this._recordRowDelimiter;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._recordColumnDelimiter = undefined;
            this._recordRowDelimiter = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._recordColumnDelimiter = value.recordColumnDelimiter;
            this._recordRowDelimiter = value.recordRowDelimiter;
        }
    }
    get recordColumnDelimiter() {
        return this.getStringAttribute('record_column_delimiter');
    }
    set recordColumnDelimiter(value) {
        this._recordColumnDelimiter = value;
    }
    // Temporarily expose input value. Use with caution.
    get recordColumnDelimiterInput() {
        return this._recordColumnDelimiter;
    }
    get recordRowDelimiter() {
        return this.getStringAttribute('record_row_delimiter');
    }
    set recordRowDelimiter(value) {
        this._recordRowDelimiter = value;
    }
    // Temporarily expose input value. Use with caution.
    get recordRowDelimiterInput() {
        return this._recordRowDelimiter;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersCsvMappingParametersOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersCsvMappingParametersOutputReference;
_v = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersCsvMappingParametersOutputReference[_v] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersCsvMappingParametersOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersJsonMappingParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        record_row_path: cdktf.stringToTerraform(struct.recordRowPath),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersJsonMappingParametersToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersJsonMappingParametersToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersJsonMappingParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._recordRowPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordRowPath = this._recordRowPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._recordRowPath = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._recordRowPath = value.recordRowPath;
        }
    }
    get recordRowPath() {
        return this.getStringAttribute('record_row_path');
    }
    set recordRowPath(value) {
        this._recordRowPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get recordRowPathInput() {
        return this._recordRowPath;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersJsonMappingParametersOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersJsonMappingParametersOutputReference;
_w = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersJsonMappingParametersOutputReference[_w] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersJsonMappingParametersOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        csv_mapping_parameters: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersCsvMappingParametersToTerraform(struct.csvMappingParameters),
        json_mapping_parameters: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersJsonMappingParametersToTerraform(struct.jsonMappingParameters),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // csv_mapping_parameters - computed: false, optional: true, required: false
        this._csvMappingParameters = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersCsvMappingParametersOutputReference(this, "csv_mapping_parameters");
        // json_mapping_parameters - computed: false, optional: true, required: false
        this._jsonMappingParameters = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersJsonMappingParametersOutputReference(this, "json_mapping_parameters");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._csvMappingParameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.csvMappingParameters = this._csvMappingParameters?.internalValue;
        }
        if (this._jsonMappingParameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.jsonMappingParameters = this._jsonMappingParameters?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._csvMappingParameters.internalValue = undefined;
            this._jsonMappingParameters.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._csvMappingParameters.internalValue = value.csvMappingParameters;
            this._jsonMappingParameters.internalValue = value.jsonMappingParameters;
        }
    }
    get csvMappingParameters() {
        return this._csvMappingParameters;
    }
    putCsvMappingParameters(value) {
        this._csvMappingParameters.internalValue = value;
    }
    resetCsvMappingParameters() {
        this._csvMappingParameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get csvMappingParametersInput() {
        return this._csvMappingParameters.internalValue;
    }
    get jsonMappingParameters() {
        return this._jsonMappingParameters;
    }
    putJsonMappingParameters(value) {
        this._jsonMappingParameters.internalValue = value;
    }
    resetJsonMappingParameters() {
        this._jsonMappingParameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jsonMappingParametersInput() {
        return this._jsonMappingParameters.internalValue;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersOutputReference;
_x = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersOutputReference[_x] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        record_format_type: cdktf.stringToTerraform(struct.recordFormatType),
        mapping_parameters: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersToTerraform(struct.mappingParameters),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // mapping_parameters - computed: false, optional: false, required: true
        this._mappingParameters = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersOutputReference(this, "mapping_parameters");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._recordFormatType !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordFormatType = this._recordFormatType;
        }
        if (this._mappingParameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mappingParameters = this._mappingParameters?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._recordFormatType = undefined;
            this._mappingParameters.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._recordFormatType = value.recordFormatType;
            this._mappingParameters.internalValue = value.mappingParameters;
        }
    }
    get recordFormatType() {
        return this.getStringAttribute('record_format_type');
    }
    set recordFormatType(value) {
        this._recordFormatType = value;
    }
    // Temporarily expose input value. Use with caution.
    get recordFormatTypeInput() {
        return this._recordFormatType;
    }
    get mappingParameters() {
        return this._mappingParameters;
    }
    putMappingParameters(value) {
        this._mappingParameters.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get mappingParametersInput() {
        return this._mappingParameters.internalValue;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatOutputReference;
_y = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatOutputReference[_y] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        record_encoding: cdktf.stringToTerraform(struct.recordEncoding),
        record_column: cdktf.listMapper(kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnToTerraform, true)(struct.recordColumn),
        record_format: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatToTerraform(struct.recordFormat),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // record_column - computed: false, optional: false, required: true
        this._recordColumn = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnList(this, "record_column", false);
        // record_format - computed: false, optional: false, required: true
        this._recordFormat = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatOutputReference(this, "record_format");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._recordEncoding !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordEncoding = this._recordEncoding;
        }
        if (this._recordColumn?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordColumn = this._recordColumn?.internalValue;
        }
        if (this._recordFormat?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordFormat = this._recordFormat?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._recordEncoding = undefined;
            this._recordColumn.internalValue = undefined;
            this._recordFormat.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._recordEncoding = value.recordEncoding;
            this._recordColumn.internalValue = value.recordColumn;
            this._recordFormat.internalValue = value.recordFormat;
        }
    }
    get recordEncoding() {
        return this.getStringAttribute('record_encoding');
    }
    set recordEncoding(value) {
        this._recordEncoding = value;
    }
    resetRecordEncoding() {
        this._recordEncoding = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recordEncodingInput() {
        return this._recordEncoding;
    }
    get recordColumn() {
        return this._recordColumn;
    }
    putRecordColumn(value) {
        this._recordColumn.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get recordColumnInput() {
        return this._recordColumn.internalValue;
    }
    get recordFormat() {
        return this._recordFormat;
    }
    putRecordFormat(value) {
        this._recordFormat.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get recordFormatInput() {
        return this._recordFormat.internalValue;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaOutputReference;
_z = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaOutputReference[_z] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        input_starting_position: cdktf.stringToTerraform(struct.inputStartingPosition),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._inputStartingPosition !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputStartingPosition = this._inputStartingPosition;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._inputStartingPosition = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._inputStartingPosition = value.inputStartingPosition;
        }
    }
    get inputStartingPosition() {
        return this.getStringAttribute('input_starting_position');
    }
    set inputStartingPosition(value) {
        this._inputStartingPosition = value;
    }
    resetInputStartingPosition() {
        this._inputStartingPosition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputStartingPositionInput() {
        return this._inputStartingPosition;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationOutputReference[_0] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationOutputReference", version: "10.0.12" };
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationList = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationList;
_1 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationList[_1] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationList", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resource_arn: cdktf.stringToTerraform(struct.resourceArn),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resourceArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceArn = this._resourceArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._resourceArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._resourceArn = value.resourceArn;
        }
    }
    get resourceArn() {
        return this.getStringAttribute('resource_arn');
    }
    set resourceArn(value) {
        this._resourceArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceArnInput() {
        return this._resourceArn;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputOutputReference[_2] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resource_arn: cdktf.stringToTerraform(struct.resourceArn),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resourceArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceArn = this._resourceArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._resourceArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._resourceArn = value.resourceArn;
        }
    }
    get resourceArn() {
        return this.getStringAttribute('resource_arn');
    }
    set resourceArn(value) {
        this._resourceArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceArnInput() {
        return this._resourceArn;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputOutputReference[_3] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name_prefix: cdktf.stringToTerraform(struct.namePrefix),
        input_parallelism: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismToTerraform(struct.inputParallelism),
        input_processing_configuration: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationToTerraform(struct.inputProcessingConfiguration),
        input_schema: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaToTerraform(struct.inputSchema),
        input_starting_position_configuration: cdktf.listMapper(kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationToTerraform, true)(struct.inputStartingPositionConfiguration),
        kinesis_firehose_input: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputToTerraform(struct.kinesisFirehoseInput),
        kinesis_streams_input: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputToTerraform(struct.kinesisStreamsInput),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // input_parallelism - computed: false, optional: true, required: false
        this._inputParallelism = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismOutputReference(this, "input_parallelism");
        // input_processing_configuration - computed: false, optional: true, required: false
        this._inputProcessingConfiguration = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationOutputReference(this, "input_processing_configuration");
        // input_schema - computed: false, optional: false, required: true
        this._inputSchema = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaOutputReference(this, "input_schema");
        // input_starting_position_configuration - computed: false, optional: true, required: false
        this._inputStartingPositionConfiguration = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationList(this, "input_starting_position_configuration", false);
        // kinesis_firehose_input - computed: false, optional: true, required: false
        this._kinesisFirehoseInput = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputOutputReference(this, "kinesis_firehose_input");
        // kinesis_streams_input - computed: false, optional: true, required: false
        this._kinesisStreamsInput = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputOutputReference(this, "kinesis_streams_input");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._namePrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.namePrefix = this._namePrefix;
        }
        if (this._inputParallelism?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputParallelism = this._inputParallelism?.internalValue;
        }
        if (this._inputProcessingConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputProcessingConfiguration = this._inputProcessingConfiguration?.internalValue;
        }
        if (this._inputSchema?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputSchema = this._inputSchema?.internalValue;
        }
        if (this._inputStartingPositionConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputStartingPositionConfiguration = this._inputStartingPositionConfiguration?.internalValue;
        }
        if (this._kinesisFirehoseInput?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kinesisFirehoseInput = this._kinesisFirehoseInput?.internalValue;
        }
        if (this._kinesisStreamsInput?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kinesisStreamsInput = this._kinesisStreamsInput?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._namePrefix = undefined;
            this._inputParallelism.internalValue = undefined;
            this._inputProcessingConfiguration.internalValue = undefined;
            this._inputSchema.internalValue = undefined;
            this._inputStartingPositionConfiguration.internalValue = undefined;
            this._kinesisFirehoseInput.internalValue = undefined;
            this._kinesisStreamsInput.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._namePrefix = value.namePrefix;
            this._inputParallelism.internalValue = value.inputParallelism;
            this._inputProcessingConfiguration.internalValue = value.inputProcessingConfiguration;
            this._inputSchema.internalValue = value.inputSchema;
            this._inputStartingPositionConfiguration.internalValue = value.inputStartingPositionConfiguration;
            this._kinesisFirehoseInput.internalValue = value.kinesisFirehoseInput;
            this._kinesisStreamsInput.internalValue = value.kinesisStreamsInput;
        }
    }
    // in_app_stream_names - computed: true, optional: false, required: false
    get inAppStreamNames() {
        return this.getListAttribute('in_app_stream_names');
    }
    // input_id - computed: true, optional: false, required: false
    get inputId() {
        return this.getStringAttribute('input_id');
    }
    get namePrefix() {
        return this.getStringAttribute('name_prefix');
    }
    set namePrefix(value) {
        this._namePrefix = value;
    }
    // Temporarily expose input value. Use with caution.
    get namePrefixInput() {
        return this._namePrefix;
    }
    get inputParallelism() {
        return this._inputParallelism;
    }
    putInputParallelism(value) {
        this._inputParallelism.internalValue = value;
    }
    resetInputParallelism() {
        this._inputParallelism.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputParallelismInput() {
        return this._inputParallelism.internalValue;
    }
    get inputProcessingConfiguration() {
        return this._inputProcessingConfiguration;
    }
    putInputProcessingConfiguration(value) {
        this._inputProcessingConfiguration.internalValue = value;
    }
    resetInputProcessingConfiguration() {
        this._inputProcessingConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputProcessingConfigurationInput() {
        return this._inputProcessingConfiguration.internalValue;
    }
    get inputSchema() {
        return this._inputSchema;
    }
    putInputSchema(value) {
        this._inputSchema.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get inputSchemaInput() {
        return this._inputSchema.internalValue;
    }
    get inputStartingPositionConfiguration() {
        return this._inputStartingPositionConfiguration;
    }
    putInputStartingPositionConfiguration(value) {
        this._inputStartingPositionConfiguration.internalValue = value;
    }
    resetInputStartingPositionConfiguration() {
        this._inputStartingPositionConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputStartingPositionConfigurationInput() {
        return this._inputStartingPositionConfiguration.internalValue;
    }
    get kinesisFirehoseInput() {
        return this._kinesisFirehoseInput;
    }
    putKinesisFirehoseInput(value) {
        this._kinesisFirehoseInput.internalValue = value;
    }
    resetKinesisFirehoseInput() {
        this._kinesisFirehoseInput.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kinesisFirehoseInputInput() {
        return this._kinesisFirehoseInput.internalValue;
    }
    get kinesisStreamsInput() {
        return this._kinesisStreamsInput;
    }
    putKinesisStreamsInput(value) {
        this._kinesisStreamsInput.internalValue = value;
    }
    resetKinesisStreamsInput() {
        this._kinesisStreamsInput.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kinesisStreamsInputInput() {
        return this._kinesisStreamsInput.internalValue;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputOutputReference[_4] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputDestinationSchemaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        record_format_type: cdktf.stringToTerraform(struct.recordFormatType),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputDestinationSchemaToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputDestinationSchemaToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputDestinationSchemaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._recordFormatType !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordFormatType = this._recordFormatType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._recordFormatType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._recordFormatType = value.recordFormatType;
        }
    }
    get recordFormatType() {
        return this.getStringAttribute('record_format_type');
    }
    set recordFormatType(value) {
        this._recordFormatType = value;
    }
    // Temporarily expose input value. Use with caution.
    get recordFormatTypeInput() {
        return this._recordFormatType;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputDestinationSchemaOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputDestinationSchemaOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputDestinationSchemaOutputReference[_5] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputDestinationSchemaOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisFirehoseOutputToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resource_arn: cdktf.stringToTerraform(struct.resourceArn),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisFirehoseOutputToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisFirehoseOutputToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisFirehoseOutputOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resourceArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceArn = this._resourceArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._resourceArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._resourceArn = value.resourceArn;
        }
    }
    get resourceArn() {
        return this.getStringAttribute('resource_arn');
    }
    set resourceArn(value) {
        this._resourceArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceArnInput() {
        return this._resourceArn;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisFirehoseOutputOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisFirehoseOutputOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisFirehoseOutputOutputReference[_6] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisFirehoseOutputOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisStreamsOutputToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resource_arn: cdktf.stringToTerraform(struct.resourceArn),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisStreamsOutputToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisStreamsOutputToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisStreamsOutputOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resourceArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceArn = this._resourceArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._resourceArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._resourceArn = value.resourceArn;
        }
    }
    get resourceArn() {
        return this.getStringAttribute('resource_arn');
    }
    set resourceArn(value) {
        this._resourceArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceArnInput() {
        return this._resourceArn;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisStreamsOutputOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisStreamsOutputOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisStreamsOutputOutputReference[_7] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisStreamsOutputOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputLambdaOutputToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resource_arn: cdktf.stringToTerraform(struct.resourceArn),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputLambdaOutputToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputLambdaOutputToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputLambdaOutputOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resourceArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceArn = this._resourceArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._resourceArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._resourceArn = value.resourceArn;
        }
    }
    get resourceArn() {
        return this.getStringAttribute('resource_arn');
    }
    set resourceArn(value) {
        this._resourceArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceArnInput() {
        return this._resourceArn;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputLambdaOutputOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputLambdaOutputOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputLambdaOutputOutputReference[_8] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputLambdaOutputOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        destination_schema: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputDestinationSchemaToTerraform(struct.destinationSchema),
        kinesis_firehose_output: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisFirehoseOutputToTerraform(struct.kinesisFirehoseOutput),
        kinesis_streams_output: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisStreamsOutputToTerraform(struct.kinesisStreamsOutput),
        lambda_output: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputLambdaOutputToTerraform(struct.lambdaOutput),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // destination_schema - computed: false, optional: false, required: true
        this._destinationSchema = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputDestinationSchemaOutputReference(this, "destination_schema");
        // kinesis_firehose_output - computed: false, optional: true, required: false
        this._kinesisFirehoseOutput = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisFirehoseOutputOutputReference(this, "kinesis_firehose_output");
        // kinesis_streams_output - computed: false, optional: true, required: false
        this._kinesisStreamsOutput = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisStreamsOutputOutputReference(this, "kinesis_streams_output");
        // lambda_output - computed: false, optional: true, required: false
        this._lambdaOutput = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputLambdaOutputOutputReference(this, "lambda_output");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._destinationSchema?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationSchema = this._destinationSchema?.internalValue;
        }
        if (this._kinesisFirehoseOutput?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kinesisFirehoseOutput = this._kinesisFirehoseOutput?.internalValue;
        }
        if (this._kinesisStreamsOutput?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kinesisStreamsOutput = this._kinesisStreamsOutput?.internalValue;
        }
        if (this._lambdaOutput?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.lambdaOutput = this._lambdaOutput?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._destinationSchema.internalValue = undefined;
            this._kinesisFirehoseOutput.internalValue = undefined;
            this._kinesisStreamsOutput.internalValue = undefined;
            this._lambdaOutput.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._destinationSchema.internalValue = value.destinationSchema;
            this._kinesisFirehoseOutput.internalValue = value.kinesisFirehoseOutput;
            this._kinesisStreamsOutput.internalValue = value.kinesisStreamsOutput;
            this._lambdaOutput.internalValue = value.lambdaOutput;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // output_id - computed: true, optional: false, required: false
    get outputId() {
        return this.getStringAttribute('output_id');
    }
    get destinationSchema() {
        return this._destinationSchema;
    }
    putDestinationSchema(value) {
        this._destinationSchema.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationSchemaInput() {
        return this._destinationSchema.internalValue;
    }
    get kinesisFirehoseOutput() {
        return this._kinesisFirehoseOutput;
    }
    putKinesisFirehoseOutput(value) {
        this._kinesisFirehoseOutput.internalValue = value;
    }
    resetKinesisFirehoseOutput() {
        this._kinesisFirehoseOutput.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kinesisFirehoseOutputInput() {
        return this._kinesisFirehoseOutput.internalValue;
    }
    get kinesisStreamsOutput() {
        return this._kinesisStreamsOutput;
    }
    putKinesisStreamsOutput(value) {
        this._kinesisStreamsOutput.internalValue = value;
    }
    resetKinesisStreamsOutput() {
        this._kinesisStreamsOutput.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kinesisStreamsOutputInput() {
        return this._kinesisStreamsOutput.internalValue;
    }
    get lambdaOutput() {
        return this._lambdaOutput;
    }
    putLambdaOutput(value) {
        this._lambdaOutput.internalValue = value;
    }
    resetLambdaOutput() {
        this._lambdaOutput.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaOutputInput() {
        return this._lambdaOutput.internalValue;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputOutputReference[_9] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputOutputReference", version: "10.0.12" };
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputList = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputList;
_10 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputList[_10] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputList", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mapping: cdktf.stringToTerraform(struct.mapping),
        name: cdktf.stringToTerraform(struct.name),
        sql_type: cdktf.stringToTerraform(struct.sqlType),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mapping !== undefined) {
            hasAnyValues = true;
            internalValueResult.mapping = this._mapping;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._sqlType !== undefined) {
            hasAnyValues = true;
            internalValueResult.sqlType = this._sqlType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._mapping = undefined;
            this._name = undefined;
            this._sqlType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._mapping = value.mapping;
            this._name = value.name;
            this._sqlType = value.sqlType;
        }
    }
    get mapping() {
        return this.getStringAttribute('mapping');
    }
    set mapping(value) {
        this._mapping = value;
    }
    resetMapping() {
        this._mapping = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mappingInput() {
        return this._mapping;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get sqlType() {
        return this.getStringAttribute('sql_type');
    }
    set sqlType(value) {
        this._sqlType = value;
    }
    // Temporarily expose input value. Use with caution.
    get sqlTypeInput() {
        return this._sqlType;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnOutputReference[_11] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnOutputReference", version: "10.0.12" };
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnList = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnList;
_12 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnList[_12] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnList", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersCsvMappingParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        record_column_delimiter: cdktf.stringToTerraform(struct.recordColumnDelimiter),
        record_row_delimiter: cdktf.stringToTerraform(struct.recordRowDelimiter),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersCsvMappingParametersToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersCsvMappingParametersToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersCsvMappingParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._recordColumnDelimiter !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordColumnDelimiter = this._recordColumnDelimiter;
        }
        if (this._recordRowDelimiter !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordRowDelimiter = this._recordRowDelimiter;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._recordColumnDelimiter = undefined;
            this._recordRowDelimiter = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._recordColumnDelimiter = value.recordColumnDelimiter;
            this._recordRowDelimiter = value.recordRowDelimiter;
        }
    }
    get recordColumnDelimiter() {
        return this.getStringAttribute('record_column_delimiter');
    }
    set recordColumnDelimiter(value) {
        this._recordColumnDelimiter = value;
    }
    // Temporarily expose input value. Use with caution.
    get recordColumnDelimiterInput() {
        return this._recordColumnDelimiter;
    }
    get recordRowDelimiter() {
        return this.getStringAttribute('record_row_delimiter');
    }
    set recordRowDelimiter(value) {
        this._recordRowDelimiter = value;
    }
    // Temporarily expose input value. Use with caution.
    get recordRowDelimiterInput() {
        return this._recordRowDelimiter;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersCsvMappingParametersOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersCsvMappingParametersOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersCsvMappingParametersOutputReference[_13] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersCsvMappingParametersOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersJsonMappingParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        record_row_path: cdktf.stringToTerraform(struct.recordRowPath),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersJsonMappingParametersToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersJsonMappingParametersToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersJsonMappingParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._recordRowPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordRowPath = this._recordRowPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._recordRowPath = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._recordRowPath = value.recordRowPath;
        }
    }
    get recordRowPath() {
        return this.getStringAttribute('record_row_path');
    }
    set recordRowPath(value) {
        this._recordRowPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get recordRowPathInput() {
        return this._recordRowPath;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersJsonMappingParametersOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersJsonMappingParametersOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersJsonMappingParametersOutputReference[_14] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersJsonMappingParametersOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        csv_mapping_parameters: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersCsvMappingParametersToTerraform(struct.csvMappingParameters),
        json_mapping_parameters: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersJsonMappingParametersToTerraform(struct.jsonMappingParameters),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // csv_mapping_parameters - computed: false, optional: true, required: false
        this._csvMappingParameters = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersCsvMappingParametersOutputReference(this, "csv_mapping_parameters");
        // json_mapping_parameters - computed: false, optional: true, required: false
        this._jsonMappingParameters = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersJsonMappingParametersOutputReference(this, "json_mapping_parameters");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._csvMappingParameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.csvMappingParameters = this._csvMappingParameters?.internalValue;
        }
        if (this._jsonMappingParameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.jsonMappingParameters = this._jsonMappingParameters?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._csvMappingParameters.internalValue = undefined;
            this._jsonMappingParameters.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._csvMappingParameters.internalValue = value.csvMappingParameters;
            this._jsonMappingParameters.internalValue = value.jsonMappingParameters;
        }
    }
    get csvMappingParameters() {
        return this._csvMappingParameters;
    }
    putCsvMappingParameters(value) {
        this._csvMappingParameters.internalValue = value;
    }
    resetCsvMappingParameters() {
        this._csvMappingParameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get csvMappingParametersInput() {
        return this._csvMappingParameters.internalValue;
    }
    get jsonMappingParameters() {
        return this._jsonMappingParameters;
    }
    putJsonMappingParameters(value) {
        this._jsonMappingParameters.internalValue = value;
    }
    resetJsonMappingParameters() {
        this._jsonMappingParameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jsonMappingParametersInput() {
        return this._jsonMappingParameters.internalValue;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersOutputReference[_15] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        record_format_type: cdktf.stringToTerraform(struct.recordFormatType),
        mapping_parameters: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersToTerraform(struct.mappingParameters),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // mapping_parameters - computed: false, optional: false, required: true
        this._mappingParameters = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersOutputReference(this, "mapping_parameters");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._recordFormatType !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordFormatType = this._recordFormatType;
        }
        if (this._mappingParameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mappingParameters = this._mappingParameters?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._recordFormatType = undefined;
            this._mappingParameters.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._recordFormatType = value.recordFormatType;
            this._mappingParameters.internalValue = value.mappingParameters;
        }
    }
    get recordFormatType() {
        return this.getStringAttribute('record_format_type');
    }
    set recordFormatType(value) {
        this._recordFormatType = value;
    }
    // Temporarily expose input value. Use with caution.
    get recordFormatTypeInput() {
        return this._recordFormatType;
    }
    get mappingParameters() {
        return this._mappingParameters;
    }
    putMappingParameters(value) {
        this._mappingParameters.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get mappingParametersInput() {
        return this._mappingParameters.internalValue;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatOutputReference[_16] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        record_encoding: cdktf.stringToTerraform(struct.recordEncoding),
        record_column: cdktf.listMapper(kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnToTerraform, true)(struct.recordColumn),
        record_format: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatToTerraform(struct.recordFormat),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // record_column - computed: false, optional: false, required: true
        this._recordColumn = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumnList(this, "record_column", false);
        // record_format - computed: false, optional: false, required: true
        this._recordFormat = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatOutputReference(this, "record_format");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._recordEncoding !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordEncoding = this._recordEncoding;
        }
        if (this._recordColumn?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordColumn = this._recordColumn?.internalValue;
        }
        if (this._recordFormat?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordFormat = this._recordFormat?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._recordEncoding = undefined;
            this._recordColumn.internalValue = undefined;
            this._recordFormat.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._recordEncoding = value.recordEncoding;
            this._recordColumn.internalValue = value.recordColumn;
            this._recordFormat.internalValue = value.recordFormat;
        }
    }
    get recordEncoding() {
        return this.getStringAttribute('record_encoding');
    }
    set recordEncoding(value) {
        this._recordEncoding = value;
    }
    resetRecordEncoding() {
        this._recordEncoding = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recordEncodingInput() {
        return this._recordEncoding;
    }
    get recordColumn() {
        return this._recordColumn;
    }
    putRecordColumn(value) {
        this._recordColumn.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get recordColumnInput() {
        return this._recordColumn.internalValue;
    }
    get recordFormat() {
        return this._recordFormat;
    }
    putRecordFormat(value) {
        this._recordFormat.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get recordFormatInput() {
        return this._recordFormat.internalValue;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaOutputReference;
_17 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaOutputReference[_17] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        file_key: cdktf.stringToTerraform(struct.fileKey),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSourceToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSourceToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketArn = this._bucketArn;
        }
        if (this._fileKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileKey = this._fileKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketArn = undefined;
            this._fileKey = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketArn = value.bucketArn;
            this._fileKey = value.fileKey;
        }
    }
    get bucketArn() {
        return this.getStringAttribute('bucket_arn');
    }
    set bucketArn(value) {
        this._bucketArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketArnInput() {
        return this._bucketArn;
    }
    get fileKey() {
        return this.getStringAttribute('file_key');
    }
    set fileKey(value) {
        this._fileKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get fileKeyInput() {
        return this._fileKey;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSourceOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSourceOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSourceOutputReference[_18] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSourceOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        table_name: cdktf.stringToTerraform(struct.tableName),
        reference_schema: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaToTerraform(struct.referenceSchema),
        s3_reference_data_source: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSourceToTerraform(struct.s3ReferenceDataSource),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // reference_schema - computed: false, optional: false, required: true
        this._referenceSchema = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaOutputReference(this, "reference_schema");
        // s3_reference_data_source - computed: false, optional: false, required: true
        this._s3ReferenceDataSource = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSourceOutputReference(this, "s3_reference_data_source");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._tableName !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableName = this._tableName;
        }
        if (this._referenceSchema?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.referenceSchema = this._referenceSchema?.internalValue;
        }
        if (this._s3ReferenceDataSource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3ReferenceDataSource = this._s3ReferenceDataSource?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._tableName = undefined;
            this._referenceSchema.internalValue = undefined;
            this._s3ReferenceDataSource.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._tableName = value.tableName;
            this._referenceSchema.internalValue = value.referenceSchema;
            this._s3ReferenceDataSource.internalValue = value.s3ReferenceDataSource;
        }
    }
    // reference_id - computed: true, optional: false, required: false
    get referenceId() {
        return this.getStringAttribute('reference_id');
    }
    get tableName() {
        return this.getStringAttribute('table_name');
    }
    set tableName(value) {
        this._tableName = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableNameInput() {
        return this._tableName;
    }
    get referenceSchema() {
        return this._referenceSchema;
    }
    putReferenceSchema(value) {
        this._referenceSchema.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get referenceSchemaInput() {
        return this._referenceSchema.internalValue;
    }
    get s3ReferenceDataSource() {
        return this._s3ReferenceDataSource;
    }
    putS3ReferenceDataSource(value) {
        this._s3ReferenceDataSource.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3ReferenceDataSourceInput() {
        return this._s3ReferenceDataSource.internalValue;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceOutputReference[_19] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        input: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputToTerraform(struct.input),
        output: cdktf.listMapper(kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputToTerraform, true)(struct.output),
        reference_data_source: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceToTerraform(struct.referenceDataSource),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // input - computed: false, optional: true, required: false
        this._input = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationInputOutputReference(this, "input");
        // output - computed: false, optional: true, required: false
        this._output = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputList(this, "output", true);
        // reference_data_source - computed: false, optional: true, required: false
        this._referenceDataSource = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceOutputReference(this, "reference_data_source");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._input?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.input = this._input?.internalValue;
        }
        if (this._output?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.output = this._output?.internalValue;
        }
        if (this._referenceDataSource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.referenceDataSource = this._referenceDataSource?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._input.internalValue = undefined;
            this._output.internalValue = undefined;
            this._referenceDataSource.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._input.internalValue = value.input;
            this._output.internalValue = value.output;
            this._referenceDataSource.internalValue = value.referenceDataSource;
        }
    }
    get input() {
        return this._input;
    }
    putInput(value) {
        this._input.internalValue = value;
    }
    resetInput() {
        this._input.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputInput() {
        return this._input.internalValue;
    }
    get output() {
        return this._output;
    }
    putOutput(value) {
        this._output.internalValue = value;
    }
    resetOutput() {
        this._output.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputInput() {
        return this._output.internalValue;
    }
    get referenceDataSource() {
        return this._referenceDataSource;
    }
    putReferenceDataSource(value) {
        this._referenceDataSource.internalValue = value;
    }
    resetReferenceDataSource() {
        this._referenceDataSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get referenceDataSourceInput() {
        return this._referenceDataSource.internalValue;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputReference[_20] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationVpcConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroupIds),
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.subnetIds),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationVpcConfigurationToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationVpcConfigurationToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationVpcConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._securityGroupIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroupIds = this._securityGroupIds;
        }
        if (this._subnetIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetIds = this._subnetIds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._securityGroupIds = undefined;
            this._subnetIds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._securityGroupIds = value.securityGroupIds;
            this._subnetIds = value.subnetIds;
        }
    }
    get securityGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('security_group_ids'));
    }
    set securityGroupIds(value) {
        this._securityGroupIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupIdsInput() {
        return this._securityGroupIds;
    }
    get subnetIds() {
        return cdktf.Fn.tolist(this.getListAttribute('subnet_ids'));
    }
    set subnetIds(value) {
        this._subnetIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdsInput() {
        return this._subnetIds;
    }
    // vpc_configuration_id - computed: true, optional: false, required: false
    get vpcConfigurationId() {
        return this.getStringAttribute('vpc_configuration_id');
    }
    // vpc_id - computed: true, optional: false, required: false
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationVpcConfigurationOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationVpcConfigurationOutputReference;
_21 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationVpcConfigurationOutputReference[_21] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationVpcConfigurationOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationApplicationConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        application_code_configuration: kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationToTerraform(struct.applicationCodeConfiguration),
        application_snapshot_configuration: kinesisanalyticsv2ApplicationApplicationConfigurationApplicationSnapshotConfigurationToTerraform(struct.applicationSnapshotConfiguration),
        environment_properties: kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesToTerraform(struct.environmentProperties),
        flink_application_configuration: kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationToTerraform(struct.flinkApplicationConfiguration),
        run_configuration: kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationToTerraform(struct.runConfiguration),
        sql_application_configuration: kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationToTerraform(struct.sqlApplicationConfiguration),
        vpc_configuration: kinesisanalyticsv2ApplicationApplicationConfigurationVpcConfigurationToTerraform(struct.vpcConfiguration),
    };
}
exports.kinesisanalyticsv2ApplicationApplicationConfigurationToTerraform = kinesisanalyticsv2ApplicationApplicationConfigurationToTerraform;
class Kinesisanalyticsv2ApplicationApplicationConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // application_code_configuration - computed: false, optional: false, required: true
        this._applicationCodeConfiguration = new Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationCodeConfigurationOutputReference(this, "application_code_configuration");
        // application_snapshot_configuration - computed: false, optional: true, required: false
        this._applicationSnapshotConfiguration = new Kinesisanalyticsv2ApplicationApplicationConfigurationApplicationSnapshotConfigurationOutputReference(this, "application_snapshot_configuration");
        // environment_properties - computed: false, optional: true, required: false
        this._environmentProperties = new Kinesisanalyticsv2ApplicationApplicationConfigurationEnvironmentPropertiesOutputReference(this, "environment_properties");
        // flink_application_configuration - computed: false, optional: true, required: false
        this._flinkApplicationConfiguration = new Kinesisanalyticsv2ApplicationApplicationConfigurationFlinkApplicationConfigurationOutputReference(this, "flink_application_configuration");
        // run_configuration - computed: false, optional: true, required: false
        this._runConfiguration = new Kinesisanalyticsv2ApplicationApplicationConfigurationRunConfigurationOutputReference(this, "run_configuration");
        // sql_application_configuration - computed: false, optional: true, required: false
        this._sqlApplicationConfiguration = new Kinesisanalyticsv2ApplicationApplicationConfigurationSqlApplicationConfigurationOutputReference(this, "sql_application_configuration");
        // vpc_configuration - computed: false, optional: true, required: false
        this._vpcConfiguration = new Kinesisanalyticsv2ApplicationApplicationConfigurationVpcConfigurationOutputReference(this, "vpc_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._applicationCodeConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.applicationCodeConfiguration = this._applicationCodeConfiguration?.internalValue;
        }
        if (this._applicationSnapshotConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.applicationSnapshotConfiguration = this._applicationSnapshotConfiguration?.internalValue;
        }
        if (this._environmentProperties?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.environmentProperties = this._environmentProperties?.internalValue;
        }
        if (this._flinkApplicationConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.flinkApplicationConfiguration = this._flinkApplicationConfiguration?.internalValue;
        }
        if (this._runConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.runConfiguration = this._runConfiguration?.internalValue;
        }
        if (this._sqlApplicationConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sqlApplicationConfiguration = this._sqlApplicationConfiguration?.internalValue;
        }
        if (this._vpcConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.vpcConfiguration = this._vpcConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._applicationCodeConfiguration.internalValue = undefined;
            this._applicationSnapshotConfiguration.internalValue = undefined;
            this._environmentProperties.internalValue = undefined;
            this._flinkApplicationConfiguration.internalValue = undefined;
            this._runConfiguration.internalValue = undefined;
            this._sqlApplicationConfiguration.internalValue = undefined;
            this._vpcConfiguration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._applicationCodeConfiguration.internalValue = value.applicationCodeConfiguration;
            this._applicationSnapshotConfiguration.internalValue = value.applicationSnapshotConfiguration;
            this._environmentProperties.internalValue = value.environmentProperties;
            this._flinkApplicationConfiguration.internalValue = value.flinkApplicationConfiguration;
            this._runConfiguration.internalValue = value.runConfiguration;
            this._sqlApplicationConfiguration.internalValue = value.sqlApplicationConfiguration;
            this._vpcConfiguration.internalValue = value.vpcConfiguration;
        }
    }
    get applicationCodeConfiguration() {
        return this._applicationCodeConfiguration;
    }
    putApplicationCodeConfiguration(value) {
        this._applicationCodeConfiguration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get applicationCodeConfigurationInput() {
        return this._applicationCodeConfiguration.internalValue;
    }
    get applicationSnapshotConfiguration() {
        return this._applicationSnapshotConfiguration;
    }
    putApplicationSnapshotConfiguration(value) {
        this._applicationSnapshotConfiguration.internalValue = value;
    }
    resetApplicationSnapshotConfiguration() {
        this._applicationSnapshotConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get applicationSnapshotConfigurationInput() {
        return this._applicationSnapshotConfiguration.internalValue;
    }
    get environmentProperties() {
        return this._environmentProperties;
    }
    putEnvironmentProperties(value) {
        this._environmentProperties.internalValue = value;
    }
    resetEnvironmentProperties() {
        this._environmentProperties.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get environmentPropertiesInput() {
        return this._environmentProperties.internalValue;
    }
    get flinkApplicationConfiguration() {
        return this._flinkApplicationConfiguration;
    }
    putFlinkApplicationConfiguration(value) {
        this._flinkApplicationConfiguration.internalValue = value;
    }
    resetFlinkApplicationConfiguration() {
        this._flinkApplicationConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get flinkApplicationConfigurationInput() {
        return this._flinkApplicationConfiguration.internalValue;
    }
    get runConfiguration() {
        return this._runConfiguration;
    }
    putRunConfiguration(value) {
        this._runConfiguration.internalValue = value;
    }
    resetRunConfiguration() {
        this._runConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get runConfigurationInput() {
        return this._runConfiguration.internalValue;
    }
    get sqlApplicationConfiguration() {
        return this._sqlApplicationConfiguration;
    }
    putSqlApplicationConfiguration(value) {
        this._sqlApplicationConfiguration.internalValue = value;
    }
    resetSqlApplicationConfiguration() {
        this._sqlApplicationConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sqlApplicationConfigurationInput() {
        return this._sqlApplicationConfiguration.internalValue;
    }
    get vpcConfiguration() {
        return this._vpcConfiguration;
    }
    putVpcConfiguration(value) {
        this._vpcConfiguration.internalValue = value;
    }
    resetVpcConfiguration() {
        this._vpcConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcConfigurationInput() {
        return this._vpcConfiguration.internalValue;
    }
}
exports.Kinesisanalyticsv2ApplicationApplicationConfigurationOutputReference = Kinesisanalyticsv2ApplicationApplicationConfigurationOutputReference;
_22 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationApplicationConfigurationOutputReference[_22] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationApplicationConfigurationOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        log_stream_arn: cdktf.stringToTerraform(struct.logStreamArn),
    };
}
exports.kinesisanalyticsv2ApplicationCloudwatchLoggingOptionsToTerraform = kinesisanalyticsv2ApplicationCloudwatchLoggingOptionsToTerraform;
class Kinesisanalyticsv2ApplicationCloudwatchLoggingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._logStreamArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.logStreamArn = this._logStreamArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._logStreamArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._logStreamArn = value.logStreamArn;
        }
    }
    // cloudwatch_logging_option_id - computed: true, optional: false, required: false
    get cloudwatchLoggingOptionId() {
        return this.getStringAttribute('cloudwatch_logging_option_id');
    }
    get logStreamArn() {
        return this.getStringAttribute('log_stream_arn');
    }
    set logStreamArn(value) {
        this._logStreamArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get logStreamArnInput() {
        return this._logStreamArn;
    }
}
exports.Kinesisanalyticsv2ApplicationCloudwatchLoggingOptionsOutputReference = Kinesisanalyticsv2ApplicationCloudwatchLoggingOptionsOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationCloudwatchLoggingOptionsOutputReference[_23] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationCloudwatchLoggingOptionsOutputReference", version: "10.0.12" };
function kinesisanalyticsv2ApplicationTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.kinesisanalyticsv2ApplicationTimeoutsToTerraform = kinesisanalyticsv2ApplicationTimeoutsToTerraform;
class Kinesisanalyticsv2ApplicationTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.Kinesisanalyticsv2ApplicationTimeoutsOutputReference = Kinesisanalyticsv2ApplicationTimeoutsOutputReference;
_24 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2ApplicationTimeoutsOutputReference[_24] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2ApplicationTimeoutsOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/kinesisanalyticsv2_application aws_kinesisanalyticsv2_application}
*/
class Kinesisanalyticsv2Application extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/kinesisanalyticsv2_application aws_kinesisanalyticsv2_application} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Kinesisanalyticsv2ApplicationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_kinesisanalyticsv2_application',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // application_configuration - computed: false, optional: true, required: false
        this._applicationConfiguration = new Kinesisanalyticsv2ApplicationApplicationConfigurationOutputReference(this, "application_configuration");
        // cloudwatch_logging_options - computed: false, optional: true, required: false
        this._cloudwatchLoggingOptions = new Kinesisanalyticsv2ApplicationCloudwatchLoggingOptionsOutputReference(this, "cloudwatch_logging_options");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new Kinesisanalyticsv2ApplicationTimeoutsOutputReference(this, "timeouts");
        this._description = config.description;
        this._forceStop = config.forceStop;
        this._id = config.id;
        this._name = config.name;
        this._runtimeEnvironment = config.runtimeEnvironment;
        this._serviceExecutionRole = config.serviceExecutionRole;
        this._startApplication = config.startApplication;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._applicationConfiguration.internalValue = config.applicationConfiguration;
        this._cloudwatchLoggingOptions.internalValue = config.cloudwatchLoggingOptions;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // create_timestamp - computed: true, optional: false, required: false
    get createTimestamp() {
        return this.getStringAttribute('create_timestamp');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get forceStop() {
        return this.getBooleanAttribute('force_stop');
    }
    set forceStop(value) {
        this._forceStop = value;
    }
    resetForceStop() {
        this._forceStop = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forceStopInput() {
        return this._forceStop;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // last_update_timestamp - computed: true, optional: false, required: false
    get lastUpdateTimestamp() {
        return this.getStringAttribute('last_update_timestamp');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get runtimeEnvironment() {
        return this.getStringAttribute('runtime_environment');
    }
    set runtimeEnvironment(value) {
        this._runtimeEnvironment = value;
    }
    // Temporarily expose input value. Use with caution.
    get runtimeEnvironmentInput() {
        return this._runtimeEnvironment;
    }
    get serviceExecutionRole() {
        return this.getStringAttribute('service_execution_role');
    }
    set serviceExecutionRole(value) {
        this._serviceExecutionRole = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceExecutionRoleInput() {
        return this._serviceExecutionRole;
    }
    get startApplication() {
        return this.getBooleanAttribute('start_application');
    }
    set startApplication(value) {
        this._startApplication = value;
    }
    resetStartApplication() {
        this._startApplication = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get startApplicationInput() {
        return this._startApplication;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    // version_id - computed: true, optional: false, required: false
    get versionId() {
        return this.getNumberAttribute('version_id');
    }
    get applicationConfiguration() {
        return this._applicationConfiguration;
    }
    putApplicationConfiguration(value) {
        this._applicationConfiguration.internalValue = value;
    }
    resetApplicationConfiguration() {
        this._applicationConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get applicationConfigurationInput() {
        return this._applicationConfiguration.internalValue;
    }
    get cloudwatchLoggingOptions() {
        return this._cloudwatchLoggingOptions;
    }
    putCloudwatchLoggingOptions(value) {
        this._cloudwatchLoggingOptions.internalValue = value;
    }
    resetCloudwatchLoggingOptions() {
        this._cloudwatchLoggingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLoggingOptionsInput() {
        return this._cloudwatchLoggingOptions.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            force_stop: cdktf.booleanToTerraform(this._forceStop),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            runtime_environment: cdktf.stringToTerraform(this._runtimeEnvironment),
            service_execution_role: cdktf.stringToTerraform(this._serviceExecutionRole),
            start_application: cdktf.booleanToTerraform(this._startApplication),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            application_configuration: kinesisanalyticsv2ApplicationApplicationConfigurationToTerraform(this._applicationConfiguration.internalValue),
            cloudwatch_logging_options: kinesisanalyticsv2ApplicationCloudwatchLoggingOptionsToTerraform(this._cloudwatchLoggingOptions.internalValue),
            timeouts: kinesisanalyticsv2ApplicationTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.Kinesisanalyticsv2Application = Kinesisanalyticsv2Application;
_25 = JSII_RTTI_SYMBOL_1;
Kinesisanalyticsv2Application[_25] = { fqn: "@cdktf/provider-aws.kinesisanalyticsv2Application.Kinesisanalyticsv2Application", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
Kinesisanalyticsv2Application.tfResourceType = "aws_kinesisanalyticsv2_application";
//# sourceMappingURL=data:application/json;base64,