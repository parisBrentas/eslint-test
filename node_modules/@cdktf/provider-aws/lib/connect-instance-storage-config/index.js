"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectInstanceStorageConfig = exports.ConnectInstanceStorageConfigStorageConfigOutputReference = exports.connectInstanceStorageConfigStorageConfigToTerraform = exports.ConnectInstanceStorageConfigStorageConfigS3ConfigOutputReference = exports.connectInstanceStorageConfigStorageConfigS3ConfigToTerraform = exports.ConnectInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutputReference = exports.connectInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigToTerraform = exports.ConnectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutputReference = exports.connectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigToTerraform = exports.ConnectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutputReference = exports.connectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigToTerraform = exports.ConnectInstanceStorageConfigStorageConfigKinesisStreamConfigOutputReference = exports.connectInstanceStorageConfigStorageConfigKinesisStreamConfigToTerraform = exports.ConnectInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutputReference = exports.connectInstanceStorageConfigStorageConfigKinesisFirehoseConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function connectInstanceStorageConfigStorageConfigKinesisFirehoseConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        firehose_arn: cdktf.stringToTerraform(struct.firehoseArn),
    };
}
exports.connectInstanceStorageConfigStorageConfigKinesisFirehoseConfigToTerraform = connectInstanceStorageConfigStorageConfigKinesisFirehoseConfigToTerraform;
class ConnectInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._firehoseArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.firehoseArn = this._firehoseArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._firehoseArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._firehoseArn = value.firehoseArn;
        }
    }
    get firehoseArn() {
        return this.getStringAttribute('firehose_arn');
    }
    set firehoseArn(value) {
        this._firehoseArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get firehoseArnInput() {
        return this._firehoseArn;
    }
}
exports.ConnectInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutputReference = ConnectInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ConnectInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutputReference[_a] = { fqn: "@cdktf/provider-aws.connectInstanceStorageConfig.ConnectInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutputReference", version: "10.0.12" };
function connectInstanceStorageConfigStorageConfigKinesisStreamConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        stream_arn: cdktf.stringToTerraform(struct.streamArn),
    };
}
exports.connectInstanceStorageConfigStorageConfigKinesisStreamConfigToTerraform = connectInstanceStorageConfigStorageConfigKinesisStreamConfigToTerraform;
class ConnectInstanceStorageConfigStorageConfigKinesisStreamConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._streamArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.streamArn = this._streamArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._streamArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._streamArn = value.streamArn;
        }
    }
    get streamArn() {
        return this.getStringAttribute('stream_arn');
    }
    set streamArn(value) {
        this._streamArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get streamArnInput() {
        return this._streamArn;
    }
}
exports.ConnectInstanceStorageConfigStorageConfigKinesisStreamConfigOutputReference = ConnectInstanceStorageConfigStorageConfigKinesisStreamConfigOutputReference;
_b = JSII_RTTI_SYMBOL_1;
ConnectInstanceStorageConfigStorageConfigKinesisStreamConfigOutputReference[_b] = { fqn: "@cdktf/provider-aws.connectInstanceStorageConfig.ConnectInstanceStorageConfigStorageConfigKinesisStreamConfigOutputReference", version: "10.0.12" };
function connectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        encryption_type: cdktf.stringToTerraform(struct.encryptionType),
        key_id: cdktf.stringToTerraform(struct.keyId),
    };
}
exports.connectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigToTerraform = connectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigToTerraform;
class ConnectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._encryptionType !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionType = this._encryptionType;
        }
        if (this._keyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyId = this._keyId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._encryptionType = undefined;
            this._keyId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._encryptionType = value.encryptionType;
            this._keyId = value.keyId;
        }
    }
    get encryptionType() {
        return this.getStringAttribute('encryption_type');
    }
    set encryptionType(value) {
        this._encryptionType = value;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionTypeInput() {
        return this._encryptionType;
    }
    get keyId() {
        return this.getStringAttribute('key_id');
    }
    set keyId(value) {
        this._keyId = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyIdInput() {
        return this._keyId;
    }
}
exports.ConnectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutputReference = ConnectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
ConnectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutputReference[_c] = { fqn: "@cdktf/provider-aws.connectInstanceStorageConfig.ConnectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutputReference", version: "10.0.12" };
function connectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        prefix: cdktf.stringToTerraform(struct.prefix),
        retention_period_hours: cdktf.numberToTerraform(struct.retentionPeriodHours),
        encryption_config: connectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigToTerraform(struct.encryptionConfig),
    };
}
exports.connectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigToTerraform = connectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigToTerraform;
class ConnectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // encryption_config - computed: false, optional: false, required: true
        this._encryptionConfig = new ConnectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutputReference(this, "encryption_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._prefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefix = this._prefix;
        }
        if (this._retentionPeriodHours !== undefined) {
            hasAnyValues = true;
            internalValueResult.retentionPeriodHours = this._retentionPeriodHours;
        }
        if (this._encryptionConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionConfig = this._encryptionConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._prefix = undefined;
            this._retentionPeriodHours = undefined;
            this._encryptionConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._prefix = value.prefix;
            this._retentionPeriodHours = value.retentionPeriodHours;
            this._encryptionConfig.internalValue = value.encryptionConfig;
        }
    }
    get prefix() {
        return this.getStringAttribute('prefix');
    }
    set prefix(value) {
        this._prefix = value;
    }
    // Temporarily expose input value. Use with caution.
    get prefixInput() {
        return this._prefix;
    }
    get retentionPeriodHours() {
        return this.getNumberAttribute('retention_period_hours');
    }
    set retentionPeriodHours(value) {
        this._retentionPeriodHours = value;
    }
    // Temporarily expose input value. Use with caution.
    get retentionPeriodHoursInput() {
        return this._retentionPeriodHours;
    }
    get encryptionConfig() {
        return this._encryptionConfig;
    }
    putEncryptionConfig(value) {
        this._encryptionConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionConfigInput() {
        return this._encryptionConfig.internalValue;
    }
}
exports.ConnectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutputReference = ConnectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutputReference;
_d = JSII_RTTI_SYMBOL_1;
ConnectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutputReference[_d] = { fqn: "@cdktf/provider-aws.connectInstanceStorageConfig.ConnectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutputReference", version: "10.0.12" };
function connectInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        encryption_type: cdktf.stringToTerraform(struct.encryptionType),
        key_id: cdktf.stringToTerraform(struct.keyId),
    };
}
exports.connectInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigToTerraform = connectInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigToTerraform;
class ConnectInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._encryptionType !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionType = this._encryptionType;
        }
        if (this._keyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyId = this._keyId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._encryptionType = undefined;
            this._keyId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._encryptionType = value.encryptionType;
            this._keyId = value.keyId;
        }
    }
    get encryptionType() {
        return this.getStringAttribute('encryption_type');
    }
    set encryptionType(value) {
        this._encryptionType = value;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionTypeInput() {
        return this._encryptionType;
    }
    get keyId() {
        return this.getStringAttribute('key_id');
    }
    set keyId(value) {
        this._keyId = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyIdInput() {
        return this._keyId;
    }
}
exports.ConnectInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutputReference = ConnectInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
ConnectInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutputReference[_e] = { fqn: "@cdktf/provider-aws.connectInstanceStorageConfig.ConnectInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutputReference", version: "10.0.12" };
function connectInstanceStorageConfigStorageConfigS3ConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        encryption_config: connectInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigToTerraform(struct.encryptionConfig),
    };
}
exports.connectInstanceStorageConfigStorageConfigS3ConfigToTerraform = connectInstanceStorageConfigStorageConfigS3ConfigToTerraform;
class ConnectInstanceStorageConfigStorageConfigS3ConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // encryption_config - computed: false, optional: true, required: false
        this._encryptionConfig = new ConnectInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutputReference(this, "encryption_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._bucketPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketPrefix = this._bucketPrefix;
        }
        if (this._encryptionConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionConfig = this._encryptionConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._bucketPrefix = undefined;
            this._encryptionConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._bucketPrefix = value.bucketPrefix;
            this._encryptionConfig.internalValue = value.encryptionConfig;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
    get encryptionConfig() {
        return this._encryptionConfig;
    }
    putEncryptionConfig(value) {
        this._encryptionConfig.internalValue = value;
    }
    resetEncryptionConfig() {
        this._encryptionConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionConfigInput() {
        return this._encryptionConfig.internalValue;
    }
}
exports.ConnectInstanceStorageConfigStorageConfigS3ConfigOutputReference = ConnectInstanceStorageConfigStorageConfigS3ConfigOutputReference;
_f = JSII_RTTI_SYMBOL_1;
ConnectInstanceStorageConfigStorageConfigS3ConfigOutputReference[_f] = { fqn: "@cdktf/provider-aws.connectInstanceStorageConfig.ConnectInstanceStorageConfigStorageConfigS3ConfigOutputReference", version: "10.0.12" };
function connectInstanceStorageConfigStorageConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        storage_type: cdktf.stringToTerraform(struct.storageType),
        kinesis_firehose_config: connectInstanceStorageConfigStorageConfigKinesisFirehoseConfigToTerraform(struct.kinesisFirehoseConfig),
        kinesis_stream_config: connectInstanceStorageConfigStorageConfigKinesisStreamConfigToTerraform(struct.kinesisStreamConfig),
        kinesis_video_stream_config: connectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigToTerraform(struct.kinesisVideoStreamConfig),
        s3_config: connectInstanceStorageConfigStorageConfigS3ConfigToTerraform(struct.s3Config),
    };
}
exports.connectInstanceStorageConfigStorageConfigToTerraform = connectInstanceStorageConfigStorageConfigToTerraform;
class ConnectInstanceStorageConfigStorageConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // kinesis_firehose_config - computed: false, optional: true, required: false
        this._kinesisFirehoseConfig = new ConnectInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutputReference(this, "kinesis_firehose_config");
        // kinesis_stream_config - computed: false, optional: true, required: false
        this._kinesisStreamConfig = new ConnectInstanceStorageConfigStorageConfigKinesisStreamConfigOutputReference(this, "kinesis_stream_config");
        // kinesis_video_stream_config - computed: false, optional: true, required: false
        this._kinesisVideoStreamConfig = new ConnectInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutputReference(this, "kinesis_video_stream_config");
        // s3_config - computed: false, optional: true, required: false
        this._s3Config = new ConnectInstanceStorageConfigStorageConfigS3ConfigOutputReference(this, "s3_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._storageType !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageType = this._storageType;
        }
        if (this._kinesisFirehoseConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kinesisFirehoseConfig = this._kinesisFirehoseConfig?.internalValue;
        }
        if (this._kinesisStreamConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kinesisStreamConfig = this._kinesisStreamConfig?.internalValue;
        }
        if (this._kinesisVideoStreamConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kinesisVideoStreamConfig = this._kinesisVideoStreamConfig?.internalValue;
        }
        if (this._s3Config?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Config = this._s3Config?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._storageType = undefined;
            this._kinesisFirehoseConfig.internalValue = undefined;
            this._kinesisStreamConfig.internalValue = undefined;
            this._kinesisVideoStreamConfig.internalValue = undefined;
            this._s3Config.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._storageType = value.storageType;
            this._kinesisFirehoseConfig.internalValue = value.kinesisFirehoseConfig;
            this._kinesisStreamConfig.internalValue = value.kinesisStreamConfig;
            this._kinesisVideoStreamConfig.internalValue = value.kinesisVideoStreamConfig;
            this._s3Config.internalValue = value.s3Config;
        }
    }
    get storageType() {
        return this.getStringAttribute('storage_type');
    }
    set storageType(value) {
        this._storageType = value;
    }
    // Temporarily expose input value. Use with caution.
    get storageTypeInput() {
        return this._storageType;
    }
    get kinesisFirehoseConfig() {
        return this._kinesisFirehoseConfig;
    }
    putKinesisFirehoseConfig(value) {
        this._kinesisFirehoseConfig.internalValue = value;
    }
    resetKinesisFirehoseConfig() {
        this._kinesisFirehoseConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kinesisFirehoseConfigInput() {
        return this._kinesisFirehoseConfig.internalValue;
    }
    get kinesisStreamConfig() {
        return this._kinesisStreamConfig;
    }
    putKinesisStreamConfig(value) {
        this._kinesisStreamConfig.internalValue = value;
    }
    resetKinesisStreamConfig() {
        this._kinesisStreamConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kinesisStreamConfigInput() {
        return this._kinesisStreamConfig.internalValue;
    }
    get kinesisVideoStreamConfig() {
        return this._kinesisVideoStreamConfig;
    }
    putKinesisVideoStreamConfig(value) {
        this._kinesisVideoStreamConfig.internalValue = value;
    }
    resetKinesisVideoStreamConfig() {
        this._kinesisVideoStreamConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kinesisVideoStreamConfigInput() {
        return this._kinesisVideoStreamConfig.internalValue;
    }
    get s3Config() {
        return this._s3Config;
    }
    putS3Config(value) {
        this._s3Config.internalValue = value;
    }
    resetS3Config() {
        this._s3Config.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3ConfigInput() {
        return this._s3Config.internalValue;
    }
}
exports.ConnectInstanceStorageConfigStorageConfigOutputReference = ConnectInstanceStorageConfigStorageConfigOutputReference;
_g = JSII_RTTI_SYMBOL_1;
ConnectInstanceStorageConfigStorageConfigOutputReference[_g] = { fqn: "@cdktf/provider-aws.connectInstanceStorageConfig.ConnectInstanceStorageConfigStorageConfigOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/connect_instance_storage_config aws_connect_instance_storage_config}
*/
class ConnectInstanceStorageConfig extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/connect_instance_storage_config aws_connect_instance_storage_config} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ConnectInstanceStorageConfigConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_connect_instance_storage_config',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // storage_config - computed: false, optional: false, required: true
        this._storageConfig = new ConnectInstanceStorageConfigStorageConfigOutputReference(this, "storage_config");
        this._id = config.id;
        this._instanceId = config.instanceId;
        this._resourceType = config.resourceType;
        this._storageConfig.internalValue = config.storageConfig;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // association_id - computed: true, optional: false, required: false
    get associationId() {
        return this.getStringAttribute('association_id');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get instanceId() {
        return this.getStringAttribute('instance_id');
    }
    set instanceId(value) {
        this._instanceId = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceIdInput() {
        return this._instanceId;
    }
    get resourceType() {
        return this.getStringAttribute('resource_type');
    }
    set resourceType(value) {
        this._resourceType = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTypeInput() {
        return this._resourceType;
    }
    get storageConfig() {
        return this._storageConfig;
    }
    putStorageConfig(value) {
        this._storageConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get storageConfigInput() {
        return this._storageConfig.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            instance_id: cdktf.stringToTerraform(this._instanceId),
            resource_type: cdktf.stringToTerraform(this._resourceType),
            storage_config: connectInstanceStorageConfigStorageConfigToTerraform(this._storageConfig.internalValue),
        };
    }
}
exports.ConnectInstanceStorageConfig = ConnectInstanceStorageConfig;
_h = JSII_RTTI_SYMBOL_1;
ConnectInstanceStorageConfig[_h] = { fqn: "@cdktf/provider-aws.connectInstanceStorageConfig.ConnectInstanceStorageConfig", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
ConnectInstanceStorageConfig.tfResourceType = "aws_connect_instance_storage_config";
//# sourceMappingURL=data:application/json;base64,