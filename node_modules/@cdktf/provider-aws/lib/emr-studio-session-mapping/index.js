"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmrStudioSessionMapping = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/emr_studio_session_mapping aws_emr_studio_session_mapping}
*/
class EmrStudioSessionMapping extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/emr_studio_session_mapping aws_emr_studio_session_mapping} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options EmrStudioSessionMappingConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_emr_studio_session_mapping',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._id = config.id;
        this._identityId = config.identityId;
        this._identityName = config.identityName;
        this._identityType = config.identityType;
        this._sessionPolicyArn = config.sessionPolicyArn;
        this._studioId = config.studioId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get identityId() {
        return this.getStringAttribute('identity_id');
    }
    set identityId(value) {
        this._identityId = value;
    }
    resetIdentityId() {
        this._identityId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityIdInput() {
        return this._identityId;
    }
    get identityName() {
        return this.getStringAttribute('identity_name');
    }
    set identityName(value) {
        this._identityName = value;
    }
    resetIdentityName() {
        this._identityName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityNameInput() {
        return this._identityName;
    }
    get identityType() {
        return this.getStringAttribute('identity_type');
    }
    set identityType(value) {
        this._identityType = value;
    }
    // Temporarily expose input value. Use with caution.
    get identityTypeInput() {
        return this._identityType;
    }
    get sessionPolicyArn() {
        return this.getStringAttribute('session_policy_arn');
    }
    set sessionPolicyArn(value) {
        this._sessionPolicyArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get sessionPolicyArnInput() {
        return this._sessionPolicyArn;
    }
    get studioId() {
        return this.getStringAttribute('studio_id');
    }
    set studioId(value) {
        this._studioId = value;
    }
    // Temporarily expose input value. Use with caution.
    get studioIdInput() {
        return this._studioId;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            identity_id: cdktf.stringToTerraform(this._identityId),
            identity_name: cdktf.stringToTerraform(this._identityName),
            identity_type: cdktf.stringToTerraform(this._identityType),
            session_policy_arn: cdktf.stringToTerraform(this._sessionPolicyArn),
            studio_id: cdktf.stringToTerraform(this._studioId),
        };
    }
}
exports.EmrStudioSessionMapping = EmrStudioSessionMapping;
_a = JSII_RTTI_SYMBOL_1;
EmrStudioSessionMapping[_a] = { fqn: "@cdktf/provider-aws.emrStudioSessionMapping.EmrStudioSessionMapping", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
EmrStudioSessionMapping.tfResourceType = "aws_emr_studio_session_mapping";
//# sourceMappingURL=data:application/json;base64,