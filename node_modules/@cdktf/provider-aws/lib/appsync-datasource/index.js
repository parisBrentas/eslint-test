"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppsyncDatasource = exports.AppsyncDatasourceRelationalDatabaseConfigOutputReference = exports.appsyncDatasourceRelationalDatabaseConfigToTerraform = exports.AppsyncDatasourceRelationalDatabaseConfigHttpEndpointConfigOutputReference = exports.appsyncDatasourceRelationalDatabaseConfigHttpEndpointConfigToTerraform = exports.AppsyncDatasourceLambdaConfigOutputReference = exports.appsyncDatasourceLambdaConfigToTerraform = exports.AppsyncDatasourceHttpConfigOutputReference = exports.appsyncDatasourceHttpConfigToTerraform = exports.AppsyncDatasourceHttpConfigAuthorizationConfigOutputReference = exports.appsyncDatasourceHttpConfigAuthorizationConfigToTerraform = exports.AppsyncDatasourceHttpConfigAuthorizationConfigAwsIamConfigOutputReference = exports.appsyncDatasourceHttpConfigAuthorizationConfigAwsIamConfigToTerraform = exports.AppsyncDatasourceElasticsearchConfigOutputReference = exports.appsyncDatasourceElasticsearchConfigToTerraform = exports.AppsyncDatasourceDynamodbConfigOutputReference = exports.appsyncDatasourceDynamodbConfigToTerraform = exports.AppsyncDatasourceDynamodbConfigDeltaSyncConfigOutputReference = exports.appsyncDatasourceDynamodbConfigDeltaSyncConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function appsyncDatasourceDynamodbConfigDeltaSyncConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        base_table_ttl: cdktf.numberToTerraform(struct.baseTableTtl),
        delta_sync_table_name: cdktf.stringToTerraform(struct.deltaSyncTableName),
        delta_sync_table_ttl: cdktf.numberToTerraform(struct.deltaSyncTableTtl),
    };
}
exports.appsyncDatasourceDynamodbConfigDeltaSyncConfigToTerraform = appsyncDatasourceDynamodbConfigDeltaSyncConfigToTerraform;
class AppsyncDatasourceDynamodbConfigDeltaSyncConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._baseTableTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.baseTableTtl = this._baseTableTtl;
        }
        if (this._deltaSyncTableName !== undefined) {
            hasAnyValues = true;
            internalValueResult.deltaSyncTableName = this._deltaSyncTableName;
        }
        if (this._deltaSyncTableTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.deltaSyncTableTtl = this._deltaSyncTableTtl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._baseTableTtl = undefined;
            this._deltaSyncTableName = undefined;
            this._deltaSyncTableTtl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._baseTableTtl = value.baseTableTtl;
            this._deltaSyncTableName = value.deltaSyncTableName;
            this._deltaSyncTableTtl = value.deltaSyncTableTtl;
        }
    }
    get baseTableTtl() {
        return this.getNumberAttribute('base_table_ttl');
    }
    set baseTableTtl(value) {
        this._baseTableTtl = value;
    }
    resetBaseTableTtl() {
        this._baseTableTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get baseTableTtlInput() {
        return this._baseTableTtl;
    }
    get deltaSyncTableName() {
        return this.getStringAttribute('delta_sync_table_name');
    }
    set deltaSyncTableName(value) {
        this._deltaSyncTableName = value;
    }
    // Temporarily expose input value. Use with caution.
    get deltaSyncTableNameInput() {
        return this._deltaSyncTableName;
    }
    get deltaSyncTableTtl() {
        return this.getNumberAttribute('delta_sync_table_ttl');
    }
    set deltaSyncTableTtl(value) {
        this._deltaSyncTableTtl = value;
    }
    resetDeltaSyncTableTtl() {
        this._deltaSyncTableTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deltaSyncTableTtlInput() {
        return this._deltaSyncTableTtl;
    }
}
exports.AppsyncDatasourceDynamodbConfigDeltaSyncConfigOutputReference = AppsyncDatasourceDynamodbConfigDeltaSyncConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
AppsyncDatasourceDynamodbConfigDeltaSyncConfigOutputReference[_a] = { fqn: "@cdktf/provider-aws.appsyncDatasource.AppsyncDatasourceDynamodbConfigDeltaSyncConfigOutputReference", version: "10.0.12" };
function appsyncDatasourceDynamodbConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        region: cdktf.stringToTerraform(struct.region),
        table_name: cdktf.stringToTerraform(struct.tableName),
        use_caller_credentials: cdktf.booleanToTerraform(struct.useCallerCredentials),
        versioned: cdktf.booleanToTerraform(struct.versioned),
        delta_sync_config: appsyncDatasourceDynamodbConfigDeltaSyncConfigToTerraform(struct.deltaSyncConfig),
    };
}
exports.appsyncDatasourceDynamodbConfigToTerraform = appsyncDatasourceDynamodbConfigToTerraform;
class AppsyncDatasourceDynamodbConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // delta_sync_config - computed: false, optional: true, required: false
        this._deltaSyncConfig = new AppsyncDatasourceDynamodbConfigDeltaSyncConfigOutputReference(this, "delta_sync_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._region !== undefined) {
            hasAnyValues = true;
            internalValueResult.region = this._region;
        }
        if (this._tableName !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableName = this._tableName;
        }
        if (this._useCallerCredentials !== undefined) {
            hasAnyValues = true;
            internalValueResult.useCallerCredentials = this._useCallerCredentials;
        }
        if (this._versioned !== undefined) {
            hasAnyValues = true;
            internalValueResult.versioned = this._versioned;
        }
        if (this._deltaSyncConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.deltaSyncConfig = this._deltaSyncConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._region = undefined;
            this._tableName = undefined;
            this._useCallerCredentials = undefined;
            this._versioned = undefined;
            this._deltaSyncConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._region = value.region;
            this._tableName = value.tableName;
            this._useCallerCredentials = value.useCallerCredentials;
            this._versioned = value.versioned;
            this._deltaSyncConfig.internalValue = value.deltaSyncConfig;
        }
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    get tableName() {
        return this.getStringAttribute('table_name');
    }
    set tableName(value) {
        this._tableName = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableNameInput() {
        return this._tableName;
    }
    get useCallerCredentials() {
        return this.getBooleanAttribute('use_caller_credentials');
    }
    set useCallerCredentials(value) {
        this._useCallerCredentials = value;
    }
    resetUseCallerCredentials() {
        this._useCallerCredentials = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useCallerCredentialsInput() {
        return this._useCallerCredentials;
    }
    get versioned() {
        return this.getBooleanAttribute('versioned');
    }
    set versioned(value) {
        this._versioned = value;
    }
    resetVersioned() {
        this._versioned = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionedInput() {
        return this._versioned;
    }
    get deltaSyncConfig() {
        return this._deltaSyncConfig;
    }
    putDeltaSyncConfig(value) {
        this._deltaSyncConfig.internalValue = value;
    }
    resetDeltaSyncConfig() {
        this._deltaSyncConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deltaSyncConfigInput() {
        return this._deltaSyncConfig.internalValue;
    }
}
exports.AppsyncDatasourceDynamodbConfigOutputReference = AppsyncDatasourceDynamodbConfigOutputReference;
_b = JSII_RTTI_SYMBOL_1;
AppsyncDatasourceDynamodbConfigOutputReference[_b] = { fqn: "@cdktf/provider-aws.appsyncDatasource.AppsyncDatasourceDynamodbConfigOutputReference", version: "10.0.12" };
function appsyncDatasourceElasticsearchConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        endpoint: cdktf.stringToTerraform(struct.endpoint),
        region: cdktf.stringToTerraform(struct.region),
    };
}
exports.appsyncDatasourceElasticsearchConfigToTerraform = appsyncDatasourceElasticsearchConfigToTerraform;
class AppsyncDatasourceElasticsearchConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._endpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.endpoint = this._endpoint;
        }
        if (this._region !== undefined) {
            hasAnyValues = true;
            internalValueResult.region = this._region;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._endpoint = undefined;
            this._region = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._endpoint = value.endpoint;
            this._region = value.region;
        }
    }
    get endpoint() {
        return this.getStringAttribute('endpoint');
    }
    set endpoint(value) {
        this._endpoint = value;
    }
    // Temporarily expose input value. Use with caution.
    get endpointInput() {
        return this._endpoint;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
}
exports.AppsyncDatasourceElasticsearchConfigOutputReference = AppsyncDatasourceElasticsearchConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
AppsyncDatasourceElasticsearchConfigOutputReference[_c] = { fqn: "@cdktf/provider-aws.appsyncDatasource.AppsyncDatasourceElasticsearchConfigOutputReference", version: "10.0.12" };
function appsyncDatasourceHttpConfigAuthorizationConfigAwsIamConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        signing_region: cdktf.stringToTerraform(struct.signingRegion),
        signing_service_name: cdktf.stringToTerraform(struct.signingServiceName),
    };
}
exports.appsyncDatasourceHttpConfigAuthorizationConfigAwsIamConfigToTerraform = appsyncDatasourceHttpConfigAuthorizationConfigAwsIamConfigToTerraform;
class AppsyncDatasourceHttpConfigAuthorizationConfigAwsIamConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._signingRegion !== undefined) {
            hasAnyValues = true;
            internalValueResult.signingRegion = this._signingRegion;
        }
        if (this._signingServiceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.signingServiceName = this._signingServiceName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._signingRegion = undefined;
            this._signingServiceName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._signingRegion = value.signingRegion;
            this._signingServiceName = value.signingServiceName;
        }
    }
    get signingRegion() {
        return this.getStringAttribute('signing_region');
    }
    set signingRegion(value) {
        this._signingRegion = value;
    }
    resetSigningRegion() {
        this._signingRegion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get signingRegionInput() {
        return this._signingRegion;
    }
    get signingServiceName() {
        return this.getStringAttribute('signing_service_name');
    }
    set signingServiceName(value) {
        this._signingServiceName = value;
    }
    resetSigningServiceName() {
        this._signingServiceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get signingServiceNameInput() {
        return this._signingServiceName;
    }
}
exports.AppsyncDatasourceHttpConfigAuthorizationConfigAwsIamConfigOutputReference = AppsyncDatasourceHttpConfigAuthorizationConfigAwsIamConfigOutputReference;
_d = JSII_RTTI_SYMBOL_1;
AppsyncDatasourceHttpConfigAuthorizationConfigAwsIamConfigOutputReference[_d] = { fqn: "@cdktf/provider-aws.appsyncDatasource.AppsyncDatasourceHttpConfigAuthorizationConfigAwsIamConfigOutputReference", version: "10.0.12" };
function appsyncDatasourceHttpConfigAuthorizationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        authorization_type: cdktf.stringToTerraform(struct.authorizationType),
        aws_iam_config: appsyncDatasourceHttpConfigAuthorizationConfigAwsIamConfigToTerraform(struct.awsIamConfig),
    };
}
exports.appsyncDatasourceHttpConfigAuthorizationConfigToTerraform = appsyncDatasourceHttpConfigAuthorizationConfigToTerraform;
class AppsyncDatasourceHttpConfigAuthorizationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // aws_iam_config - computed: false, optional: true, required: false
        this._awsIamConfig = new AppsyncDatasourceHttpConfigAuthorizationConfigAwsIamConfigOutputReference(this, "aws_iam_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authorizationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorizationType = this._authorizationType;
        }
        if (this._awsIamConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.awsIamConfig = this._awsIamConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authorizationType = undefined;
            this._awsIamConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authorizationType = value.authorizationType;
            this._awsIamConfig.internalValue = value.awsIamConfig;
        }
    }
    get authorizationType() {
        return this.getStringAttribute('authorization_type');
    }
    set authorizationType(value) {
        this._authorizationType = value;
    }
    resetAuthorizationType() {
        this._authorizationType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authorizationTypeInput() {
        return this._authorizationType;
    }
    get awsIamConfig() {
        return this._awsIamConfig;
    }
    putAwsIamConfig(value) {
        this._awsIamConfig.internalValue = value;
    }
    resetAwsIamConfig() {
        this._awsIamConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get awsIamConfigInput() {
        return this._awsIamConfig.internalValue;
    }
}
exports.AppsyncDatasourceHttpConfigAuthorizationConfigOutputReference = AppsyncDatasourceHttpConfigAuthorizationConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
AppsyncDatasourceHttpConfigAuthorizationConfigOutputReference[_e] = { fqn: "@cdktf/provider-aws.appsyncDatasource.AppsyncDatasourceHttpConfigAuthorizationConfigOutputReference", version: "10.0.12" };
function appsyncDatasourceHttpConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        endpoint: cdktf.stringToTerraform(struct.endpoint),
        authorization_config: appsyncDatasourceHttpConfigAuthorizationConfigToTerraform(struct.authorizationConfig),
    };
}
exports.appsyncDatasourceHttpConfigToTerraform = appsyncDatasourceHttpConfigToTerraform;
class AppsyncDatasourceHttpConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // authorization_config - computed: false, optional: true, required: false
        this._authorizationConfig = new AppsyncDatasourceHttpConfigAuthorizationConfigOutputReference(this, "authorization_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._endpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.endpoint = this._endpoint;
        }
        if (this._authorizationConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorizationConfig = this._authorizationConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._endpoint = undefined;
            this._authorizationConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._endpoint = value.endpoint;
            this._authorizationConfig.internalValue = value.authorizationConfig;
        }
    }
    get endpoint() {
        return this.getStringAttribute('endpoint');
    }
    set endpoint(value) {
        this._endpoint = value;
    }
    // Temporarily expose input value. Use with caution.
    get endpointInput() {
        return this._endpoint;
    }
    get authorizationConfig() {
        return this._authorizationConfig;
    }
    putAuthorizationConfig(value) {
        this._authorizationConfig.internalValue = value;
    }
    resetAuthorizationConfig() {
        this._authorizationConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authorizationConfigInput() {
        return this._authorizationConfig.internalValue;
    }
}
exports.AppsyncDatasourceHttpConfigOutputReference = AppsyncDatasourceHttpConfigOutputReference;
_f = JSII_RTTI_SYMBOL_1;
AppsyncDatasourceHttpConfigOutputReference[_f] = { fqn: "@cdktf/provider-aws.appsyncDatasource.AppsyncDatasourceHttpConfigOutputReference", version: "10.0.12" };
function appsyncDatasourceLambdaConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        function_arn: cdktf.stringToTerraform(struct.functionArn),
    };
}
exports.appsyncDatasourceLambdaConfigToTerraform = appsyncDatasourceLambdaConfigToTerraform;
class AppsyncDatasourceLambdaConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._functionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.functionArn = this._functionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._functionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._functionArn = value.functionArn;
        }
    }
    get functionArn() {
        return this.getStringAttribute('function_arn');
    }
    set functionArn(value) {
        this._functionArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get functionArnInput() {
        return this._functionArn;
    }
}
exports.AppsyncDatasourceLambdaConfigOutputReference = AppsyncDatasourceLambdaConfigOutputReference;
_g = JSII_RTTI_SYMBOL_1;
AppsyncDatasourceLambdaConfigOutputReference[_g] = { fqn: "@cdktf/provider-aws.appsyncDatasource.AppsyncDatasourceLambdaConfigOutputReference", version: "10.0.12" };
function appsyncDatasourceRelationalDatabaseConfigHttpEndpointConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        aws_secret_store_arn: cdktf.stringToTerraform(struct.awsSecretStoreArn),
        database_name: cdktf.stringToTerraform(struct.databaseName),
        db_cluster_identifier: cdktf.stringToTerraform(struct.dbClusterIdentifier),
        region: cdktf.stringToTerraform(struct.region),
        schema: cdktf.stringToTerraform(struct.schema),
    };
}
exports.appsyncDatasourceRelationalDatabaseConfigHttpEndpointConfigToTerraform = appsyncDatasourceRelationalDatabaseConfigHttpEndpointConfigToTerraform;
class AppsyncDatasourceRelationalDatabaseConfigHttpEndpointConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._awsSecretStoreArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.awsSecretStoreArn = this._awsSecretStoreArn;
        }
        if (this._databaseName !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseName = this._databaseName;
        }
        if (this._dbClusterIdentifier !== undefined) {
            hasAnyValues = true;
            internalValueResult.dbClusterIdentifier = this._dbClusterIdentifier;
        }
        if (this._region !== undefined) {
            hasAnyValues = true;
            internalValueResult.region = this._region;
        }
        if (this._schema !== undefined) {
            hasAnyValues = true;
            internalValueResult.schema = this._schema;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._awsSecretStoreArn = undefined;
            this._databaseName = undefined;
            this._dbClusterIdentifier = undefined;
            this._region = undefined;
            this._schema = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._awsSecretStoreArn = value.awsSecretStoreArn;
            this._databaseName = value.databaseName;
            this._dbClusterIdentifier = value.dbClusterIdentifier;
            this._region = value.region;
            this._schema = value.schema;
        }
    }
    get awsSecretStoreArn() {
        return this.getStringAttribute('aws_secret_store_arn');
    }
    set awsSecretStoreArn(value) {
        this._awsSecretStoreArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get awsSecretStoreArnInput() {
        return this._awsSecretStoreArn;
    }
    get databaseName() {
        return this.getStringAttribute('database_name');
    }
    set databaseName(value) {
        this._databaseName = value;
    }
    resetDatabaseName() {
        this._databaseName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseNameInput() {
        return this._databaseName;
    }
    get dbClusterIdentifier() {
        return this.getStringAttribute('db_cluster_identifier');
    }
    set dbClusterIdentifier(value) {
        this._dbClusterIdentifier = value;
    }
    // Temporarily expose input value. Use with caution.
    get dbClusterIdentifierInput() {
        return this._dbClusterIdentifier;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    get schema() {
        return this.getStringAttribute('schema');
    }
    set schema(value) {
        this._schema = value;
    }
    resetSchema() {
        this._schema = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schemaInput() {
        return this._schema;
    }
}
exports.AppsyncDatasourceRelationalDatabaseConfigHttpEndpointConfigOutputReference = AppsyncDatasourceRelationalDatabaseConfigHttpEndpointConfigOutputReference;
_h = JSII_RTTI_SYMBOL_1;
AppsyncDatasourceRelationalDatabaseConfigHttpEndpointConfigOutputReference[_h] = { fqn: "@cdktf/provider-aws.appsyncDatasource.AppsyncDatasourceRelationalDatabaseConfigHttpEndpointConfigOutputReference", version: "10.0.12" };
function appsyncDatasourceRelationalDatabaseConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        source_type: cdktf.stringToTerraform(struct.sourceType),
        http_endpoint_config: appsyncDatasourceRelationalDatabaseConfigHttpEndpointConfigToTerraform(struct.httpEndpointConfig),
    };
}
exports.appsyncDatasourceRelationalDatabaseConfigToTerraform = appsyncDatasourceRelationalDatabaseConfigToTerraform;
class AppsyncDatasourceRelationalDatabaseConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // http_endpoint_config - computed: false, optional: true, required: false
        this._httpEndpointConfig = new AppsyncDatasourceRelationalDatabaseConfigHttpEndpointConfigOutputReference(this, "http_endpoint_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sourceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceType = this._sourceType;
        }
        if (this._httpEndpointConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpEndpointConfig = this._httpEndpointConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sourceType = undefined;
            this._httpEndpointConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sourceType = value.sourceType;
            this._httpEndpointConfig.internalValue = value.httpEndpointConfig;
        }
    }
    get sourceType() {
        return this.getStringAttribute('source_type');
    }
    set sourceType(value) {
        this._sourceType = value;
    }
    resetSourceType() {
        this._sourceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceTypeInput() {
        return this._sourceType;
    }
    get httpEndpointConfig() {
        return this._httpEndpointConfig;
    }
    putHttpEndpointConfig(value) {
        this._httpEndpointConfig.internalValue = value;
    }
    resetHttpEndpointConfig() {
        this._httpEndpointConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpEndpointConfigInput() {
        return this._httpEndpointConfig.internalValue;
    }
}
exports.AppsyncDatasourceRelationalDatabaseConfigOutputReference = AppsyncDatasourceRelationalDatabaseConfigOutputReference;
_j = JSII_RTTI_SYMBOL_1;
AppsyncDatasourceRelationalDatabaseConfigOutputReference[_j] = { fqn: "@cdktf/provider-aws.appsyncDatasource.AppsyncDatasourceRelationalDatabaseConfigOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/appsync_datasource aws_appsync_datasource}
*/
class AppsyncDatasource extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/appsync_datasource aws_appsync_datasource} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AppsyncDatasourceConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_appsync_datasource',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // dynamodb_config - computed: false, optional: true, required: false
        this._dynamodbConfig = new AppsyncDatasourceDynamodbConfigOutputReference(this, "dynamodb_config");
        // elasticsearch_config - computed: false, optional: true, required: false
        this._elasticsearchConfig = new AppsyncDatasourceElasticsearchConfigOutputReference(this, "elasticsearch_config");
        // http_config - computed: false, optional: true, required: false
        this._httpConfig = new AppsyncDatasourceHttpConfigOutputReference(this, "http_config");
        // lambda_config - computed: false, optional: true, required: false
        this._lambdaConfig = new AppsyncDatasourceLambdaConfigOutputReference(this, "lambda_config");
        // relational_database_config - computed: false, optional: true, required: false
        this._relationalDatabaseConfig = new AppsyncDatasourceRelationalDatabaseConfigOutputReference(this, "relational_database_config");
        this._apiId = config.apiId;
        this._description = config.description;
        this._id = config.id;
        this._name = config.name;
        this._serviceRoleArn = config.serviceRoleArn;
        this._type = config.type;
        this._dynamodbConfig.internalValue = config.dynamodbConfig;
        this._elasticsearchConfig.internalValue = config.elasticsearchConfig;
        this._httpConfig.internalValue = config.httpConfig;
        this._lambdaConfig.internalValue = config.lambdaConfig;
        this._relationalDatabaseConfig.internalValue = config.relationalDatabaseConfig;
    }
    get apiId() {
        return this.getStringAttribute('api_id');
    }
    set apiId(value) {
        this._apiId = value;
    }
    // Temporarily expose input value. Use with caution.
    get apiIdInput() {
        return this._apiId;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get serviceRoleArn() {
        return this.getStringAttribute('service_role_arn');
    }
    set serviceRoleArn(value) {
        this._serviceRoleArn = value;
    }
    resetServiceRoleArn() {
        this._serviceRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceRoleArnInput() {
        return this._serviceRoleArn;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get dynamodbConfig() {
        return this._dynamodbConfig;
    }
    putDynamodbConfig(value) {
        this._dynamodbConfig.internalValue = value;
    }
    resetDynamodbConfig() {
        this._dynamodbConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dynamodbConfigInput() {
        return this._dynamodbConfig.internalValue;
    }
    get elasticsearchConfig() {
        return this._elasticsearchConfig;
    }
    putElasticsearchConfig(value) {
        this._elasticsearchConfig.internalValue = value;
    }
    resetElasticsearchConfig() {
        this._elasticsearchConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get elasticsearchConfigInput() {
        return this._elasticsearchConfig.internalValue;
    }
    get httpConfig() {
        return this._httpConfig;
    }
    putHttpConfig(value) {
        this._httpConfig.internalValue = value;
    }
    resetHttpConfig() {
        this._httpConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpConfigInput() {
        return this._httpConfig.internalValue;
    }
    get lambdaConfig() {
        return this._lambdaConfig;
    }
    putLambdaConfig(value) {
        this._lambdaConfig.internalValue = value;
    }
    resetLambdaConfig() {
        this._lambdaConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaConfigInput() {
        return this._lambdaConfig.internalValue;
    }
    get relationalDatabaseConfig() {
        return this._relationalDatabaseConfig;
    }
    putRelationalDatabaseConfig(value) {
        this._relationalDatabaseConfig.internalValue = value;
    }
    resetRelationalDatabaseConfig() {
        this._relationalDatabaseConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get relationalDatabaseConfigInput() {
        return this._relationalDatabaseConfig.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            api_id: cdktf.stringToTerraform(this._apiId),
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            service_role_arn: cdktf.stringToTerraform(this._serviceRoleArn),
            type: cdktf.stringToTerraform(this._type),
            dynamodb_config: appsyncDatasourceDynamodbConfigToTerraform(this._dynamodbConfig.internalValue),
            elasticsearch_config: appsyncDatasourceElasticsearchConfigToTerraform(this._elasticsearchConfig.internalValue),
            http_config: appsyncDatasourceHttpConfigToTerraform(this._httpConfig.internalValue),
            lambda_config: appsyncDatasourceLambdaConfigToTerraform(this._lambdaConfig.internalValue),
            relational_database_config: appsyncDatasourceRelationalDatabaseConfigToTerraform(this._relationalDatabaseConfig.internalValue),
        };
    }
}
exports.AppsyncDatasource = AppsyncDatasource;
_k = JSII_RTTI_SYMBOL_1;
AppsyncDatasource[_k] = { fqn: "@cdktf/provider-aws.appsyncDatasource.AppsyncDatasource", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
AppsyncDatasource.tfResourceType = "aws_appsync_datasource";
//# sourceMappingURL=data:application/json;base64,