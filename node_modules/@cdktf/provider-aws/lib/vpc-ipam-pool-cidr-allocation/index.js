"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcIpamPoolCidrAllocation = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/vpc_ipam_pool_cidr_allocation aws_vpc_ipam_pool_cidr_allocation}
*/
class VpcIpamPoolCidrAllocation extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/vpc_ipam_pool_cidr_allocation aws_vpc_ipam_pool_cidr_allocation} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options VpcIpamPoolCidrAllocationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_vpc_ipam_pool_cidr_allocation',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._cidr = config.cidr;
        this._description = config.description;
        this._disallowedCidrs = config.disallowedCidrs;
        this._id = config.id;
        this._ipamPoolId = config.ipamPoolId;
        this._netmaskLength = config.netmaskLength;
    }
    get cidr() {
        return this.getStringAttribute('cidr');
    }
    set cidr(value) {
        this._cidr = value;
    }
    resetCidr() {
        this._cidr = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cidrInput() {
        return this._cidr;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get disallowedCidrs() {
        return cdktf.Fn.tolist(this.getListAttribute('disallowed_cidrs'));
    }
    set disallowedCidrs(value) {
        this._disallowedCidrs = value;
    }
    resetDisallowedCidrs() {
        this._disallowedCidrs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disallowedCidrsInput() {
        return this._disallowedCidrs;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // ipam_pool_allocation_id - computed: true, optional: false, required: false
    get ipamPoolAllocationId() {
        return this.getStringAttribute('ipam_pool_allocation_id');
    }
    get ipamPoolId() {
        return this.getStringAttribute('ipam_pool_id');
    }
    set ipamPoolId(value) {
        this._ipamPoolId = value;
    }
    // Temporarily expose input value. Use with caution.
    get ipamPoolIdInput() {
        return this._ipamPoolId;
    }
    get netmaskLength() {
        return this.getNumberAttribute('netmask_length');
    }
    set netmaskLength(value) {
        this._netmaskLength = value;
    }
    resetNetmaskLength() {
        this._netmaskLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get netmaskLengthInput() {
        return this._netmaskLength;
    }
    // resource_id - computed: true, optional: false, required: false
    get resourceId() {
        return this.getStringAttribute('resource_id');
    }
    // resource_owner - computed: true, optional: false, required: false
    get resourceOwner() {
        return this.getStringAttribute('resource_owner');
    }
    // resource_type - computed: true, optional: false, required: false
    get resourceType() {
        return this.getStringAttribute('resource_type');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cidr: cdktf.stringToTerraform(this._cidr),
            description: cdktf.stringToTerraform(this._description),
            disallowed_cidrs: cdktf.listMapper(cdktf.stringToTerraform, false)(this._disallowedCidrs),
            id: cdktf.stringToTerraform(this._id),
            ipam_pool_id: cdktf.stringToTerraform(this._ipamPoolId),
            netmask_length: cdktf.numberToTerraform(this._netmaskLength),
        };
    }
}
exports.VpcIpamPoolCidrAllocation = VpcIpamPoolCidrAllocation;
_a = JSII_RTTI_SYMBOL_1;
VpcIpamPoolCidrAllocation[_a] = { fqn: "@cdktf/provider-aws.vpcIpamPoolCidrAllocation.VpcIpamPoolCidrAllocation", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
VpcIpamPoolCidrAllocation.tfResourceType = "aws_vpc_ipam_pool_cidr_allocation";
//# sourceMappingURL=data:application/json;base64,