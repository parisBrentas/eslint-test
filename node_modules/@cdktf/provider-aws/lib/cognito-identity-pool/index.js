"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CognitoIdentityPool = exports.CognitoIdentityPoolCognitoIdentityProvidersList = exports.CognitoIdentityPoolCognitoIdentityProvidersOutputReference = exports.cognitoIdentityPoolCognitoIdentityProvidersToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function cognitoIdentityPoolCognitoIdentityProvidersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_id: cdktf.stringToTerraform(struct.clientId),
        provider_name: cdktf.stringToTerraform(struct.providerName),
        server_side_token_check: cdktf.booleanToTerraform(struct.serverSideTokenCheck),
    };
}
exports.cognitoIdentityPoolCognitoIdentityProvidersToTerraform = cognitoIdentityPoolCognitoIdentityProvidersToTerraform;
class CognitoIdentityPoolCognitoIdentityProvidersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._providerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.providerName = this._providerName;
        }
        if (this._serverSideTokenCheck !== undefined) {
            hasAnyValues = true;
            internalValueResult.serverSideTokenCheck = this._serverSideTokenCheck;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._clientId = undefined;
            this._providerName = undefined;
            this._serverSideTokenCheck = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._clientId = value.clientId;
            this._providerName = value.providerName;
            this._serverSideTokenCheck = value.serverSideTokenCheck;
        }
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    resetClientId() {
        this._clientId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get providerName() {
        return this.getStringAttribute('provider_name');
    }
    set providerName(value) {
        this._providerName = value;
    }
    resetProviderName() {
        this._providerName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get providerNameInput() {
        return this._providerName;
    }
    get serverSideTokenCheck() {
        return this.getBooleanAttribute('server_side_token_check');
    }
    set serverSideTokenCheck(value) {
        this._serverSideTokenCheck = value;
    }
    resetServerSideTokenCheck() {
        this._serverSideTokenCheck = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverSideTokenCheckInput() {
        return this._serverSideTokenCheck;
    }
}
exports.CognitoIdentityPoolCognitoIdentityProvidersOutputReference = CognitoIdentityPoolCognitoIdentityProvidersOutputReference;
_a = JSII_RTTI_SYMBOL_1;
CognitoIdentityPoolCognitoIdentityProvidersOutputReference[_a] = { fqn: "@cdktf/provider-aws.cognitoIdentityPool.CognitoIdentityPoolCognitoIdentityProvidersOutputReference", version: "10.0.12" };
class CognitoIdentityPoolCognitoIdentityProvidersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CognitoIdentityPoolCognitoIdentityProvidersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CognitoIdentityPoolCognitoIdentityProvidersList = CognitoIdentityPoolCognitoIdentityProvidersList;
_b = JSII_RTTI_SYMBOL_1;
CognitoIdentityPoolCognitoIdentityProvidersList[_b] = { fqn: "@cdktf/provider-aws.cognitoIdentityPool.CognitoIdentityPoolCognitoIdentityProvidersList", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/cognito_identity_pool aws_cognito_identity_pool}
*/
class CognitoIdentityPool extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/cognito_identity_pool aws_cognito_identity_pool} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CognitoIdentityPoolConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_cognito_identity_pool',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // cognito_identity_providers - computed: false, optional: true, required: false
        this._cognitoIdentityProviders = new CognitoIdentityPoolCognitoIdentityProvidersList(this, "cognito_identity_providers", true);
        this._allowClassicFlow = config.allowClassicFlow;
        this._allowUnauthenticatedIdentities = config.allowUnauthenticatedIdentities;
        this._developerProviderName = config.developerProviderName;
        this._id = config.id;
        this._identityPoolName = config.identityPoolName;
        this._openidConnectProviderArns = config.openidConnectProviderArns;
        this._samlProviderArns = config.samlProviderArns;
        this._supportedLoginProviders = config.supportedLoginProviders;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._cognitoIdentityProviders.internalValue = config.cognitoIdentityProviders;
    }
    get allowClassicFlow() {
        return this.getBooleanAttribute('allow_classic_flow');
    }
    set allowClassicFlow(value) {
        this._allowClassicFlow = value;
    }
    resetAllowClassicFlow() {
        this._allowClassicFlow = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowClassicFlowInput() {
        return this._allowClassicFlow;
    }
    get allowUnauthenticatedIdentities() {
        return this.getBooleanAttribute('allow_unauthenticated_identities');
    }
    set allowUnauthenticatedIdentities(value) {
        this._allowUnauthenticatedIdentities = value;
    }
    resetAllowUnauthenticatedIdentities() {
        this._allowUnauthenticatedIdentities = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowUnauthenticatedIdentitiesInput() {
        return this._allowUnauthenticatedIdentities;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get developerProviderName() {
        return this.getStringAttribute('developer_provider_name');
    }
    set developerProviderName(value) {
        this._developerProviderName = value;
    }
    resetDeveloperProviderName() {
        this._developerProviderName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get developerProviderNameInput() {
        return this._developerProviderName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get identityPoolName() {
        return this.getStringAttribute('identity_pool_name');
    }
    set identityPoolName(value) {
        this._identityPoolName = value;
    }
    // Temporarily expose input value. Use with caution.
    get identityPoolNameInput() {
        return this._identityPoolName;
    }
    get openidConnectProviderArns() {
        return cdktf.Fn.tolist(this.getListAttribute('openid_connect_provider_arns'));
    }
    set openidConnectProviderArns(value) {
        this._openidConnectProviderArns = value;
    }
    resetOpenidConnectProviderArns() {
        this._openidConnectProviderArns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get openidConnectProviderArnsInput() {
        return this._openidConnectProviderArns;
    }
    get samlProviderArns() {
        return this.getListAttribute('saml_provider_arns');
    }
    set samlProviderArns(value) {
        this._samlProviderArns = value;
    }
    resetSamlProviderArns() {
        this._samlProviderArns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get samlProviderArnsInput() {
        return this._samlProviderArns;
    }
    get supportedLoginProviders() {
        return this.getStringMapAttribute('supported_login_providers');
    }
    set supportedLoginProviders(value) {
        this._supportedLoginProviders = value;
    }
    resetSupportedLoginProviders() {
        this._supportedLoginProviders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get supportedLoginProvidersInput() {
        return this._supportedLoginProviders;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get cognitoIdentityProviders() {
        return this._cognitoIdentityProviders;
    }
    putCognitoIdentityProviders(value) {
        this._cognitoIdentityProviders.internalValue = value;
    }
    resetCognitoIdentityProviders() {
        this._cognitoIdentityProviders.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cognitoIdentityProvidersInput() {
        return this._cognitoIdentityProviders.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            allow_classic_flow: cdktf.booleanToTerraform(this._allowClassicFlow),
            allow_unauthenticated_identities: cdktf.booleanToTerraform(this._allowUnauthenticatedIdentities),
            developer_provider_name: cdktf.stringToTerraform(this._developerProviderName),
            id: cdktf.stringToTerraform(this._id),
            identity_pool_name: cdktf.stringToTerraform(this._identityPoolName),
            openid_connect_provider_arns: cdktf.listMapper(cdktf.stringToTerraform, false)(this._openidConnectProviderArns),
            saml_provider_arns: cdktf.listMapper(cdktf.stringToTerraform, false)(this._samlProviderArns),
            supported_login_providers: cdktf.hashMapper(cdktf.stringToTerraform)(this._supportedLoginProviders),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            cognito_identity_providers: cdktf.listMapper(cognitoIdentityPoolCognitoIdentityProvidersToTerraform, true)(this._cognitoIdentityProviders.internalValue),
        };
    }
}
exports.CognitoIdentityPool = CognitoIdentityPool;
_c = JSII_RTTI_SYMBOL_1;
CognitoIdentityPool[_c] = { fqn: "@cdktf/provider-aws.cognitoIdentityPool.CognitoIdentityPool", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
CognitoIdentityPool.tfResourceType = "aws_cognito_identity_pool";
//# sourceMappingURL=data:application/json;base64,