"use strict";
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlueCatalogDatabase = exports.GlueCatalogDatabaseTargetDatabaseOutputReference = exports.glueCatalogDatabaseTargetDatabaseToTerraform = exports.GlueCatalogDatabaseCreateTableDefaultPermissionList = exports.GlueCatalogDatabaseCreateTableDefaultPermissionOutputReference = exports.glueCatalogDatabaseCreateTableDefaultPermissionToTerraform = exports.GlueCatalogDatabaseCreateTableDefaultPermissionPrincipalOutputReference = exports.glueCatalogDatabaseCreateTableDefaultPermissionPrincipalToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function glueCatalogDatabaseCreateTableDefaultPermissionPrincipalToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        data_lake_principal_identifier: cdktf.stringToTerraform(struct.dataLakePrincipalIdentifier),
    };
}
exports.glueCatalogDatabaseCreateTableDefaultPermissionPrincipalToTerraform = glueCatalogDatabaseCreateTableDefaultPermissionPrincipalToTerraform;
class GlueCatalogDatabaseCreateTableDefaultPermissionPrincipalOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataLakePrincipalIdentifier !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataLakePrincipalIdentifier = this._dataLakePrincipalIdentifier;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dataLakePrincipalIdentifier = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dataLakePrincipalIdentifier = value.dataLakePrincipalIdentifier;
        }
    }
    get dataLakePrincipalIdentifier() {
        return this.getStringAttribute('data_lake_principal_identifier');
    }
    set dataLakePrincipalIdentifier(value) {
        this._dataLakePrincipalIdentifier = value;
    }
    resetDataLakePrincipalIdentifier() {
        this._dataLakePrincipalIdentifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataLakePrincipalIdentifierInput() {
        return this._dataLakePrincipalIdentifier;
    }
}
exports.GlueCatalogDatabaseCreateTableDefaultPermissionPrincipalOutputReference = GlueCatalogDatabaseCreateTableDefaultPermissionPrincipalOutputReference;
_a = JSII_RTTI_SYMBOL_1;
GlueCatalogDatabaseCreateTableDefaultPermissionPrincipalOutputReference[_a] = { fqn: "@cdktf/provider-aws.glueCatalogDatabase.GlueCatalogDatabaseCreateTableDefaultPermissionPrincipalOutputReference", version: "10.0.12" };
function glueCatalogDatabaseCreateTableDefaultPermissionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        permissions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.permissions),
        principal: glueCatalogDatabaseCreateTableDefaultPermissionPrincipalToTerraform(struct.principal),
    };
}
exports.glueCatalogDatabaseCreateTableDefaultPermissionToTerraform = glueCatalogDatabaseCreateTableDefaultPermissionToTerraform;
class GlueCatalogDatabaseCreateTableDefaultPermissionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // principal - computed: false, optional: true, required: false
        this._principal = new GlueCatalogDatabaseCreateTableDefaultPermissionPrincipalOutputReference(this, "principal");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._permissions !== undefined) {
            hasAnyValues = true;
            internalValueResult.permissions = this._permissions;
        }
        if (this._principal?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.principal = this._principal?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._permissions = undefined;
            this._principal.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._permissions = value.permissions;
            this._principal.internalValue = value.principal;
        }
    }
    get permissions() {
        return cdktf.Fn.tolist(this.getListAttribute('permissions'));
    }
    set permissions(value) {
        this._permissions = value;
    }
    resetPermissions() {
        this._permissions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionsInput() {
        return this._permissions;
    }
    get principal() {
        return this._principal;
    }
    putPrincipal(value) {
        this._principal.internalValue = value;
    }
    resetPrincipal() {
        this._principal.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get principalInput() {
        return this._principal.internalValue;
    }
}
exports.GlueCatalogDatabaseCreateTableDefaultPermissionOutputReference = GlueCatalogDatabaseCreateTableDefaultPermissionOutputReference;
_b = JSII_RTTI_SYMBOL_1;
GlueCatalogDatabaseCreateTableDefaultPermissionOutputReference[_b] = { fqn: "@cdktf/provider-aws.glueCatalogDatabase.GlueCatalogDatabaseCreateTableDefaultPermissionOutputReference", version: "10.0.12" };
class GlueCatalogDatabaseCreateTableDefaultPermissionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GlueCatalogDatabaseCreateTableDefaultPermissionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GlueCatalogDatabaseCreateTableDefaultPermissionList = GlueCatalogDatabaseCreateTableDefaultPermissionList;
_c = JSII_RTTI_SYMBOL_1;
GlueCatalogDatabaseCreateTableDefaultPermissionList[_c] = { fqn: "@cdktf/provider-aws.glueCatalogDatabase.GlueCatalogDatabaseCreateTableDefaultPermissionList", version: "10.0.12" };
function glueCatalogDatabaseTargetDatabaseToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        catalog_id: cdktf.stringToTerraform(struct.catalogId),
        database_name: cdktf.stringToTerraform(struct.databaseName),
    };
}
exports.glueCatalogDatabaseTargetDatabaseToTerraform = glueCatalogDatabaseTargetDatabaseToTerraform;
class GlueCatalogDatabaseTargetDatabaseOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._catalogId !== undefined) {
            hasAnyValues = true;
            internalValueResult.catalogId = this._catalogId;
        }
        if (this._databaseName !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseName = this._databaseName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._catalogId = undefined;
            this._databaseName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._catalogId = value.catalogId;
            this._databaseName = value.databaseName;
        }
    }
    get catalogId() {
        return this.getStringAttribute('catalog_id');
    }
    set catalogId(value) {
        this._catalogId = value;
    }
    // Temporarily expose input value. Use with caution.
    get catalogIdInput() {
        return this._catalogId;
    }
    get databaseName() {
        return this.getStringAttribute('database_name');
    }
    set databaseName(value) {
        this._databaseName = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseNameInput() {
        return this._databaseName;
    }
}
exports.GlueCatalogDatabaseTargetDatabaseOutputReference = GlueCatalogDatabaseTargetDatabaseOutputReference;
_d = JSII_RTTI_SYMBOL_1;
GlueCatalogDatabaseTargetDatabaseOutputReference[_d] = { fqn: "@cdktf/provider-aws.glueCatalogDatabase.GlueCatalogDatabaseTargetDatabaseOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/glue_catalog_database aws_glue_catalog_database}
*/
class GlueCatalogDatabase extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/glue_catalog_database aws_glue_catalog_database} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options GlueCatalogDatabaseConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_glue_catalog_database',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // create_table_default_permission - computed: false, optional: true, required: false
        this._createTableDefaultPermission = new GlueCatalogDatabaseCreateTableDefaultPermissionList(this, "create_table_default_permission", false);
        // target_database - computed: false, optional: true, required: false
        this._targetDatabase = new GlueCatalogDatabaseTargetDatabaseOutputReference(this, "target_database");
        this._catalogId = config.catalogId;
        this._description = config.description;
        this._id = config.id;
        this._locationUri = config.locationUri;
        this._name = config.name;
        this._parameters = config.parameters;
        this._createTableDefaultPermission.internalValue = config.createTableDefaultPermission;
        this._targetDatabase.internalValue = config.targetDatabase;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get catalogId() {
        return this.getStringAttribute('catalog_id');
    }
    set catalogId(value) {
        this._catalogId = value;
    }
    resetCatalogId() {
        this._catalogId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get catalogIdInput() {
        return this._catalogId;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get locationUri() {
        return this.getStringAttribute('location_uri');
    }
    set locationUri(value) {
        this._locationUri = value;
    }
    resetLocationUri() {
        this._locationUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationUriInput() {
        return this._locationUri;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get parameters() {
        return this.getStringMapAttribute('parameters');
    }
    set parameters(value) {
        this._parameters = value;
    }
    resetParameters() {
        this._parameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters;
    }
    get createTableDefaultPermission() {
        return this._createTableDefaultPermission;
    }
    putCreateTableDefaultPermission(value) {
        this._createTableDefaultPermission.internalValue = value;
    }
    resetCreateTableDefaultPermission() {
        this._createTableDefaultPermission.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createTableDefaultPermissionInput() {
        return this._createTableDefaultPermission.internalValue;
    }
    get targetDatabase() {
        return this._targetDatabase;
    }
    putTargetDatabase(value) {
        this._targetDatabase.internalValue = value;
    }
    resetTargetDatabase() {
        this._targetDatabase.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetDatabaseInput() {
        return this._targetDatabase.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            catalog_id: cdktf.stringToTerraform(this._catalogId),
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            location_uri: cdktf.stringToTerraform(this._locationUri),
            name: cdktf.stringToTerraform(this._name),
            parameters: cdktf.hashMapper(cdktf.stringToTerraform)(this._parameters),
            create_table_default_permission: cdktf.listMapper(glueCatalogDatabaseCreateTableDefaultPermissionToTerraform, true)(this._createTableDefaultPermission.internalValue),
            target_database: glueCatalogDatabaseTargetDatabaseToTerraform(this._targetDatabase.internalValue),
        };
    }
}
exports.GlueCatalogDatabase = GlueCatalogDatabase;
_e = JSII_RTTI_SYMBOL_1;
GlueCatalogDatabase[_e] = { fqn: "@cdktf/provider-aws.glueCatalogDatabase.GlueCatalogDatabase", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
GlueCatalogDatabase.tfResourceType = "aws_glue_catalog_database";
//# sourceMappingURL=data:application/json;base64,