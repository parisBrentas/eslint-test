"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3BucketLoggingA = exports.S3BucketLoggingTargetGrantList = exports.S3BucketLoggingTargetGrantOutputReference = exports.s3BucketLoggingTargetGrantToTerraform = exports.S3BucketLoggingTargetGrantGranteeOutputReference = exports.s3BucketLoggingTargetGrantGranteeToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function s3BucketLoggingTargetGrantGranteeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        email_address: cdktf.stringToTerraform(struct.emailAddress),
        id: cdktf.stringToTerraform(struct.id),
        type: cdktf.stringToTerraform(struct.type),
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.s3BucketLoggingTargetGrantGranteeToTerraform = s3BucketLoggingTargetGrantGranteeToTerraform;
class S3BucketLoggingTargetGrantGranteeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._emailAddress !== undefined) {
            hasAnyValues = true;
            internalValueResult.emailAddress = this._emailAddress;
        }
        if (this._id !== undefined) {
            hasAnyValues = true;
            internalValueResult.id = this._id;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._emailAddress = undefined;
            this._id = undefined;
            this._type = undefined;
            this._uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._emailAddress = value.emailAddress;
            this._id = value.id;
            this._type = value.type;
            this._uri = value.uri;
        }
    }
    // display_name - computed: true, optional: false, required: false
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    get emailAddress() {
        return this.getStringAttribute('email_address');
    }
    set emailAddress(value) {
        this._emailAddress = value;
    }
    resetEmailAddress() {
        this._emailAddress = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailAddressInput() {
        return this._emailAddress;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    resetUri() {
        this._uri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.S3BucketLoggingTargetGrantGranteeOutputReference = S3BucketLoggingTargetGrantGranteeOutputReference;
_a = JSII_RTTI_SYMBOL_1;
S3BucketLoggingTargetGrantGranteeOutputReference[_a] = { fqn: "@cdktf/provider-aws.s3BucketLogging.S3BucketLoggingTargetGrantGranteeOutputReference", version: "10.0.12" };
function s3BucketLoggingTargetGrantToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        permission: cdktf.stringToTerraform(struct.permission),
        grantee: s3BucketLoggingTargetGrantGranteeToTerraform(struct.grantee),
    };
}
exports.s3BucketLoggingTargetGrantToTerraform = s3BucketLoggingTargetGrantToTerraform;
class S3BucketLoggingTargetGrantOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // grantee - computed: false, optional: false, required: true
        this._grantee = new S3BucketLoggingTargetGrantGranteeOutputReference(this, "grantee");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._permission !== undefined) {
            hasAnyValues = true;
            internalValueResult.permission = this._permission;
        }
        if (this._grantee?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.grantee = this._grantee?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._permission = undefined;
            this._grantee.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._permission = value.permission;
            this._grantee.internalValue = value.grantee;
        }
    }
    get permission() {
        return this.getStringAttribute('permission');
    }
    set permission(value) {
        this._permission = value;
    }
    // Temporarily expose input value. Use with caution.
    get permissionInput() {
        return this._permission;
    }
    get grantee() {
        return this._grantee;
    }
    putGrantee(value) {
        this._grantee.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get granteeInput() {
        return this._grantee.internalValue;
    }
}
exports.S3BucketLoggingTargetGrantOutputReference = S3BucketLoggingTargetGrantOutputReference;
_b = JSII_RTTI_SYMBOL_1;
S3BucketLoggingTargetGrantOutputReference[_b] = { fqn: "@cdktf/provider-aws.s3BucketLogging.S3BucketLoggingTargetGrantOutputReference", version: "10.0.12" };
class S3BucketLoggingTargetGrantList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new S3BucketLoggingTargetGrantOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.S3BucketLoggingTargetGrantList = S3BucketLoggingTargetGrantList;
_c = JSII_RTTI_SYMBOL_1;
S3BucketLoggingTargetGrantList[_c] = { fqn: "@cdktf/provider-aws.s3BucketLogging.S3BucketLoggingTargetGrantList", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/s3_bucket_logging aws_s3_bucket_logging}
*/
class S3BucketLoggingA extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/s3_bucket_logging aws_s3_bucket_logging} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options S3BucketLoggingAConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_s3_bucket_logging',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // target_grant - computed: false, optional: true, required: false
        this._targetGrant = new S3BucketLoggingTargetGrantList(this, "target_grant", true);
        this._bucket = config.bucket;
        this._expectedBucketOwner = config.expectedBucketOwner;
        this._id = config.id;
        this._targetBucket = config.targetBucket;
        this._targetPrefix = config.targetPrefix;
        this._targetGrant.internalValue = config.targetGrant;
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    get expectedBucketOwner() {
        return this.getStringAttribute('expected_bucket_owner');
    }
    set expectedBucketOwner(value) {
        this._expectedBucketOwner = value;
    }
    resetExpectedBucketOwner() {
        this._expectedBucketOwner = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get expectedBucketOwnerInput() {
        return this._expectedBucketOwner;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get targetBucket() {
        return this.getStringAttribute('target_bucket');
    }
    set targetBucket(value) {
        this._targetBucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetBucketInput() {
        return this._targetBucket;
    }
    get targetPrefix() {
        return this.getStringAttribute('target_prefix');
    }
    set targetPrefix(value) {
        this._targetPrefix = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetPrefixInput() {
        return this._targetPrefix;
    }
    get targetGrant() {
        return this._targetGrant;
    }
    putTargetGrant(value) {
        this._targetGrant.internalValue = value;
    }
    resetTargetGrant() {
        this._targetGrant.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetGrantInput() {
        return this._targetGrant.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            bucket: cdktf.stringToTerraform(this._bucket),
            expected_bucket_owner: cdktf.stringToTerraform(this._expectedBucketOwner),
            id: cdktf.stringToTerraform(this._id),
            target_bucket: cdktf.stringToTerraform(this._targetBucket),
            target_prefix: cdktf.stringToTerraform(this._targetPrefix),
            target_grant: cdktf.listMapper(s3BucketLoggingTargetGrantToTerraform, true)(this._targetGrant.internalValue),
        };
    }
}
exports.S3BucketLoggingA = S3BucketLoggingA;
_d = JSII_RTTI_SYMBOL_1;
S3BucketLoggingA[_d] = { fqn: "@cdktf/provider-aws.s3BucketLogging.S3BucketLoggingA", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
S3BucketLoggingA.tfResourceType = "aws_s3_bucket_logging";
//# sourceMappingURL=data:application/json;base64,