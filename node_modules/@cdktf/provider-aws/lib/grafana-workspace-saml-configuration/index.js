"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrafanaWorkspaceSamlConfiguration = exports.GrafanaWorkspaceSamlConfigurationTimeoutsOutputReference = exports.grafanaWorkspaceSamlConfigurationTimeoutsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function grafanaWorkspaceSamlConfigurationTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
    };
}
exports.grafanaWorkspaceSamlConfigurationTimeoutsToTerraform = grafanaWorkspaceSamlConfigurationTimeoutsToTerraform;
class GrafanaWorkspaceSamlConfigurationTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
}
exports.GrafanaWorkspaceSamlConfigurationTimeoutsOutputReference = GrafanaWorkspaceSamlConfigurationTimeoutsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
GrafanaWorkspaceSamlConfigurationTimeoutsOutputReference[_a] = { fqn: "@cdktf/provider-aws.grafanaWorkspaceSamlConfiguration.GrafanaWorkspaceSamlConfigurationTimeoutsOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/grafana_workspace_saml_configuration aws_grafana_workspace_saml_configuration}
*/
class GrafanaWorkspaceSamlConfiguration extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/grafana_workspace_saml_configuration aws_grafana_workspace_saml_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options GrafanaWorkspaceSamlConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_grafana_workspace_saml_configuration',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new GrafanaWorkspaceSamlConfigurationTimeoutsOutputReference(this, "timeouts");
        this._adminRoleValues = config.adminRoleValues;
        this._allowedOrganizations = config.allowedOrganizations;
        this._editorRoleValues = config.editorRoleValues;
        this._emailAssertion = config.emailAssertion;
        this._groupsAssertion = config.groupsAssertion;
        this._id = config.id;
        this._idpMetadataUrl = config.idpMetadataUrl;
        this._idpMetadataXml = config.idpMetadataXml;
        this._loginAssertion = config.loginAssertion;
        this._loginValidityDuration = config.loginValidityDuration;
        this._nameAssertion = config.nameAssertion;
        this._orgAssertion = config.orgAssertion;
        this._roleAssertion = config.roleAssertion;
        this._workspaceId = config.workspaceId;
        this._timeouts.internalValue = config.timeouts;
    }
    get adminRoleValues() {
        return this.getListAttribute('admin_role_values');
    }
    set adminRoleValues(value) {
        this._adminRoleValues = value;
    }
    resetAdminRoleValues() {
        this._adminRoleValues = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get adminRoleValuesInput() {
        return this._adminRoleValues;
    }
    get allowedOrganizations() {
        return this.getListAttribute('allowed_organizations');
    }
    set allowedOrganizations(value) {
        this._allowedOrganizations = value;
    }
    resetAllowedOrganizations() {
        this._allowedOrganizations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedOrganizationsInput() {
        return this._allowedOrganizations;
    }
    get editorRoleValues() {
        return this.getListAttribute('editor_role_values');
    }
    set editorRoleValues(value) {
        this._editorRoleValues = value;
    }
    // Temporarily expose input value. Use with caution.
    get editorRoleValuesInput() {
        return this._editorRoleValues;
    }
    get emailAssertion() {
        return this.getStringAttribute('email_assertion');
    }
    set emailAssertion(value) {
        this._emailAssertion = value;
    }
    resetEmailAssertion() {
        this._emailAssertion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailAssertionInput() {
        return this._emailAssertion;
    }
    get groupsAssertion() {
        return this.getStringAttribute('groups_assertion');
    }
    set groupsAssertion(value) {
        this._groupsAssertion = value;
    }
    resetGroupsAssertion() {
        this._groupsAssertion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupsAssertionInput() {
        return this._groupsAssertion;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get idpMetadataUrl() {
        return this.getStringAttribute('idp_metadata_url');
    }
    set idpMetadataUrl(value) {
        this._idpMetadataUrl = value;
    }
    resetIdpMetadataUrl() {
        this._idpMetadataUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idpMetadataUrlInput() {
        return this._idpMetadataUrl;
    }
    get idpMetadataXml() {
        return this.getStringAttribute('idp_metadata_xml');
    }
    set idpMetadataXml(value) {
        this._idpMetadataXml = value;
    }
    resetIdpMetadataXml() {
        this._idpMetadataXml = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idpMetadataXmlInput() {
        return this._idpMetadataXml;
    }
    get loginAssertion() {
        return this.getStringAttribute('login_assertion');
    }
    set loginAssertion(value) {
        this._loginAssertion = value;
    }
    resetLoginAssertion() {
        this._loginAssertion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loginAssertionInput() {
        return this._loginAssertion;
    }
    get loginValidityDuration() {
        return this.getNumberAttribute('login_validity_duration');
    }
    set loginValidityDuration(value) {
        this._loginValidityDuration = value;
    }
    resetLoginValidityDuration() {
        this._loginValidityDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loginValidityDurationInput() {
        return this._loginValidityDuration;
    }
    get nameAssertion() {
        return this.getStringAttribute('name_assertion');
    }
    set nameAssertion(value) {
        this._nameAssertion = value;
    }
    resetNameAssertion() {
        this._nameAssertion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameAssertionInput() {
        return this._nameAssertion;
    }
    get orgAssertion() {
        return this.getStringAttribute('org_assertion');
    }
    set orgAssertion(value) {
        this._orgAssertion = value;
    }
    resetOrgAssertion() {
        this._orgAssertion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get orgAssertionInput() {
        return this._orgAssertion;
    }
    get roleAssertion() {
        return this.getStringAttribute('role_assertion');
    }
    set roleAssertion(value) {
        this._roleAssertion = value;
    }
    resetRoleAssertion() {
        this._roleAssertion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get roleAssertionInput() {
        return this._roleAssertion;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    get workspaceId() {
        return this.getStringAttribute('workspace_id');
    }
    set workspaceId(value) {
        this._workspaceId = value;
    }
    // Temporarily expose input value. Use with caution.
    get workspaceIdInput() {
        return this._workspaceId;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            admin_role_values: cdktf.listMapper(cdktf.stringToTerraform, false)(this._adminRoleValues),
            allowed_organizations: cdktf.listMapper(cdktf.stringToTerraform, false)(this._allowedOrganizations),
            editor_role_values: cdktf.listMapper(cdktf.stringToTerraform, false)(this._editorRoleValues),
            email_assertion: cdktf.stringToTerraform(this._emailAssertion),
            groups_assertion: cdktf.stringToTerraform(this._groupsAssertion),
            id: cdktf.stringToTerraform(this._id),
            idp_metadata_url: cdktf.stringToTerraform(this._idpMetadataUrl),
            idp_metadata_xml: cdktf.stringToTerraform(this._idpMetadataXml),
            login_assertion: cdktf.stringToTerraform(this._loginAssertion),
            login_validity_duration: cdktf.numberToTerraform(this._loginValidityDuration),
            name_assertion: cdktf.stringToTerraform(this._nameAssertion),
            org_assertion: cdktf.stringToTerraform(this._orgAssertion),
            role_assertion: cdktf.stringToTerraform(this._roleAssertion),
            workspace_id: cdktf.stringToTerraform(this._workspaceId),
            timeouts: grafanaWorkspaceSamlConfigurationTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.GrafanaWorkspaceSamlConfiguration = GrafanaWorkspaceSamlConfiguration;
_b = JSII_RTTI_SYMBOL_1;
GrafanaWorkspaceSamlConfiguration[_b] = { fqn: "@cdktf/provider-aws.grafanaWorkspaceSamlConfiguration.GrafanaWorkspaceSamlConfiguration", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
GrafanaWorkspaceSamlConfiguration.tfResourceType = "aws_grafana_workspace_saml_configuration";
//# sourceMappingURL=data:application/json;base64,