"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DetectiveMember = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/detective_member aws_detective_member}
*/
class DetectiveMember extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/detective_member aws_detective_member} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DetectiveMemberConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_detective_member',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._accountId = config.accountId;
        this._disableEmailNotification = config.disableEmailNotification;
        this._emailAddress = config.emailAddress;
        this._graphArn = config.graphArn;
        this._id = config.id;
        this._message = config.message;
    }
    get accountId() {
        return this.getStringAttribute('account_id');
    }
    set accountId(value) {
        this._accountId = value;
    }
    // Temporarily expose input value. Use with caution.
    get accountIdInput() {
        return this._accountId;
    }
    // administrator_id - computed: true, optional: false, required: false
    get administratorId() {
        return this.getStringAttribute('administrator_id');
    }
    get disableEmailNotification() {
        return this.getBooleanAttribute('disable_email_notification');
    }
    set disableEmailNotification(value) {
        this._disableEmailNotification = value;
    }
    resetDisableEmailNotification() {
        this._disableEmailNotification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disableEmailNotificationInput() {
        return this._disableEmailNotification;
    }
    // disabled_reason - computed: true, optional: false, required: false
    get disabledReason() {
        return this.getStringAttribute('disabled_reason');
    }
    get emailAddress() {
        return this.getStringAttribute('email_address');
    }
    set emailAddress(value) {
        this._emailAddress = value;
    }
    // Temporarily expose input value. Use with caution.
    get emailAddressInput() {
        return this._emailAddress;
    }
    get graphArn() {
        return this.getStringAttribute('graph_arn');
    }
    set graphArn(value) {
        this._graphArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get graphArnInput() {
        return this._graphArn;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // invited_time - computed: true, optional: false, required: false
    get invitedTime() {
        return this.getStringAttribute('invited_time');
    }
    get message() {
        return this.getStringAttribute('message');
    }
    set message(value) {
        this._message = value;
    }
    resetMessage() {
        this._message = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messageInput() {
        return this._message;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    // updated_time - computed: true, optional: false, required: false
    get updatedTime() {
        return this.getStringAttribute('updated_time');
    }
    // volume_usage_in_bytes - computed: true, optional: false, required: false
    get volumeUsageInBytes() {
        return this.getStringAttribute('volume_usage_in_bytes');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            account_id: cdktf.stringToTerraform(this._accountId),
            disable_email_notification: cdktf.booleanToTerraform(this._disableEmailNotification),
            email_address: cdktf.stringToTerraform(this._emailAddress),
            graph_arn: cdktf.stringToTerraform(this._graphArn),
            id: cdktf.stringToTerraform(this._id),
            message: cdktf.stringToTerraform(this._message),
        };
    }
}
exports.DetectiveMember = DetectiveMember;
_a = JSII_RTTI_SYMBOL_1;
DetectiveMember[_a] = { fqn: "@cdktf/provider-aws.detectiveMember.DetectiveMember", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
DetectiveMember.tfResourceType = "aws_detective_member";
//# sourceMappingURL=data:application/json;base64,