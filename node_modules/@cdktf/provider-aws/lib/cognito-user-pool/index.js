"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CognitoUserPool = exports.CognitoUserPoolVerificationMessageTemplateOutputReference = exports.cognitoUserPoolVerificationMessageTemplateToTerraform = exports.CognitoUserPoolUsernameConfigurationOutputReference = exports.cognitoUserPoolUsernameConfigurationToTerraform = exports.CognitoUserPoolUserPoolAddOnsOutputReference = exports.cognitoUserPoolUserPoolAddOnsToTerraform = exports.CognitoUserPoolUserAttributeUpdateSettingsOutputReference = exports.cognitoUserPoolUserAttributeUpdateSettingsToTerraform = exports.CognitoUserPoolSoftwareTokenMfaConfigurationOutputReference = exports.cognitoUserPoolSoftwareTokenMfaConfigurationToTerraform = exports.CognitoUserPoolSmsConfigurationOutputReference = exports.cognitoUserPoolSmsConfigurationToTerraform = exports.CognitoUserPoolSchemaList = exports.CognitoUserPoolSchemaOutputReference = exports.cognitoUserPoolSchemaToTerraform = exports.CognitoUserPoolSchemaStringAttributeConstraintsOutputReference = exports.cognitoUserPoolSchemaStringAttributeConstraintsToTerraform = exports.CognitoUserPoolSchemaNumberAttributeConstraintsOutputReference = exports.cognitoUserPoolSchemaNumberAttributeConstraintsToTerraform = exports.CognitoUserPoolPasswordPolicyOutputReference = exports.cognitoUserPoolPasswordPolicyToTerraform = exports.CognitoUserPoolLambdaConfigOutputReference = exports.cognitoUserPoolLambdaConfigToTerraform = exports.CognitoUserPoolLambdaConfigCustomSmsSenderOutputReference = exports.cognitoUserPoolLambdaConfigCustomSmsSenderToTerraform = exports.CognitoUserPoolLambdaConfigCustomEmailSenderOutputReference = exports.cognitoUserPoolLambdaConfigCustomEmailSenderToTerraform = exports.CognitoUserPoolEmailConfigurationOutputReference = exports.cognitoUserPoolEmailConfigurationToTerraform = exports.CognitoUserPoolDeviceConfigurationOutputReference = exports.cognitoUserPoolDeviceConfigurationToTerraform = exports.CognitoUserPoolAdminCreateUserConfigOutputReference = exports.cognitoUserPoolAdminCreateUserConfigToTerraform = exports.CognitoUserPoolAdminCreateUserConfigInviteMessageTemplateOutputReference = exports.cognitoUserPoolAdminCreateUserConfigInviteMessageTemplateToTerraform = exports.CognitoUserPoolAccountRecoverySettingOutputReference = exports.cognitoUserPoolAccountRecoverySettingToTerraform = exports.CognitoUserPoolAccountRecoverySettingRecoveryMechanismList = exports.CognitoUserPoolAccountRecoverySettingRecoveryMechanismOutputReference = exports.cognitoUserPoolAccountRecoverySettingRecoveryMechanismToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function cognitoUserPoolAccountRecoverySettingRecoveryMechanismToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        priority: cdktf.numberToTerraform(struct.priority),
    };
}
exports.cognitoUserPoolAccountRecoverySettingRecoveryMechanismToTerraform = cognitoUserPoolAccountRecoverySettingRecoveryMechanismToTerraform;
class CognitoUserPoolAccountRecoverySettingRecoveryMechanismOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._priority !== undefined) {
            hasAnyValues = true;
            internalValueResult.priority = this._priority;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._priority = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._priority = value.priority;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get priority() {
        return this.getNumberAttribute('priority');
    }
    set priority(value) {
        this._priority = value;
    }
    // Temporarily expose input value. Use with caution.
    get priorityInput() {
        return this._priority;
    }
}
exports.CognitoUserPoolAccountRecoverySettingRecoveryMechanismOutputReference = CognitoUserPoolAccountRecoverySettingRecoveryMechanismOutputReference;
_a = JSII_RTTI_SYMBOL_1;
CognitoUserPoolAccountRecoverySettingRecoveryMechanismOutputReference[_a] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolAccountRecoverySettingRecoveryMechanismOutputReference", version: "10.0.12" };
class CognitoUserPoolAccountRecoverySettingRecoveryMechanismList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CognitoUserPoolAccountRecoverySettingRecoveryMechanismOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CognitoUserPoolAccountRecoverySettingRecoveryMechanismList = CognitoUserPoolAccountRecoverySettingRecoveryMechanismList;
_b = JSII_RTTI_SYMBOL_1;
CognitoUserPoolAccountRecoverySettingRecoveryMechanismList[_b] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolAccountRecoverySettingRecoveryMechanismList", version: "10.0.12" };
function cognitoUserPoolAccountRecoverySettingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        recovery_mechanism: cdktf.listMapper(cognitoUserPoolAccountRecoverySettingRecoveryMechanismToTerraform, true)(struct.recoveryMechanism),
    };
}
exports.cognitoUserPoolAccountRecoverySettingToTerraform = cognitoUserPoolAccountRecoverySettingToTerraform;
class CognitoUserPoolAccountRecoverySettingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // recovery_mechanism - computed: false, optional: false, required: true
        this._recoveryMechanism = new CognitoUserPoolAccountRecoverySettingRecoveryMechanismList(this, "recovery_mechanism", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._recoveryMechanism?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.recoveryMechanism = this._recoveryMechanism?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._recoveryMechanism.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._recoveryMechanism.internalValue = value.recoveryMechanism;
        }
    }
    get recoveryMechanism() {
        return this._recoveryMechanism;
    }
    putRecoveryMechanism(value) {
        this._recoveryMechanism.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get recoveryMechanismInput() {
        return this._recoveryMechanism.internalValue;
    }
}
exports.CognitoUserPoolAccountRecoverySettingOutputReference = CognitoUserPoolAccountRecoverySettingOutputReference;
_c = JSII_RTTI_SYMBOL_1;
CognitoUserPoolAccountRecoverySettingOutputReference[_c] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolAccountRecoverySettingOutputReference", version: "10.0.12" };
function cognitoUserPoolAdminCreateUserConfigInviteMessageTemplateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        email_message: cdktf.stringToTerraform(struct.emailMessage),
        email_subject: cdktf.stringToTerraform(struct.emailSubject),
        sms_message: cdktf.stringToTerraform(struct.smsMessage),
    };
}
exports.cognitoUserPoolAdminCreateUserConfigInviteMessageTemplateToTerraform = cognitoUserPoolAdminCreateUserConfigInviteMessageTemplateToTerraform;
class CognitoUserPoolAdminCreateUserConfigInviteMessageTemplateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._emailMessage !== undefined) {
            hasAnyValues = true;
            internalValueResult.emailMessage = this._emailMessage;
        }
        if (this._emailSubject !== undefined) {
            hasAnyValues = true;
            internalValueResult.emailSubject = this._emailSubject;
        }
        if (this._smsMessage !== undefined) {
            hasAnyValues = true;
            internalValueResult.smsMessage = this._smsMessage;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._emailMessage = undefined;
            this._emailSubject = undefined;
            this._smsMessage = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._emailMessage = value.emailMessage;
            this._emailSubject = value.emailSubject;
            this._smsMessage = value.smsMessage;
        }
    }
    get emailMessage() {
        return this.getStringAttribute('email_message');
    }
    set emailMessage(value) {
        this._emailMessage = value;
    }
    resetEmailMessage() {
        this._emailMessage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailMessageInput() {
        return this._emailMessage;
    }
    get emailSubject() {
        return this.getStringAttribute('email_subject');
    }
    set emailSubject(value) {
        this._emailSubject = value;
    }
    resetEmailSubject() {
        this._emailSubject = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailSubjectInput() {
        return this._emailSubject;
    }
    get smsMessage() {
        return this.getStringAttribute('sms_message');
    }
    set smsMessage(value) {
        this._smsMessage = value;
    }
    resetSmsMessage() {
        this._smsMessage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get smsMessageInput() {
        return this._smsMessage;
    }
}
exports.CognitoUserPoolAdminCreateUserConfigInviteMessageTemplateOutputReference = CognitoUserPoolAdminCreateUserConfigInviteMessageTemplateOutputReference;
_d = JSII_RTTI_SYMBOL_1;
CognitoUserPoolAdminCreateUserConfigInviteMessageTemplateOutputReference[_d] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolAdminCreateUserConfigInviteMessageTemplateOutputReference", version: "10.0.12" };
function cognitoUserPoolAdminCreateUserConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_admin_create_user_only: cdktf.booleanToTerraform(struct.allowAdminCreateUserOnly),
        invite_message_template: cognitoUserPoolAdminCreateUserConfigInviteMessageTemplateToTerraform(struct.inviteMessageTemplate),
    };
}
exports.cognitoUserPoolAdminCreateUserConfigToTerraform = cognitoUserPoolAdminCreateUserConfigToTerraform;
class CognitoUserPoolAdminCreateUserConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // invite_message_template - computed: false, optional: true, required: false
        this._inviteMessageTemplate = new CognitoUserPoolAdminCreateUserConfigInviteMessageTemplateOutputReference(this, "invite_message_template");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowAdminCreateUserOnly !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowAdminCreateUserOnly = this._allowAdminCreateUserOnly;
        }
        if (this._inviteMessageTemplate?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inviteMessageTemplate = this._inviteMessageTemplate?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowAdminCreateUserOnly = undefined;
            this._inviteMessageTemplate.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowAdminCreateUserOnly = value.allowAdminCreateUserOnly;
            this._inviteMessageTemplate.internalValue = value.inviteMessageTemplate;
        }
    }
    get allowAdminCreateUserOnly() {
        return this.getBooleanAttribute('allow_admin_create_user_only');
    }
    set allowAdminCreateUserOnly(value) {
        this._allowAdminCreateUserOnly = value;
    }
    resetAllowAdminCreateUserOnly() {
        this._allowAdminCreateUserOnly = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowAdminCreateUserOnlyInput() {
        return this._allowAdminCreateUserOnly;
    }
    get inviteMessageTemplate() {
        return this._inviteMessageTemplate;
    }
    putInviteMessageTemplate(value) {
        this._inviteMessageTemplate.internalValue = value;
    }
    resetInviteMessageTemplate() {
        this._inviteMessageTemplate.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inviteMessageTemplateInput() {
        return this._inviteMessageTemplate.internalValue;
    }
}
exports.CognitoUserPoolAdminCreateUserConfigOutputReference = CognitoUserPoolAdminCreateUserConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
CognitoUserPoolAdminCreateUserConfigOutputReference[_e] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolAdminCreateUserConfigOutputReference", version: "10.0.12" };
function cognitoUserPoolDeviceConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        challenge_required_on_new_device: cdktf.booleanToTerraform(struct.challengeRequiredOnNewDevice),
        device_only_remembered_on_user_prompt: cdktf.booleanToTerraform(struct.deviceOnlyRememberedOnUserPrompt),
    };
}
exports.cognitoUserPoolDeviceConfigurationToTerraform = cognitoUserPoolDeviceConfigurationToTerraform;
class CognitoUserPoolDeviceConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._challengeRequiredOnNewDevice !== undefined) {
            hasAnyValues = true;
            internalValueResult.challengeRequiredOnNewDevice = this._challengeRequiredOnNewDevice;
        }
        if (this._deviceOnlyRememberedOnUserPrompt !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceOnlyRememberedOnUserPrompt = this._deviceOnlyRememberedOnUserPrompt;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._challengeRequiredOnNewDevice = undefined;
            this._deviceOnlyRememberedOnUserPrompt = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._challengeRequiredOnNewDevice = value.challengeRequiredOnNewDevice;
            this._deviceOnlyRememberedOnUserPrompt = value.deviceOnlyRememberedOnUserPrompt;
        }
    }
    get challengeRequiredOnNewDevice() {
        return this.getBooleanAttribute('challenge_required_on_new_device');
    }
    set challengeRequiredOnNewDevice(value) {
        this._challengeRequiredOnNewDevice = value;
    }
    resetChallengeRequiredOnNewDevice() {
        this._challengeRequiredOnNewDevice = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get challengeRequiredOnNewDeviceInput() {
        return this._challengeRequiredOnNewDevice;
    }
    get deviceOnlyRememberedOnUserPrompt() {
        return this.getBooleanAttribute('device_only_remembered_on_user_prompt');
    }
    set deviceOnlyRememberedOnUserPrompt(value) {
        this._deviceOnlyRememberedOnUserPrompt = value;
    }
    resetDeviceOnlyRememberedOnUserPrompt() {
        this._deviceOnlyRememberedOnUserPrompt = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deviceOnlyRememberedOnUserPromptInput() {
        return this._deviceOnlyRememberedOnUserPrompt;
    }
}
exports.CognitoUserPoolDeviceConfigurationOutputReference = CognitoUserPoolDeviceConfigurationOutputReference;
_f = JSII_RTTI_SYMBOL_1;
CognitoUserPoolDeviceConfigurationOutputReference[_f] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolDeviceConfigurationOutputReference", version: "10.0.12" };
function cognitoUserPoolEmailConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        configuration_set: cdktf.stringToTerraform(struct.configurationSet),
        email_sending_account: cdktf.stringToTerraform(struct.emailSendingAccount),
        from_email_address: cdktf.stringToTerraform(struct.fromEmailAddress),
        reply_to_email_address: cdktf.stringToTerraform(struct.replyToEmailAddress),
        source_arn: cdktf.stringToTerraform(struct.sourceArn),
    };
}
exports.cognitoUserPoolEmailConfigurationToTerraform = cognitoUserPoolEmailConfigurationToTerraform;
class CognitoUserPoolEmailConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._configurationSet !== undefined) {
            hasAnyValues = true;
            internalValueResult.configurationSet = this._configurationSet;
        }
        if (this._emailSendingAccount !== undefined) {
            hasAnyValues = true;
            internalValueResult.emailSendingAccount = this._emailSendingAccount;
        }
        if (this._fromEmailAddress !== undefined) {
            hasAnyValues = true;
            internalValueResult.fromEmailAddress = this._fromEmailAddress;
        }
        if (this._replyToEmailAddress !== undefined) {
            hasAnyValues = true;
            internalValueResult.replyToEmailAddress = this._replyToEmailAddress;
        }
        if (this._sourceArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceArn = this._sourceArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._configurationSet = undefined;
            this._emailSendingAccount = undefined;
            this._fromEmailAddress = undefined;
            this._replyToEmailAddress = undefined;
            this._sourceArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._configurationSet = value.configurationSet;
            this._emailSendingAccount = value.emailSendingAccount;
            this._fromEmailAddress = value.fromEmailAddress;
            this._replyToEmailAddress = value.replyToEmailAddress;
            this._sourceArn = value.sourceArn;
        }
    }
    get configurationSet() {
        return this.getStringAttribute('configuration_set');
    }
    set configurationSet(value) {
        this._configurationSet = value;
    }
    resetConfigurationSet() {
        this._configurationSet = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configurationSetInput() {
        return this._configurationSet;
    }
    get emailSendingAccount() {
        return this.getStringAttribute('email_sending_account');
    }
    set emailSendingAccount(value) {
        this._emailSendingAccount = value;
    }
    resetEmailSendingAccount() {
        this._emailSendingAccount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailSendingAccountInput() {
        return this._emailSendingAccount;
    }
    get fromEmailAddress() {
        return this.getStringAttribute('from_email_address');
    }
    set fromEmailAddress(value) {
        this._fromEmailAddress = value;
    }
    resetFromEmailAddress() {
        this._fromEmailAddress = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fromEmailAddressInput() {
        return this._fromEmailAddress;
    }
    get replyToEmailAddress() {
        return this.getStringAttribute('reply_to_email_address');
    }
    set replyToEmailAddress(value) {
        this._replyToEmailAddress = value;
    }
    resetReplyToEmailAddress() {
        this._replyToEmailAddress = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replyToEmailAddressInput() {
        return this._replyToEmailAddress;
    }
    get sourceArn() {
        return this.getStringAttribute('source_arn');
    }
    set sourceArn(value) {
        this._sourceArn = value;
    }
    resetSourceArn() {
        this._sourceArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceArnInput() {
        return this._sourceArn;
    }
}
exports.CognitoUserPoolEmailConfigurationOutputReference = CognitoUserPoolEmailConfigurationOutputReference;
_g = JSII_RTTI_SYMBOL_1;
CognitoUserPoolEmailConfigurationOutputReference[_g] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolEmailConfigurationOutputReference", version: "10.0.12" };
function cognitoUserPoolLambdaConfigCustomEmailSenderToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        lambda_arn: cdktf.stringToTerraform(struct.lambdaArn),
        lambda_version: cdktf.stringToTerraform(struct.lambdaVersion),
    };
}
exports.cognitoUserPoolLambdaConfigCustomEmailSenderToTerraform = cognitoUserPoolLambdaConfigCustomEmailSenderToTerraform;
class CognitoUserPoolLambdaConfigCustomEmailSenderOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._lambdaArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lambdaArn = this._lambdaArn;
        }
        if (this._lambdaVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.lambdaVersion = this._lambdaVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._lambdaArn = undefined;
            this._lambdaVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._lambdaArn = value.lambdaArn;
            this._lambdaVersion = value.lambdaVersion;
        }
    }
    get lambdaArn() {
        return this.getStringAttribute('lambda_arn');
    }
    set lambdaArn(value) {
        this._lambdaArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaArnInput() {
        return this._lambdaArn;
    }
    get lambdaVersion() {
        return this.getStringAttribute('lambda_version');
    }
    set lambdaVersion(value) {
        this._lambdaVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaVersionInput() {
        return this._lambdaVersion;
    }
}
exports.CognitoUserPoolLambdaConfigCustomEmailSenderOutputReference = CognitoUserPoolLambdaConfigCustomEmailSenderOutputReference;
_h = JSII_RTTI_SYMBOL_1;
CognitoUserPoolLambdaConfigCustomEmailSenderOutputReference[_h] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolLambdaConfigCustomEmailSenderOutputReference", version: "10.0.12" };
function cognitoUserPoolLambdaConfigCustomSmsSenderToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        lambda_arn: cdktf.stringToTerraform(struct.lambdaArn),
        lambda_version: cdktf.stringToTerraform(struct.lambdaVersion),
    };
}
exports.cognitoUserPoolLambdaConfigCustomSmsSenderToTerraform = cognitoUserPoolLambdaConfigCustomSmsSenderToTerraform;
class CognitoUserPoolLambdaConfigCustomSmsSenderOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._lambdaArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lambdaArn = this._lambdaArn;
        }
        if (this._lambdaVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.lambdaVersion = this._lambdaVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._lambdaArn = undefined;
            this._lambdaVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._lambdaArn = value.lambdaArn;
            this._lambdaVersion = value.lambdaVersion;
        }
    }
    get lambdaArn() {
        return this.getStringAttribute('lambda_arn');
    }
    set lambdaArn(value) {
        this._lambdaArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaArnInput() {
        return this._lambdaArn;
    }
    get lambdaVersion() {
        return this.getStringAttribute('lambda_version');
    }
    set lambdaVersion(value) {
        this._lambdaVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaVersionInput() {
        return this._lambdaVersion;
    }
}
exports.CognitoUserPoolLambdaConfigCustomSmsSenderOutputReference = CognitoUserPoolLambdaConfigCustomSmsSenderOutputReference;
_j = JSII_RTTI_SYMBOL_1;
CognitoUserPoolLambdaConfigCustomSmsSenderOutputReference[_j] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolLambdaConfigCustomSmsSenderOutputReference", version: "10.0.12" };
function cognitoUserPoolLambdaConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create_auth_challenge: cdktf.stringToTerraform(struct.createAuthChallenge),
        custom_message: cdktf.stringToTerraform(struct.customMessage),
        define_auth_challenge: cdktf.stringToTerraform(struct.defineAuthChallenge),
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        post_authentication: cdktf.stringToTerraform(struct.postAuthentication),
        post_confirmation: cdktf.stringToTerraform(struct.postConfirmation),
        pre_authentication: cdktf.stringToTerraform(struct.preAuthentication),
        pre_sign_up: cdktf.stringToTerraform(struct.preSignUp),
        pre_token_generation: cdktf.stringToTerraform(struct.preTokenGeneration),
        user_migration: cdktf.stringToTerraform(struct.userMigration),
        verify_auth_challenge_response: cdktf.stringToTerraform(struct.verifyAuthChallengeResponse),
        custom_email_sender: cognitoUserPoolLambdaConfigCustomEmailSenderToTerraform(struct.customEmailSender),
        custom_sms_sender: cognitoUserPoolLambdaConfigCustomSmsSenderToTerraform(struct.customSmsSender),
    };
}
exports.cognitoUserPoolLambdaConfigToTerraform = cognitoUserPoolLambdaConfigToTerraform;
class CognitoUserPoolLambdaConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // custom_email_sender - computed: false, optional: true, required: false
        this._customEmailSender = new CognitoUserPoolLambdaConfigCustomEmailSenderOutputReference(this, "custom_email_sender");
        // custom_sms_sender - computed: false, optional: true, required: false
        this._customSmsSender = new CognitoUserPoolLambdaConfigCustomSmsSenderOutputReference(this, "custom_sms_sender");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._createAuthChallenge !== undefined) {
            hasAnyValues = true;
            internalValueResult.createAuthChallenge = this._createAuthChallenge;
        }
        if (this._customMessage !== undefined) {
            hasAnyValues = true;
            internalValueResult.customMessage = this._customMessage;
        }
        if (this._defineAuthChallenge !== undefined) {
            hasAnyValues = true;
            internalValueResult.defineAuthChallenge = this._defineAuthChallenge;
        }
        if (this._kmsKeyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyId = this._kmsKeyId;
        }
        if (this._postAuthentication !== undefined) {
            hasAnyValues = true;
            internalValueResult.postAuthentication = this._postAuthentication;
        }
        if (this._postConfirmation !== undefined) {
            hasAnyValues = true;
            internalValueResult.postConfirmation = this._postConfirmation;
        }
        if (this._preAuthentication !== undefined) {
            hasAnyValues = true;
            internalValueResult.preAuthentication = this._preAuthentication;
        }
        if (this._preSignUp !== undefined) {
            hasAnyValues = true;
            internalValueResult.preSignUp = this._preSignUp;
        }
        if (this._preTokenGeneration !== undefined) {
            hasAnyValues = true;
            internalValueResult.preTokenGeneration = this._preTokenGeneration;
        }
        if (this._userMigration !== undefined) {
            hasAnyValues = true;
            internalValueResult.userMigration = this._userMigration;
        }
        if (this._verifyAuthChallengeResponse !== undefined) {
            hasAnyValues = true;
            internalValueResult.verifyAuthChallengeResponse = this._verifyAuthChallengeResponse;
        }
        if (this._customEmailSender?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customEmailSender = this._customEmailSender?.internalValue;
        }
        if (this._customSmsSender?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customSmsSender = this._customSmsSender?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._createAuthChallenge = undefined;
            this._customMessage = undefined;
            this._defineAuthChallenge = undefined;
            this._kmsKeyId = undefined;
            this._postAuthentication = undefined;
            this._postConfirmation = undefined;
            this._preAuthentication = undefined;
            this._preSignUp = undefined;
            this._preTokenGeneration = undefined;
            this._userMigration = undefined;
            this._verifyAuthChallengeResponse = undefined;
            this._customEmailSender.internalValue = undefined;
            this._customSmsSender.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._createAuthChallenge = value.createAuthChallenge;
            this._customMessage = value.customMessage;
            this._defineAuthChallenge = value.defineAuthChallenge;
            this._kmsKeyId = value.kmsKeyId;
            this._postAuthentication = value.postAuthentication;
            this._postConfirmation = value.postConfirmation;
            this._preAuthentication = value.preAuthentication;
            this._preSignUp = value.preSignUp;
            this._preTokenGeneration = value.preTokenGeneration;
            this._userMigration = value.userMigration;
            this._verifyAuthChallengeResponse = value.verifyAuthChallengeResponse;
            this._customEmailSender.internalValue = value.customEmailSender;
            this._customSmsSender.internalValue = value.customSmsSender;
        }
    }
    get createAuthChallenge() {
        return this.getStringAttribute('create_auth_challenge');
    }
    set createAuthChallenge(value) {
        this._createAuthChallenge = value;
    }
    resetCreateAuthChallenge() {
        this._createAuthChallenge = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createAuthChallengeInput() {
        return this._createAuthChallenge;
    }
    get customMessage() {
        return this.getStringAttribute('custom_message');
    }
    set customMessage(value) {
        this._customMessage = value;
    }
    resetCustomMessage() {
        this._customMessage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customMessageInput() {
        return this._customMessage;
    }
    get defineAuthChallenge() {
        return this.getStringAttribute('define_auth_challenge');
    }
    set defineAuthChallenge(value) {
        this._defineAuthChallenge = value;
    }
    resetDefineAuthChallenge() {
        this._defineAuthChallenge = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defineAuthChallengeInput() {
        return this._defineAuthChallenge;
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    get postAuthentication() {
        return this.getStringAttribute('post_authentication');
    }
    set postAuthentication(value) {
        this._postAuthentication = value;
    }
    resetPostAuthentication() {
        this._postAuthentication = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postAuthenticationInput() {
        return this._postAuthentication;
    }
    get postConfirmation() {
        return this.getStringAttribute('post_confirmation');
    }
    set postConfirmation(value) {
        this._postConfirmation = value;
    }
    resetPostConfirmation() {
        this._postConfirmation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postConfirmationInput() {
        return this._postConfirmation;
    }
    get preAuthentication() {
        return this.getStringAttribute('pre_authentication');
    }
    set preAuthentication(value) {
        this._preAuthentication = value;
    }
    resetPreAuthentication() {
        this._preAuthentication = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preAuthenticationInput() {
        return this._preAuthentication;
    }
    get preSignUp() {
        return this.getStringAttribute('pre_sign_up');
    }
    set preSignUp(value) {
        this._preSignUp = value;
    }
    resetPreSignUp() {
        this._preSignUp = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preSignUpInput() {
        return this._preSignUp;
    }
    get preTokenGeneration() {
        return this.getStringAttribute('pre_token_generation');
    }
    set preTokenGeneration(value) {
        this._preTokenGeneration = value;
    }
    resetPreTokenGeneration() {
        this._preTokenGeneration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preTokenGenerationInput() {
        return this._preTokenGeneration;
    }
    get userMigration() {
        return this.getStringAttribute('user_migration');
    }
    set userMigration(value) {
        this._userMigration = value;
    }
    resetUserMigration() {
        this._userMigration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userMigrationInput() {
        return this._userMigration;
    }
    get verifyAuthChallengeResponse() {
        return this.getStringAttribute('verify_auth_challenge_response');
    }
    set verifyAuthChallengeResponse(value) {
        this._verifyAuthChallengeResponse = value;
    }
    resetVerifyAuthChallengeResponse() {
        this._verifyAuthChallengeResponse = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get verifyAuthChallengeResponseInput() {
        return this._verifyAuthChallengeResponse;
    }
    get customEmailSender() {
        return this._customEmailSender;
    }
    putCustomEmailSender(value) {
        this._customEmailSender.internalValue = value;
    }
    resetCustomEmailSender() {
        this._customEmailSender.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customEmailSenderInput() {
        return this._customEmailSender.internalValue;
    }
    get customSmsSender() {
        return this._customSmsSender;
    }
    putCustomSmsSender(value) {
        this._customSmsSender.internalValue = value;
    }
    resetCustomSmsSender() {
        this._customSmsSender.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customSmsSenderInput() {
        return this._customSmsSender.internalValue;
    }
}
exports.CognitoUserPoolLambdaConfigOutputReference = CognitoUserPoolLambdaConfigOutputReference;
_k = JSII_RTTI_SYMBOL_1;
CognitoUserPoolLambdaConfigOutputReference[_k] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolLambdaConfigOutputReference", version: "10.0.12" };
function cognitoUserPoolPasswordPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        minimum_length: cdktf.numberToTerraform(struct.minimumLength),
        require_lowercase: cdktf.booleanToTerraform(struct.requireLowercase),
        require_numbers: cdktf.booleanToTerraform(struct.requireNumbers),
        require_symbols: cdktf.booleanToTerraform(struct.requireSymbols),
        require_uppercase: cdktf.booleanToTerraform(struct.requireUppercase),
        temporary_password_validity_days: cdktf.numberToTerraform(struct.temporaryPasswordValidityDays),
    };
}
exports.cognitoUserPoolPasswordPolicyToTerraform = cognitoUserPoolPasswordPolicyToTerraform;
class CognitoUserPoolPasswordPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._minimumLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.minimumLength = this._minimumLength;
        }
        if (this._requireLowercase !== undefined) {
            hasAnyValues = true;
            internalValueResult.requireLowercase = this._requireLowercase;
        }
        if (this._requireNumbers !== undefined) {
            hasAnyValues = true;
            internalValueResult.requireNumbers = this._requireNumbers;
        }
        if (this._requireSymbols !== undefined) {
            hasAnyValues = true;
            internalValueResult.requireSymbols = this._requireSymbols;
        }
        if (this._requireUppercase !== undefined) {
            hasAnyValues = true;
            internalValueResult.requireUppercase = this._requireUppercase;
        }
        if (this._temporaryPasswordValidityDays !== undefined) {
            hasAnyValues = true;
            internalValueResult.temporaryPasswordValidityDays = this._temporaryPasswordValidityDays;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._minimumLength = undefined;
            this._requireLowercase = undefined;
            this._requireNumbers = undefined;
            this._requireSymbols = undefined;
            this._requireUppercase = undefined;
            this._temporaryPasswordValidityDays = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._minimumLength = value.minimumLength;
            this._requireLowercase = value.requireLowercase;
            this._requireNumbers = value.requireNumbers;
            this._requireSymbols = value.requireSymbols;
            this._requireUppercase = value.requireUppercase;
            this._temporaryPasswordValidityDays = value.temporaryPasswordValidityDays;
        }
    }
    get minimumLength() {
        return this.getNumberAttribute('minimum_length');
    }
    set minimumLength(value) {
        this._minimumLength = value;
    }
    resetMinimumLength() {
        this._minimumLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minimumLengthInput() {
        return this._minimumLength;
    }
    get requireLowercase() {
        return this.getBooleanAttribute('require_lowercase');
    }
    set requireLowercase(value) {
        this._requireLowercase = value;
    }
    resetRequireLowercase() {
        this._requireLowercase = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireLowercaseInput() {
        return this._requireLowercase;
    }
    get requireNumbers() {
        return this.getBooleanAttribute('require_numbers');
    }
    set requireNumbers(value) {
        this._requireNumbers = value;
    }
    resetRequireNumbers() {
        this._requireNumbers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireNumbersInput() {
        return this._requireNumbers;
    }
    get requireSymbols() {
        return this.getBooleanAttribute('require_symbols');
    }
    set requireSymbols(value) {
        this._requireSymbols = value;
    }
    resetRequireSymbols() {
        this._requireSymbols = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireSymbolsInput() {
        return this._requireSymbols;
    }
    get requireUppercase() {
        return this.getBooleanAttribute('require_uppercase');
    }
    set requireUppercase(value) {
        this._requireUppercase = value;
    }
    resetRequireUppercase() {
        this._requireUppercase = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireUppercaseInput() {
        return this._requireUppercase;
    }
    get temporaryPasswordValidityDays() {
        return this.getNumberAttribute('temporary_password_validity_days');
    }
    set temporaryPasswordValidityDays(value) {
        this._temporaryPasswordValidityDays = value;
    }
    resetTemporaryPasswordValidityDays() {
        this._temporaryPasswordValidityDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get temporaryPasswordValidityDaysInput() {
        return this._temporaryPasswordValidityDays;
    }
}
exports.CognitoUserPoolPasswordPolicyOutputReference = CognitoUserPoolPasswordPolicyOutputReference;
_l = JSII_RTTI_SYMBOL_1;
CognitoUserPoolPasswordPolicyOutputReference[_l] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolPasswordPolicyOutputReference", version: "10.0.12" };
function cognitoUserPoolSchemaNumberAttributeConstraintsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_value: cdktf.stringToTerraform(struct.maxValue),
        min_value: cdktf.stringToTerraform(struct.minValue),
    };
}
exports.cognitoUserPoolSchemaNumberAttributeConstraintsToTerraform = cognitoUserPoolSchemaNumberAttributeConstraintsToTerraform;
class CognitoUserPoolSchemaNumberAttributeConstraintsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxValue = this._maxValue;
        }
        if (this._minValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.minValue = this._minValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxValue = undefined;
            this._minValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxValue = value.maxValue;
            this._minValue = value.minValue;
        }
    }
    get maxValue() {
        return this.getStringAttribute('max_value');
    }
    set maxValue(value) {
        this._maxValue = value;
    }
    resetMaxValue() {
        this._maxValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxValueInput() {
        return this._maxValue;
    }
    get minValue() {
        return this.getStringAttribute('min_value');
    }
    set minValue(value) {
        this._minValue = value;
    }
    resetMinValue() {
        this._minValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minValueInput() {
        return this._minValue;
    }
}
exports.CognitoUserPoolSchemaNumberAttributeConstraintsOutputReference = CognitoUserPoolSchemaNumberAttributeConstraintsOutputReference;
_m = JSII_RTTI_SYMBOL_1;
CognitoUserPoolSchemaNumberAttributeConstraintsOutputReference[_m] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolSchemaNumberAttributeConstraintsOutputReference", version: "10.0.12" };
function cognitoUserPoolSchemaStringAttributeConstraintsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_length: cdktf.stringToTerraform(struct.maxLength),
        min_length: cdktf.stringToTerraform(struct.minLength),
    };
}
exports.cognitoUserPoolSchemaStringAttributeConstraintsToTerraform = cognitoUserPoolSchemaStringAttributeConstraintsToTerraform;
class CognitoUserPoolSchemaStringAttributeConstraintsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxLength = this._maxLength;
        }
        if (this._minLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.minLength = this._minLength;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxLength = undefined;
            this._minLength = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxLength = value.maxLength;
            this._minLength = value.minLength;
        }
    }
    get maxLength() {
        return this.getStringAttribute('max_length');
    }
    set maxLength(value) {
        this._maxLength = value;
    }
    resetMaxLength() {
        this._maxLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxLengthInput() {
        return this._maxLength;
    }
    get minLength() {
        return this.getStringAttribute('min_length');
    }
    set minLength(value) {
        this._minLength = value;
    }
    resetMinLength() {
        this._minLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minLengthInput() {
        return this._minLength;
    }
}
exports.CognitoUserPoolSchemaStringAttributeConstraintsOutputReference = CognitoUserPoolSchemaStringAttributeConstraintsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
CognitoUserPoolSchemaStringAttributeConstraintsOutputReference[_o] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolSchemaStringAttributeConstraintsOutputReference", version: "10.0.12" };
function cognitoUserPoolSchemaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        attribute_data_type: cdktf.stringToTerraform(struct.attributeDataType),
        developer_only_attribute: cdktf.booleanToTerraform(struct.developerOnlyAttribute),
        mutable: cdktf.booleanToTerraform(struct.mutable),
        name: cdktf.stringToTerraform(struct.name),
        required: cdktf.booleanToTerraform(struct.required),
        number_attribute_constraints: cognitoUserPoolSchemaNumberAttributeConstraintsToTerraform(struct.numberAttributeConstraints),
        string_attribute_constraints: cognitoUserPoolSchemaStringAttributeConstraintsToTerraform(struct.stringAttributeConstraints),
    };
}
exports.cognitoUserPoolSchemaToTerraform = cognitoUserPoolSchemaToTerraform;
class CognitoUserPoolSchemaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // number_attribute_constraints - computed: false, optional: true, required: false
        this._numberAttributeConstraints = new CognitoUserPoolSchemaNumberAttributeConstraintsOutputReference(this, "number_attribute_constraints");
        // string_attribute_constraints - computed: false, optional: true, required: false
        this._stringAttributeConstraints = new CognitoUserPoolSchemaStringAttributeConstraintsOutputReference(this, "string_attribute_constraints");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._attributeDataType !== undefined) {
            hasAnyValues = true;
            internalValueResult.attributeDataType = this._attributeDataType;
        }
        if (this._developerOnlyAttribute !== undefined) {
            hasAnyValues = true;
            internalValueResult.developerOnlyAttribute = this._developerOnlyAttribute;
        }
        if (this._mutable !== undefined) {
            hasAnyValues = true;
            internalValueResult.mutable = this._mutable;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._required !== undefined) {
            hasAnyValues = true;
            internalValueResult.required = this._required;
        }
        if (this._numberAttributeConstraints?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.numberAttributeConstraints = this._numberAttributeConstraints?.internalValue;
        }
        if (this._stringAttributeConstraints?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringAttributeConstraints = this._stringAttributeConstraints?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._attributeDataType = undefined;
            this._developerOnlyAttribute = undefined;
            this._mutable = undefined;
            this._name = undefined;
            this._required = undefined;
            this._numberAttributeConstraints.internalValue = undefined;
            this._stringAttributeConstraints.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._attributeDataType = value.attributeDataType;
            this._developerOnlyAttribute = value.developerOnlyAttribute;
            this._mutable = value.mutable;
            this._name = value.name;
            this._required = value.required;
            this._numberAttributeConstraints.internalValue = value.numberAttributeConstraints;
            this._stringAttributeConstraints.internalValue = value.stringAttributeConstraints;
        }
    }
    get attributeDataType() {
        return this.getStringAttribute('attribute_data_type');
    }
    set attributeDataType(value) {
        this._attributeDataType = value;
    }
    // Temporarily expose input value. Use with caution.
    get attributeDataTypeInput() {
        return this._attributeDataType;
    }
    get developerOnlyAttribute() {
        return this.getBooleanAttribute('developer_only_attribute');
    }
    set developerOnlyAttribute(value) {
        this._developerOnlyAttribute = value;
    }
    resetDeveloperOnlyAttribute() {
        this._developerOnlyAttribute = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get developerOnlyAttributeInput() {
        return this._developerOnlyAttribute;
    }
    get mutable() {
        return this.getBooleanAttribute('mutable');
    }
    set mutable(value) {
        this._mutable = value;
    }
    resetMutable() {
        this._mutable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mutableInput() {
        return this._mutable;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get required() {
        return this.getBooleanAttribute('required');
    }
    set required(value) {
        this._required = value;
    }
    resetRequired() {
        this._required = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requiredInput() {
        return this._required;
    }
    get numberAttributeConstraints() {
        return this._numberAttributeConstraints;
    }
    putNumberAttributeConstraints(value) {
        this._numberAttributeConstraints.internalValue = value;
    }
    resetNumberAttributeConstraints() {
        this._numberAttributeConstraints.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numberAttributeConstraintsInput() {
        return this._numberAttributeConstraints.internalValue;
    }
    get stringAttributeConstraints() {
        return this._stringAttributeConstraints;
    }
    putStringAttributeConstraints(value) {
        this._stringAttributeConstraints.internalValue = value;
    }
    resetStringAttributeConstraints() {
        this._stringAttributeConstraints.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringAttributeConstraintsInput() {
        return this._stringAttributeConstraints.internalValue;
    }
}
exports.CognitoUserPoolSchemaOutputReference = CognitoUserPoolSchemaOutputReference;
_p = JSII_RTTI_SYMBOL_1;
CognitoUserPoolSchemaOutputReference[_p] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolSchemaOutputReference", version: "10.0.12" };
class CognitoUserPoolSchemaList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CognitoUserPoolSchemaOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CognitoUserPoolSchemaList = CognitoUserPoolSchemaList;
_q = JSII_RTTI_SYMBOL_1;
CognitoUserPoolSchemaList[_q] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolSchemaList", version: "10.0.12" };
function cognitoUserPoolSmsConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        external_id: cdktf.stringToTerraform(struct.externalId),
        sns_caller_arn: cdktf.stringToTerraform(struct.snsCallerArn),
    };
}
exports.cognitoUserPoolSmsConfigurationToTerraform = cognitoUserPoolSmsConfigurationToTerraform;
class CognitoUserPoolSmsConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._externalId !== undefined) {
            hasAnyValues = true;
            internalValueResult.externalId = this._externalId;
        }
        if (this._snsCallerArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.snsCallerArn = this._snsCallerArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._externalId = undefined;
            this._snsCallerArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._externalId = value.externalId;
            this._snsCallerArn = value.snsCallerArn;
        }
    }
    get externalId() {
        return this.getStringAttribute('external_id');
    }
    set externalId(value) {
        this._externalId = value;
    }
    // Temporarily expose input value. Use with caution.
    get externalIdInput() {
        return this._externalId;
    }
    get snsCallerArn() {
        return this.getStringAttribute('sns_caller_arn');
    }
    set snsCallerArn(value) {
        this._snsCallerArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get snsCallerArnInput() {
        return this._snsCallerArn;
    }
}
exports.CognitoUserPoolSmsConfigurationOutputReference = CognitoUserPoolSmsConfigurationOutputReference;
_r = JSII_RTTI_SYMBOL_1;
CognitoUserPoolSmsConfigurationOutputReference[_r] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolSmsConfigurationOutputReference", version: "10.0.12" };
function cognitoUserPoolSoftwareTokenMfaConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.cognitoUserPoolSoftwareTokenMfaConfigurationToTerraform = cognitoUserPoolSoftwareTokenMfaConfigurationToTerraform;
class CognitoUserPoolSoftwareTokenMfaConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.CognitoUserPoolSoftwareTokenMfaConfigurationOutputReference = CognitoUserPoolSoftwareTokenMfaConfigurationOutputReference;
_s = JSII_RTTI_SYMBOL_1;
CognitoUserPoolSoftwareTokenMfaConfigurationOutputReference[_s] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolSoftwareTokenMfaConfigurationOutputReference", version: "10.0.12" };
function cognitoUserPoolUserAttributeUpdateSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        attributes_require_verification_before_update: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.attributesRequireVerificationBeforeUpdate),
    };
}
exports.cognitoUserPoolUserAttributeUpdateSettingsToTerraform = cognitoUserPoolUserAttributeUpdateSettingsToTerraform;
class CognitoUserPoolUserAttributeUpdateSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._attributesRequireVerificationBeforeUpdate !== undefined) {
            hasAnyValues = true;
            internalValueResult.attributesRequireVerificationBeforeUpdate = this._attributesRequireVerificationBeforeUpdate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._attributesRequireVerificationBeforeUpdate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._attributesRequireVerificationBeforeUpdate = value.attributesRequireVerificationBeforeUpdate;
        }
    }
    get attributesRequireVerificationBeforeUpdate() {
        return cdktf.Fn.tolist(this.getListAttribute('attributes_require_verification_before_update'));
    }
    set attributesRequireVerificationBeforeUpdate(value) {
        this._attributesRequireVerificationBeforeUpdate = value;
    }
    // Temporarily expose input value. Use with caution.
    get attributesRequireVerificationBeforeUpdateInput() {
        return this._attributesRequireVerificationBeforeUpdate;
    }
}
exports.CognitoUserPoolUserAttributeUpdateSettingsOutputReference = CognitoUserPoolUserAttributeUpdateSettingsOutputReference;
_t = JSII_RTTI_SYMBOL_1;
CognitoUserPoolUserAttributeUpdateSettingsOutputReference[_t] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolUserAttributeUpdateSettingsOutputReference", version: "10.0.12" };
function cognitoUserPoolUserPoolAddOnsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        advanced_security_mode: cdktf.stringToTerraform(struct.advancedSecurityMode),
    };
}
exports.cognitoUserPoolUserPoolAddOnsToTerraform = cognitoUserPoolUserPoolAddOnsToTerraform;
class CognitoUserPoolUserPoolAddOnsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._advancedSecurityMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.advancedSecurityMode = this._advancedSecurityMode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._advancedSecurityMode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._advancedSecurityMode = value.advancedSecurityMode;
        }
    }
    get advancedSecurityMode() {
        return this.getStringAttribute('advanced_security_mode');
    }
    set advancedSecurityMode(value) {
        this._advancedSecurityMode = value;
    }
    // Temporarily expose input value. Use with caution.
    get advancedSecurityModeInput() {
        return this._advancedSecurityMode;
    }
}
exports.CognitoUserPoolUserPoolAddOnsOutputReference = CognitoUserPoolUserPoolAddOnsOutputReference;
_u = JSII_RTTI_SYMBOL_1;
CognitoUserPoolUserPoolAddOnsOutputReference[_u] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolUserPoolAddOnsOutputReference", version: "10.0.12" };
function cognitoUserPoolUsernameConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        case_sensitive: cdktf.booleanToTerraform(struct.caseSensitive),
    };
}
exports.cognitoUserPoolUsernameConfigurationToTerraform = cognitoUserPoolUsernameConfigurationToTerraform;
class CognitoUserPoolUsernameConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._caseSensitive !== undefined) {
            hasAnyValues = true;
            internalValueResult.caseSensitive = this._caseSensitive;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._caseSensitive = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._caseSensitive = value.caseSensitive;
        }
    }
    get caseSensitive() {
        return this.getBooleanAttribute('case_sensitive');
    }
    set caseSensitive(value) {
        this._caseSensitive = value;
    }
    // Temporarily expose input value. Use with caution.
    get caseSensitiveInput() {
        return this._caseSensitive;
    }
}
exports.CognitoUserPoolUsernameConfigurationOutputReference = CognitoUserPoolUsernameConfigurationOutputReference;
_v = JSII_RTTI_SYMBOL_1;
CognitoUserPoolUsernameConfigurationOutputReference[_v] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolUsernameConfigurationOutputReference", version: "10.0.12" };
function cognitoUserPoolVerificationMessageTemplateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        default_email_option: cdktf.stringToTerraform(struct.defaultEmailOption),
        email_message: cdktf.stringToTerraform(struct.emailMessage),
        email_message_by_link: cdktf.stringToTerraform(struct.emailMessageByLink),
        email_subject: cdktf.stringToTerraform(struct.emailSubject),
        email_subject_by_link: cdktf.stringToTerraform(struct.emailSubjectByLink),
        sms_message: cdktf.stringToTerraform(struct.smsMessage),
    };
}
exports.cognitoUserPoolVerificationMessageTemplateToTerraform = cognitoUserPoolVerificationMessageTemplateToTerraform;
class CognitoUserPoolVerificationMessageTemplateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._defaultEmailOption !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultEmailOption = this._defaultEmailOption;
        }
        if (this._emailMessage !== undefined) {
            hasAnyValues = true;
            internalValueResult.emailMessage = this._emailMessage;
        }
        if (this._emailMessageByLink !== undefined) {
            hasAnyValues = true;
            internalValueResult.emailMessageByLink = this._emailMessageByLink;
        }
        if (this._emailSubject !== undefined) {
            hasAnyValues = true;
            internalValueResult.emailSubject = this._emailSubject;
        }
        if (this._emailSubjectByLink !== undefined) {
            hasAnyValues = true;
            internalValueResult.emailSubjectByLink = this._emailSubjectByLink;
        }
        if (this._smsMessage !== undefined) {
            hasAnyValues = true;
            internalValueResult.smsMessage = this._smsMessage;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._defaultEmailOption = undefined;
            this._emailMessage = undefined;
            this._emailMessageByLink = undefined;
            this._emailSubject = undefined;
            this._emailSubjectByLink = undefined;
            this._smsMessage = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._defaultEmailOption = value.defaultEmailOption;
            this._emailMessage = value.emailMessage;
            this._emailMessageByLink = value.emailMessageByLink;
            this._emailSubject = value.emailSubject;
            this._emailSubjectByLink = value.emailSubjectByLink;
            this._smsMessage = value.smsMessage;
        }
    }
    get defaultEmailOption() {
        return this.getStringAttribute('default_email_option');
    }
    set defaultEmailOption(value) {
        this._defaultEmailOption = value;
    }
    resetDefaultEmailOption() {
        this._defaultEmailOption = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultEmailOptionInput() {
        return this._defaultEmailOption;
    }
    get emailMessage() {
        return this.getStringAttribute('email_message');
    }
    set emailMessage(value) {
        this._emailMessage = value;
    }
    resetEmailMessage() {
        this._emailMessage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailMessageInput() {
        return this._emailMessage;
    }
    get emailMessageByLink() {
        return this.getStringAttribute('email_message_by_link');
    }
    set emailMessageByLink(value) {
        this._emailMessageByLink = value;
    }
    resetEmailMessageByLink() {
        this._emailMessageByLink = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailMessageByLinkInput() {
        return this._emailMessageByLink;
    }
    get emailSubject() {
        return this.getStringAttribute('email_subject');
    }
    set emailSubject(value) {
        this._emailSubject = value;
    }
    resetEmailSubject() {
        this._emailSubject = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailSubjectInput() {
        return this._emailSubject;
    }
    get emailSubjectByLink() {
        return this.getStringAttribute('email_subject_by_link');
    }
    set emailSubjectByLink(value) {
        this._emailSubjectByLink = value;
    }
    resetEmailSubjectByLink() {
        this._emailSubjectByLink = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailSubjectByLinkInput() {
        return this._emailSubjectByLink;
    }
    get smsMessage() {
        return this.getStringAttribute('sms_message');
    }
    set smsMessage(value) {
        this._smsMessage = value;
    }
    resetSmsMessage() {
        this._smsMessage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get smsMessageInput() {
        return this._smsMessage;
    }
}
exports.CognitoUserPoolVerificationMessageTemplateOutputReference = CognitoUserPoolVerificationMessageTemplateOutputReference;
_w = JSII_RTTI_SYMBOL_1;
CognitoUserPoolVerificationMessageTemplateOutputReference[_w] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPoolVerificationMessageTemplateOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/cognito_user_pool aws_cognito_user_pool}
*/
class CognitoUserPool extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/cognito_user_pool aws_cognito_user_pool} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CognitoUserPoolConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_cognito_user_pool',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // account_recovery_setting - computed: false, optional: true, required: false
        this._accountRecoverySetting = new CognitoUserPoolAccountRecoverySettingOutputReference(this, "account_recovery_setting");
        // admin_create_user_config - computed: false, optional: true, required: false
        this._adminCreateUserConfig = new CognitoUserPoolAdminCreateUserConfigOutputReference(this, "admin_create_user_config");
        // device_configuration - computed: false, optional: true, required: false
        this._deviceConfiguration = new CognitoUserPoolDeviceConfigurationOutputReference(this, "device_configuration");
        // email_configuration - computed: false, optional: true, required: false
        this._emailConfiguration = new CognitoUserPoolEmailConfigurationOutputReference(this, "email_configuration");
        // lambda_config - computed: false, optional: true, required: false
        this._lambdaConfig = new CognitoUserPoolLambdaConfigOutputReference(this, "lambda_config");
        // password_policy - computed: false, optional: true, required: false
        this._passwordPolicy = new CognitoUserPoolPasswordPolicyOutputReference(this, "password_policy");
        // schema - computed: false, optional: true, required: false
        this._schema = new CognitoUserPoolSchemaList(this, "schema", true);
        // sms_configuration - computed: false, optional: true, required: false
        this._smsConfiguration = new CognitoUserPoolSmsConfigurationOutputReference(this, "sms_configuration");
        // software_token_mfa_configuration - computed: false, optional: true, required: false
        this._softwareTokenMfaConfiguration = new CognitoUserPoolSoftwareTokenMfaConfigurationOutputReference(this, "software_token_mfa_configuration");
        // user_attribute_update_settings - computed: false, optional: true, required: false
        this._userAttributeUpdateSettings = new CognitoUserPoolUserAttributeUpdateSettingsOutputReference(this, "user_attribute_update_settings");
        // user_pool_add_ons - computed: false, optional: true, required: false
        this._userPoolAddOns = new CognitoUserPoolUserPoolAddOnsOutputReference(this, "user_pool_add_ons");
        // username_configuration - computed: false, optional: true, required: false
        this._usernameConfiguration = new CognitoUserPoolUsernameConfigurationOutputReference(this, "username_configuration");
        // verification_message_template - computed: false, optional: true, required: false
        this._verificationMessageTemplate = new CognitoUserPoolVerificationMessageTemplateOutputReference(this, "verification_message_template");
        this._aliasAttributes = config.aliasAttributes;
        this._autoVerifiedAttributes = config.autoVerifiedAttributes;
        this._deletionProtection = config.deletionProtection;
        this._emailVerificationMessage = config.emailVerificationMessage;
        this._emailVerificationSubject = config.emailVerificationSubject;
        this._id = config.id;
        this._mfaConfiguration = config.mfaConfiguration;
        this._name = config.name;
        this._smsAuthenticationMessage = config.smsAuthenticationMessage;
        this._smsVerificationMessage = config.smsVerificationMessage;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._usernameAttributes = config.usernameAttributes;
        this._accountRecoverySetting.internalValue = config.accountRecoverySetting;
        this._adminCreateUserConfig.internalValue = config.adminCreateUserConfig;
        this._deviceConfiguration.internalValue = config.deviceConfiguration;
        this._emailConfiguration.internalValue = config.emailConfiguration;
        this._lambdaConfig.internalValue = config.lambdaConfig;
        this._passwordPolicy.internalValue = config.passwordPolicy;
        this._schema.internalValue = config.schema;
        this._smsConfiguration.internalValue = config.smsConfiguration;
        this._softwareTokenMfaConfiguration.internalValue = config.softwareTokenMfaConfiguration;
        this._userAttributeUpdateSettings.internalValue = config.userAttributeUpdateSettings;
        this._userPoolAddOns.internalValue = config.userPoolAddOns;
        this._usernameConfiguration.internalValue = config.usernameConfiguration;
        this._verificationMessageTemplate.internalValue = config.verificationMessageTemplate;
    }
    get aliasAttributes() {
        return cdktf.Fn.tolist(this.getListAttribute('alias_attributes'));
    }
    set aliasAttributes(value) {
        this._aliasAttributes = value;
    }
    resetAliasAttributes() {
        this._aliasAttributes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aliasAttributesInput() {
        return this._aliasAttributes;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get autoVerifiedAttributes() {
        return cdktf.Fn.tolist(this.getListAttribute('auto_verified_attributes'));
    }
    set autoVerifiedAttributes(value) {
        this._autoVerifiedAttributes = value;
    }
    resetAutoVerifiedAttributes() {
        this._autoVerifiedAttributes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoVerifiedAttributesInput() {
        return this._autoVerifiedAttributes;
    }
    // creation_date - computed: true, optional: false, required: false
    get creationDate() {
        return this.getStringAttribute('creation_date');
    }
    // custom_domain - computed: true, optional: false, required: false
    get customDomain() {
        return this.getStringAttribute('custom_domain');
    }
    get deletionProtection() {
        return this.getStringAttribute('deletion_protection');
    }
    set deletionProtection(value) {
        this._deletionProtection = value;
    }
    resetDeletionProtection() {
        this._deletionProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deletionProtectionInput() {
        return this._deletionProtection;
    }
    // domain - computed: true, optional: false, required: false
    get domain() {
        return this.getStringAttribute('domain');
    }
    get emailVerificationMessage() {
        return this.getStringAttribute('email_verification_message');
    }
    set emailVerificationMessage(value) {
        this._emailVerificationMessage = value;
    }
    resetEmailVerificationMessage() {
        this._emailVerificationMessage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailVerificationMessageInput() {
        return this._emailVerificationMessage;
    }
    get emailVerificationSubject() {
        return this.getStringAttribute('email_verification_subject');
    }
    set emailVerificationSubject(value) {
        this._emailVerificationSubject = value;
    }
    resetEmailVerificationSubject() {
        this._emailVerificationSubject = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailVerificationSubjectInput() {
        return this._emailVerificationSubject;
    }
    // endpoint - computed: true, optional: false, required: false
    get endpoint() {
        return this.getStringAttribute('endpoint');
    }
    // estimated_number_of_users - computed: true, optional: false, required: false
    get estimatedNumberOfUsers() {
        return this.getNumberAttribute('estimated_number_of_users');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // last_modified_date - computed: true, optional: false, required: false
    get lastModifiedDate() {
        return this.getStringAttribute('last_modified_date');
    }
    get mfaConfiguration() {
        return this.getStringAttribute('mfa_configuration');
    }
    set mfaConfiguration(value) {
        this._mfaConfiguration = value;
    }
    resetMfaConfiguration() {
        this._mfaConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mfaConfigurationInput() {
        return this._mfaConfiguration;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get smsAuthenticationMessage() {
        return this.getStringAttribute('sms_authentication_message');
    }
    set smsAuthenticationMessage(value) {
        this._smsAuthenticationMessage = value;
    }
    resetSmsAuthenticationMessage() {
        this._smsAuthenticationMessage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get smsAuthenticationMessageInput() {
        return this._smsAuthenticationMessage;
    }
    get smsVerificationMessage() {
        return this.getStringAttribute('sms_verification_message');
    }
    set smsVerificationMessage(value) {
        this._smsVerificationMessage = value;
    }
    resetSmsVerificationMessage() {
        this._smsVerificationMessage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get smsVerificationMessageInput() {
        return this._smsVerificationMessage;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get usernameAttributes() {
        return cdktf.Fn.tolist(this.getListAttribute('username_attributes'));
    }
    set usernameAttributes(value) {
        this._usernameAttributes = value;
    }
    resetUsernameAttributes() {
        this._usernameAttributes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usernameAttributesInput() {
        return this._usernameAttributes;
    }
    get accountRecoverySetting() {
        return this._accountRecoverySetting;
    }
    putAccountRecoverySetting(value) {
        this._accountRecoverySetting.internalValue = value;
    }
    resetAccountRecoverySetting() {
        this._accountRecoverySetting.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accountRecoverySettingInput() {
        return this._accountRecoverySetting.internalValue;
    }
    get adminCreateUserConfig() {
        return this._adminCreateUserConfig;
    }
    putAdminCreateUserConfig(value) {
        this._adminCreateUserConfig.internalValue = value;
    }
    resetAdminCreateUserConfig() {
        this._adminCreateUserConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get adminCreateUserConfigInput() {
        return this._adminCreateUserConfig.internalValue;
    }
    get deviceConfiguration() {
        return this._deviceConfiguration;
    }
    putDeviceConfiguration(value) {
        this._deviceConfiguration.internalValue = value;
    }
    resetDeviceConfiguration() {
        this._deviceConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deviceConfigurationInput() {
        return this._deviceConfiguration.internalValue;
    }
    get emailConfiguration() {
        return this._emailConfiguration;
    }
    putEmailConfiguration(value) {
        this._emailConfiguration.internalValue = value;
    }
    resetEmailConfiguration() {
        this._emailConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailConfigurationInput() {
        return this._emailConfiguration.internalValue;
    }
    get lambdaConfig() {
        return this._lambdaConfig;
    }
    putLambdaConfig(value) {
        this._lambdaConfig.internalValue = value;
    }
    resetLambdaConfig() {
        this._lambdaConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaConfigInput() {
        return this._lambdaConfig.internalValue;
    }
    get passwordPolicy() {
        return this._passwordPolicy;
    }
    putPasswordPolicy(value) {
        this._passwordPolicy.internalValue = value;
    }
    resetPasswordPolicy() {
        this._passwordPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordPolicyInput() {
        return this._passwordPolicy.internalValue;
    }
    get schema() {
        return this._schema;
    }
    putSchema(value) {
        this._schema.internalValue = value;
    }
    resetSchema() {
        this._schema.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schemaInput() {
        return this._schema.internalValue;
    }
    get smsConfiguration() {
        return this._smsConfiguration;
    }
    putSmsConfiguration(value) {
        this._smsConfiguration.internalValue = value;
    }
    resetSmsConfiguration() {
        this._smsConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get smsConfigurationInput() {
        return this._smsConfiguration.internalValue;
    }
    get softwareTokenMfaConfiguration() {
        return this._softwareTokenMfaConfiguration;
    }
    putSoftwareTokenMfaConfiguration(value) {
        this._softwareTokenMfaConfiguration.internalValue = value;
    }
    resetSoftwareTokenMfaConfiguration() {
        this._softwareTokenMfaConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get softwareTokenMfaConfigurationInput() {
        return this._softwareTokenMfaConfiguration.internalValue;
    }
    get userAttributeUpdateSettings() {
        return this._userAttributeUpdateSettings;
    }
    putUserAttributeUpdateSettings(value) {
        this._userAttributeUpdateSettings.internalValue = value;
    }
    resetUserAttributeUpdateSettings() {
        this._userAttributeUpdateSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userAttributeUpdateSettingsInput() {
        return this._userAttributeUpdateSettings.internalValue;
    }
    get userPoolAddOns() {
        return this._userPoolAddOns;
    }
    putUserPoolAddOns(value) {
        this._userPoolAddOns.internalValue = value;
    }
    resetUserPoolAddOns() {
        this._userPoolAddOns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userPoolAddOnsInput() {
        return this._userPoolAddOns.internalValue;
    }
    get usernameConfiguration() {
        return this._usernameConfiguration;
    }
    putUsernameConfiguration(value) {
        this._usernameConfiguration.internalValue = value;
    }
    resetUsernameConfiguration() {
        this._usernameConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usernameConfigurationInput() {
        return this._usernameConfiguration.internalValue;
    }
    get verificationMessageTemplate() {
        return this._verificationMessageTemplate;
    }
    putVerificationMessageTemplate(value) {
        this._verificationMessageTemplate.internalValue = value;
    }
    resetVerificationMessageTemplate() {
        this._verificationMessageTemplate.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get verificationMessageTemplateInput() {
        return this._verificationMessageTemplate.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            alias_attributes: cdktf.listMapper(cdktf.stringToTerraform, false)(this._aliasAttributes),
            auto_verified_attributes: cdktf.listMapper(cdktf.stringToTerraform, false)(this._autoVerifiedAttributes),
            deletion_protection: cdktf.stringToTerraform(this._deletionProtection),
            email_verification_message: cdktf.stringToTerraform(this._emailVerificationMessage),
            email_verification_subject: cdktf.stringToTerraform(this._emailVerificationSubject),
            id: cdktf.stringToTerraform(this._id),
            mfa_configuration: cdktf.stringToTerraform(this._mfaConfiguration),
            name: cdktf.stringToTerraform(this._name),
            sms_authentication_message: cdktf.stringToTerraform(this._smsAuthenticationMessage),
            sms_verification_message: cdktf.stringToTerraform(this._smsVerificationMessage),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            username_attributes: cdktf.listMapper(cdktf.stringToTerraform, false)(this._usernameAttributes),
            account_recovery_setting: cognitoUserPoolAccountRecoverySettingToTerraform(this._accountRecoverySetting.internalValue),
            admin_create_user_config: cognitoUserPoolAdminCreateUserConfigToTerraform(this._adminCreateUserConfig.internalValue),
            device_configuration: cognitoUserPoolDeviceConfigurationToTerraform(this._deviceConfiguration.internalValue),
            email_configuration: cognitoUserPoolEmailConfigurationToTerraform(this._emailConfiguration.internalValue),
            lambda_config: cognitoUserPoolLambdaConfigToTerraform(this._lambdaConfig.internalValue),
            password_policy: cognitoUserPoolPasswordPolicyToTerraform(this._passwordPolicy.internalValue),
            schema: cdktf.listMapper(cognitoUserPoolSchemaToTerraform, true)(this._schema.internalValue),
            sms_configuration: cognitoUserPoolSmsConfigurationToTerraform(this._smsConfiguration.internalValue),
            software_token_mfa_configuration: cognitoUserPoolSoftwareTokenMfaConfigurationToTerraform(this._softwareTokenMfaConfiguration.internalValue),
            user_attribute_update_settings: cognitoUserPoolUserAttributeUpdateSettingsToTerraform(this._userAttributeUpdateSettings.internalValue),
            user_pool_add_ons: cognitoUserPoolUserPoolAddOnsToTerraform(this._userPoolAddOns.internalValue),
            username_configuration: cognitoUserPoolUsernameConfigurationToTerraform(this._usernameConfiguration.internalValue),
            verification_message_template: cognitoUserPoolVerificationMessageTemplateToTerraform(this._verificationMessageTemplate.internalValue),
        };
    }
}
exports.CognitoUserPool = CognitoUserPool;
_x = JSII_RTTI_SYMBOL_1;
CognitoUserPool[_x] = { fqn: "@cdktf/provider-aws.cognitoUserPool.CognitoUserPool", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
CognitoUserPool.tfResourceType = "aws_cognito_user_pool";
//# sourceMappingURL=data:application/json;base64,