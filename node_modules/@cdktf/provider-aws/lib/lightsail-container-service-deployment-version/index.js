"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LightsailContainerServiceDeploymentVersion = exports.LightsailContainerServiceDeploymentVersionTimeoutsOutputReference = exports.lightsailContainerServiceDeploymentVersionTimeoutsToTerraform = exports.LightsailContainerServiceDeploymentVersionPublicEndpointOutputReference = exports.lightsailContainerServiceDeploymentVersionPublicEndpointToTerraform = exports.LightsailContainerServiceDeploymentVersionPublicEndpointHealthCheckOutputReference = exports.lightsailContainerServiceDeploymentVersionPublicEndpointHealthCheckToTerraform = exports.LightsailContainerServiceDeploymentVersionContainerList = exports.LightsailContainerServiceDeploymentVersionContainerOutputReference = exports.lightsailContainerServiceDeploymentVersionContainerToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function lightsailContainerServiceDeploymentVersionContainerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        command: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.command),
        container_name: cdktf.stringToTerraform(struct.containerName),
        environment: cdktf.hashMapper(cdktf.stringToTerraform)(struct.environment),
        image: cdktf.stringToTerraform(struct.image),
        ports: cdktf.hashMapper(cdktf.stringToTerraform)(struct.ports),
    };
}
exports.lightsailContainerServiceDeploymentVersionContainerToTerraform = lightsailContainerServiceDeploymentVersionContainerToTerraform;
class LightsailContainerServiceDeploymentVersionContainerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._command !== undefined) {
            hasAnyValues = true;
            internalValueResult.command = this._command;
        }
        if (this._containerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerName = this._containerName;
        }
        if (this._environment !== undefined) {
            hasAnyValues = true;
            internalValueResult.environment = this._environment;
        }
        if (this._image !== undefined) {
            hasAnyValues = true;
            internalValueResult.image = this._image;
        }
        if (this._ports !== undefined) {
            hasAnyValues = true;
            internalValueResult.ports = this._ports;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._command = undefined;
            this._containerName = undefined;
            this._environment = undefined;
            this._image = undefined;
            this._ports = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._command = value.command;
            this._containerName = value.containerName;
            this._environment = value.environment;
            this._image = value.image;
            this._ports = value.ports;
        }
    }
    get command() {
        return this.getListAttribute('command');
    }
    set command(value) {
        this._command = value;
    }
    resetCommand() {
        this._command = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get commandInput() {
        return this._command;
    }
    get containerName() {
        return this.getStringAttribute('container_name');
    }
    set containerName(value) {
        this._containerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get containerNameInput() {
        return this._containerName;
    }
    get environment() {
        return this.getStringMapAttribute('environment');
    }
    set environment(value) {
        this._environment = value;
    }
    resetEnvironment() {
        this._environment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get environmentInput() {
        return this._environment;
    }
    get image() {
        return this.getStringAttribute('image');
    }
    set image(value) {
        this._image = value;
    }
    // Temporarily expose input value. Use with caution.
    get imageInput() {
        return this._image;
    }
    get ports() {
        return this.getStringMapAttribute('ports');
    }
    set ports(value) {
        this._ports = value;
    }
    resetPorts() {
        this._ports = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portsInput() {
        return this._ports;
    }
}
exports.LightsailContainerServiceDeploymentVersionContainerOutputReference = LightsailContainerServiceDeploymentVersionContainerOutputReference;
_a = JSII_RTTI_SYMBOL_1;
LightsailContainerServiceDeploymentVersionContainerOutputReference[_a] = { fqn: "@cdktf/provider-aws.lightsailContainerServiceDeploymentVersion.LightsailContainerServiceDeploymentVersionContainerOutputReference", version: "10.0.12" };
class LightsailContainerServiceDeploymentVersionContainerList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new LightsailContainerServiceDeploymentVersionContainerOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.LightsailContainerServiceDeploymentVersionContainerList = LightsailContainerServiceDeploymentVersionContainerList;
_b = JSII_RTTI_SYMBOL_1;
LightsailContainerServiceDeploymentVersionContainerList[_b] = { fqn: "@cdktf/provider-aws.lightsailContainerServiceDeploymentVersion.LightsailContainerServiceDeploymentVersionContainerList", version: "10.0.12" };
function lightsailContainerServiceDeploymentVersionPublicEndpointHealthCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        healthy_threshold: cdktf.numberToTerraform(struct.healthyThreshold),
        interval_seconds: cdktf.numberToTerraform(struct.intervalSeconds),
        path: cdktf.stringToTerraform(struct.path),
        success_codes: cdktf.stringToTerraform(struct.successCodes),
        timeout_seconds: cdktf.numberToTerraform(struct.timeoutSeconds),
        unhealthy_threshold: cdktf.numberToTerraform(struct.unhealthyThreshold),
    };
}
exports.lightsailContainerServiceDeploymentVersionPublicEndpointHealthCheckToTerraform = lightsailContainerServiceDeploymentVersionPublicEndpointHealthCheckToTerraform;
class LightsailContainerServiceDeploymentVersionPublicEndpointHealthCheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._healthyThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.healthyThreshold = this._healthyThreshold;
        }
        if (this._intervalSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.intervalSeconds = this._intervalSeconds;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._successCodes !== undefined) {
            hasAnyValues = true;
            internalValueResult.successCodes = this._successCodes;
        }
        if (this._timeoutSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeoutSeconds = this._timeoutSeconds;
        }
        if (this._unhealthyThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.unhealthyThreshold = this._unhealthyThreshold;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._healthyThreshold = undefined;
            this._intervalSeconds = undefined;
            this._path = undefined;
            this._successCodes = undefined;
            this._timeoutSeconds = undefined;
            this._unhealthyThreshold = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._healthyThreshold = value.healthyThreshold;
            this._intervalSeconds = value.intervalSeconds;
            this._path = value.path;
            this._successCodes = value.successCodes;
            this._timeoutSeconds = value.timeoutSeconds;
            this._unhealthyThreshold = value.unhealthyThreshold;
        }
    }
    get healthyThreshold() {
        return this.getNumberAttribute('healthy_threshold');
    }
    set healthyThreshold(value) {
        this._healthyThreshold = value;
    }
    resetHealthyThreshold() {
        this._healthyThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthyThresholdInput() {
        return this._healthyThreshold;
    }
    get intervalSeconds() {
        return this.getNumberAttribute('interval_seconds');
    }
    set intervalSeconds(value) {
        this._intervalSeconds = value;
    }
    resetIntervalSeconds() {
        this._intervalSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get intervalSecondsInput() {
        return this._intervalSeconds;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    resetPath() {
        this._path = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get successCodes() {
        return this.getStringAttribute('success_codes');
    }
    set successCodes(value) {
        this._successCodes = value;
    }
    resetSuccessCodes() {
        this._successCodes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get successCodesInput() {
        return this._successCodes;
    }
    get timeoutSeconds() {
        return this.getNumberAttribute('timeout_seconds');
    }
    set timeoutSeconds(value) {
        this._timeoutSeconds = value;
    }
    resetTimeoutSeconds() {
        this._timeoutSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutSecondsInput() {
        return this._timeoutSeconds;
    }
    get unhealthyThreshold() {
        return this.getNumberAttribute('unhealthy_threshold');
    }
    set unhealthyThreshold(value) {
        this._unhealthyThreshold = value;
    }
    resetUnhealthyThreshold() {
        this._unhealthyThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unhealthyThresholdInput() {
        return this._unhealthyThreshold;
    }
}
exports.LightsailContainerServiceDeploymentVersionPublicEndpointHealthCheckOutputReference = LightsailContainerServiceDeploymentVersionPublicEndpointHealthCheckOutputReference;
_c = JSII_RTTI_SYMBOL_1;
LightsailContainerServiceDeploymentVersionPublicEndpointHealthCheckOutputReference[_c] = { fqn: "@cdktf/provider-aws.lightsailContainerServiceDeploymentVersion.LightsailContainerServiceDeploymentVersionPublicEndpointHealthCheckOutputReference", version: "10.0.12" };
function lightsailContainerServiceDeploymentVersionPublicEndpointToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        container_name: cdktf.stringToTerraform(struct.containerName),
        container_port: cdktf.numberToTerraform(struct.containerPort),
        health_check: lightsailContainerServiceDeploymentVersionPublicEndpointHealthCheckToTerraform(struct.healthCheck),
    };
}
exports.lightsailContainerServiceDeploymentVersionPublicEndpointToTerraform = lightsailContainerServiceDeploymentVersionPublicEndpointToTerraform;
class LightsailContainerServiceDeploymentVersionPublicEndpointOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // health_check - computed: false, optional: false, required: true
        this._healthCheck = new LightsailContainerServiceDeploymentVersionPublicEndpointHealthCheckOutputReference(this, "health_check");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._containerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerName = this._containerName;
        }
        if (this._containerPort !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerPort = this._containerPort;
        }
        if (this._healthCheck?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.healthCheck = this._healthCheck?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._containerName = undefined;
            this._containerPort = undefined;
            this._healthCheck.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._containerName = value.containerName;
            this._containerPort = value.containerPort;
            this._healthCheck.internalValue = value.healthCheck;
        }
    }
    get containerName() {
        return this.getStringAttribute('container_name');
    }
    set containerName(value) {
        this._containerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get containerNameInput() {
        return this._containerName;
    }
    get containerPort() {
        return this.getNumberAttribute('container_port');
    }
    set containerPort(value) {
        this._containerPort = value;
    }
    // Temporarily expose input value. Use with caution.
    get containerPortInput() {
        return this._containerPort;
    }
    get healthCheck() {
        return this._healthCheck;
    }
    putHealthCheck(value) {
        this._healthCheck.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get healthCheckInput() {
        return this._healthCheck.internalValue;
    }
}
exports.LightsailContainerServiceDeploymentVersionPublicEndpointOutputReference = LightsailContainerServiceDeploymentVersionPublicEndpointOutputReference;
_d = JSII_RTTI_SYMBOL_1;
LightsailContainerServiceDeploymentVersionPublicEndpointOutputReference[_d] = { fqn: "@cdktf/provider-aws.lightsailContainerServiceDeploymentVersion.LightsailContainerServiceDeploymentVersionPublicEndpointOutputReference", version: "10.0.12" };
function lightsailContainerServiceDeploymentVersionTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
    };
}
exports.lightsailContainerServiceDeploymentVersionTimeoutsToTerraform = lightsailContainerServiceDeploymentVersionTimeoutsToTerraform;
class LightsailContainerServiceDeploymentVersionTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
}
exports.LightsailContainerServiceDeploymentVersionTimeoutsOutputReference = LightsailContainerServiceDeploymentVersionTimeoutsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
LightsailContainerServiceDeploymentVersionTimeoutsOutputReference[_e] = { fqn: "@cdktf/provider-aws.lightsailContainerServiceDeploymentVersion.LightsailContainerServiceDeploymentVersionTimeoutsOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/lightsail_container_service_deployment_version aws_lightsail_container_service_deployment_version}
*/
class LightsailContainerServiceDeploymentVersion extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/lightsail_container_service_deployment_version aws_lightsail_container_service_deployment_version} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options LightsailContainerServiceDeploymentVersionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_lightsail_container_service_deployment_version',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // container - computed: false, optional: false, required: true
        this._container = new LightsailContainerServiceDeploymentVersionContainerList(this, "container", true);
        // public_endpoint - computed: false, optional: true, required: false
        this._publicEndpoint = new LightsailContainerServiceDeploymentVersionPublicEndpointOutputReference(this, "public_endpoint");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new LightsailContainerServiceDeploymentVersionTimeoutsOutputReference(this, "timeouts");
        this._id = config.id;
        this._serviceName = config.serviceName;
        this._container.internalValue = config.container;
        this._publicEndpoint.internalValue = config.publicEndpoint;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // created_at - computed: true, optional: false, required: false
    get createdAt() {
        return this.getStringAttribute('created_at');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
    set serviceName(value) {
        this._serviceName = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNameInput() {
        return this._serviceName;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    // version - computed: true, optional: false, required: false
    get version() {
        return this.getNumberAttribute('version');
    }
    get container() {
        return this._container;
    }
    putContainer(value) {
        this._container.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get containerInput() {
        return this._container.internalValue;
    }
    get publicEndpoint() {
        return this._publicEndpoint;
    }
    putPublicEndpoint(value) {
        this._publicEndpoint.internalValue = value;
    }
    resetPublicEndpoint() {
        this._publicEndpoint.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publicEndpointInput() {
        return this._publicEndpoint.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            service_name: cdktf.stringToTerraform(this._serviceName),
            container: cdktf.listMapper(lightsailContainerServiceDeploymentVersionContainerToTerraform, true)(this._container.internalValue),
            public_endpoint: lightsailContainerServiceDeploymentVersionPublicEndpointToTerraform(this._publicEndpoint.internalValue),
            timeouts: lightsailContainerServiceDeploymentVersionTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.LightsailContainerServiceDeploymentVersion = LightsailContainerServiceDeploymentVersion;
_f = JSII_RTTI_SYMBOL_1;
LightsailContainerServiceDeploymentVersion[_f] = { fqn: "@cdktf/provider-aws.lightsailContainerServiceDeploymentVersion.LightsailContainerServiceDeploymentVersion", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
LightsailContainerServiceDeploymentVersion.tfResourceType = "aws_lightsail_container_service_deployment_version";
//# sourceMappingURL=data:application/json;base64,