"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// generated by cdktf get
exports.accessanalyzerAnalyzer = require("./accessanalyzer-analyzer");
exports.accessanalyzerArchiveRule = require("./accessanalyzer-archive-rule");
exports.accountAlternateContact = require("./account-alternate-contact");
exports.acmCertificate = require("./acm-certificate");
exports.acmCertificateValidation = require("./acm-certificate-validation");
exports.acmpcaCertificate = require("./acmpca-certificate");
exports.acmpcaCertificateAuthority = require("./acmpca-certificate-authority");
exports.acmpcaCertificateAuthorityCertificate = require("./acmpca-certificate-authority-certificate");
exports.acmpcaPermission = require("./acmpca-permission");
exports.acmpcaPolicy = require("./acmpca-policy");
exports.alb = require("./alb");
exports.albListener = require("./alb-listener");
exports.albListenerCertificate = require("./alb-listener-certificate");
exports.albListenerRule = require("./alb-listener-rule");
exports.albTargetGroup = require("./alb-target-group");
exports.albTargetGroupAttachment = require("./alb-target-group-attachment");
exports.ami = require("./ami");
exports.amiCopy = require("./ami-copy");
exports.amiFromInstance = require("./ami-from-instance");
exports.amiLaunchPermission = require("./ami-launch-permission");
exports.amplifyApp = require("./amplify-app");
exports.amplifyBackendEnvironment = require("./amplify-backend-environment");
exports.amplifyBranch = require("./amplify-branch");
exports.amplifyDomainAssociation = require("./amplify-domain-association");
exports.amplifyWebhook = require("./amplify-webhook");
exports.apiGatewayAccount = require("./api-gateway-account");
exports.apiGatewayApiKey = require("./api-gateway-api-key");
exports.apiGatewayAuthorizer = require("./api-gateway-authorizer");
exports.apiGatewayBasePathMapping = require("./api-gateway-base-path-mapping");
exports.apiGatewayClientCertificate = require("./api-gateway-client-certificate");
exports.apiGatewayDeployment = require("./api-gateway-deployment");
exports.apiGatewayDocumentationPart = require("./api-gateway-documentation-part");
exports.apiGatewayDocumentationVersion = require("./api-gateway-documentation-version");
exports.apiGatewayDomainName = require("./api-gateway-domain-name");
exports.apiGatewayGatewayResponse = require("./api-gateway-gateway-response");
exports.apiGatewayIntegration = require("./api-gateway-integration");
exports.apiGatewayIntegrationResponse = require("./api-gateway-integration-response");
exports.apiGatewayMethod = require("./api-gateway-method");
exports.apiGatewayMethodResponse = require("./api-gateway-method-response");
exports.apiGatewayMethodSettings = require("./api-gateway-method-settings");
exports.apiGatewayModel = require("./api-gateway-model");
exports.apiGatewayRequestValidator = require("./api-gateway-request-validator");
exports.apiGatewayResource = require("./api-gateway-resource");
exports.apiGatewayRestApi = require("./api-gateway-rest-api");
exports.apiGatewayRestApiPolicy = require("./api-gateway-rest-api-policy");
exports.apiGatewayStage = require("./api-gateway-stage");
exports.apiGatewayUsagePlan = require("./api-gateway-usage-plan");
exports.apiGatewayUsagePlanKey = require("./api-gateway-usage-plan-key");
exports.apiGatewayVpcLink = require("./api-gateway-vpc-link");
exports.apigatewayv2Api = require("./apigatewayv2-api");
exports.apigatewayv2ApiMapping = require("./apigatewayv2-api-mapping");
exports.apigatewayv2Authorizer = require("./apigatewayv2-authorizer");
exports.apigatewayv2Deployment = require("./apigatewayv2-deployment");
exports.apigatewayv2DomainName = require("./apigatewayv2-domain-name");
exports.apigatewayv2Integration = require("./apigatewayv2-integration");
exports.apigatewayv2IntegrationResponse = require("./apigatewayv2-integration-response");
exports.apigatewayv2Model = require("./apigatewayv2-model");
exports.apigatewayv2Route = require("./apigatewayv2-route");
exports.apigatewayv2RouteResponse = require("./apigatewayv2-route-response");
exports.apigatewayv2Stage = require("./apigatewayv2-stage");
exports.apigatewayv2VpcLink = require("./apigatewayv2-vpc-link");
exports.appCookieStickinessPolicy = require("./app-cookie-stickiness-policy");
exports.appautoscalingPolicy = require("./appautoscaling-policy");
exports.appautoscalingScheduledAction = require("./appautoscaling-scheduled-action");
exports.appautoscalingTarget = require("./appautoscaling-target");
exports.appconfigApplication = require("./appconfig-application");
exports.appconfigConfigurationProfile = require("./appconfig-configuration-profile");
exports.appconfigDeployment = require("./appconfig-deployment");
exports.appconfigDeploymentStrategy = require("./appconfig-deployment-strategy");
exports.appconfigEnvironment = require("./appconfig-environment");
exports.appconfigHostedConfigurationVersion = require("./appconfig-hosted-configuration-version");
exports.appflowConnectorProfile = require("./appflow-connector-profile");
exports.appflowFlow = require("./appflow-flow");
exports.appintegrationsEventIntegration = require("./appintegrations-event-integration");
exports.applicationinsightsApplication = require("./applicationinsights-application");
exports.appmeshGatewayRoute = require("./appmesh-gateway-route");
exports.appmeshMesh = require("./appmesh-mesh");
exports.appmeshRoute = require("./appmesh-route");
exports.appmeshVirtualGateway = require("./appmesh-virtual-gateway");
exports.appmeshVirtualNode = require("./appmesh-virtual-node");
exports.appmeshVirtualRouter = require("./appmesh-virtual-router");
exports.appmeshVirtualService = require("./appmesh-virtual-service");
exports.apprunnerAutoScalingConfigurationVersion = require("./apprunner-auto-scaling-configuration-version");
exports.apprunnerConnection = require("./apprunner-connection");
exports.apprunnerCustomDomainAssociation = require("./apprunner-custom-domain-association");
exports.apprunnerObservabilityConfiguration = require("./apprunner-observability-configuration");
exports.apprunnerService = require("./apprunner-service");
exports.apprunnerVpcConnector = require("./apprunner-vpc-connector");
exports.apprunnerVpcIngressConnection = require("./apprunner-vpc-ingress-connection");
exports.appstreamDirectoryConfig = require("./appstream-directory-config");
exports.appstreamFleet = require("./appstream-fleet");
exports.appstreamFleetStackAssociation = require("./appstream-fleet-stack-association");
exports.appstreamImageBuilder = require("./appstream-image-builder");
exports.appstreamStack = require("./appstream-stack");
exports.appstreamUser = require("./appstream-user");
exports.appstreamUserStackAssociation = require("./appstream-user-stack-association");
exports.appsyncApiCache = require("./appsync-api-cache");
exports.appsyncApiKey = require("./appsync-api-key");
exports.appsyncDatasource = require("./appsync-datasource");
exports.appsyncDomainName = require("./appsync-domain-name");
exports.appsyncDomainNameApiAssociation = require("./appsync-domain-name-api-association");
exports.appsyncFunction = require("./appsync-function");
exports.appsyncGraphqlApi = require("./appsync-graphql-api");
exports.appsyncResolver = require("./appsync-resolver");
exports.athenaDataCatalog = require("./athena-data-catalog");
exports.athenaDatabase = require("./athena-database");
exports.athenaNamedQuery = require("./athena-named-query");
exports.athenaWorkgroup = require("./athena-workgroup");
exports.autoscalingAttachment = require("./autoscaling-attachment");
exports.autoscalingGroup = require("./autoscaling-group");
exports.autoscalingGroupTag = require("./autoscaling-group-tag");
exports.autoscalingLifecycleHook = require("./autoscaling-lifecycle-hook");
exports.autoscalingNotification = require("./autoscaling-notification");
exports.autoscalingPolicy = require("./autoscaling-policy");
exports.autoscalingSchedule = require("./autoscaling-schedule");
exports.autoscalingplansScalingPlan = require("./autoscalingplans-scaling-plan");
exports.backupFramework = require("./backup-framework");
exports.backupGlobalSettings = require("./backup-global-settings");
exports.backupPlan = require("./backup-plan");
exports.backupRegionSettings = require("./backup-region-settings");
exports.backupReportPlan = require("./backup-report-plan");
exports.backupSelection = require("./backup-selection");
exports.backupVault = require("./backup-vault");
exports.backupVaultLockConfiguration = require("./backup-vault-lock-configuration");
exports.backupVaultNotifications = require("./backup-vault-notifications");
exports.backupVaultPolicy = require("./backup-vault-policy");
exports.batchComputeEnvironment = require("./batch-compute-environment");
exports.batchJobDefinition = require("./batch-job-definition");
exports.batchJobQueue = require("./batch-job-queue");
exports.batchSchedulingPolicy = require("./batch-scheduling-policy");
exports.budgetsBudget = require("./budgets-budget");
exports.budgetsBudgetAction = require("./budgets-budget-action");
exports.ceAnomalyMonitor = require("./ce-anomaly-monitor");
exports.ceAnomalySubscription = require("./ce-anomaly-subscription");
exports.ceCostAllocationTag = require("./ce-cost-allocation-tag");
exports.ceCostCategory = require("./ce-cost-category");
exports.chimeVoiceConnector = require("./chime-voice-connector");
exports.chimeVoiceConnectorGroup = require("./chime-voice-connector-group");
exports.chimeVoiceConnectorLogging = require("./chime-voice-connector-logging");
exports.chimeVoiceConnectorOrigination = require("./chime-voice-connector-origination");
exports.chimeVoiceConnectorStreaming = require("./chime-voice-connector-streaming");
exports.chimeVoiceConnectorTermination = require("./chime-voice-connector-termination");
exports.chimeVoiceConnectorTerminationCredentials = require("./chime-voice-connector-termination-credentials");
exports.cloud9EnvironmentEc2 = require("./cloud9-environment-ec2");
exports.cloud9EnvironmentMembership = require("./cloud9-environment-membership");
exports.cloudcontrolapiResource = require("./cloudcontrolapi-resource");
exports.cloudformationStack = require("./cloudformation-stack");
exports.cloudformationStackSet = require("./cloudformation-stack-set");
exports.cloudformationStackSetInstance = require("./cloudformation-stack-set-instance");
exports.cloudformationType = require("./cloudformation-type");
exports.cloudfrontCachePolicy = require("./cloudfront-cache-policy");
exports.cloudfrontDistribution = require("./cloudfront-distribution");
exports.cloudfrontFieldLevelEncryptionConfig = require("./cloudfront-field-level-encryption-config");
exports.cloudfrontFieldLevelEncryptionProfile = require("./cloudfront-field-level-encryption-profile");
exports.cloudfrontFunction = require("./cloudfront-function");
exports.cloudfrontKeyGroup = require("./cloudfront-key-group");
exports.cloudfrontMonitoringSubscription = require("./cloudfront-monitoring-subscription");
exports.cloudfrontOriginAccessControl = require("./cloudfront-origin-access-control");
exports.cloudfrontOriginAccessIdentity = require("./cloudfront-origin-access-identity");
exports.cloudfrontOriginRequestPolicy = require("./cloudfront-origin-request-policy");
exports.cloudfrontPublicKey = require("./cloudfront-public-key");
exports.cloudfrontRealtimeLogConfig = require("./cloudfront-realtime-log-config");
exports.cloudfrontResponseHeadersPolicy = require("./cloudfront-response-headers-policy");
exports.cloudhsmV2Cluster = require("./cloudhsm-v2-cluster");
exports.cloudhsmV2Hsm = require("./cloudhsm-v2-hsm");
exports.cloudsearchDomain = require("./cloudsearch-domain");
exports.cloudsearchDomainServiceAccessPolicy = require("./cloudsearch-domain-service-access-policy");
exports.cloudtrail = require("./cloudtrail");
exports.cloudtrailEventDataStore = require("./cloudtrail-event-data-store");
exports.cloudwatchCompositeAlarm = require("./cloudwatch-composite-alarm");
exports.cloudwatchDashboard = require("./cloudwatch-dashboard");
exports.cloudwatchEventApiDestination = require("./cloudwatch-event-api-destination");
exports.cloudwatchEventArchive = require("./cloudwatch-event-archive");
exports.cloudwatchEventBus = require("./cloudwatch-event-bus");
exports.cloudwatchEventBusPolicy = require("./cloudwatch-event-bus-policy");
exports.cloudwatchEventConnection = require("./cloudwatch-event-connection");
exports.cloudwatchEventPermission = require("./cloudwatch-event-permission");
exports.cloudwatchEventRule = require("./cloudwatch-event-rule");
exports.cloudwatchEventTarget = require("./cloudwatch-event-target");
exports.cloudwatchLogDestination = require("./cloudwatch-log-destination");
exports.cloudwatchLogDestinationPolicy = require("./cloudwatch-log-destination-policy");
exports.cloudwatchLogGroup = require("./cloudwatch-log-group");
exports.cloudwatchLogMetricFilter = require("./cloudwatch-log-metric-filter");
exports.cloudwatchLogResourcePolicy = require("./cloudwatch-log-resource-policy");
exports.cloudwatchLogStream = require("./cloudwatch-log-stream");
exports.cloudwatchLogSubscriptionFilter = require("./cloudwatch-log-subscription-filter");
exports.cloudwatchMetricAlarm = require("./cloudwatch-metric-alarm");
exports.cloudwatchMetricStream = require("./cloudwatch-metric-stream");
exports.cloudwatchQueryDefinition = require("./cloudwatch-query-definition");
exports.codeartifactDomain = require("./codeartifact-domain");
exports.codeartifactDomainPermissionsPolicy = require("./codeartifact-domain-permissions-policy");
exports.codeartifactRepository = require("./codeartifact-repository");
exports.codeartifactRepositoryPermissionsPolicy = require("./codeartifact-repository-permissions-policy");
exports.codebuildProject = require("./codebuild-project");
exports.codebuildReportGroup = require("./codebuild-report-group");
exports.codebuildResourcePolicy = require("./codebuild-resource-policy");
exports.codebuildSourceCredential = require("./codebuild-source-credential");
exports.codebuildWebhook = require("./codebuild-webhook");
exports.codecommitApprovalRuleTemplate = require("./codecommit-approval-rule-template");
exports.codecommitApprovalRuleTemplateAssociation = require("./codecommit-approval-rule-template-association");
exports.codecommitRepository = require("./codecommit-repository");
exports.codecommitTrigger = require("./codecommit-trigger");
exports.codedeployApp = require("./codedeploy-app");
exports.codedeployDeploymentConfig = require("./codedeploy-deployment-config");
exports.codedeployDeploymentGroup = require("./codedeploy-deployment-group");
exports.codepipeline = require("./codepipeline");
exports.codepipelineCustomActionType = require("./codepipeline-custom-action-type");
exports.codepipelineWebhook = require("./codepipeline-webhook");
exports.codestarconnectionsConnection = require("./codestarconnections-connection");
exports.codestarconnectionsHost = require("./codestarconnections-host");
exports.codestarnotificationsNotificationRule = require("./codestarnotifications-notification-rule");
exports.cognitoIdentityPool = require("./cognito-identity-pool");
exports.cognitoIdentityPoolProviderPrincipalTag = require("./cognito-identity-pool-provider-principal-tag");
exports.cognitoIdentityPoolRolesAttachment = require("./cognito-identity-pool-roles-attachment");
exports.cognitoIdentityProvider = require("./cognito-identity-provider");
exports.cognitoResourceServer = require("./cognito-resource-server");
exports.cognitoRiskConfiguration = require("./cognito-risk-configuration");
exports.cognitoUser = require("./cognito-user");
exports.cognitoUserGroup = require("./cognito-user-group");
exports.cognitoUserInGroup = require("./cognito-user-in-group");
exports.cognitoUserPool = require("./cognito-user-pool");
exports.cognitoUserPoolClient = require("./cognito-user-pool-client");
exports.cognitoUserPoolDomain = require("./cognito-user-pool-domain");
exports.cognitoUserPoolUiCustomization = require("./cognito-user-pool-ui-customization");
exports.comprehendDocumentClassifier = require("./comprehend-document-classifier");
exports.comprehendEntityRecognizer = require("./comprehend-entity-recognizer");
exports.configAggregateAuthorization = require("./config-aggregate-authorization");
exports.configConfigRule = require("./config-config-rule");
exports.configConfigurationAggregator = require("./config-configuration-aggregator");
exports.configConfigurationRecorder = require("./config-configuration-recorder");
exports.configConfigurationRecorderStatus = require("./config-configuration-recorder-status");
exports.configConformancePack = require("./config-conformance-pack");
exports.configDeliveryChannel = require("./config-delivery-channel");
exports.configOrganizationConformancePack = require("./config-organization-conformance-pack");
exports.configOrganizationCustomRule = require("./config-organization-custom-rule");
exports.configOrganizationManagedRule = require("./config-organization-managed-rule");
exports.configRemediationConfiguration = require("./config-remediation-configuration");
exports.connectBotAssociation = require("./connect-bot-association");
exports.connectContactFlow = require("./connect-contact-flow");
exports.connectContactFlowModule = require("./connect-contact-flow-module");
exports.connectHoursOfOperation = require("./connect-hours-of-operation");
exports.connectInstance = require("./connect-instance");
exports.connectInstanceStorageConfig = require("./connect-instance-storage-config");
exports.connectLambdaFunctionAssociation = require("./connect-lambda-function-association");
exports.connectPhoneNumber = require("./connect-phone-number");
exports.connectQueue = require("./connect-queue");
exports.connectQuickConnect = require("./connect-quick-connect");
exports.connectRoutingProfile = require("./connect-routing-profile");
exports.connectSecurityProfile = require("./connect-security-profile");
exports.connectUser = require("./connect-user");
exports.connectUserHierarchyGroup = require("./connect-user-hierarchy-group");
exports.connectUserHierarchyStructure = require("./connect-user-hierarchy-structure");
exports.connectVocabulary = require("./connect-vocabulary");
exports.curReportDefinition = require("./cur-report-definition");
exports.customerGateway = require("./customer-gateway");
exports.dataexchangeDataSet = require("./dataexchange-data-set");
exports.dataexchangeRevision = require("./dataexchange-revision");
exports.datapipelinePipeline = require("./datapipeline-pipeline");
exports.datapipelinePipelineDefinition = require("./datapipeline-pipeline-definition");
exports.datasyncAgent = require("./datasync-agent");
exports.datasyncLocationEfs = require("./datasync-location-efs");
exports.datasyncLocationFsxLustreFileSystem = require("./datasync-location-fsx-lustre-file-system");
exports.datasyncLocationFsxOpenzfsFileSystem = require("./datasync-location-fsx-openzfs-file-system");
exports.datasyncLocationFsxWindowsFileSystem = require("./datasync-location-fsx-windows-file-system");
exports.datasyncLocationHdfs = require("./datasync-location-hdfs");
exports.datasyncLocationNfs = require("./datasync-location-nfs");
exports.datasyncLocationS3 = require("./datasync-location-s3");
exports.datasyncLocationSmb = require("./datasync-location-smb");
exports.datasyncTask = require("./datasync-task");
exports.daxCluster = require("./dax-cluster");
exports.daxParameterGroup = require("./dax-parameter-group");
exports.daxSubnetGroup = require("./dax-subnet-group");
exports.dbClusterSnapshot = require("./db-cluster-snapshot");
exports.dbEventSubscription = require("./db-event-subscription");
exports.dbInstance = require("./db-instance");
exports.dbInstanceAutomatedBackupsReplication = require("./db-instance-automated-backups-replication");
exports.dbInstanceRoleAssociation = require("./db-instance-role-association");
exports.dbOptionGroup = require("./db-option-group");
exports.dbParameterGroup = require("./db-parameter-group");
exports.dbProxy = require("./db-proxy");
exports.dbProxyDefaultTargetGroup = require("./db-proxy-default-target-group");
exports.dbProxyEndpoint = require("./db-proxy-endpoint");
exports.dbProxyTarget = require("./db-proxy-target");
exports.dbSecurityGroup = require("./db-security-group");
exports.dbSnapshot = require("./db-snapshot");
exports.dbSnapshotCopy = require("./db-snapshot-copy");
exports.dbSubnetGroup = require("./db-subnet-group");
exports.defaultNetworkAcl = require("./default-network-acl");
exports.defaultRouteTable = require("./default-route-table");
exports.defaultSecurityGroup = require("./default-security-group");
exports.defaultSubnet = require("./default-subnet");
exports.defaultVpc = require("./default-vpc");
exports.defaultVpcDhcpOptions = require("./default-vpc-dhcp-options");
exports.detectiveGraph = require("./detective-graph");
exports.detectiveInvitationAccepter = require("./detective-invitation-accepter");
exports.detectiveMember = require("./detective-member");
exports.devicefarmDevicePool = require("./devicefarm-device-pool");
exports.devicefarmInstanceProfile = require("./devicefarm-instance-profile");
exports.devicefarmNetworkProfile = require("./devicefarm-network-profile");
exports.devicefarmProject = require("./devicefarm-project");
exports.devicefarmTestGridProject = require("./devicefarm-test-grid-project");
exports.devicefarmUpload = require("./devicefarm-upload");
exports.directoryServiceConditionalForwarder = require("./directory-service-conditional-forwarder");
exports.directoryServiceDirectory = require("./directory-service-directory");
exports.directoryServiceLogSubscription = require("./directory-service-log-subscription");
exports.directoryServiceRadiusSettings = require("./directory-service-radius-settings");
exports.directoryServiceRegion = require("./directory-service-region");
exports.directoryServiceSharedDirectory = require("./directory-service-shared-directory");
exports.directoryServiceSharedDirectoryAccepter = require("./directory-service-shared-directory-accepter");
exports.dlmLifecyclePolicy = require("./dlm-lifecycle-policy");
exports.dmsCertificate = require("./dms-certificate");
exports.dmsEndpoint = require("./dms-endpoint");
exports.dmsEventSubscription = require("./dms-event-subscription");
exports.dmsReplicationInstance = require("./dms-replication-instance");
exports.dmsReplicationSubnetGroup = require("./dms-replication-subnet-group");
exports.dmsReplicationTask = require("./dms-replication-task");
exports.docdbCluster = require("./docdb-cluster");
exports.docdbClusterInstance = require("./docdb-cluster-instance");
exports.docdbClusterParameterGroup = require("./docdb-cluster-parameter-group");
exports.docdbClusterSnapshot = require("./docdb-cluster-snapshot");
exports.docdbEventSubscription = require("./docdb-event-subscription");
exports.docdbGlobalCluster = require("./docdb-global-cluster");
exports.docdbSubnetGroup = require("./docdb-subnet-group");
exports.dxBgpPeer = require("./dx-bgp-peer");
exports.dxConnection = require("./dx-connection");
exports.dxConnectionAssociation = require("./dx-connection-association");
exports.dxConnectionConfirmation = require("./dx-connection-confirmation");
exports.dxGateway = require("./dx-gateway");
exports.dxGatewayAssociation = require("./dx-gateway-association");
exports.dxGatewayAssociationProposal = require("./dx-gateway-association-proposal");
exports.dxHostedConnection = require("./dx-hosted-connection");
exports.dxHostedPrivateVirtualInterface = require("./dx-hosted-private-virtual-interface");
exports.dxHostedPrivateVirtualInterfaceAccepter = require("./dx-hosted-private-virtual-interface-accepter");
exports.dxHostedPublicVirtualInterface = require("./dx-hosted-public-virtual-interface");
exports.dxHostedPublicVirtualInterfaceAccepter = require("./dx-hosted-public-virtual-interface-accepter");
exports.dxHostedTransitVirtualInterface = require("./dx-hosted-transit-virtual-interface");
exports.dxHostedTransitVirtualInterfaceAccepter = require("./dx-hosted-transit-virtual-interface-accepter");
exports.dxLag = require("./dx-lag");
exports.dxPrivateVirtualInterface = require("./dx-private-virtual-interface");
exports.dxPublicVirtualInterface = require("./dx-public-virtual-interface");
exports.dxTransitVirtualInterface = require("./dx-transit-virtual-interface");
exports.dynamodbContributorInsights = require("./dynamodb-contributor-insights");
exports.dynamodbGlobalTable = require("./dynamodb-global-table");
exports.dynamodbKinesisStreamingDestination = require("./dynamodb-kinesis-streaming-destination");
exports.dynamodbTable = require("./dynamodb-table");
exports.dynamodbTableItem = require("./dynamodb-table-item");
exports.dynamodbTableReplica = require("./dynamodb-table-replica");
exports.dynamodbTag = require("./dynamodb-tag");
exports.ebsDefaultKmsKey = require("./ebs-default-kms-key");
exports.ebsEncryptionByDefault = require("./ebs-encryption-by-default");
exports.ebsSnapshot = require("./ebs-snapshot");
exports.ebsSnapshotCopy = require("./ebs-snapshot-copy");
exports.ebsSnapshotImport = require("./ebs-snapshot-import");
exports.ebsVolume = require("./ebs-volume");
exports.ec2AvailabilityZoneGroup = require("./ec2-availability-zone-group");
exports.ec2CapacityReservation = require("./ec2-capacity-reservation");
exports.ec2CarrierGateway = require("./ec2-carrier-gateway");
exports.ec2ClientVpnAuthorizationRule = require("./ec2-client-vpn-authorization-rule");
exports.ec2ClientVpnEndpoint = require("./ec2-client-vpn-endpoint");
exports.ec2ClientVpnNetworkAssociation = require("./ec2-client-vpn-network-association");
exports.ec2ClientVpnRoute = require("./ec2-client-vpn-route");
exports.ec2Fleet = require("./ec2-fleet");
exports.ec2Host = require("./ec2-host");
exports.ec2LocalGatewayRoute = require("./ec2-local-gateway-route");
exports.ec2LocalGatewayRouteTableVpcAssociation = require("./ec2-local-gateway-route-table-vpc-association");
exports.ec2ManagedPrefixList = require("./ec2-managed-prefix-list");
exports.ec2ManagedPrefixListEntry = require("./ec2-managed-prefix-list-entry");
exports.ec2NetworkInsightsAnalysis = require("./ec2-network-insights-analysis");
exports.ec2NetworkInsightsPath = require("./ec2-network-insights-path");
exports.ec2SerialConsoleAccess = require("./ec2-serial-console-access");
exports.ec2SubnetCidrReservation = require("./ec2-subnet-cidr-reservation");
exports.ec2Tag = require("./ec2-tag");
exports.ec2TrafficMirrorFilter = require("./ec2-traffic-mirror-filter");
exports.ec2TrafficMirrorFilterRule = require("./ec2-traffic-mirror-filter-rule");
exports.ec2TrafficMirrorSession = require("./ec2-traffic-mirror-session");
exports.ec2TrafficMirrorTarget = require("./ec2-traffic-mirror-target");
exports.ec2TransitGateway = require("./ec2-transit-gateway");
exports.ec2TransitGatewayConnect = require("./ec2-transit-gateway-connect");
exports.ec2TransitGatewayConnectPeer = require("./ec2-transit-gateway-connect-peer");
exports.ec2TransitGatewayMulticastDomain = require("./ec2-transit-gateway-multicast-domain");
exports.ec2TransitGatewayMulticastDomainAssociation = require("./ec2-transit-gateway-multicast-domain-association");
exports.ec2TransitGatewayMulticastGroupMember = require("./ec2-transit-gateway-multicast-group-member");
exports.ec2TransitGatewayMulticastGroupSource = require("./ec2-transit-gateway-multicast-group-source");
exports.ec2TransitGatewayPeeringAttachment = require("./ec2-transit-gateway-peering-attachment");
exports.ec2TransitGatewayPeeringAttachmentAccepter = require("./ec2-transit-gateway-peering-attachment-accepter");
exports.ec2TransitGatewayPolicyTable = require("./ec2-transit-gateway-policy-table");
exports.ec2TransitGatewayPolicyTableAssociation = require("./ec2-transit-gateway-policy-table-association");
exports.ec2TransitGatewayPrefixListReference = require("./ec2-transit-gateway-prefix-list-reference");
exports.ec2TransitGatewayRoute = require("./ec2-transit-gateway-route");
exports.ec2TransitGatewayRouteTable = require("./ec2-transit-gateway-route-table");
exports.ec2TransitGatewayRouteTableAssociation = require("./ec2-transit-gateway-route-table-association");
exports.ec2TransitGatewayRouteTablePropagation = require("./ec2-transit-gateway-route-table-propagation");
exports.ec2TransitGatewayVpcAttachment = require("./ec2-transit-gateway-vpc-attachment");
exports.ec2TransitGatewayVpcAttachmentAccepter = require("./ec2-transit-gateway-vpc-attachment-accepter");
exports.ecrLifecyclePolicy = require("./ecr-lifecycle-policy");
exports.ecrPullThroughCacheRule = require("./ecr-pull-through-cache-rule");
exports.ecrRegistryPolicy = require("./ecr-registry-policy");
exports.ecrRegistryScanningConfiguration = require("./ecr-registry-scanning-configuration");
exports.ecrReplicationConfiguration = require("./ecr-replication-configuration");
exports.ecrRepository = require("./ecr-repository");
exports.ecrRepositoryPolicy = require("./ecr-repository-policy");
exports.ecrpublicRepository = require("./ecrpublic-repository");
exports.ecrpublicRepositoryPolicy = require("./ecrpublic-repository-policy");
exports.ecsAccountSettingDefault = require("./ecs-account-setting-default");
exports.ecsCapacityProvider = require("./ecs-capacity-provider");
exports.ecsCluster = require("./ecs-cluster");
exports.ecsClusterCapacityProviders = require("./ecs-cluster-capacity-providers");
exports.ecsService = require("./ecs-service");
exports.ecsTag = require("./ecs-tag");
exports.ecsTaskDefinition = require("./ecs-task-definition");
exports.ecsTaskSet = require("./ecs-task-set");
exports.efsAccessPoint = require("./efs-access-point");
exports.efsBackupPolicy = require("./efs-backup-policy");
exports.efsFileSystem = require("./efs-file-system");
exports.efsFileSystemPolicy = require("./efs-file-system-policy");
exports.efsMountTarget = require("./efs-mount-target");
exports.efsReplicationConfiguration = require("./efs-replication-configuration");
exports.egressOnlyInternetGateway = require("./egress-only-internet-gateway");
exports.eip = require("./eip");
exports.eipAssociation = require("./eip-association");
exports.eksAddon = require("./eks-addon");
exports.eksCluster = require("./eks-cluster");
exports.eksFargateProfile = require("./eks-fargate-profile");
exports.eksIdentityProviderConfig = require("./eks-identity-provider-config");
exports.eksNodeGroup = require("./eks-node-group");
exports.elasticBeanstalkApplication = require("./elastic-beanstalk-application");
exports.elasticBeanstalkApplicationVersion = require("./elastic-beanstalk-application-version");
exports.elasticBeanstalkConfigurationTemplate = require("./elastic-beanstalk-configuration-template");
exports.elasticBeanstalkEnvironment = require("./elastic-beanstalk-environment");
exports.elasticacheCluster = require("./elasticache-cluster");
exports.elasticacheGlobalReplicationGroup = require("./elasticache-global-replication-group");
exports.elasticacheParameterGroup = require("./elasticache-parameter-group");
exports.elasticacheReplicationGroup = require("./elasticache-replication-group");
exports.elasticacheSecurityGroup = require("./elasticache-security-group");
exports.elasticacheSubnetGroup = require("./elasticache-subnet-group");
exports.elasticacheUser = require("./elasticache-user");
exports.elasticacheUserGroup = require("./elasticache-user-group");
exports.elasticacheUserGroupAssociation = require("./elasticache-user-group-association");
exports.elasticsearchDomain = require("./elasticsearch-domain");
exports.elasticsearchDomainPolicy = require("./elasticsearch-domain-policy");
exports.elasticsearchDomainSamlOptions = require("./elasticsearch-domain-saml-options");
exports.elastictranscoderPipeline = require("./elastictranscoder-pipeline");
exports.elastictranscoderPreset = require("./elastictranscoder-preset");
exports.elb = require("./elb");
exports.elbAttachment = require("./elb-attachment");
exports.emrCluster = require("./emr-cluster");
exports.emrInstanceFleet = require("./emr-instance-fleet");
exports.emrInstanceGroup = require("./emr-instance-group");
exports.emrManagedScalingPolicy = require("./emr-managed-scaling-policy");
exports.emrSecurityConfiguration = require("./emr-security-configuration");
exports.emrStudio = require("./emr-studio");
exports.emrStudioSessionMapping = require("./emr-studio-session-mapping");
exports.emrcontainersVirtualCluster = require("./emrcontainers-virtual-cluster");
exports.emrserverlessApplication = require("./emrserverless-application");
exports.evidentlyProject = require("./evidently-project");
exports.evidentlySegment = require("./evidently-segment");
exports.fisExperimentTemplate = require("./fis-experiment-template");
exports.flowLog = require("./flow-log");
exports.fmsAdminAccount = require("./fms-admin-account");
exports.fmsPolicy = require("./fms-policy");
exports.fsxBackup = require("./fsx-backup");
exports.fsxDataRepositoryAssociation = require("./fsx-data-repository-association");
exports.fsxFileCache = require("./fsx-file-cache");
exports.fsxLustreFileSystem = require("./fsx-lustre-file-system");
exports.fsxOntapFileSystem = require("./fsx-ontap-file-system");
exports.fsxOntapStorageVirtualMachine = require("./fsx-ontap-storage-virtual-machine");
exports.fsxOntapVolume = require("./fsx-ontap-volume");
exports.fsxOpenzfsFileSystem = require("./fsx-openzfs-file-system");
exports.fsxOpenzfsSnapshot = require("./fsx-openzfs-snapshot");
exports.fsxOpenzfsVolume = require("./fsx-openzfs-volume");
exports.fsxWindowsFileSystem = require("./fsx-windows-file-system");
exports.gameliftAlias = require("./gamelift-alias");
exports.gameliftBuild = require("./gamelift-build");
exports.gameliftFleet = require("./gamelift-fleet");
exports.gameliftGameServerGroup = require("./gamelift-game-server-group");
exports.gameliftGameSessionQueue = require("./gamelift-game-session-queue");
exports.gameliftScript = require("./gamelift-script");
exports.glacierVault = require("./glacier-vault");
exports.glacierVaultLock = require("./glacier-vault-lock");
exports.globalacceleratorAccelerator = require("./globalaccelerator-accelerator");
exports.globalacceleratorEndpointGroup = require("./globalaccelerator-endpoint-group");
exports.globalacceleratorListener = require("./globalaccelerator-listener");
exports.glueCatalogDatabase = require("./glue-catalog-database");
exports.glueCatalogTable = require("./glue-catalog-table");
exports.glueClassifier = require("./glue-classifier");
exports.glueConnection = require("./glue-connection");
exports.glueCrawler = require("./glue-crawler");
exports.glueDataCatalogEncryptionSettings = require("./glue-data-catalog-encryption-settings");
exports.glueDevEndpoint = require("./glue-dev-endpoint");
exports.glueJob = require("./glue-job");
exports.glueMlTransform = require("./glue-ml-transform");
exports.gluePartition = require("./glue-partition");
exports.gluePartitionIndex = require("./glue-partition-index");
exports.glueRegistry = require("./glue-registry");
exports.glueResourcePolicy = require("./glue-resource-policy");
exports.glueSchema = require("./glue-schema");
exports.glueSecurityConfiguration = require("./glue-security-configuration");
exports.glueTrigger = require("./glue-trigger");
exports.glueUserDefinedFunction = require("./glue-user-defined-function");
exports.glueWorkflow = require("./glue-workflow");
exports.grafanaLicenseAssociation = require("./grafana-license-association");
exports.grafanaRoleAssociation = require("./grafana-role-association");
exports.grafanaWorkspace = require("./grafana-workspace");
exports.grafanaWorkspaceApiKey = require("./grafana-workspace-api-key");
exports.grafanaWorkspaceSamlConfiguration = require("./grafana-workspace-saml-configuration");
exports.guarddutyDetector = require("./guardduty-detector");
exports.guarddutyFilter = require("./guardduty-filter");
exports.guarddutyInviteAccepter = require("./guardduty-invite-accepter");
exports.guarddutyIpset = require("./guardduty-ipset");
exports.guarddutyMember = require("./guardduty-member");
exports.guarddutyOrganizationAdminAccount = require("./guardduty-organization-admin-account");
exports.guarddutyOrganizationConfiguration = require("./guardduty-organization-configuration");
exports.guarddutyPublishingDestination = require("./guardduty-publishing-destination");
exports.guarddutyThreatintelset = require("./guardduty-threatintelset");
exports.iamAccessKey = require("./iam-access-key");
exports.iamAccountAlias = require("./iam-account-alias");
exports.iamAccountPasswordPolicy = require("./iam-account-password-policy");
exports.iamGroup = require("./iam-group");
exports.iamGroupMembership = require("./iam-group-membership");
exports.iamGroupPolicy = require("./iam-group-policy");
exports.iamGroupPolicyAttachment = require("./iam-group-policy-attachment");
exports.iamInstanceProfile = require("./iam-instance-profile");
exports.iamOpenidConnectProvider = require("./iam-openid-connect-provider");
exports.iamPolicy = require("./iam-policy");
exports.iamPolicyAttachment = require("./iam-policy-attachment");
exports.iamRole = require("./iam-role");
exports.iamRolePolicy = require("./iam-role-policy");
exports.iamRolePolicyAttachment = require("./iam-role-policy-attachment");
exports.iamSamlProvider = require("./iam-saml-provider");
exports.iamServerCertificate = require("./iam-server-certificate");
exports.iamServiceLinkedRole = require("./iam-service-linked-role");
exports.iamServiceSpecificCredential = require("./iam-service-specific-credential");
exports.iamSigningCertificate = require("./iam-signing-certificate");
exports.iamUser = require("./iam-user");
exports.iamUserGroupMembership = require("./iam-user-group-membership");
exports.iamUserLoginProfile = require("./iam-user-login-profile");
exports.iamUserPolicy = require("./iam-user-policy");
exports.iamUserPolicyAttachment = require("./iam-user-policy-attachment");
exports.iamUserSshKey = require("./iam-user-ssh-key");
exports.iamVirtualMfaDevice = require("./iam-virtual-mfa-device");
exports.identitystoreGroup = require("./identitystore-group");
exports.identitystoreGroupMembership = require("./identitystore-group-membership");
exports.identitystoreUser = require("./identitystore-user");
exports.imagebuilderComponent = require("./imagebuilder-component");
exports.imagebuilderContainerRecipe = require("./imagebuilder-container-recipe");
exports.imagebuilderDistributionConfiguration = require("./imagebuilder-distribution-configuration");
exports.imagebuilderImage = require("./imagebuilder-image");
exports.imagebuilderImagePipeline = require("./imagebuilder-image-pipeline");
exports.imagebuilderImageRecipe = require("./imagebuilder-image-recipe");
exports.imagebuilderInfrastructureConfiguration = require("./imagebuilder-infrastructure-configuration");
exports.inspector2DelegatedAdminAccount = require("./inspector2-delegated-admin-account");
exports.inspector2Enabler = require("./inspector2-enabler");
exports.inspector2OrganizationConfiguration = require("./inspector2-organization-configuration");
exports.inspectorAssessmentTarget = require("./inspector-assessment-target");
exports.inspectorAssessmentTemplate = require("./inspector-assessment-template");
exports.inspectorResourceGroup = require("./inspector-resource-group");
exports.instance = require("./instance");
exports.internetGateway = require("./internet-gateway");
exports.internetGatewayAttachment = require("./internet-gateway-attachment");
exports.iotAuthorizer = require("./iot-authorizer");
exports.iotCertificate = require("./iot-certificate");
exports.iotIndexingConfiguration = require("./iot-indexing-configuration");
exports.iotLoggingOptions = require("./iot-logging-options");
exports.iotPolicy = require("./iot-policy");
exports.iotPolicyAttachment = require("./iot-policy-attachment");
exports.iotProvisioningTemplate = require("./iot-provisioning-template");
exports.iotRoleAlias = require("./iot-role-alias");
exports.iotThing = require("./iot-thing");
exports.iotThingGroup = require("./iot-thing-group");
exports.iotThingGroupMembership = require("./iot-thing-group-membership");
exports.iotThingPrincipalAttachment = require("./iot-thing-principal-attachment");
exports.iotThingType = require("./iot-thing-type");
exports.iotTopicRule = require("./iot-topic-rule");
exports.iotTopicRuleDestination = require("./iot-topic-rule-destination");
exports.ivsPlaybackKeyPair = require("./ivs-playback-key-pair");
exports.ivsRecordingConfiguration = require("./ivs-recording-configuration");
exports.kendraDataSource = require("./kendra-data-source");
exports.kendraExperience = require("./kendra-experience");
exports.kendraFaq = require("./kendra-faq");
exports.kendraIndex = require("./kendra-index");
exports.kendraQuerySuggestionsBlockList = require("./kendra-query-suggestions-block-list");
exports.kendraThesaurus = require("./kendra-thesaurus");
exports.keyPair = require("./key-pair");
exports.keyspacesKeyspace = require("./keyspaces-keyspace");
exports.keyspacesTable = require("./keyspaces-table");
exports.kinesisAnalyticsApplication = require("./kinesis-analytics-application");
exports.kinesisFirehoseDeliveryStream = require("./kinesis-firehose-delivery-stream");
exports.kinesisStream = require("./kinesis-stream");
exports.kinesisStreamConsumer = require("./kinesis-stream-consumer");
exports.kinesisVideoStream = require("./kinesis-video-stream");
exports.kinesisanalyticsv2Application = require("./kinesisanalyticsv2-application");
exports.kinesisanalyticsv2ApplicationSnapshot = require("./kinesisanalyticsv2-application-snapshot");
exports.kmsAlias = require("./kms-alias");
exports.kmsCiphertext = require("./kms-ciphertext");
exports.kmsCustomKeyStore = require("./kms-custom-key-store");
exports.kmsExternalKey = require("./kms-external-key");
exports.kmsGrant = require("./kms-grant");
exports.kmsKey = require("./kms-key");
exports.kmsReplicaExternalKey = require("./kms-replica-external-key");
exports.kmsReplicaKey = require("./kms-replica-key");
exports.lakeformationDataLakeSettings = require("./lakeformation-data-lake-settings");
exports.lakeformationLfTag = require("./lakeformation-lf-tag");
exports.lakeformationPermissions = require("./lakeformation-permissions");
exports.lakeformationResource = require("./lakeformation-resource");
exports.lakeformationResourceLfTags = require("./lakeformation-resource-lf-tags");
exports.lambdaAlias = require("./lambda-alias");
exports.lambdaCodeSigningConfig = require("./lambda-code-signing-config");
exports.lambdaEventSourceMapping = require("./lambda-event-source-mapping");
exports.lambdaFunction = require("./lambda-function");
exports.lambdaFunctionEventInvokeConfig = require("./lambda-function-event-invoke-config");
exports.lambdaFunctionUrl = require("./lambda-function-url");
exports.lambdaInvocation = require("./lambda-invocation");
exports.lambdaLayerVersion = require("./lambda-layer-version");
exports.lambdaLayerVersionPermission = require("./lambda-layer-version-permission");
exports.lambdaPermission = require("./lambda-permission");
exports.lambdaProvisionedConcurrencyConfig = require("./lambda-provisioned-concurrency-config");
exports.launchConfiguration = require("./launch-configuration");
exports.launchTemplate = require("./launch-template");
exports.lb = require("./lb");
exports.lbCookieStickinessPolicy = require("./lb-cookie-stickiness-policy");
exports.lbListener = require("./lb-listener");
exports.lbListenerCertificate = require("./lb-listener-certificate");
exports.lbListenerRule = require("./lb-listener-rule");
exports.lbSslNegotiationPolicy = require("./lb-ssl-negotiation-policy");
exports.lbTargetGroup = require("./lb-target-group");
exports.lbTargetGroupAttachment = require("./lb-target-group-attachment");
exports.lexBot = require("./lex-bot");
exports.lexBotAlias = require("./lex-bot-alias");
exports.lexIntent = require("./lex-intent");
exports.lexSlotType = require("./lex-slot-type");
exports.licensemanagerAssociation = require("./licensemanager-association");
exports.licensemanagerLicenseConfiguration = require("./licensemanager-license-configuration");
exports.lightsailCertificate = require("./lightsail-certificate");
exports.lightsailContainerService = require("./lightsail-container-service");
exports.lightsailContainerServiceDeploymentVersion = require("./lightsail-container-service-deployment-version");
exports.lightsailDatabase = require("./lightsail-database");
exports.lightsailDisk = require("./lightsail-disk");
exports.lightsailDiskAttachment = require("./lightsail-disk-attachment");
exports.lightsailDomain = require("./lightsail-domain");
exports.lightsailDomainEntry = require("./lightsail-domain-entry");
exports.lightsailInstance = require("./lightsail-instance");
exports.lightsailInstancePublicPorts = require("./lightsail-instance-public-ports");
exports.lightsailKeyPair = require("./lightsail-key-pair");
exports.lightsailLb = require("./lightsail-lb");
exports.lightsailLbAttachment = require("./lightsail-lb-attachment");
exports.lightsailLbCertificate = require("./lightsail-lb-certificate");
exports.lightsailLbCertificateAttachment = require("./lightsail-lb-certificate-attachment");
exports.lightsailLbHttpsRedirectionPolicy = require("./lightsail-lb-https-redirection-policy");
exports.lightsailLbStickinessPolicy = require("./lightsail-lb-stickiness-policy");
exports.lightsailStaticIp = require("./lightsail-static-ip");
exports.lightsailStaticIpAttachment = require("./lightsail-static-ip-attachment");
exports.loadBalancerBackendServerPolicy = require("./load-balancer-backend-server-policy");
exports.loadBalancerListenerPolicy = require("./load-balancer-listener-policy");
exports.loadBalancerPolicy = require("./load-balancer-policy");
exports.locationGeofenceCollection = require("./location-geofence-collection");
exports.locationMap = require("./location-map");
exports.locationPlaceIndex = require("./location-place-index");
exports.locationRouteCalculator = require("./location-route-calculator");
exports.locationTracker = require("./location-tracker");
exports.locationTrackerAssociation = require("./location-tracker-association");
exports.macie2Account = require("./macie2-account");
exports.macie2ClassificationExportConfiguration = require("./macie2-classification-export-configuration");
exports.macie2ClassificationJob = require("./macie2-classification-job");
exports.macie2CustomDataIdentifier = require("./macie2-custom-data-identifier");
exports.macie2FindingsFilter = require("./macie2-findings-filter");
exports.macie2InvitationAccepter = require("./macie2-invitation-accepter");
exports.macie2Member = require("./macie2-member");
exports.macie2OrganizationAdminAccount = require("./macie2-organization-admin-account");
exports.macieMemberAccountAssociation = require("./macie-member-account-association");
exports.macieS3BucketAssociation = require("./macie-s3-bucket-association");
exports.mainRouteTableAssociation = require("./main-route-table-association");
exports.mediaConvertQueue = require("./media-convert-queue");
exports.mediaPackageChannel = require("./media-package-channel");
exports.mediaStoreContainer = require("./media-store-container");
exports.mediaStoreContainerPolicy = require("./media-store-container-policy");
exports.medialiveChannel = require("./medialive-channel");
exports.medialiveInput = require("./medialive-input");
exports.medialiveInputSecurityGroup = require("./medialive-input-security-group");
exports.medialiveMultiplex = require("./medialive-multiplex");
exports.medialiveMultiplexProgram = require("./medialive-multiplex-program");
exports.memorydbAcl = require("./memorydb-acl");
exports.memorydbCluster = require("./memorydb-cluster");
exports.memorydbParameterGroup = require("./memorydb-parameter-group");
exports.memorydbSnapshot = require("./memorydb-snapshot");
exports.memorydbSubnetGroup = require("./memorydb-subnet-group");
exports.memorydbUser = require("./memorydb-user");
exports.mqBroker = require("./mq-broker");
exports.mqConfiguration = require("./mq-configuration");
exports.mskCluster = require("./msk-cluster");
exports.mskConfiguration = require("./msk-configuration");
exports.mskScramSecretAssociation = require("./msk-scram-secret-association");
exports.mskServerlessCluster = require("./msk-serverless-cluster");
exports.mskconnectConnector = require("./mskconnect-connector");
exports.mskconnectCustomPlugin = require("./mskconnect-custom-plugin");
exports.mskconnectWorkerConfiguration = require("./mskconnect-worker-configuration");
exports.mwaaEnvironment = require("./mwaa-environment");
exports.natGateway = require("./nat-gateway");
exports.neptuneCluster = require("./neptune-cluster");
exports.neptuneClusterEndpoint = require("./neptune-cluster-endpoint");
exports.neptuneClusterInstance = require("./neptune-cluster-instance");
exports.neptuneClusterParameterGroup = require("./neptune-cluster-parameter-group");
exports.neptuneClusterSnapshot = require("./neptune-cluster-snapshot");
exports.neptuneEventSubscription = require("./neptune-event-subscription");
exports.neptuneParameterGroup = require("./neptune-parameter-group");
exports.neptuneSubnetGroup = require("./neptune-subnet-group");
exports.networkAcl = require("./network-acl");
exports.networkAclAssociation = require("./network-acl-association");
exports.networkAclRule = require("./network-acl-rule");
exports.networkInterface = require("./network-interface");
exports.networkInterfaceAttachment = require("./network-interface-attachment");
exports.networkInterfaceSgAttachment = require("./network-interface-sg-attachment");
exports.networkfirewallFirewall = require("./networkfirewall-firewall");
exports.networkfirewallFirewallPolicy = require("./networkfirewall-firewall-policy");
exports.networkfirewallLoggingConfiguration = require("./networkfirewall-logging-configuration");
exports.networkfirewallResourcePolicy = require("./networkfirewall-resource-policy");
exports.networkfirewallRuleGroup = require("./networkfirewall-rule-group");
exports.networkmanagerAttachmentAccepter = require("./networkmanager-attachment-accepter");
exports.networkmanagerConnection = require("./networkmanager-connection");
exports.networkmanagerCustomerGatewayAssociation = require("./networkmanager-customer-gateway-association");
exports.networkmanagerDevice = require("./networkmanager-device");
exports.networkmanagerGlobalNetwork = require("./networkmanager-global-network");
exports.networkmanagerLink = require("./networkmanager-link");
exports.networkmanagerLinkAssociation = require("./networkmanager-link-association");
exports.networkmanagerSite = require("./networkmanager-site");
exports.networkmanagerSiteToSiteVpnAttachment = require("./networkmanager-site-to-site-vpn-attachment");
exports.networkmanagerTransitGatewayConnectPeerAssociation = require("./networkmanager-transit-gateway-connect-peer-association");
exports.networkmanagerTransitGatewayPeering = require("./networkmanager-transit-gateway-peering");
exports.networkmanagerTransitGatewayRegistration = require("./networkmanager-transit-gateway-registration");
exports.networkmanagerTransitGatewayRouteTableAttachment = require("./networkmanager-transit-gateway-route-table-attachment");
exports.networkmanagerVpcAttachment = require("./networkmanager-vpc-attachment");
exports.opensearchDomain = require("./opensearch-domain");
exports.opensearchDomainPolicy = require("./opensearch-domain-policy");
exports.opensearchDomainSamlOptions = require("./opensearch-domain-saml-options");
exports.opsworksApplication = require("./opsworks-application");
exports.opsworksCustomLayer = require("./opsworks-custom-layer");
exports.opsworksEcsClusterLayer = require("./opsworks-ecs-cluster-layer");
exports.opsworksGangliaLayer = require("./opsworks-ganglia-layer");
exports.opsworksHaproxyLayer = require("./opsworks-haproxy-layer");
exports.opsworksInstance = require("./opsworks-instance");
exports.opsworksJavaAppLayer = require("./opsworks-java-app-layer");
exports.opsworksMemcachedLayer = require("./opsworks-memcached-layer");
exports.opsworksMysqlLayer = require("./opsworks-mysql-layer");
exports.opsworksNodejsAppLayer = require("./opsworks-nodejs-app-layer");
exports.opsworksPermission = require("./opsworks-permission");
exports.opsworksPhpAppLayer = require("./opsworks-php-app-layer");
exports.opsworksRailsAppLayer = require("./opsworks-rails-app-layer");
exports.opsworksRdsDbInstance = require("./opsworks-rds-db-instance");
exports.opsworksStack = require("./opsworks-stack");
exports.opsworksStaticWebLayer = require("./opsworks-static-web-layer");
exports.opsworksUserProfile = require("./opsworks-user-profile");
exports.organizationsAccount = require("./organizations-account");
exports.organizationsDelegatedAdministrator = require("./organizations-delegated-administrator");
exports.organizationsOrganization = require("./organizations-organization");
exports.organizationsOrganizationalUnit = require("./organizations-organizational-unit");
exports.organizationsPolicy = require("./organizations-policy");
exports.organizationsPolicyAttachment = require("./organizations-policy-attachment");
exports.pinpointAdmChannel = require("./pinpoint-adm-channel");
exports.pinpointApnsChannel = require("./pinpoint-apns-channel");
exports.pinpointApnsSandboxChannel = require("./pinpoint-apns-sandbox-channel");
exports.pinpointApnsVoipChannel = require("./pinpoint-apns-voip-channel");
exports.pinpointApnsVoipSandboxChannel = require("./pinpoint-apns-voip-sandbox-channel");
exports.pinpointApp = require("./pinpoint-app");
exports.pinpointBaiduChannel = require("./pinpoint-baidu-channel");
exports.pinpointEmailChannel = require("./pinpoint-email-channel");
exports.pinpointEventStream = require("./pinpoint-event-stream");
exports.pinpointGcmChannel = require("./pinpoint-gcm-channel");
exports.pinpointSmsChannel = require("./pinpoint-sms-channel");
exports.placementGroup = require("./placement-group");
exports.prometheusAlertManagerDefinition = require("./prometheus-alert-manager-definition");
exports.prometheusRuleGroupNamespace = require("./prometheus-rule-group-namespace");
exports.prometheusWorkspace = require("./prometheus-workspace");
exports.proxyProtocolPolicy = require("./proxy-protocol-policy");
exports.qldbLedger = require("./qldb-ledger");
exports.qldbStream = require("./qldb-stream");
exports.quicksightDataSource = require("./quicksight-data-source");
exports.quicksightGroup = require("./quicksight-group");
exports.quicksightGroupMembership = require("./quicksight-group-membership");
exports.quicksightUser = require("./quicksight-user");
exports.ramPrincipalAssociation = require("./ram-principal-association");
exports.ramResourceAssociation = require("./ram-resource-association");
exports.ramResourceShare = require("./ram-resource-share");
exports.ramResourceShareAccepter = require("./ram-resource-share-accepter");
exports.rdsCluster = require("./rds-cluster");
exports.rdsClusterActivityStream = require("./rds-cluster-activity-stream");
exports.rdsClusterEndpoint = require("./rds-cluster-endpoint");
exports.rdsClusterInstance = require("./rds-cluster-instance");
exports.rdsClusterParameterGroup = require("./rds-cluster-parameter-group");
exports.rdsClusterRoleAssociation = require("./rds-cluster-role-association");
exports.rdsGlobalCluster = require("./rds-global-cluster");
exports.rdsReservedInstance = require("./rds-reserved-instance");
exports.redshiftAuthenticationProfile = require("./redshift-authentication-profile");
exports.redshiftCluster = require("./redshift-cluster");
exports.redshiftClusterIamRoles = require("./redshift-cluster-iam-roles");
exports.redshiftEndpointAccess = require("./redshift-endpoint-access");
exports.redshiftEndpointAuthorization = require("./redshift-endpoint-authorization");
exports.redshiftEventSubscription = require("./redshift-event-subscription");
exports.redshiftHsmClientCertificate = require("./redshift-hsm-client-certificate");
exports.redshiftHsmConfiguration = require("./redshift-hsm-configuration");
exports.redshiftParameterGroup = require("./redshift-parameter-group");
exports.redshiftPartner = require("./redshift-partner");
exports.redshiftScheduledAction = require("./redshift-scheduled-action");
exports.redshiftSecurityGroup = require("./redshift-security-group");
exports.redshiftSnapshotCopyGrant = require("./redshift-snapshot-copy-grant");
exports.redshiftSnapshotSchedule = require("./redshift-snapshot-schedule");
exports.redshiftSnapshotScheduleAssociation = require("./redshift-snapshot-schedule-association");
exports.redshiftSubnetGroup = require("./redshift-subnet-group");
exports.redshiftUsageLimit = require("./redshift-usage-limit");
exports.redshiftdataStatement = require("./redshiftdata-statement");
exports.redshiftserverlessEndpointAccess = require("./redshiftserverless-endpoint-access");
exports.redshiftserverlessNamespace = require("./redshiftserverless-namespace");
exports.redshiftserverlessSnapshot = require("./redshiftserverless-snapshot");
exports.redshiftserverlessUsageLimit = require("./redshiftserverless-usage-limit");
exports.redshiftserverlessWorkgroup = require("./redshiftserverless-workgroup");
exports.resourcegroupsGroup = require("./resourcegroups-group");
exports.rolesanywhereProfile = require("./rolesanywhere-profile");
exports.rolesanywhereTrustAnchor = require("./rolesanywhere-trust-anchor");
exports.route = require("./route");
exports.route53DelegationSet = require("./route53-delegation-set");
exports.route53HealthCheck = require("./route53-health-check");
exports.route53HostedZoneDnssec = require("./route53-hosted-zone-dnssec");
exports.route53KeySigningKey = require("./route53-key-signing-key");
exports.route53QueryLog = require("./route53-query-log");
exports.route53Record = require("./route53-record");
exports.route53ResolverConfig = require("./route53-resolver-config");
exports.route53ResolverDnssecConfig = require("./route53-resolver-dnssec-config");
exports.route53ResolverEndpoint = require("./route53-resolver-endpoint");
exports.route53ResolverFirewallConfig = require("./route53-resolver-firewall-config");
exports.route53ResolverFirewallDomainList = require("./route53-resolver-firewall-domain-list");
exports.route53ResolverFirewallRule = require("./route53-resolver-firewall-rule");
exports.route53ResolverFirewallRuleGroup = require("./route53-resolver-firewall-rule-group");
exports.route53ResolverFirewallRuleGroupAssociation = require("./route53-resolver-firewall-rule-group-association");
exports.route53ResolverQueryLogConfig = require("./route53-resolver-query-log-config");
exports.route53ResolverQueryLogConfigAssociation = require("./route53-resolver-query-log-config-association");
exports.route53ResolverRule = require("./route53-resolver-rule");
exports.route53ResolverRuleAssociation = require("./route53-resolver-rule-association");
exports.route53TrafficPolicy = require("./route53-traffic-policy");
exports.route53TrafficPolicyInstance = require("./route53-traffic-policy-instance");
exports.route53VpcAssociationAuthorization = require("./route53-vpc-association-authorization");
exports.route53Zone = require("./route53-zone");
exports.route53ZoneAssociation = require("./route53-zone-association");
exports.route53DomainsRegisteredDomain = require("./route53domains-registered-domain");
exports.route53RecoverycontrolconfigCluster = require("./route53recoverycontrolconfig-cluster");
exports.route53RecoverycontrolconfigControlPanel = require("./route53recoverycontrolconfig-control-panel");
exports.route53RecoverycontrolconfigRoutingControl = require("./route53recoverycontrolconfig-routing-control");
exports.route53RecoverycontrolconfigSafetyRule = require("./route53recoverycontrolconfig-safety-rule");
exports.route53RecoveryreadinessCell = require("./route53recoveryreadiness-cell");
exports.route53RecoveryreadinessReadinessCheck = require("./route53recoveryreadiness-readiness-check");
exports.route53RecoveryreadinessRecoveryGroup = require("./route53recoveryreadiness-recovery-group");
exports.route53RecoveryreadinessResourceSet = require("./route53recoveryreadiness-resource-set");
exports.routeTable = require("./route-table");
exports.routeTableAssociation = require("./route-table-association");
exports.rumAppMonitor = require("./rum-app-monitor");
exports.s3AccessPoint = require("./s3-access-point");
exports.s3AccountPublicAccessBlock = require("./s3-account-public-access-block");
exports.s3Bucket = require("./s3-bucket");
exports.s3BucketAccelerateConfiguration = require("./s3-bucket-accelerate-configuration");
exports.s3BucketAcl = require("./s3-bucket-acl");
exports.s3BucketAnalyticsConfiguration = require("./s3-bucket-analytics-configuration");
exports.s3BucketCorsConfiguration = require("./s3-bucket-cors-configuration");
exports.s3BucketIntelligentTieringConfiguration = require("./s3-bucket-intelligent-tiering-configuration");
exports.s3BucketInventory = require("./s3-bucket-inventory");
exports.s3BucketLifecycleConfiguration = require("./s3-bucket-lifecycle-configuration");
exports.s3BucketLogging = require("./s3-bucket-logging");
exports.s3BucketMetric = require("./s3-bucket-metric");
exports.s3BucketNotification = require("./s3-bucket-notification");
exports.s3BucketObject = require("./s3-bucket-object");
exports.s3BucketObjectLockConfiguration = require("./s3-bucket-object-lock-configuration");
exports.s3BucketOwnershipControls = require("./s3-bucket-ownership-controls");
exports.s3BucketPolicy = require("./s3-bucket-policy");
exports.s3BucketPublicAccessBlock = require("./s3-bucket-public-access-block");
exports.s3BucketReplicationConfiguration = require("./s3-bucket-replication-configuration");
exports.s3BucketRequestPaymentConfiguration = require("./s3-bucket-request-payment-configuration");
exports.s3BucketServerSideEncryptionConfiguration = require("./s3-bucket-server-side-encryption-configuration");
exports.s3BucketVersioning = require("./s3-bucket-versioning");
exports.s3BucketWebsiteConfiguration = require("./s3-bucket-website-configuration");
exports.s3Object = require("./s3-object");
exports.s3ObjectCopy = require("./s3-object-copy");
exports.s3ControlAccessPointPolicy = require("./s3control-access-point-policy");
exports.s3ControlBucket = require("./s3control-bucket");
exports.s3ControlBucketLifecycleConfiguration = require("./s3control-bucket-lifecycle-configuration");
exports.s3ControlBucketPolicy = require("./s3control-bucket-policy");
exports.s3ControlMultiRegionAccessPoint = require("./s3control-multi-region-access-point");
exports.s3ControlMultiRegionAccessPointPolicy = require("./s3control-multi-region-access-point-policy");
exports.s3ControlObjectLambdaAccessPoint = require("./s3control-object-lambda-access-point");
exports.s3ControlObjectLambdaAccessPointPolicy = require("./s3control-object-lambda-access-point-policy");
exports.s3ControlStorageLensConfiguration = require("./s3control-storage-lens-configuration");
exports.s3OutpostsEndpoint = require("./s3outposts-endpoint");
exports.sagemakerApp = require("./sagemaker-app");
exports.sagemakerAppImageConfig = require("./sagemaker-app-image-config");
exports.sagemakerCodeRepository = require("./sagemaker-code-repository");
exports.sagemakerDevice = require("./sagemaker-device");
exports.sagemakerDeviceFleet = require("./sagemaker-device-fleet");
exports.sagemakerDomain = require("./sagemaker-domain");
exports.sagemakerEndpoint = require("./sagemaker-endpoint");
exports.sagemakerEndpointConfiguration = require("./sagemaker-endpoint-configuration");
exports.sagemakerFeatureGroup = require("./sagemaker-feature-group");
exports.sagemakerFlowDefinition = require("./sagemaker-flow-definition");
exports.sagemakerHumanTaskUi = require("./sagemaker-human-task-ui");
exports.sagemakerImage = require("./sagemaker-image");
exports.sagemakerImageVersion = require("./sagemaker-image-version");
exports.sagemakerModel = require("./sagemaker-model");
exports.sagemakerModelPackageGroup = require("./sagemaker-model-package-group");
exports.sagemakerModelPackageGroupPolicy = require("./sagemaker-model-package-group-policy");
exports.sagemakerNotebookInstance = require("./sagemaker-notebook-instance");
exports.sagemakerNotebookInstanceLifecycleConfiguration = require("./sagemaker-notebook-instance-lifecycle-configuration");
exports.sagemakerProject = require("./sagemaker-project");
exports.sagemakerServicecatalogPortfolioStatus = require("./sagemaker-servicecatalog-portfolio-status");
exports.sagemakerStudioLifecycleConfig = require("./sagemaker-studio-lifecycle-config");
exports.sagemakerUserProfile = require("./sagemaker-user-profile");
exports.sagemakerWorkforce = require("./sagemaker-workforce");
exports.sagemakerWorkteam = require("./sagemaker-workteam");
exports.schemasDiscoverer = require("./schemas-discoverer");
exports.schemasRegistry = require("./schemas-registry");
exports.schemasSchema = require("./schemas-schema");
exports.secretsmanagerSecret = require("./secretsmanager-secret");
exports.secretsmanagerSecretPolicy = require("./secretsmanager-secret-policy");
exports.secretsmanagerSecretRotation = require("./secretsmanager-secret-rotation");
exports.secretsmanagerSecretVersion = require("./secretsmanager-secret-version");
exports.securityGroup = require("./security-group");
exports.securityGroupRule = require("./security-group-rule");
exports.securityhubAccount = require("./securityhub-account");
exports.securityhubActionTarget = require("./securityhub-action-target");
exports.securityhubFindingAggregator = require("./securityhub-finding-aggregator");
exports.securityhubInsight = require("./securityhub-insight");
exports.securityhubInviteAccepter = require("./securityhub-invite-accepter");
exports.securityhubMember = require("./securityhub-member");
exports.securityhubOrganizationAdminAccount = require("./securityhub-organization-admin-account");
exports.securityhubOrganizationConfiguration = require("./securityhub-organization-configuration");
exports.securityhubProductSubscription = require("./securityhub-product-subscription");
exports.securityhubStandardsControl = require("./securityhub-standards-control");
exports.securityhubStandardsSubscription = require("./securityhub-standards-subscription");
exports.serverlessapplicationrepositoryCloudformationStack = require("./serverlessapplicationrepository-cloudformation-stack");
exports.serviceDiscoveryHttpNamespace = require("./service-discovery-http-namespace");
exports.serviceDiscoveryInstance = require("./service-discovery-instance");
exports.serviceDiscoveryPrivateDnsNamespace = require("./service-discovery-private-dns-namespace");
exports.serviceDiscoveryPublicDnsNamespace = require("./service-discovery-public-dns-namespace");
exports.serviceDiscoveryService = require("./service-discovery-service");
exports.servicecatalogBudgetResourceAssociation = require("./servicecatalog-budget-resource-association");
exports.servicecatalogConstraint = require("./servicecatalog-constraint");
exports.servicecatalogOrganizationsAccess = require("./servicecatalog-organizations-access");
exports.servicecatalogPortfolio = require("./servicecatalog-portfolio");
exports.servicecatalogPortfolioShare = require("./servicecatalog-portfolio-share");
exports.servicecatalogPrincipalPortfolioAssociation = require("./servicecatalog-principal-portfolio-association");
exports.servicecatalogProduct = require("./servicecatalog-product");
exports.servicecatalogProductPortfolioAssociation = require("./servicecatalog-product-portfolio-association");
exports.servicecatalogProvisionedProduct = require("./servicecatalog-provisioned-product");
exports.servicecatalogProvisioningArtifact = require("./servicecatalog-provisioning-artifact");
exports.servicecatalogServiceAction = require("./servicecatalog-service-action");
exports.servicecatalogTagOption = require("./servicecatalog-tag-option");
exports.servicecatalogTagOptionResourceAssociation = require("./servicecatalog-tag-option-resource-association");
exports.servicequotasServiceQuota = require("./servicequotas-service-quota");
exports.sesActiveReceiptRuleSet = require("./ses-active-receipt-rule-set");
exports.sesConfigurationSet = require("./ses-configuration-set");
exports.sesDomainDkim = require("./ses-domain-dkim");
exports.sesDomainIdentity = require("./ses-domain-identity");
exports.sesDomainIdentityVerification = require("./ses-domain-identity-verification");
exports.sesDomainMailFrom = require("./ses-domain-mail-from");
exports.sesEmailIdentity = require("./ses-email-identity");
exports.sesEventDestination = require("./ses-event-destination");
exports.sesIdentityNotificationTopic = require("./ses-identity-notification-topic");
exports.sesIdentityPolicy = require("./ses-identity-policy");
exports.sesReceiptFilter = require("./ses-receipt-filter");
exports.sesReceiptRule = require("./ses-receipt-rule");
exports.sesReceiptRuleSet = require("./ses-receipt-rule-set");
exports.sesTemplate = require("./ses-template");
exports.sesv2ConfigurationSet = require("./sesv2-configuration-set");
exports.sesv2DedicatedIpAssignment = require("./sesv2-dedicated-ip-assignment");
exports.sesv2DedicatedIpPool = require("./sesv2-dedicated-ip-pool");
exports.sesv2EmailIdentity = require("./sesv2-email-identity");
exports.sesv2EmailIdentityFeedbackAttributes = require("./sesv2-email-identity-feedback-attributes");
exports.sfnActivity = require("./sfn-activity");
exports.sfnStateMachine = require("./sfn-state-machine");
exports.shieldProtection = require("./shield-protection");
exports.shieldProtectionGroup = require("./shield-protection-group");
exports.shieldProtectionHealthCheckAssociation = require("./shield-protection-health-check-association");
exports.signerSigningJob = require("./signer-signing-job");
exports.signerSigningProfile = require("./signer-signing-profile");
exports.signerSigningProfilePermission = require("./signer-signing-profile-permission");
exports.simpledbDomain = require("./simpledb-domain");
exports.snapshotCreateVolumePermission = require("./snapshot-create-volume-permission");
exports.snsPlatformApplication = require("./sns-platform-application");
exports.snsSmsPreferences = require("./sns-sms-preferences");
exports.snsTopic = require("./sns-topic");
exports.snsTopicPolicy = require("./sns-topic-policy");
exports.snsTopicSubscription = require("./sns-topic-subscription");
exports.spotDatafeedSubscription = require("./spot-datafeed-subscription");
exports.spotFleetRequest = require("./spot-fleet-request");
exports.spotInstanceRequest = require("./spot-instance-request");
exports.sqsQueue = require("./sqs-queue");
exports.sqsQueuePolicy = require("./sqs-queue-policy");
exports.sqsQueueRedriveAllowPolicy = require("./sqs-queue-redrive-allow-policy");
exports.sqsQueueRedrivePolicy = require("./sqs-queue-redrive-policy");
exports.ssmActivation = require("./ssm-activation");
exports.ssmAssociation = require("./ssm-association");
exports.ssmDefaultPatchBaseline = require("./ssm-default-patch-baseline");
exports.ssmDocument = require("./ssm-document");
exports.ssmMaintenanceWindow = require("./ssm-maintenance-window");
exports.ssmMaintenanceWindowTarget = require("./ssm-maintenance-window-target");
exports.ssmMaintenanceWindowTask = require("./ssm-maintenance-window-task");
exports.ssmParameter = require("./ssm-parameter");
exports.ssmPatchBaseline = require("./ssm-patch-baseline");
exports.ssmPatchGroup = require("./ssm-patch-group");
exports.ssmResourceDataSync = require("./ssm-resource-data-sync");
exports.ssmServiceSetting = require("./ssm-service-setting");
exports.ssoadminAccountAssignment = require("./ssoadmin-account-assignment");
exports.ssoadminCustomerManagedPolicyAttachment = require("./ssoadmin-customer-managed-policy-attachment");
exports.ssoadminManagedPolicyAttachment = require("./ssoadmin-managed-policy-attachment");
exports.ssoadminPermissionSet = require("./ssoadmin-permission-set");
exports.ssoadminPermissionSetInlinePolicy = require("./ssoadmin-permission-set-inline-policy");
exports.storagegatewayCache = require("./storagegateway-cache");
exports.storagegatewayCachedIscsiVolume = require("./storagegateway-cached-iscsi-volume");
exports.storagegatewayFileSystemAssociation = require("./storagegateway-file-system-association");
exports.storagegatewayGateway = require("./storagegateway-gateway");
exports.storagegatewayNfsFileShare = require("./storagegateway-nfs-file-share");
exports.storagegatewaySmbFileShare = require("./storagegateway-smb-file-share");
exports.storagegatewayStoredIscsiVolume = require("./storagegateway-stored-iscsi-volume");
exports.storagegatewayTapePool = require("./storagegateway-tape-pool");
exports.storagegatewayUploadBuffer = require("./storagegateway-upload-buffer");
exports.storagegatewayWorkingStorage = require("./storagegateway-working-storage");
exports.subnet = require("./subnet");
exports.swfDomain = require("./swf-domain");
exports.syntheticsCanary = require("./synthetics-canary");
exports.timestreamwriteDatabase = require("./timestreamwrite-database");
exports.timestreamwriteTable = require("./timestreamwrite-table");
exports.transcribeLanguageModel = require("./transcribe-language-model");
exports.transcribeMedicalVocabulary = require("./transcribe-medical-vocabulary");
exports.transcribeVocabulary = require("./transcribe-vocabulary");
exports.transcribeVocabularyFilter = require("./transcribe-vocabulary-filter");
exports.transferAccess = require("./transfer-access");
exports.transferServer = require("./transfer-server");
exports.transferSshKey = require("./transfer-ssh-key");
exports.transferTag = require("./transfer-tag");
exports.transferUser = require("./transfer-user");
exports.transferWorkflow = require("./transfer-workflow");
exports.volumeAttachment = require("./volume-attachment");
exports.vpc = require("./vpc");
exports.vpcDhcpOptions = require("./vpc-dhcp-options");
exports.vpcDhcpOptionsAssociation = require("./vpc-dhcp-options-association");
exports.vpcEndpoint = require("./vpc-endpoint");
exports.vpcEndpointConnectionAccepter = require("./vpc-endpoint-connection-accepter");
exports.vpcEndpointConnectionNotification = require("./vpc-endpoint-connection-notification");
exports.vpcEndpointPolicy = require("./vpc-endpoint-policy");
exports.vpcEndpointRouteTableAssociation = require("./vpc-endpoint-route-table-association");
exports.vpcEndpointSecurityGroupAssociation = require("./vpc-endpoint-security-group-association");
exports.vpcEndpointService = require("./vpc-endpoint-service");
exports.vpcEndpointServiceAllowedPrincipal = require("./vpc-endpoint-service-allowed-principal");
exports.vpcEndpointSubnetAssociation = require("./vpc-endpoint-subnet-association");
exports.vpcIpam = require("./vpc-ipam");
exports.vpcIpamOrganizationAdminAccount = require("./vpc-ipam-organization-admin-account");
exports.vpcIpamPool = require("./vpc-ipam-pool");
exports.vpcIpamPoolCidr = require("./vpc-ipam-pool-cidr");
exports.vpcIpamPoolCidrAllocation = require("./vpc-ipam-pool-cidr-allocation");
exports.vpcIpamPreviewNextCidr = require("./vpc-ipam-preview-next-cidr");
exports.vpcIpamScope = require("./vpc-ipam-scope");
exports.vpcIpv4CidrBlockAssociation = require("./vpc-ipv4-cidr-block-association");
exports.vpcIpv6CidrBlockAssociation = require("./vpc-ipv6-cidr-block-association");
exports.vpcPeeringConnection = require("./vpc-peering-connection");
exports.vpcPeeringConnectionAccepter = require("./vpc-peering-connection-accepter");
exports.vpcPeeringConnectionOptions = require("./vpc-peering-connection-options");
exports.vpnConnection = require("./vpn-connection");
exports.vpnConnectionRoute = require("./vpn-connection-route");
exports.vpnGateway = require("./vpn-gateway");
exports.vpnGatewayAttachment = require("./vpn-gateway-attachment");
exports.vpnGatewayRoutePropagation = require("./vpn-gateway-route-propagation");
exports.wafByteMatchSet = require("./waf-byte-match-set");
exports.wafGeoMatchSet = require("./waf-geo-match-set");
exports.wafIpset = require("./waf-ipset");
exports.wafRateBasedRule = require("./waf-rate-based-rule");
exports.wafRegexMatchSet = require("./waf-regex-match-set");
exports.wafRegexPatternSet = require("./waf-regex-pattern-set");
exports.wafRule = require("./waf-rule");
exports.wafRuleGroup = require("./waf-rule-group");
exports.wafSizeConstraintSet = require("./waf-size-constraint-set");
exports.wafSqlInjectionMatchSet = require("./waf-sql-injection-match-set");
exports.wafWebAcl = require("./waf-web-acl");
exports.wafXssMatchSet = require("./waf-xss-match-set");
exports.wafregionalByteMatchSet = require("./wafregional-byte-match-set");
exports.wafregionalGeoMatchSet = require("./wafregional-geo-match-set");
exports.wafregionalIpset = require("./wafregional-ipset");
exports.wafregionalRateBasedRule = require("./wafregional-rate-based-rule");
exports.wafregionalRegexMatchSet = require("./wafregional-regex-match-set");
exports.wafregionalRegexPatternSet = require("./wafregional-regex-pattern-set");
exports.wafregionalRule = require("./wafregional-rule");
exports.wafregionalRuleGroup = require("./wafregional-rule-group");
exports.wafregionalSizeConstraintSet = require("./wafregional-size-constraint-set");
exports.wafregionalSqlInjectionMatchSet = require("./wafregional-sql-injection-match-set");
exports.wafregionalWebAcl = require("./wafregional-web-acl");
exports.wafregionalWebAclAssociation = require("./wafregional-web-acl-association");
exports.wafregionalXssMatchSet = require("./wafregional-xss-match-set");
exports.wafv2IpSet = require("./wafv2-ip-set");
exports.wafv2RegexPatternSet = require("./wafv2-regex-pattern-set");
exports.wafv2RuleGroup = require("./wafv2-rule-group");
exports.wafv2WebAcl = require("./wafv2-web-acl");
exports.wafv2WebAclAssociation = require("./wafv2-web-acl-association");
exports.wafv2WebAclLoggingConfiguration = require("./wafv2-web-acl-logging-configuration");
exports.worklinkFleet = require("./worklink-fleet");
exports.worklinkWebsiteCertificateAuthorityAssociation = require("./worklink-website-certificate-authority-association");
exports.workspacesDirectory = require("./workspaces-directory");
exports.workspacesIpGroup = require("./workspaces-ip-group");
exports.workspacesWorkspace = require("./workspaces-workspace");
exports.xrayEncryptionConfig = require("./xray-encryption-config");
exports.xrayGroup = require("./xray-group");
exports.xraySamplingRule = require("./xray-sampling-rule");
exports.dataAwsAcmCertificate = require("./data-aws-acm-certificate");
exports.dataAwsAcmpcaCertificate = require("./data-aws-acmpca-certificate");
exports.dataAwsAcmpcaCertificateAuthority = require("./data-aws-acmpca-certificate-authority");
exports.dataAwsAlb = require("./data-aws-alb");
exports.dataAwsAlbListener = require("./data-aws-alb-listener");
exports.dataAwsAlbTargetGroup = require("./data-aws-alb-target-group");
exports.dataAwsAmi = require("./data-aws-ami");
exports.dataAwsAmiIds = require("./data-aws-ami-ids");
exports.dataAwsApiGatewayApiKey = require("./data-aws-api-gateway-api-key");
exports.dataAwsApiGatewayDomainName = require("./data-aws-api-gateway-domain-name");
exports.dataAwsApiGatewayExport = require("./data-aws-api-gateway-export");
exports.dataAwsApiGatewayResource = require("./data-aws-api-gateway-resource");
exports.dataAwsApiGatewayRestApi = require("./data-aws-api-gateway-rest-api");
exports.dataAwsApiGatewaySdk = require("./data-aws-api-gateway-sdk");
exports.dataAwsApiGatewayVpcLink = require("./data-aws-api-gateway-vpc-link");
exports.dataAwsApigatewayv2Api = require("./data-aws-apigatewayv2-api");
exports.dataAwsApigatewayv2Apis = require("./data-aws-apigatewayv2-apis");
exports.dataAwsApigatewayv2Export = require("./data-aws-apigatewayv2-export");
exports.dataAwsAppconfigConfigurationProfile = require("./data-aws-appconfig-configuration-profile");
exports.dataAwsAppconfigConfigurationProfiles = require("./data-aws-appconfig-configuration-profiles");
exports.dataAwsAppconfigEnvironment = require("./data-aws-appconfig-environment");
exports.dataAwsAppconfigEnvironments = require("./data-aws-appconfig-environments");
exports.dataAwsAppmeshMesh = require("./data-aws-appmesh-mesh");
exports.dataAwsAppmeshVirtualService = require("./data-aws-appmesh-virtual-service");
exports.dataAwsArn = require("./data-aws-arn");
exports.dataAwsAutoscalingGroup = require("./data-aws-autoscaling-group");
exports.dataAwsAutoscalingGroups = require("./data-aws-autoscaling-groups");
exports.dataAwsAvailabilityZone = require("./data-aws-availability-zone");
exports.dataAwsAvailabilityZones = require("./data-aws-availability-zones");
exports.dataAwsBackupFramework = require("./data-aws-backup-framework");
exports.dataAwsBackupPlan = require("./data-aws-backup-plan");
exports.dataAwsBackupReportPlan = require("./data-aws-backup-report-plan");
exports.dataAwsBackupSelection = require("./data-aws-backup-selection");
exports.dataAwsBackupVault = require("./data-aws-backup-vault");
exports.dataAwsBatchComputeEnvironment = require("./data-aws-batch-compute-environment");
exports.dataAwsBatchJobQueue = require("./data-aws-batch-job-queue");
exports.dataAwsBatchSchedulingPolicy = require("./data-aws-batch-scheduling-policy");
exports.dataAwsBillingServiceAccount = require("./data-aws-billing-service-account");
exports.dataAwsCallerIdentity = require("./data-aws-caller-identity");
exports.dataAwsCanonicalUserId = require("./data-aws-canonical-user-id");
exports.dataAwsCeCostCategory = require("./data-aws-ce-cost-category");
exports.dataAwsCeTags = require("./data-aws-ce-tags");
exports.dataAwsCloudcontrolapiResource = require("./data-aws-cloudcontrolapi-resource");
exports.dataAwsCloudformationExport = require("./data-aws-cloudformation-export");
exports.dataAwsCloudformationStack = require("./data-aws-cloudformation-stack");
exports.dataAwsCloudformationType = require("./data-aws-cloudformation-type");
exports.dataAwsCloudfrontCachePolicy = require("./data-aws-cloudfront-cache-policy");
exports.dataAwsCloudfrontDistribution = require("./data-aws-cloudfront-distribution");
exports.dataAwsCloudfrontFunction = require("./data-aws-cloudfront-function");
exports.dataAwsCloudfrontLogDeliveryCanonicalUserId = require("./data-aws-cloudfront-log-delivery-canonical-user-id");
exports.dataAwsCloudfrontOriginAccessIdentities = require("./data-aws-cloudfront-origin-access-identities");
exports.dataAwsCloudfrontOriginAccessIdentity = require("./data-aws-cloudfront-origin-access-identity");
exports.dataAwsCloudfrontOriginRequestPolicy = require("./data-aws-cloudfront-origin-request-policy");
exports.dataAwsCloudfrontRealtimeLogConfig = require("./data-aws-cloudfront-realtime-log-config");
exports.dataAwsCloudfrontResponseHeadersPolicy = require("./data-aws-cloudfront-response-headers-policy");
exports.dataAwsCloudhsmV2Cluster = require("./data-aws-cloudhsm-v2-cluster");
exports.dataAwsCloudtrailServiceAccount = require("./data-aws-cloudtrail-service-account");
exports.dataAwsCloudwatchEventBus = require("./data-aws-cloudwatch-event-bus");
exports.dataAwsCloudwatchEventConnection = require("./data-aws-cloudwatch-event-connection");
exports.dataAwsCloudwatchEventSource = require("./data-aws-cloudwatch-event-source");
exports.dataAwsCloudwatchLogGroup = require("./data-aws-cloudwatch-log-group");
exports.dataAwsCloudwatchLogGroups = require("./data-aws-cloudwatch-log-groups");
exports.dataAwsCodeartifactAuthorizationToken = require("./data-aws-codeartifact-authorization-token");
exports.dataAwsCodeartifactRepositoryEndpoint = require("./data-aws-codeartifact-repository-endpoint");
exports.dataAwsCodecommitApprovalRuleTemplate = require("./data-aws-codecommit-approval-rule-template");
exports.dataAwsCodecommitRepository = require("./data-aws-codecommit-repository");
exports.dataAwsCodestarconnectionsConnection = require("./data-aws-codestarconnections-connection");
exports.dataAwsCognitoUserPoolClient = require("./data-aws-cognito-user-pool-client");
exports.dataAwsCognitoUserPoolClients = require("./data-aws-cognito-user-pool-clients");
exports.dataAwsCognitoUserPoolSigningCertificate = require("./data-aws-cognito-user-pool-signing-certificate");
exports.dataAwsCognitoUserPools = require("./data-aws-cognito-user-pools");
exports.dataAwsConnectBotAssociation = require("./data-aws-connect-bot-association");
exports.dataAwsConnectContactFlow = require("./data-aws-connect-contact-flow");
exports.dataAwsConnectContactFlowModule = require("./data-aws-connect-contact-flow-module");
exports.dataAwsConnectHoursOfOperation = require("./data-aws-connect-hours-of-operation");
exports.dataAwsConnectInstance = require("./data-aws-connect-instance");
exports.dataAwsConnectInstanceStorageConfig = require("./data-aws-connect-instance-storage-config");
exports.dataAwsConnectLambdaFunctionAssociation = require("./data-aws-connect-lambda-function-association");
exports.dataAwsConnectPrompt = require("./data-aws-connect-prompt");
exports.dataAwsConnectQueue = require("./data-aws-connect-queue");
exports.dataAwsConnectQuickConnect = require("./data-aws-connect-quick-connect");
exports.dataAwsConnectRoutingProfile = require("./data-aws-connect-routing-profile");
exports.dataAwsConnectSecurityProfile = require("./data-aws-connect-security-profile");
exports.dataAwsConnectUserHierarchyGroup = require("./data-aws-connect-user-hierarchy-group");
exports.dataAwsConnectUserHierarchyStructure = require("./data-aws-connect-user-hierarchy-structure");
exports.dataAwsCurReportDefinition = require("./data-aws-cur-report-definition");
exports.dataAwsCustomerGateway = require("./data-aws-customer-gateway");
exports.dataAwsDatapipelinePipeline = require("./data-aws-datapipeline-pipeline");
exports.dataAwsDatapipelinePipelineDefinition = require("./data-aws-datapipeline-pipeline-definition");
exports.dataAwsDbClusterSnapshot = require("./data-aws-db-cluster-snapshot");
exports.dataAwsDbEventCategories = require("./data-aws-db-event-categories");
exports.dataAwsDbInstance = require("./data-aws-db-instance");
exports.dataAwsDbProxy = require("./data-aws-db-proxy");
exports.dataAwsDbSnapshot = require("./data-aws-db-snapshot");
exports.dataAwsDbSubnetGroup = require("./data-aws-db-subnet-group");
exports.dataAwsDefaultTags = require("./data-aws-default-tags");
exports.dataAwsDirectoryServiceDirectory = require("./data-aws-directory-service-directory");
exports.dataAwsDocdbEngineVersion = require("./data-aws-docdb-engine-version");
exports.dataAwsDocdbOrderableDbInstance = require("./data-aws-docdb-orderable-db-instance");
exports.dataAwsDxConnection = require("./data-aws-dx-connection");
exports.dataAwsDxGateway = require("./data-aws-dx-gateway");
exports.dataAwsDxLocation = require("./data-aws-dx-location");
exports.dataAwsDxLocations = require("./data-aws-dx-locations");
exports.dataAwsDxRouterConfiguration = require("./data-aws-dx-router-configuration");
exports.dataAwsDynamodbTable = require("./data-aws-dynamodb-table");
exports.dataAwsDynamodbTableItem = require("./data-aws-dynamodb-table-item");
exports.dataAwsEbsDefaultKmsKey = require("./data-aws-ebs-default-kms-key");
exports.dataAwsEbsEncryptionByDefault = require("./data-aws-ebs-encryption-by-default");
exports.dataAwsEbsSnapshot = require("./data-aws-ebs-snapshot");
exports.dataAwsEbsSnapshotIds = require("./data-aws-ebs-snapshot-ids");
exports.dataAwsEbsVolume = require("./data-aws-ebs-volume");
exports.dataAwsEbsVolumes = require("./data-aws-ebs-volumes");
exports.dataAwsEc2ClientVpnEndpoint = require("./data-aws-ec2-client-vpn-endpoint");
exports.dataAwsEc2CoipPool = require("./data-aws-ec2-coip-pool");
exports.dataAwsEc2CoipPools = require("./data-aws-ec2-coip-pools");
exports.dataAwsEc2Host = require("./data-aws-ec2-host");
exports.dataAwsEc2InstanceType = require("./data-aws-ec2-instance-type");
exports.dataAwsEc2InstanceTypeOffering = require("./data-aws-ec2-instance-type-offering");
exports.dataAwsEc2InstanceTypeOfferings = require("./data-aws-ec2-instance-type-offerings");
exports.dataAwsEc2InstanceTypes = require("./data-aws-ec2-instance-types");
exports.dataAwsEc2LocalGateway = require("./data-aws-ec2-local-gateway");
exports.dataAwsEc2LocalGatewayRouteTable = require("./data-aws-ec2-local-gateway-route-table");
exports.dataAwsEc2LocalGatewayRouteTables = require("./data-aws-ec2-local-gateway-route-tables");
exports.dataAwsEc2LocalGatewayVirtualInterface = require("./data-aws-ec2-local-gateway-virtual-interface");
exports.dataAwsEc2LocalGatewayVirtualInterfaceGroup = require("./data-aws-ec2-local-gateway-virtual-interface-group");
exports.dataAwsEc2LocalGatewayVirtualInterfaceGroups = require("./data-aws-ec2-local-gateway-virtual-interface-groups");
exports.dataAwsEc2LocalGateways = require("./data-aws-ec2-local-gateways");
exports.dataAwsEc2ManagedPrefixList = require("./data-aws-ec2-managed-prefix-list");
exports.dataAwsEc2ManagedPrefixLists = require("./data-aws-ec2-managed-prefix-lists");
exports.dataAwsEc2NetworkInsightsAnalysis = require("./data-aws-ec2-network-insights-analysis");
exports.dataAwsEc2NetworkInsightsPath = require("./data-aws-ec2-network-insights-path");
exports.dataAwsEc2SerialConsoleAccess = require("./data-aws-ec2-serial-console-access");
exports.dataAwsEc2SpotPrice = require("./data-aws-ec2-spot-price");
exports.dataAwsEc2TransitGateway = require("./data-aws-ec2-transit-gateway");
exports.dataAwsEc2TransitGatewayAttachment = require("./data-aws-ec2-transit-gateway-attachment");
exports.dataAwsEc2TransitGatewayConnect = require("./data-aws-ec2-transit-gateway-connect");
exports.dataAwsEc2TransitGatewayConnectPeer = require("./data-aws-ec2-transit-gateway-connect-peer");
exports.dataAwsEc2TransitGatewayDxGatewayAttachment = require("./data-aws-ec2-transit-gateway-dx-gateway-attachment");
exports.dataAwsEc2TransitGatewayMulticastDomain = require("./data-aws-ec2-transit-gateway-multicast-domain");
exports.dataAwsEc2TransitGatewayPeeringAttachment = require("./data-aws-ec2-transit-gateway-peering-attachment");
exports.dataAwsEc2TransitGatewayRouteTable = require("./data-aws-ec2-transit-gateway-route-table");
exports.dataAwsEc2TransitGatewayRouteTables = require("./data-aws-ec2-transit-gateway-route-tables");
exports.dataAwsEc2TransitGatewayVpcAttachment = require("./data-aws-ec2-transit-gateway-vpc-attachment");
exports.dataAwsEc2TransitGatewayVpcAttachments = require("./data-aws-ec2-transit-gateway-vpc-attachments");
exports.dataAwsEc2TransitGatewayVpnAttachment = require("./data-aws-ec2-transit-gateway-vpn-attachment");
exports.dataAwsEcrAuthorizationToken = require("./data-aws-ecr-authorization-token");
exports.dataAwsEcrImage = require("./data-aws-ecr-image");
exports.dataAwsEcrRepository = require("./data-aws-ecr-repository");
exports.dataAwsEcrpublicAuthorizationToken = require("./data-aws-ecrpublic-authorization-token");
exports.dataAwsEcsCluster = require("./data-aws-ecs-cluster");
exports.dataAwsEcsContainerDefinition = require("./data-aws-ecs-container-definition");
exports.dataAwsEcsService = require("./data-aws-ecs-service");
exports.dataAwsEcsTaskDefinition = require("./data-aws-ecs-task-definition");
exports.dataAwsEfsAccessPoint = require("./data-aws-efs-access-point");
exports.dataAwsEfsAccessPoints = require("./data-aws-efs-access-points");
exports.dataAwsEfsFileSystem = require("./data-aws-efs-file-system");
exports.dataAwsEfsMountTarget = require("./data-aws-efs-mount-target");
exports.dataAwsEip = require("./data-aws-eip");
exports.dataAwsEips = require("./data-aws-eips");
exports.dataAwsEksAddon = require("./data-aws-eks-addon");
exports.dataAwsEksAddonVersion = require("./data-aws-eks-addon-version");
exports.dataAwsEksCluster = require("./data-aws-eks-cluster");
exports.dataAwsEksClusterAuth = require("./data-aws-eks-cluster-auth");
exports.dataAwsEksClusters = require("./data-aws-eks-clusters");
exports.dataAwsEksNodeGroup = require("./data-aws-eks-node-group");
exports.dataAwsEksNodeGroups = require("./data-aws-eks-node-groups");
exports.dataAwsElasticBeanstalkApplication = require("./data-aws-elastic-beanstalk-application");
exports.dataAwsElasticBeanstalkHostedZone = require("./data-aws-elastic-beanstalk-hosted-zone");
exports.dataAwsElasticBeanstalkSolutionStack = require("./data-aws-elastic-beanstalk-solution-stack");
exports.dataAwsElasticacheCluster = require("./data-aws-elasticache-cluster");
exports.dataAwsElasticacheReplicationGroup = require("./data-aws-elasticache-replication-group");
exports.dataAwsElasticacheSubnetGroup = require("./data-aws-elasticache-subnet-group");
exports.dataAwsElasticacheUser = require("./data-aws-elasticache-user");
exports.dataAwsElasticsearchDomain = require("./data-aws-elasticsearch-domain");
exports.dataAwsElb = require("./data-aws-elb");
exports.dataAwsElbHostedZoneId = require("./data-aws-elb-hosted-zone-id");
exports.dataAwsElbServiceAccount = require("./data-aws-elb-service-account");
exports.dataAwsEmrReleaseLabels = require("./data-aws-emr-release-labels");
exports.dataAwsEmrcontainersVirtualCluster = require("./data-aws-emrcontainers-virtual-cluster");
exports.dataAwsFsxOpenzfsSnapshot = require("./data-aws-fsx-openzfs-snapshot");
exports.dataAwsGlobalacceleratorAccelerator = require("./data-aws-globalaccelerator-accelerator");
exports.dataAwsGlueConnection = require("./data-aws-glue-connection");
exports.dataAwsGlueDataCatalogEncryptionSettings = require("./data-aws-glue-data-catalog-encryption-settings");
exports.dataAwsGlueScript = require("./data-aws-glue-script");
exports.dataAwsGrafanaWorkspace = require("./data-aws-grafana-workspace");
exports.dataAwsGuarddutyDetector = require("./data-aws-guardduty-detector");
exports.dataAwsIamAccountAlias = require("./data-aws-iam-account-alias");
exports.dataAwsIamGroup = require("./data-aws-iam-group");
exports.dataAwsIamInstanceProfile = require("./data-aws-iam-instance-profile");
exports.dataAwsIamInstanceProfiles = require("./data-aws-iam-instance-profiles");
exports.dataAwsIamOpenidConnectProvider = require("./data-aws-iam-openid-connect-provider");
exports.dataAwsIamPolicy = require("./data-aws-iam-policy");
exports.dataAwsIamPolicyDocument = require("./data-aws-iam-policy-document");
exports.dataAwsIamRole = require("./data-aws-iam-role");
exports.dataAwsIamRoles = require("./data-aws-iam-roles");
exports.dataAwsIamSamlProvider = require("./data-aws-iam-saml-provider");
exports.dataAwsIamServerCertificate = require("./data-aws-iam-server-certificate");
exports.dataAwsIamSessionContext = require("./data-aws-iam-session-context");
exports.dataAwsIamUser = require("./data-aws-iam-user");
exports.dataAwsIamUserSshKey = require("./data-aws-iam-user-ssh-key");
exports.dataAwsIamUsers = require("./data-aws-iam-users");
exports.dataAwsIdentitystoreGroup = require("./data-aws-identitystore-group");
exports.dataAwsIdentitystoreUser = require("./data-aws-identitystore-user");
exports.dataAwsImagebuilderComponent = require("./data-aws-imagebuilder-component");
exports.dataAwsImagebuilderComponents = require("./data-aws-imagebuilder-components");
exports.dataAwsImagebuilderContainerRecipe = require("./data-aws-imagebuilder-container-recipe");
exports.dataAwsImagebuilderContainerRecipes = require("./data-aws-imagebuilder-container-recipes");
exports.dataAwsImagebuilderDistributionConfiguration = require("./data-aws-imagebuilder-distribution-configuration");
exports.dataAwsImagebuilderDistributionConfigurations = require("./data-aws-imagebuilder-distribution-configurations");
exports.dataAwsImagebuilderImage = require("./data-aws-imagebuilder-image");
exports.dataAwsImagebuilderImagePipeline = require("./data-aws-imagebuilder-image-pipeline");
exports.dataAwsImagebuilderImagePipelines = require("./data-aws-imagebuilder-image-pipelines");
exports.dataAwsImagebuilderImageRecipe = require("./data-aws-imagebuilder-image-recipe");
exports.dataAwsImagebuilderImageRecipes = require("./data-aws-imagebuilder-image-recipes");
exports.dataAwsImagebuilderInfrastructureConfiguration = require("./data-aws-imagebuilder-infrastructure-configuration");
exports.dataAwsImagebuilderInfrastructureConfigurations = require("./data-aws-imagebuilder-infrastructure-configurations");
exports.dataAwsInspectorRulesPackages = require("./data-aws-inspector-rules-packages");
exports.dataAwsInstance = require("./data-aws-instance");
exports.dataAwsInstances = require("./data-aws-instances");
exports.dataAwsInternetGateway = require("./data-aws-internet-gateway");
exports.dataAwsIotEndpoint = require("./data-aws-iot-endpoint");
exports.dataAwsIpRanges = require("./data-aws-ip-ranges");
exports.dataAwsKendraExperience = require("./data-aws-kendra-experience");
exports.dataAwsKendraFaq = require("./data-aws-kendra-faq");
exports.dataAwsKendraIndex = require("./data-aws-kendra-index");
exports.dataAwsKendraQuerySuggestionsBlockList = require("./data-aws-kendra-query-suggestions-block-list");
exports.dataAwsKendraThesaurus = require("./data-aws-kendra-thesaurus");
exports.dataAwsKeyPair = require("./data-aws-key-pair");
exports.dataAwsKinesisFirehoseDeliveryStream = require("./data-aws-kinesis-firehose-delivery-stream");
exports.dataAwsKinesisStream = require("./data-aws-kinesis-stream");
exports.dataAwsKinesisStreamConsumer = require("./data-aws-kinesis-stream-consumer");
exports.dataAwsKmsAlias = require("./data-aws-kms-alias");
exports.dataAwsKmsCiphertext = require("./data-aws-kms-ciphertext");
exports.dataAwsKmsCustomKeyStore = require("./data-aws-kms-custom-key-store");
exports.dataAwsKmsKey = require("./data-aws-kms-key");
exports.dataAwsKmsPublicKey = require("./data-aws-kms-public-key");
exports.dataAwsKmsSecret = require("./data-aws-kms-secret");
exports.dataAwsKmsSecrets = require("./data-aws-kms-secrets");
exports.dataAwsLakeformationDataLakeSettings = require("./data-aws-lakeformation-data-lake-settings");
exports.dataAwsLakeformationPermissions = require("./data-aws-lakeformation-permissions");
exports.dataAwsLakeformationResource = require("./data-aws-lakeformation-resource");
exports.dataAwsLambdaAlias = require("./data-aws-lambda-alias");
exports.dataAwsLambdaCodeSigningConfig = require("./data-aws-lambda-code-signing-config");
exports.dataAwsLambdaFunction = require("./data-aws-lambda-function");
exports.dataAwsLambdaFunctionUrl = require("./data-aws-lambda-function-url");
exports.dataAwsLambdaInvocation = require("./data-aws-lambda-invocation");
exports.dataAwsLambdaLayerVersion = require("./data-aws-lambda-layer-version");
exports.dataAwsLaunchConfiguration = require("./data-aws-launch-configuration");
exports.dataAwsLaunchTemplate = require("./data-aws-launch-template");
exports.dataAwsLb = require("./data-aws-lb");
exports.dataAwsLbHostedZoneId = require("./data-aws-lb-hosted-zone-id");
exports.dataAwsLbListener = require("./data-aws-lb-listener");
exports.dataAwsLbTargetGroup = require("./data-aws-lb-target-group");
exports.dataAwsLexBot = require("./data-aws-lex-bot");
exports.dataAwsLexBotAlias = require("./data-aws-lex-bot-alias");
exports.dataAwsLexIntent = require("./data-aws-lex-intent");
exports.dataAwsLexSlotType = require("./data-aws-lex-slot-type");
exports.dataAwsLocationGeofenceCollection = require("./data-aws-location-geofence-collection");
exports.dataAwsLocationMap = require("./data-aws-location-map");
exports.dataAwsLocationPlaceIndex = require("./data-aws-location-place-index");
exports.dataAwsLocationRouteCalculator = require("./data-aws-location-route-calculator");
exports.dataAwsLocationTracker = require("./data-aws-location-tracker");
exports.dataAwsLocationTrackerAssociation = require("./data-aws-location-tracker-association");
exports.dataAwsLocationTrackerAssociations = require("./data-aws-location-tracker-associations");
exports.dataAwsMemorydbAcl = require("./data-aws-memorydb-acl");
exports.dataAwsMemorydbCluster = require("./data-aws-memorydb-cluster");
exports.dataAwsMemorydbParameterGroup = require("./data-aws-memorydb-parameter-group");
exports.dataAwsMemorydbSnapshot = require("./data-aws-memorydb-snapshot");
exports.dataAwsMemorydbSubnetGroup = require("./data-aws-memorydb-subnet-group");
exports.dataAwsMemorydbUser = require("./data-aws-memorydb-user");
exports.dataAwsMqBroker = require("./data-aws-mq-broker");
exports.dataAwsMqBrokerInstanceTypeOfferings = require("./data-aws-mq-broker-instance-type-offerings");
exports.dataAwsMskBrokerNodes = require("./data-aws-msk-broker-nodes");
exports.dataAwsMskCluster = require("./data-aws-msk-cluster");
exports.dataAwsMskConfiguration = require("./data-aws-msk-configuration");
exports.dataAwsMskKafkaVersion = require("./data-aws-msk-kafka-version");
exports.dataAwsMskconnectConnector = require("./data-aws-mskconnect-connector");
exports.dataAwsMskconnectCustomPlugin = require("./data-aws-mskconnect-custom-plugin");
exports.dataAwsMskconnectWorkerConfiguration = require("./data-aws-mskconnect-worker-configuration");
exports.dataAwsNatGateway = require("./data-aws-nat-gateway");
exports.dataAwsNatGateways = require("./data-aws-nat-gateways");
exports.dataAwsNeptuneEngineVersion = require("./data-aws-neptune-engine-version");
exports.dataAwsNeptuneOrderableDbInstance = require("./data-aws-neptune-orderable-db-instance");
exports.dataAwsNetworkAcls = require("./data-aws-network-acls");
exports.dataAwsNetworkInterface = require("./data-aws-network-interface");
exports.dataAwsNetworkInterfaces = require("./data-aws-network-interfaces");
exports.dataAwsNetworkfirewallFirewall = require("./data-aws-networkfirewall-firewall");
exports.dataAwsNetworkfirewallFirewallPolicy = require("./data-aws-networkfirewall-firewall-policy");
exports.dataAwsNetworkmanagerConnection = require("./data-aws-networkmanager-connection");
exports.dataAwsNetworkmanagerConnections = require("./data-aws-networkmanager-connections");
exports.dataAwsNetworkmanagerCoreNetworkPolicyDocument = require("./data-aws-networkmanager-core-network-policy-document");
exports.dataAwsNetworkmanagerDevice = require("./data-aws-networkmanager-device");
exports.dataAwsNetworkmanagerDevices = require("./data-aws-networkmanager-devices");
exports.dataAwsNetworkmanagerGlobalNetwork = require("./data-aws-networkmanager-global-network");
exports.dataAwsNetworkmanagerGlobalNetworks = require("./data-aws-networkmanager-global-networks");
exports.dataAwsNetworkmanagerLink = require("./data-aws-networkmanager-link");
exports.dataAwsNetworkmanagerLinks = require("./data-aws-networkmanager-links");
exports.dataAwsNetworkmanagerSite = require("./data-aws-networkmanager-site");
exports.dataAwsNetworkmanagerSites = require("./data-aws-networkmanager-sites");
exports.dataAwsOpensearchDomain = require("./data-aws-opensearch-domain");
exports.dataAwsOrganizationsDelegatedAdministrators = require("./data-aws-organizations-delegated-administrators");
exports.dataAwsOrganizationsDelegatedServices = require("./data-aws-organizations-delegated-services");
exports.dataAwsOrganizationsOrganization = require("./data-aws-organizations-organization");
exports.dataAwsOrganizationsOrganizationalUnits = require("./data-aws-organizations-organizational-units");
exports.dataAwsOrganizationsResourceTags = require("./data-aws-organizations-resource-tags");
exports.dataAwsOutpostsAsset = require("./data-aws-outposts-asset");
exports.dataAwsOutpostsAssets = require("./data-aws-outposts-assets");
exports.dataAwsOutpostsOutpost = require("./data-aws-outposts-outpost");
exports.dataAwsOutpostsOutpostInstanceType = require("./data-aws-outposts-outpost-instance-type");
exports.dataAwsOutpostsOutpostInstanceTypes = require("./data-aws-outposts-outpost-instance-types");
exports.dataAwsOutpostsOutposts = require("./data-aws-outposts-outposts");
exports.dataAwsOutpostsSite = require("./data-aws-outposts-site");
exports.dataAwsOutpostsSites = require("./data-aws-outposts-sites");
exports.dataAwsPartition = require("./data-aws-partition");
exports.dataAwsPrefixList = require("./data-aws-prefix-list");
exports.dataAwsPricingProduct = require("./data-aws-pricing-product");
exports.dataAwsPrometheusWorkspace = require("./data-aws-prometheus-workspace");
exports.dataAwsQldbLedger = require("./data-aws-qldb-ledger");
exports.dataAwsRamResourceShare = require("./data-aws-ram-resource-share");
exports.dataAwsRdsCertificate = require("./data-aws-rds-certificate");
exports.dataAwsRdsCluster = require("./data-aws-rds-cluster");
exports.dataAwsRdsEngineVersion = require("./data-aws-rds-engine-version");
exports.dataAwsRdsOrderableDbInstance = require("./data-aws-rds-orderable-db-instance");
exports.dataAwsRdsReservedInstanceOffering = require("./data-aws-rds-reserved-instance-offering");
exports.dataAwsRedshiftCluster = require("./data-aws-redshift-cluster");
exports.dataAwsRedshiftClusterCredentials = require("./data-aws-redshift-cluster-credentials");
exports.dataAwsRedshiftOrderableCluster = require("./data-aws-redshift-orderable-cluster");
exports.dataAwsRedshiftServiceAccount = require("./data-aws-redshift-service-account");
exports.dataAwsRedshiftSubnetGroup = require("./data-aws-redshift-subnet-group");
exports.dataAwsRegion = require("./data-aws-region");
exports.dataAwsRegions = require("./data-aws-regions");
exports.dataAwsResourcegroupstaggingapiResources = require("./data-aws-resourcegroupstaggingapi-resources");
exports.dataAwsRoute = require("./data-aws-route");
exports.dataAwsRoute53DelegationSet = require("./data-aws-route53-delegation-set");
exports.dataAwsRoute53ResolverEndpoint = require("./data-aws-route53-resolver-endpoint");
exports.dataAwsRoute53ResolverFirewallConfig = require("./data-aws-route53-resolver-firewall-config");
exports.dataAwsRoute53ResolverFirewallDomainList = require("./data-aws-route53-resolver-firewall-domain-list");
exports.dataAwsRoute53ResolverFirewallRuleGroup = require("./data-aws-route53-resolver-firewall-rule-group");
exports.dataAwsRoute53ResolverFirewallRuleGroupAssociation = require("./data-aws-route53-resolver-firewall-rule-group-association");
exports.dataAwsRoute53ResolverFirewallRules = require("./data-aws-route53-resolver-firewall-rules");
exports.dataAwsRoute53ResolverRule = require("./data-aws-route53-resolver-rule");
exports.dataAwsRoute53ResolverRules = require("./data-aws-route53-resolver-rules");
exports.dataAwsRoute53TrafficPolicyDocument = require("./data-aws-route53-traffic-policy-document");
exports.dataAwsRoute53Zone = require("./data-aws-route53-zone");
exports.dataAwsRouteTable = require("./data-aws-route-table");
exports.dataAwsRouteTables = require("./data-aws-route-tables");
exports.dataAwsS3AccountPublicAccessBlock = require("./data-aws-s3-account-public-access-block");
exports.dataAwsS3Bucket = require("./data-aws-s3-bucket");
exports.dataAwsS3BucketObject = require("./data-aws-s3-bucket-object");
exports.dataAwsS3BucketObjects = require("./data-aws-s3-bucket-objects");
exports.dataAwsS3BucketPolicy = require("./data-aws-s3-bucket-policy");
exports.dataAwsS3Object = require("./data-aws-s3-object");
exports.dataAwsS3Objects = require("./data-aws-s3-objects");
exports.dataAwsSagemakerPrebuiltEcrImage = require("./data-aws-sagemaker-prebuilt-ecr-image");
exports.dataAwsSecretsmanagerRandomPassword = require("./data-aws-secretsmanager-random-password");
exports.dataAwsSecretsmanagerSecret = require("./data-aws-secretsmanager-secret");
exports.dataAwsSecretsmanagerSecretRotation = require("./data-aws-secretsmanager-secret-rotation");
exports.dataAwsSecretsmanagerSecretVersion = require("./data-aws-secretsmanager-secret-version");
exports.dataAwsSecretsmanagerSecrets = require("./data-aws-secretsmanager-secrets");
exports.dataAwsSecurityGroup = require("./data-aws-security-group");
exports.dataAwsSecurityGroups = require("./data-aws-security-groups");
exports.dataAwsServerlessapplicationrepositoryApplication = require("./data-aws-serverlessapplicationrepository-application");
exports.dataAwsService = require("./data-aws-service");
exports.dataAwsServiceDiscoveryDnsNamespace = require("./data-aws-service-discovery-dns-namespace");
exports.dataAwsServiceDiscoveryHttpNamespace = require("./data-aws-service-discovery-http-namespace");
exports.dataAwsServiceDiscoveryService = require("./data-aws-service-discovery-service");
exports.dataAwsServicecatalogConstraint = require("./data-aws-servicecatalog-constraint");
exports.dataAwsServicecatalogLaunchPaths = require("./data-aws-servicecatalog-launch-paths");
exports.dataAwsServicecatalogPortfolio = require("./data-aws-servicecatalog-portfolio");
exports.dataAwsServicecatalogPortfolioConstraints = require("./data-aws-servicecatalog-portfolio-constraints");
exports.dataAwsServicecatalogProduct = require("./data-aws-servicecatalog-product");
exports.dataAwsServicequotasService = require("./data-aws-servicequotas-service");
exports.dataAwsServicequotasServiceQuota = require("./data-aws-servicequotas-service-quota");
exports.dataAwsSesActiveReceiptRuleSet = require("./data-aws-ses-active-receipt-rule-set");
exports.dataAwsSesDomainIdentity = require("./data-aws-ses-domain-identity");
exports.dataAwsSesEmailIdentity = require("./data-aws-ses-email-identity");
exports.dataAwsSesv2DedicatedIpPool = require("./data-aws-sesv2-dedicated-ip-pool");
exports.dataAwsSfnActivity = require("./data-aws-sfn-activity");
exports.dataAwsSfnStateMachine = require("./data-aws-sfn-state-machine");
exports.dataAwsSignerSigningJob = require("./data-aws-signer-signing-job");
exports.dataAwsSignerSigningProfile = require("./data-aws-signer-signing-profile");
exports.dataAwsSnsTopic = require("./data-aws-sns-topic");
exports.dataAwsSqsQueue = require("./data-aws-sqs-queue");
exports.dataAwsSsmDocument = require("./data-aws-ssm-document");
exports.dataAwsSsmInstances = require("./data-aws-ssm-instances");
exports.dataAwsSsmMaintenanceWindows = require("./data-aws-ssm-maintenance-windows");
exports.dataAwsSsmParameter = require("./data-aws-ssm-parameter");
exports.dataAwsSsmParametersByPath = require("./data-aws-ssm-parameters-by-path");
exports.dataAwsSsmPatchBaseline = require("./data-aws-ssm-patch-baseline");
exports.dataAwsSsoadminInstances = require("./data-aws-ssoadmin-instances");
exports.dataAwsSsoadminPermissionSet = require("./data-aws-ssoadmin-permission-set");
exports.dataAwsStoragegatewayLocalDisk = require("./data-aws-storagegateway-local-disk");
exports.dataAwsSubnet = require("./data-aws-subnet");
exports.dataAwsSubnetIds = require("./data-aws-subnet-ids");
exports.dataAwsSubnets = require("./data-aws-subnets");
exports.dataAwsTransferServer = require("./data-aws-transfer-server");
exports.dataAwsVpc = require("./data-aws-vpc");
exports.dataAwsVpcDhcpOptions = require("./data-aws-vpc-dhcp-options");
exports.dataAwsVpcEndpoint = require("./data-aws-vpc-endpoint");
exports.dataAwsVpcEndpointService = require("./data-aws-vpc-endpoint-service");
exports.dataAwsVpcIpamPool = require("./data-aws-vpc-ipam-pool");
exports.dataAwsVpcIpamPoolCidrs = require("./data-aws-vpc-ipam-pool-cidrs");
exports.dataAwsVpcIpamPools = require("./data-aws-vpc-ipam-pools");
exports.dataAwsVpcIpamPreviewNextCidr = require("./data-aws-vpc-ipam-preview-next-cidr");
exports.dataAwsVpcPeeringConnection = require("./data-aws-vpc-peering-connection");
exports.dataAwsVpcPeeringConnections = require("./data-aws-vpc-peering-connections");
exports.dataAwsVpcs = require("./data-aws-vpcs");
exports.dataAwsVpnGateway = require("./data-aws-vpn-gateway");
exports.dataAwsWafIpset = require("./data-aws-waf-ipset");
exports.dataAwsWafRateBasedRule = require("./data-aws-waf-rate-based-rule");
exports.dataAwsWafRule = require("./data-aws-waf-rule");
exports.dataAwsWafSubscribedRuleGroup = require("./data-aws-waf-subscribed-rule-group");
exports.dataAwsWafWebAcl = require("./data-aws-waf-web-acl");
exports.dataAwsWafregionalIpset = require("./data-aws-wafregional-ipset");
exports.dataAwsWafregionalRateBasedRule = require("./data-aws-wafregional-rate-based-rule");
exports.dataAwsWafregionalRule = require("./data-aws-wafregional-rule");
exports.dataAwsWafregionalSubscribedRuleGroup = require("./data-aws-wafregional-subscribed-rule-group");
exports.dataAwsWafregionalWebAcl = require("./data-aws-wafregional-web-acl");
exports.dataAwsWafv2IpSet = require("./data-aws-wafv2-ip-set");
exports.dataAwsWafv2RegexPatternSet = require("./data-aws-wafv2-regex-pattern-set");
exports.dataAwsWafv2RuleGroup = require("./data-aws-wafv2-rule-group");
exports.dataAwsWafv2WebAcl = require("./data-aws-wafv2-web-acl");
exports.dataAwsWorkspacesBundle = require("./data-aws-workspaces-bundle");
exports.dataAwsWorkspacesDirectory = require("./data-aws-workspaces-directory");
exports.dataAwsWorkspacesImage = require("./data-aws-workspaces-image");
exports.dataAwsWorkspacesWorkspace = require("./data-aws-workspaces-workspace");
exports.provider = require("./provider");
//# sourceMappingURL=data:application/json;base64,