"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ec2TrafficMirrorFilterRule = exports.Ec2TrafficMirrorFilterRuleSourcePortRangeOutputReference = exports.ec2TrafficMirrorFilterRuleSourcePortRangeToTerraform = exports.Ec2TrafficMirrorFilterRuleDestinationPortRangeOutputReference = exports.ec2TrafficMirrorFilterRuleDestinationPortRangeToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function ec2TrafficMirrorFilterRuleDestinationPortRangeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        from_port: cdktf.numberToTerraform(struct.fromPort),
        to_port: cdktf.numberToTerraform(struct.toPort),
    };
}
exports.ec2TrafficMirrorFilterRuleDestinationPortRangeToTerraform = ec2TrafficMirrorFilterRuleDestinationPortRangeToTerraform;
class Ec2TrafficMirrorFilterRuleDestinationPortRangeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fromPort !== undefined) {
            hasAnyValues = true;
            internalValueResult.fromPort = this._fromPort;
        }
        if (this._toPort !== undefined) {
            hasAnyValues = true;
            internalValueResult.toPort = this._toPort;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fromPort = undefined;
            this._toPort = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fromPort = value.fromPort;
            this._toPort = value.toPort;
        }
    }
    get fromPort() {
        return this.getNumberAttribute('from_port');
    }
    set fromPort(value) {
        this._fromPort = value;
    }
    resetFromPort() {
        this._fromPort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fromPortInput() {
        return this._fromPort;
    }
    get toPort() {
        return this.getNumberAttribute('to_port');
    }
    set toPort(value) {
        this._toPort = value;
    }
    resetToPort() {
        this._toPort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get toPortInput() {
        return this._toPort;
    }
}
exports.Ec2TrafficMirrorFilterRuleDestinationPortRangeOutputReference = Ec2TrafficMirrorFilterRuleDestinationPortRangeOutputReference;
_a = JSII_RTTI_SYMBOL_1;
Ec2TrafficMirrorFilterRuleDestinationPortRangeOutputReference[_a] = { fqn: "@cdktf/provider-aws.ec2TrafficMirrorFilterRule.Ec2TrafficMirrorFilterRuleDestinationPortRangeOutputReference", version: "10.0.12" };
function ec2TrafficMirrorFilterRuleSourcePortRangeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        from_port: cdktf.numberToTerraform(struct.fromPort),
        to_port: cdktf.numberToTerraform(struct.toPort),
    };
}
exports.ec2TrafficMirrorFilterRuleSourcePortRangeToTerraform = ec2TrafficMirrorFilterRuleSourcePortRangeToTerraform;
class Ec2TrafficMirrorFilterRuleSourcePortRangeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fromPort !== undefined) {
            hasAnyValues = true;
            internalValueResult.fromPort = this._fromPort;
        }
        if (this._toPort !== undefined) {
            hasAnyValues = true;
            internalValueResult.toPort = this._toPort;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fromPort = undefined;
            this._toPort = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fromPort = value.fromPort;
            this._toPort = value.toPort;
        }
    }
    get fromPort() {
        return this.getNumberAttribute('from_port');
    }
    set fromPort(value) {
        this._fromPort = value;
    }
    resetFromPort() {
        this._fromPort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fromPortInput() {
        return this._fromPort;
    }
    get toPort() {
        return this.getNumberAttribute('to_port');
    }
    set toPort(value) {
        this._toPort = value;
    }
    resetToPort() {
        this._toPort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get toPortInput() {
        return this._toPort;
    }
}
exports.Ec2TrafficMirrorFilterRuleSourcePortRangeOutputReference = Ec2TrafficMirrorFilterRuleSourcePortRangeOutputReference;
_b = JSII_RTTI_SYMBOL_1;
Ec2TrafficMirrorFilterRuleSourcePortRangeOutputReference[_b] = { fqn: "@cdktf/provider-aws.ec2TrafficMirrorFilterRule.Ec2TrafficMirrorFilterRuleSourcePortRangeOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/ec2_traffic_mirror_filter_rule aws_ec2_traffic_mirror_filter_rule}
*/
class Ec2TrafficMirrorFilterRule extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/ec2_traffic_mirror_filter_rule aws_ec2_traffic_mirror_filter_rule} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Ec2TrafficMirrorFilterRuleConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_ec2_traffic_mirror_filter_rule',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // destination_port_range - computed: false, optional: true, required: false
        this._destinationPortRange = new Ec2TrafficMirrorFilterRuleDestinationPortRangeOutputReference(this, "destination_port_range");
        // source_port_range - computed: false, optional: true, required: false
        this._sourcePortRange = new Ec2TrafficMirrorFilterRuleSourcePortRangeOutputReference(this, "source_port_range");
        this._description = config.description;
        this._destinationCidrBlock = config.destinationCidrBlock;
        this._id = config.id;
        this._protocol = config.protocol;
        this._ruleAction = config.ruleAction;
        this._ruleNumber = config.ruleNumber;
        this._sourceCidrBlock = config.sourceCidrBlock;
        this._trafficDirection = config.trafficDirection;
        this._trafficMirrorFilterId = config.trafficMirrorFilterId;
        this._destinationPortRange.internalValue = config.destinationPortRange;
        this._sourcePortRange.internalValue = config.sourcePortRange;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get destinationCidrBlock() {
        return this.getStringAttribute('destination_cidr_block');
    }
    set destinationCidrBlock(value) {
        this._destinationCidrBlock = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationCidrBlockInput() {
        return this._destinationCidrBlock;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get protocol() {
        return this.getNumberAttribute('protocol');
    }
    set protocol(value) {
        this._protocol = value;
    }
    resetProtocol() {
        this._protocol = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get protocolInput() {
        return this._protocol;
    }
    get ruleAction() {
        return this.getStringAttribute('rule_action');
    }
    set ruleAction(value) {
        this._ruleAction = value;
    }
    // Temporarily expose input value. Use with caution.
    get ruleActionInput() {
        return this._ruleAction;
    }
    get ruleNumber() {
        return this.getNumberAttribute('rule_number');
    }
    set ruleNumber(value) {
        this._ruleNumber = value;
    }
    // Temporarily expose input value. Use with caution.
    get ruleNumberInput() {
        return this._ruleNumber;
    }
    get sourceCidrBlock() {
        return this.getStringAttribute('source_cidr_block');
    }
    set sourceCidrBlock(value) {
        this._sourceCidrBlock = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceCidrBlockInput() {
        return this._sourceCidrBlock;
    }
    get trafficDirection() {
        return this.getStringAttribute('traffic_direction');
    }
    set trafficDirection(value) {
        this._trafficDirection = value;
    }
    // Temporarily expose input value. Use with caution.
    get trafficDirectionInput() {
        return this._trafficDirection;
    }
    get trafficMirrorFilterId() {
        return this.getStringAttribute('traffic_mirror_filter_id');
    }
    set trafficMirrorFilterId(value) {
        this._trafficMirrorFilterId = value;
    }
    // Temporarily expose input value. Use with caution.
    get trafficMirrorFilterIdInput() {
        return this._trafficMirrorFilterId;
    }
    get destinationPortRange() {
        return this._destinationPortRange;
    }
    putDestinationPortRange(value) {
        this._destinationPortRange.internalValue = value;
    }
    resetDestinationPortRange() {
        this._destinationPortRange.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get destinationPortRangeInput() {
        return this._destinationPortRange.internalValue;
    }
    get sourcePortRange() {
        return this._sourcePortRange;
    }
    putSourcePortRange(value) {
        this._sourcePortRange.internalValue = value;
    }
    resetSourcePortRange() {
        this._sourcePortRange.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourcePortRangeInput() {
        return this._sourcePortRange.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            destination_cidr_block: cdktf.stringToTerraform(this._destinationCidrBlock),
            id: cdktf.stringToTerraform(this._id),
            protocol: cdktf.numberToTerraform(this._protocol),
            rule_action: cdktf.stringToTerraform(this._ruleAction),
            rule_number: cdktf.numberToTerraform(this._ruleNumber),
            source_cidr_block: cdktf.stringToTerraform(this._sourceCidrBlock),
            traffic_direction: cdktf.stringToTerraform(this._trafficDirection),
            traffic_mirror_filter_id: cdktf.stringToTerraform(this._trafficMirrorFilterId),
            destination_port_range: ec2TrafficMirrorFilterRuleDestinationPortRangeToTerraform(this._destinationPortRange.internalValue),
            source_port_range: ec2TrafficMirrorFilterRuleSourcePortRangeToTerraform(this._sourcePortRange.internalValue),
        };
    }
}
exports.Ec2TrafficMirrorFilterRule = Ec2TrafficMirrorFilterRule;
_c = JSII_RTTI_SYMBOL_1;
Ec2TrafficMirrorFilterRule[_c] = { fqn: "@cdktf/provider-aws.ec2TrafficMirrorFilterRule.Ec2TrafficMirrorFilterRule", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
Ec2TrafficMirrorFilterRule.tfResourceType = "aws_ec2_traffic_mirror_filter_rule";
//# sourceMappingURL=data:application/json;base64,