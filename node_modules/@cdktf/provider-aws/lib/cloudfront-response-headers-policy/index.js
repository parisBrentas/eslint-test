"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudfrontResponseHeadersPolicy = exports.CloudfrontResponseHeadersPolicyServerTimingHeadersConfigOutputReference = exports.cloudfrontResponseHeadersPolicyServerTimingHeadersConfigToTerraform = exports.CloudfrontResponseHeadersPolicySecurityHeadersConfigOutputReference = exports.cloudfrontResponseHeadersPolicySecurityHeadersConfigToTerraform = exports.CloudfrontResponseHeadersPolicySecurityHeadersConfigXssProtectionOutputReference = exports.cloudfrontResponseHeadersPolicySecurityHeadersConfigXssProtectionToTerraform = exports.CloudfrontResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityOutputReference = exports.cloudfrontResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityToTerraform = exports.CloudfrontResponseHeadersPolicySecurityHeadersConfigReferrerPolicyOutputReference = exports.cloudfrontResponseHeadersPolicySecurityHeadersConfigReferrerPolicyToTerraform = exports.CloudfrontResponseHeadersPolicySecurityHeadersConfigFrameOptionsOutputReference = exports.cloudfrontResponseHeadersPolicySecurityHeadersConfigFrameOptionsToTerraform = exports.CloudfrontResponseHeadersPolicySecurityHeadersConfigContentTypeOptionsOutputReference = exports.cloudfrontResponseHeadersPolicySecurityHeadersConfigContentTypeOptionsToTerraform = exports.CloudfrontResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyOutputReference = exports.cloudfrontResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyToTerraform = exports.CloudfrontResponseHeadersPolicyCustomHeadersConfigOutputReference = exports.cloudfrontResponseHeadersPolicyCustomHeadersConfigToTerraform = exports.CloudfrontResponseHeadersPolicyCustomHeadersConfigItemsList = exports.CloudfrontResponseHeadersPolicyCustomHeadersConfigItemsOutputReference = exports.cloudfrontResponseHeadersPolicyCustomHeadersConfigItemsToTerraform = exports.CloudfrontResponseHeadersPolicyCorsConfigOutputReference = exports.cloudfrontResponseHeadersPolicyCorsConfigToTerraform = exports.CloudfrontResponseHeadersPolicyCorsConfigAccessControlExposeHeadersOutputReference = exports.cloudfrontResponseHeadersPolicyCorsConfigAccessControlExposeHeadersToTerraform = exports.CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowOriginsOutputReference = exports.cloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowOriginsToTerraform = exports.CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowMethodsOutputReference = exports.cloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowMethodsToTerraform = exports.CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowHeadersOutputReference = exports.cloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowHeadersToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function cloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowHeadersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        items: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.items),
    };
}
exports.cloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowHeadersToTerraform = cloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowHeadersToTerraform;
class CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowHeadersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._items !== undefined) {
            hasAnyValues = true;
            internalValueResult.items = this._items;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._items = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._items = value.items;
        }
    }
    get items() {
        return cdktf.Fn.tolist(this.getListAttribute('items'));
    }
    set items(value) {
        this._items = value;
    }
    resetItems() {
        this._items = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get itemsInput() {
        return this._items;
    }
}
exports.CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowHeadersOutputReference = CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowHeadersOutputReference;
_a = JSII_RTTI_SYMBOL_1;
CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowHeadersOutputReference[_a] = { fqn: "@cdktf/provider-aws.cloudfrontResponseHeadersPolicy.CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowHeadersOutputReference", version: "10.0.12" };
function cloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowMethodsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        items: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.items),
    };
}
exports.cloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowMethodsToTerraform = cloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowMethodsToTerraform;
class CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowMethodsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._items !== undefined) {
            hasAnyValues = true;
            internalValueResult.items = this._items;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._items = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._items = value.items;
        }
    }
    get items() {
        return cdktf.Fn.tolist(this.getListAttribute('items'));
    }
    set items(value) {
        this._items = value;
    }
    resetItems() {
        this._items = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get itemsInput() {
        return this._items;
    }
}
exports.CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowMethodsOutputReference = CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowMethodsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowMethodsOutputReference[_b] = { fqn: "@cdktf/provider-aws.cloudfrontResponseHeadersPolicy.CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowMethodsOutputReference", version: "10.0.12" };
function cloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowOriginsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        items: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.items),
    };
}
exports.cloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowOriginsToTerraform = cloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowOriginsToTerraform;
class CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowOriginsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._items !== undefined) {
            hasAnyValues = true;
            internalValueResult.items = this._items;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._items = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._items = value.items;
        }
    }
    get items() {
        return cdktf.Fn.tolist(this.getListAttribute('items'));
    }
    set items(value) {
        this._items = value;
    }
    resetItems() {
        this._items = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get itemsInput() {
        return this._items;
    }
}
exports.CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowOriginsOutputReference = CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowOriginsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowOriginsOutputReference[_c] = { fqn: "@cdktf/provider-aws.cloudfrontResponseHeadersPolicy.CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowOriginsOutputReference", version: "10.0.12" };
function cloudfrontResponseHeadersPolicyCorsConfigAccessControlExposeHeadersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        items: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.items),
    };
}
exports.cloudfrontResponseHeadersPolicyCorsConfigAccessControlExposeHeadersToTerraform = cloudfrontResponseHeadersPolicyCorsConfigAccessControlExposeHeadersToTerraform;
class CloudfrontResponseHeadersPolicyCorsConfigAccessControlExposeHeadersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._items !== undefined) {
            hasAnyValues = true;
            internalValueResult.items = this._items;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._items = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._items = value.items;
        }
    }
    get items() {
        return cdktf.Fn.tolist(this.getListAttribute('items'));
    }
    set items(value) {
        this._items = value;
    }
    resetItems() {
        this._items = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get itemsInput() {
        return this._items;
    }
}
exports.CloudfrontResponseHeadersPolicyCorsConfigAccessControlExposeHeadersOutputReference = CloudfrontResponseHeadersPolicyCorsConfigAccessControlExposeHeadersOutputReference;
_d = JSII_RTTI_SYMBOL_1;
CloudfrontResponseHeadersPolicyCorsConfigAccessControlExposeHeadersOutputReference[_d] = { fqn: "@cdktf/provider-aws.cloudfrontResponseHeadersPolicy.CloudfrontResponseHeadersPolicyCorsConfigAccessControlExposeHeadersOutputReference", version: "10.0.12" };
function cloudfrontResponseHeadersPolicyCorsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_control_allow_credentials: cdktf.booleanToTerraform(struct.accessControlAllowCredentials),
        access_control_max_age_sec: cdktf.numberToTerraform(struct.accessControlMaxAgeSec),
        origin_override: cdktf.booleanToTerraform(struct.originOverride),
        access_control_allow_headers: cloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowHeadersToTerraform(struct.accessControlAllowHeaders),
        access_control_allow_methods: cloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowMethodsToTerraform(struct.accessControlAllowMethods),
        access_control_allow_origins: cloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowOriginsToTerraform(struct.accessControlAllowOrigins),
        access_control_expose_headers: cloudfrontResponseHeadersPolicyCorsConfigAccessControlExposeHeadersToTerraform(struct.accessControlExposeHeaders),
    };
}
exports.cloudfrontResponseHeadersPolicyCorsConfigToTerraform = cloudfrontResponseHeadersPolicyCorsConfigToTerraform;
class CloudfrontResponseHeadersPolicyCorsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // access_control_allow_headers - computed: false, optional: false, required: true
        this._accessControlAllowHeaders = new CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowHeadersOutputReference(this, "access_control_allow_headers");
        // access_control_allow_methods - computed: false, optional: false, required: true
        this._accessControlAllowMethods = new CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowMethodsOutputReference(this, "access_control_allow_methods");
        // access_control_allow_origins - computed: false, optional: false, required: true
        this._accessControlAllowOrigins = new CloudfrontResponseHeadersPolicyCorsConfigAccessControlAllowOriginsOutputReference(this, "access_control_allow_origins");
        // access_control_expose_headers - computed: false, optional: true, required: false
        this._accessControlExposeHeaders = new CloudfrontResponseHeadersPolicyCorsConfigAccessControlExposeHeadersOutputReference(this, "access_control_expose_headers");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessControlAllowCredentials !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessControlAllowCredentials = this._accessControlAllowCredentials;
        }
        if (this._accessControlMaxAgeSec !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessControlMaxAgeSec = this._accessControlMaxAgeSec;
        }
        if (this._originOverride !== undefined) {
            hasAnyValues = true;
            internalValueResult.originOverride = this._originOverride;
        }
        if (this._accessControlAllowHeaders?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessControlAllowHeaders = this._accessControlAllowHeaders?.internalValue;
        }
        if (this._accessControlAllowMethods?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessControlAllowMethods = this._accessControlAllowMethods?.internalValue;
        }
        if (this._accessControlAllowOrigins?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessControlAllowOrigins = this._accessControlAllowOrigins?.internalValue;
        }
        if (this._accessControlExposeHeaders?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessControlExposeHeaders = this._accessControlExposeHeaders?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessControlAllowCredentials = undefined;
            this._accessControlMaxAgeSec = undefined;
            this._originOverride = undefined;
            this._accessControlAllowHeaders.internalValue = undefined;
            this._accessControlAllowMethods.internalValue = undefined;
            this._accessControlAllowOrigins.internalValue = undefined;
            this._accessControlExposeHeaders.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessControlAllowCredentials = value.accessControlAllowCredentials;
            this._accessControlMaxAgeSec = value.accessControlMaxAgeSec;
            this._originOverride = value.originOverride;
            this._accessControlAllowHeaders.internalValue = value.accessControlAllowHeaders;
            this._accessControlAllowMethods.internalValue = value.accessControlAllowMethods;
            this._accessControlAllowOrigins.internalValue = value.accessControlAllowOrigins;
            this._accessControlExposeHeaders.internalValue = value.accessControlExposeHeaders;
        }
    }
    get accessControlAllowCredentials() {
        return this.getBooleanAttribute('access_control_allow_credentials');
    }
    set accessControlAllowCredentials(value) {
        this._accessControlAllowCredentials = value;
    }
    // Temporarily expose input value. Use with caution.
    get accessControlAllowCredentialsInput() {
        return this._accessControlAllowCredentials;
    }
    get accessControlMaxAgeSec() {
        return this.getNumberAttribute('access_control_max_age_sec');
    }
    set accessControlMaxAgeSec(value) {
        this._accessControlMaxAgeSec = value;
    }
    resetAccessControlMaxAgeSec() {
        this._accessControlMaxAgeSec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessControlMaxAgeSecInput() {
        return this._accessControlMaxAgeSec;
    }
    get originOverride() {
        return this.getBooleanAttribute('origin_override');
    }
    set originOverride(value) {
        this._originOverride = value;
    }
    // Temporarily expose input value. Use with caution.
    get originOverrideInput() {
        return this._originOverride;
    }
    get accessControlAllowHeaders() {
        return this._accessControlAllowHeaders;
    }
    putAccessControlAllowHeaders(value) {
        this._accessControlAllowHeaders.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get accessControlAllowHeadersInput() {
        return this._accessControlAllowHeaders.internalValue;
    }
    get accessControlAllowMethods() {
        return this._accessControlAllowMethods;
    }
    putAccessControlAllowMethods(value) {
        this._accessControlAllowMethods.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get accessControlAllowMethodsInput() {
        return this._accessControlAllowMethods.internalValue;
    }
    get accessControlAllowOrigins() {
        return this._accessControlAllowOrigins;
    }
    putAccessControlAllowOrigins(value) {
        this._accessControlAllowOrigins.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get accessControlAllowOriginsInput() {
        return this._accessControlAllowOrigins.internalValue;
    }
    get accessControlExposeHeaders() {
        return this._accessControlExposeHeaders;
    }
    putAccessControlExposeHeaders(value) {
        this._accessControlExposeHeaders.internalValue = value;
    }
    resetAccessControlExposeHeaders() {
        this._accessControlExposeHeaders.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessControlExposeHeadersInput() {
        return this._accessControlExposeHeaders.internalValue;
    }
}
exports.CloudfrontResponseHeadersPolicyCorsConfigOutputReference = CloudfrontResponseHeadersPolicyCorsConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
CloudfrontResponseHeadersPolicyCorsConfigOutputReference[_e] = { fqn: "@cdktf/provider-aws.cloudfrontResponseHeadersPolicy.CloudfrontResponseHeadersPolicyCorsConfigOutputReference", version: "10.0.12" };
function cloudfrontResponseHeadersPolicyCustomHeadersConfigItemsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header: cdktf.stringToTerraform(struct.header),
        override: cdktf.booleanToTerraform(struct.override),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.cloudfrontResponseHeadersPolicyCustomHeadersConfigItemsToTerraform = cloudfrontResponseHeadersPolicyCustomHeadersConfigItemsToTerraform;
class CloudfrontResponseHeadersPolicyCustomHeadersConfigItemsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._header !== undefined) {
            hasAnyValues = true;
            internalValueResult.header = this._header;
        }
        if (this._override !== undefined) {
            hasAnyValues = true;
            internalValueResult.override = this._override;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._header = undefined;
            this._override = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._header = value.header;
            this._override = value.override;
            this._value = value.value;
        }
    }
    get header() {
        return this.getStringAttribute('header');
    }
    set header(value) {
        this._header = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerInput() {
        return this._header;
    }
    get override() {
        return this.getBooleanAttribute('override');
    }
    set override(value) {
        this._override = value;
    }
    // Temporarily expose input value. Use with caution.
    get overrideInput() {
        return this._override;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.CloudfrontResponseHeadersPolicyCustomHeadersConfigItemsOutputReference = CloudfrontResponseHeadersPolicyCustomHeadersConfigItemsOutputReference;
_f = JSII_RTTI_SYMBOL_1;
CloudfrontResponseHeadersPolicyCustomHeadersConfigItemsOutputReference[_f] = { fqn: "@cdktf/provider-aws.cloudfrontResponseHeadersPolicy.CloudfrontResponseHeadersPolicyCustomHeadersConfigItemsOutputReference", version: "10.0.12" };
class CloudfrontResponseHeadersPolicyCustomHeadersConfigItemsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudfrontResponseHeadersPolicyCustomHeadersConfigItemsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudfrontResponseHeadersPolicyCustomHeadersConfigItemsList = CloudfrontResponseHeadersPolicyCustomHeadersConfigItemsList;
_g = JSII_RTTI_SYMBOL_1;
CloudfrontResponseHeadersPolicyCustomHeadersConfigItemsList[_g] = { fqn: "@cdktf/provider-aws.cloudfrontResponseHeadersPolicy.CloudfrontResponseHeadersPolicyCustomHeadersConfigItemsList", version: "10.0.12" };
function cloudfrontResponseHeadersPolicyCustomHeadersConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        items: cdktf.listMapper(cloudfrontResponseHeadersPolicyCustomHeadersConfigItemsToTerraform, true)(struct.items),
    };
}
exports.cloudfrontResponseHeadersPolicyCustomHeadersConfigToTerraform = cloudfrontResponseHeadersPolicyCustomHeadersConfigToTerraform;
class CloudfrontResponseHeadersPolicyCustomHeadersConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // items - computed: false, optional: true, required: false
        this._items = new CloudfrontResponseHeadersPolicyCustomHeadersConfigItemsList(this, "items", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._items?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.items = this._items?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._items.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._items.internalValue = value.items;
        }
    }
    get items() {
        return this._items;
    }
    putItems(value) {
        this._items.internalValue = value;
    }
    resetItems() {
        this._items.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get itemsInput() {
        return this._items.internalValue;
    }
}
exports.CloudfrontResponseHeadersPolicyCustomHeadersConfigOutputReference = CloudfrontResponseHeadersPolicyCustomHeadersConfigOutputReference;
_h = JSII_RTTI_SYMBOL_1;
CloudfrontResponseHeadersPolicyCustomHeadersConfigOutputReference[_h] = { fqn: "@cdktf/provider-aws.cloudfrontResponseHeadersPolicy.CloudfrontResponseHeadersPolicyCustomHeadersConfigOutputReference", version: "10.0.12" };
function cloudfrontResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        content_security_policy: cdktf.stringToTerraform(struct.contentSecurityPolicy),
        override: cdktf.booleanToTerraform(struct.override),
    };
}
exports.cloudfrontResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyToTerraform = cloudfrontResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyToTerraform;
class CloudfrontResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._contentSecurityPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.contentSecurityPolicy = this._contentSecurityPolicy;
        }
        if (this._override !== undefined) {
            hasAnyValues = true;
            internalValueResult.override = this._override;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._contentSecurityPolicy = undefined;
            this._override = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._contentSecurityPolicy = value.contentSecurityPolicy;
            this._override = value.override;
        }
    }
    get contentSecurityPolicy() {
        return this.getStringAttribute('content_security_policy');
    }
    set contentSecurityPolicy(value) {
        this._contentSecurityPolicy = value;
    }
    // Temporarily expose input value. Use with caution.
    get contentSecurityPolicyInput() {
        return this._contentSecurityPolicy;
    }
    get override() {
        return this.getBooleanAttribute('override');
    }
    set override(value) {
        this._override = value;
    }
    // Temporarily expose input value. Use with caution.
    get overrideInput() {
        return this._override;
    }
}
exports.CloudfrontResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyOutputReference = CloudfrontResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyOutputReference;
_j = JSII_RTTI_SYMBOL_1;
CloudfrontResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyOutputReference[_j] = { fqn: "@cdktf/provider-aws.cloudfrontResponseHeadersPolicy.CloudfrontResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyOutputReference", version: "10.0.12" };
function cloudfrontResponseHeadersPolicySecurityHeadersConfigContentTypeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        override: cdktf.booleanToTerraform(struct.override),
    };
}
exports.cloudfrontResponseHeadersPolicySecurityHeadersConfigContentTypeOptionsToTerraform = cloudfrontResponseHeadersPolicySecurityHeadersConfigContentTypeOptionsToTerraform;
class CloudfrontResponseHeadersPolicySecurityHeadersConfigContentTypeOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._override !== undefined) {
            hasAnyValues = true;
            internalValueResult.override = this._override;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._override = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._override = value.override;
        }
    }
    get override() {
        return this.getBooleanAttribute('override');
    }
    set override(value) {
        this._override = value;
    }
    // Temporarily expose input value. Use with caution.
    get overrideInput() {
        return this._override;
    }
}
exports.CloudfrontResponseHeadersPolicySecurityHeadersConfigContentTypeOptionsOutputReference = CloudfrontResponseHeadersPolicySecurityHeadersConfigContentTypeOptionsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
CloudfrontResponseHeadersPolicySecurityHeadersConfigContentTypeOptionsOutputReference[_k] = { fqn: "@cdktf/provider-aws.cloudfrontResponseHeadersPolicy.CloudfrontResponseHeadersPolicySecurityHeadersConfigContentTypeOptionsOutputReference", version: "10.0.12" };
function cloudfrontResponseHeadersPolicySecurityHeadersConfigFrameOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        frame_option: cdktf.stringToTerraform(struct.frameOption),
        override: cdktf.booleanToTerraform(struct.override),
    };
}
exports.cloudfrontResponseHeadersPolicySecurityHeadersConfigFrameOptionsToTerraform = cloudfrontResponseHeadersPolicySecurityHeadersConfigFrameOptionsToTerraform;
class CloudfrontResponseHeadersPolicySecurityHeadersConfigFrameOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._frameOption !== undefined) {
            hasAnyValues = true;
            internalValueResult.frameOption = this._frameOption;
        }
        if (this._override !== undefined) {
            hasAnyValues = true;
            internalValueResult.override = this._override;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._frameOption = undefined;
            this._override = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._frameOption = value.frameOption;
            this._override = value.override;
        }
    }
    get frameOption() {
        return this.getStringAttribute('frame_option');
    }
    set frameOption(value) {
        this._frameOption = value;
    }
    // Temporarily expose input value. Use with caution.
    get frameOptionInput() {
        return this._frameOption;
    }
    get override() {
        return this.getBooleanAttribute('override');
    }
    set override(value) {
        this._override = value;
    }
    // Temporarily expose input value. Use with caution.
    get overrideInput() {
        return this._override;
    }
}
exports.CloudfrontResponseHeadersPolicySecurityHeadersConfigFrameOptionsOutputReference = CloudfrontResponseHeadersPolicySecurityHeadersConfigFrameOptionsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
CloudfrontResponseHeadersPolicySecurityHeadersConfigFrameOptionsOutputReference[_l] = { fqn: "@cdktf/provider-aws.cloudfrontResponseHeadersPolicy.CloudfrontResponseHeadersPolicySecurityHeadersConfigFrameOptionsOutputReference", version: "10.0.12" };
function cloudfrontResponseHeadersPolicySecurityHeadersConfigReferrerPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        override: cdktf.booleanToTerraform(struct.override),
        referrer_policy: cdktf.stringToTerraform(struct.referrerPolicy),
    };
}
exports.cloudfrontResponseHeadersPolicySecurityHeadersConfigReferrerPolicyToTerraform = cloudfrontResponseHeadersPolicySecurityHeadersConfigReferrerPolicyToTerraform;
class CloudfrontResponseHeadersPolicySecurityHeadersConfigReferrerPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._override !== undefined) {
            hasAnyValues = true;
            internalValueResult.override = this._override;
        }
        if (this._referrerPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.referrerPolicy = this._referrerPolicy;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._override = undefined;
            this._referrerPolicy = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._override = value.override;
            this._referrerPolicy = value.referrerPolicy;
        }
    }
    get override() {
        return this.getBooleanAttribute('override');
    }
    set override(value) {
        this._override = value;
    }
    // Temporarily expose input value. Use with caution.
    get overrideInput() {
        return this._override;
    }
    get referrerPolicy() {
        return this.getStringAttribute('referrer_policy');
    }
    set referrerPolicy(value) {
        this._referrerPolicy = value;
    }
    // Temporarily expose input value. Use with caution.
    get referrerPolicyInput() {
        return this._referrerPolicy;
    }
}
exports.CloudfrontResponseHeadersPolicySecurityHeadersConfigReferrerPolicyOutputReference = CloudfrontResponseHeadersPolicySecurityHeadersConfigReferrerPolicyOutputReference;
_m = JSII_RTTI_SYMBOL_1;
CloudfrontResponseHeadersPolicySecurityHeadersConfigReferrerPolicyOutputReference[_m] = { fqn: "@cdktf/provider-aws.cloudfrontResponseHeadersPolicy.CloudfrontResponseHeadersPolicySecurityHeadersConfigReferrerPolicyOutputReference", version: "10.0.12" };
function cloudfrontResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_control_max_age_sec: cdktf.numberToTerraform(struct.accessControlMaxAgeSec),
        include_subdomains: cdktf.booleanToTerraform(struct.includeSubdomains),
        override: cdktf.booleanToTerraform(struct.override),
        preload: cdktf.booleanToTerraform(struct.preload),
    };
}
exports.cloudfrontResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityToTerraform = cloudfrontResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityToTerraform;
class CloudfrontResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessControlMaxAgeSec !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessControlMaxAgeSec = this._accessControlMaxAgeSec;
        }
        if (this._includeSubdomains !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeSubdomains = this._includeSubdomains;
        }
        if (this._override !== undefined) {
            hasAnyValues = true;
            internalValueResult.override = this._override;
        }
        if (this._preload !== undefined) {
            hasAnyValues = true;
            internalValueResult.preload = this._preload;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessControlMaxAgeSec = undefined;
            this._includeSubdomains = undefined;
            this._override = undefined;
            this._preload = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessControlMaxAgeSec = value.accessControlMaxAgeSec;
            this._includeSubdomains = value.includeSubdomains;
            this._override = value.override;
            this._preload = value.preload;
        }
    }
    get accessControlMaxAgeSec() {
        return this.getNumberAttribute('access_control_max_age_sec');
    }
    set accessControlMaxAgeSec(value) {
        this._accessControlMaxAgeSec = value;
    }
    // Temporarily expose input value. Use with caution.
    get accessControlMaxAgeSecInput() {
        return this._accessControlMaxAgeSec;
    }
    get includeSubdomains() {
        return this.getBooleanAttribute('include_subdomains');
    }
    set includeSubdomains(value) {
        this._includeSubdomains = value;
    }
    resetIncludeSubdomains() {
        this._includeSubdomains = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeSubdomainsInput() {
        return this._includeSubdomains;
    }
    get override() {
        return this.getBooleanAttribute('override');
    }
    set override(value) {
        this._override = value;
    }
    // Temporarily expose input value. Use with caution.
    get overrideInput() {
        return this._override;
    }
    get preload() {
        return this.getBooleanAttribute('preload');
    }
    set preload(value) {
        this._preload = value;
    }
    resetPreload() {
        this._preload = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preloadInput() {
        return this._preload;
    }
}
exports.CloudfrontResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityOutputReference = CloudfrontResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityOutputReference;
_o = JSII_RTTI_SYMBOL_1;
CloudfrontResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityOutputReference[_o] = { fqn: "@cdktf/provider-aws.cloudfrontResponseHeadersPolicy.CloudfrontResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityOutputReference", version: "10.0.12" };
function cloudfrontResponseHeadersPolicySecurityHeadersConfigXssProtectionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mode_block: cdktf.booleanToTerraform(struct.modeBlock),
        override: cdktf.booleanToTerraform(struct.override),
        protection: cdktf.booleanToTerraform(struct.protection),
        report_uri: cdktf.stringToTerraform(struct.reportUri),
    };
}
exports.cloudfrontResponseHeadersPolicySecurityHeadersConfigXssProtectionToTerraform = cloudfrontResponseHeadersPolicySecurityHeadersConfigXssProtectionToTerraform;
class CloudfrontResponseHeadersPolicySecurityHeadersConfigXssProtectionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._modeBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.modeBlock = this._modeBlock;
        }
        if (this._override !== undefined) {
            hasAnyValues = true;
            internalValueResult.override = this._override;
        }
        if (this._protection !== undefined) {
            hasAnyValues = true;
            internalValueResult.protection = this._protection;
        }
        if (this._reportUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.reportUri = this._reportUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._modeBlock = undefined;
            this._override = undefined;
            this._protection = undefined;
            this._reportUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._modeBlock = value.modeBlock;
            this._override = value.override;
            this._protection = value.protection;
            this._reportUri = value.reportUri;
        }
    }
    get modeBlock() {
        return this.getBooleanAttribute('mode_block');
    }
    set modeBlock(value) {
        this._modeBlock = value;
    }
    resetModeBlock() {
        this._modeBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modeBlockInput() {
        return this._modeBlock;
    }
    get override() {
        return this.getBooleanAttribute('override');
    }
    set override(value) {
        this._override = value;
    }
    // Temporarily expose input value. Use with caution.
    get overrideInput() {
        return this._override;
    }
    get protection() {
        return this.getBooleanAttribute('protection');
    }
    set protection(value) {
        this._protection = value;
    }
    // Temporarily expose input value. Use with caution.
    get protectionInput() {
        return this._protection;
    }
    get reportUri() {
        return this.getStringAttribute('report_uri');
    }
    set reportUri(value) {
        this._reportUri = value;
    }
    resetReportUri() {
        this._reportUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get reportUriInput() {
        return this._reportUri;
    }
}
exports.CloudfrontResponseHeadersPolicySecurityHeadersConfigXssProtectionOutputReference = CloudfrontResponseHeadersPolicySecurityHeadersConfigXssProtectionOutputReference;
_p = JSII_RTTI_SYMBOL_1;
CloudfrontResponseHeadersPolicySecurityHeadersConfigXssProtectionOutputReference[_p] = { fqn: "@cdktf/provider-aws.cloudfrontResponseHeadersPolicy.CloudfrontResponseHeadersPolicySecurityHeadersConfigXssProtectionOutputReference", version: "10.0.12" };
function cloudfrontResponseHeadersPolicySecurityHeadersConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        content_security_policy: cloudfrontResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyToTerraform(struct.contentSecurityPolicy),
        content_type_options: cloudfrontResponseHeadersPolicySecurityHeadersConfigContentTypeOptionsToTerraform(struct.contentTypeOptions),
        frame_options: cloudfrontResponseHeadersPolicySecurityHeadersConfigFrameOptionsToTerraform(struct.frameOptions),
        referrer_policy: cloudfrontResponseHeadersPolicySecurityHeadersConfigReferrerPolicyToTerraform(struct.referrerPolicy),
        strict_transport_security: cloudfrontResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityToTerraform(struct.strictTransportSecurity),
        xss_protection: cloudfrontResponseHeadersPolicySecurityHeadersConfigXssProtectionToTerraform(struct.xssProtection),
    };
}
exports.cloudfrontResponseHeadersPolicySecurityHeadersConfigToTerraform = cloudfrontResponseHeadersPolicySecurityHeadersConfigToTerraform;
class CloudfrontResponseHeadersPolicySecurityHeadersConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // content_security_policy - computed: false, optional: true, required: false
        this._contentSecurityPolicy = new CloudfrontResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyOutputReference(this, "content_security_policy");
        // content_type_options - computed: false, optional: true, required: false
        this._contentTypeOptions = new CloudfrontResponseHeadersPolicySecurityHeadersConfigContentTypeOptionsOutputReference(this, "content_type_options");
        // frame_options - computed: false, optional: true, required: false
        this._frameOptions = new CloudfrontResponseHeadersPolicySecurityHeadersConfigFrameOptionsOutputReference(this, "frame_options");
        // referrer_policy - computed: false, optional: true, required: false
        this._referrerPolicy = new CloudfrontResponseHeadersPolicySecurityHeadersConfigReferrerPolicyOutputReference(this, "referrer_policy");
        // strict_transport_security - computed: false, optional: true, required: false
        this._strictTransportSecurity = new CloudfrontResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityOutputReference(this, "strict_transport_security");
        // xss_protection - computed: false, optional: true, required: false
        this._xssProtection = new CloudfrontResponseHeadersPolicySecurityHeadersConfigXssProtectionOutputReference(this, "xss_protection");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._contentSecurityPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.contentSecurityPolicy = this._contentSecurityPolicy?.internalValue;
        }
        if (this._contentTypeOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.contentTypeOptions = this._contentTypeOptions?.internalValue;
        }
        if (this._frameOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.frameOptions = this._frameOptions?.internalValue;
        }
        if (this._referrerPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.referrerPolicy = this._referrerPolicy?.internalValue;
        }
        if (this._strictTransportSecurity?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.strictTransportSecurity = this._strictTransportSecurity?.internalValue;
        }
        if (this._xssProtection?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.xssProtection = this._xssProtection?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._contentSecurityPolicy.internalValue = undefined;
            this._contentTypeOptions.internalValue = undefined;
            this._frameOptions.internalValue = undefined;
            this._referrerPolicy.internalValue = undefined;
            this._strictTransportSecurity.internalValue = undefined;
            this._xssProtection.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._contentSecurityPolicy.internalValue = value.contentSecurityPolicy;
            this._contentTypeOptions.internalValue = value.contentTypeOptions;
            this._frameOptions.internalValue = value.frameOptions;
            this._referrerPolicy.internalValue = value.referrerPolicy;
            this._strictTransportSecurity.internalValue = value.strictTransportSecurity;
            this._xssProtection.internalValue = value.xssProtection;
        }
    }
    get contentSecurityPolicy() {
        return this._contentSecurityPolicy;
    }
    putContentSecurityPolicy(value) {
        this._contentSecurityPolicy.internalValue = value;
    }
    resetContentSecurityPolicy() {
        this._contentSecurityPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentSecurityPolicyInput() {
        return this._contentSecurityPolicy.internalValue;
    }
    get contentTypeOptions() {
        return this._contentTypeOptions;
    }
    putContentTypeOptions(value) {
        this._contentTypeOptions.internalValue = value;
    }
    resetContentTypeOptions() {
        this._contentTypeOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentTypeOptionsInput() {
        return this._contentTypeOptions.internalValue;
    }
    get frameOptions() {
        return this._frameOptions;
    }
    putFrameOptions(value) {
        this._frameOptions.internalValue = value;
    }
    resetFrameOptions() {
        this._frameOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get frameOptionsInput() {
        return this._frameOptions.internalValue;
    }
    get referrerPolicy() {
        return this._referrerPolicy;
    }
    putReferrerPolicy(value) {
        this._referrerPolicy.internalValue = value;
    }
    resetReferrerPolicy() {
        this._referrerPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get referrerPolicyInput() {
        return this._referrerPolicy.internalValue;
    }
    get strictTransportSecurity() {
        return this._strictTransportSecurity;
    }
    putStrictTransportSecurity(value) {
        this._strictTransportSecurity.internalValue = value;
    }
    resetStrictTransportSecurity() {
        this._strictTransportSecurity.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get strictTransportSecurityInput() {
        return this._strictTransportSecurity.internalValue;
    }
    get xssProtection() {
        return this._xssProtection;
    }
    putXssProtection(value) {
        this._xssProtection.internalValue = value;
    }
    resetXssProtection() {
        this._xssProtection.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get xssProtectionInput() {
        return this._xssProtection.internalValue;
    }
}
exports.CloudfrontResponseHeadersPolicySecurityHeadersConfigOutputReference = CloudfrontResponseHeadersPolicySecurityHeadersConfigOutputReference;
_q = JSII_RTTI_SYMBOL_1;
CloudfrontResponseHeadersPolicySecurityHeadersConfigOutputReference[_q] = { fqn: "@cdktf/provider-aws.cloudfrontResponseHeadersPolicy.CloudfrontResponseHeadersPolicySecurityHeadersConfigOutputReference", version: "10.0.12" };
function cloudfrontResponseHeadersPolicyServerTimingHeadersConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        sampling_rate: cdktf.numberToTerraform(struct.samplingRate),
    };
}
exports.cloudfrontResponseHeadersPolicyServerTimingHeadersConfigToTerraform = cloudfrontResponseHeadersPolicyServerTimingHeadersConfigToTerraform;
class CloudfrontResponseHeadersPolicyServerTimingHeadersConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._samplingRate !== undefined) {
            hasAnyValues = true;
            internalValueResult.samplingRate = this._samplingRate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._samplingRate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._samplingRate = value.samplingRate;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get samplingRate() {
        return this.getNumberAttribute('sampling_rate');
    }
    set samplingRate(value) {
        this._samplingRate = value;
    }
    // Temporarily expose input value. Use with caution.
    get samplingRateInput() {
        return this._samplingRate;
    }
}
exports.CloudfrontResponseHeadersPolicyServerTimingHeadersConfigOutputReference = CloudfrontResponseHeadersPolicyServerTimingHeadersConfigOutputReference;
_r = JSII_RTTI_SYMBOL_1;
CloudfrontResponseHeadersPolicyServerTimingHeadersConfigOutputReference[_r] = { fqn: "@cdktf/provider-aws.cloudfrontResponseHeadersPolicy.CloudfrontResponseHeadersPolicyServerTimingHeadersConfigOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/cloudfront_response_headers_policy aws_cloudfront_response_headers_policy}
*/
class CloudfrontResponseHeadersPolicy extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/cloudfront_response_headers_policy aws_cloudfront_response_headers_policy} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CloudfrontResponseHeadersPolicyConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_cloudfront_response_headers_policy',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // cors_config - computed: false, optional: true, required: false
        this._corsConfig = new CloudfrontResponseHeadersPolicyCorsConfigOutputReference(this, "cors_config");
        // custom_headers_config - computed: false, optional: true, required: false
        this._customHeadersConfig = new CloudfrontResponseHeadersPolicyCustomHeadersConfigOutputReference(this, "custom_headers_config");
        // security_headers_config - computed: false, optional: true, required: false
        this._securityHeadersConfig = new CloudfrontResponseHeadersPolicySecurityHeadersConfigOutputReference(this, "security_headers_config");
        // server_timing_headers_config - computed: false, optional: true, required: false
        this._serverTimingHeadersConfig = new CloudfrontResponseHeadersPolicyServerTimingHeadersConfigOutputReference(this, "server_timing_headers_config");
        this._comment = config.comment;
        this._etag = config.etag;
        this._id = config.id;
        this._name = config.name;
        this._corsConfig.internalValue = config.corsConfig;
        this._customHeadersConfig.internalValue = config.customHeadersConfig;
        this._securityHeadersConfig.internalValue = config.securityHeadersConfig;
        this._serverTimingHeadersConfig.internalValue = config.serverTimingHeadersConfig;
    }
    get comment() {
        return this.getStringAttribute('comment');
    }
    set comment(value) {
        this._comment = value;
    }
    resetComment() {
        this._comment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get commentInput() {
        return this._comment;
    }
    get etag() {
        return this.getStringAttribute('etag');
    }
    set etag(value) {
        this._etag = value;
    }
    resetEtag() {
        this._etag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get etagInput() {
        return this._etag;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get corsConfig() {
        return this._corsConfig;
    }
    putCorsConfig(value) {
        this._corsConfig.internalValue = value;
    }
    resetCorsConfig() {
        this._corsConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get corsConfigInput() {
        return this._corsConfig.internalValue;
    }
    get customHeadersConfig() {
        return this._customHeadersConfig;
    }
    putCustomHeadersConfig(value) {
        this._customHeadersConfig.internalValue = value;
    }
    resetCustomHeadersConfig() {
        this._customHeadersConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customHeadersConfigInput() {
        return this._customHeadersConfig.internalValue;
    }
    get securityHeadersConfig() {
        return this._securityHeadersConfig;
    }
    putSecurityHeadersConfig(value) {
        this._securityHeadersConfig.internalValue = value;
    }
    resetSecurityHeadersConfig() {
        this._securityHeadersConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityHeadersConfigInput() {
        return this._securityHeadersConfig.internalValue;
    }
    get serverTimingHeadersConfig() {
        return this._serverTimingHeadersConfig;
    }
    putServerTimingHeadersConfig(value) {
        this._serverTimingHeadersConfig.internalValue = value;
    }
    resetServerTimingHeadersConfig() {
        this._serverTimingHeadersConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverTimingHeadersConfigInput() {
        return this._serverTimingHeadersConfig.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            comment: cdktf.stringToTerraform(this._comment),
            etag: cdktf.stringToTerraform(this._etag),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            cors_config: cloudfrontResponseHeadersPolicyCorsConfigToTerraform(this._corsConfig.internalValue),
            custom_headers_config: cloudfrontResponseHeadersPolicyCustomHeadersConfigToTerraform(this._customHeadersConfig.internalValue),
            security_headers_config: cloudfrontResponseHeadersPolicySecurityHeadersConfigToTerraform(this._securityHeadersConfig.internalValue),
            server_timing_headers_config: cloudfrontResponseHeadersPolicyServerTimingHeadersConfigToTerraform(this._serverTimingHeadersConfig.internalValue),
        };
    }
}
exports.CloudfrontResponseHeadersPolicy = CloudfrontResponseHeadersPolicy;
_s = JSII_RTTI_SYMBOL_1;
CloudfrontResponseHeadersPolicy[_s] = { fqn: "@cdktf/provider-aws.cloudfrontResponseHeadersPolicy.CloudfrontResponseHeadersPolicy", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
CloudfrontResponseHeadersPolicy.tfResourceType = "aws_cloudfront_response_headers_policy";
//# sourceMappingURL=data:application/json;base64,