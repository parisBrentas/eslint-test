"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultSubnet = exports.DefaultSubnetTimeoutsOutputReference = exports.defaultSubnetTimeoutsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function defaultSubnetTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
    };
}
exports.defaultSubnetTimeoutsToTerraform = defaultSubnetTimeoutsToTerraform;
class DefaultSubnetTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
}
exports.DefaultSubnetTimeoutsOutputReference = DefaultSubnetTimeoutsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DefaultSubnetTimeoutsOutputReference[_a] = { fqn: "@cdktf/provider-aws.defaultSubnet.DefaultSubnetTimeoutsOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/default_subnet aws_default_subnet}
*/
class DefaultSubnet extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/default_subnet aws_default_subnet} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DefaultSubnetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_default_subnet',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DefaultSubnetTimeoutsOutputReference(this, "timeouts");
        this._assignIpv6AddressOnCreation = config.assignIpv6AddressOnCreation;
        this._availabilityZone = config.availabilityZone;
        this._customerOwnedIpv4Pool = config.customerOwnedIpv4Pool;
        this._enableDns64 = config.enableDns64;
        this._enableResourceNameDnsARecordOnLaunch = config.enableResourceNameDnsARecordOnLaunch;
        this._enableResourceNameDnsAaaaRecordOnLaunch = config.enableResourceNameDnsAaaaRecordOnLaunch;
        this._forceDestroy = config.forceDestroy;
        this._id = config.id;
        this._ipv6CidrBlock = config.ipv6CidrBlock;
        this._ipv6Native = config.ipv6Native;
        this._mapCustomerOwnedIpOnLaunch = config.mapCustomerOwnedIpOnLaunch;
        this._mapPublicIpOnLaunch = config.mapPublicIpOnLaunch;
        this._privateDnsHostnameTypeOnLaunch = config.privateDnsHostnameTypeOnLaunch;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get assignIpv6AddressOnCreation() {
        return this.getBooleanAttribute('assign_ipv6_address_on_creation');
    }
    set assignIpv6AddressOnCreation(value) {
        this._assignIpv6AddressOnCreation = value;
    }
    resetAssignIpv6AddressOnCreation() {
        this._assignIpv6AddressOnCreation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get assignIpv6AddressOnCreationInput() {
        return this._assignIpv6AddressOnCreation;
    }
    get availabilityZone() {
        return this.getStringAttribute('availability_zone');
    }
    set availabilityZone(value) {
        this._availabilityZone = value;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityZoneInput() {
        return this._availabilityZone;
    }
    // availability_zone_id - computed: true, optional: false, required: false
    get availabilityZoneId() {
        return this.getStringAttribute('availability_zone_id');
    }
    // cidr_block - computed: true, optional: false, required: false
    get cidrBlock() {
        return this.getStringAttribute('cidr_block');
    }
    get customerOwnedIpv4Pool() {
        return this.getStringAttribute('customer_owned_ipv4_pool');
    }
    set customerOwnedIpv4Pool(value) {
        this._customerOwnedIpv4Pool = value;
    }
    resetCustomerOwnedIpv4Pool() {
        this._customerOwnedIpv4Pool = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customerOwnedIpv4PoolInput() {
        return this._customerOwnedIpv4Pool;
    }
    get enableDns64() {
        return this.getBooleanAttribute('enable_dns64');
    }
    set enableDns64(value) {
        this._enableDns64 = value;
    }
    resetEnableDns64() {
        this._enableDns64 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableDns64Input() {
        return this._enableDns64;
    }
    get enableResourceNameDnsARecordOnLaunch() {
        return this.getBooleanAttribute('enable_resource_name_dns_a_record_on_launch');
    }
    set enableResourceNameDnsARecordOnLaunch(value) {
        this._enableResourceNameDnsARecordOnLaunch = value;
    }
    resetEnableResourceNameDnsARecordOnLaunch() {
        this._enableResourceNameDnsARecordOnLaunch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableResourceNameDnsARecordOnLaunchInput() {
        return this._enableResourceNameDnsARecordOnLaunch;
    }
    get enableResourceNameDnsAaaaRecordOnLaunch() {
        return this.getBooleanAttribute('enable_resource_name_dns_aaaa_record_on_launch');
    }
    set enableResourceNameDnsAaaaRecordOnLaunch(value) {
        this._enableResourceNameDnsAaaaRecordOnLaunch = value;
    }
    resetEnableResourceNameDnsAaaaRecordOnLaunch() {
        this._enableResourceNameDnsAaaaRecordOnLaunch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableResourceNameDnsAaaaRecordOnLaunchInput() {
        return this._enableResourceNameDnsAaaaRecordOnLaunch;
    }
    // existing_default_subnet - computed: true, optional: false, required: false
    get existingDefaultSubnet() {
        return this.getBooleanAttribute('existing_default_subnet');
    }
    get forceDestroy() {
        return this.getBooleanAttribute('force_destroy');
    }
    set forceDestroy(value) {
        this._forceDestroy = value;
    }
    resetForceDestroy() {
        this._forceDestroy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forceDestroyInput() {
        return this._forceDestroy;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get ipv6CidrBlock() {
        return this.getStringAttribute('ipv6_cidr_block');
    }
    set ipv6CidrBlock(value) {
        this._ipv6CidrBlock = value;
    }
    resetIpv6CidrBlock() {
        this._ipv6CidrBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv6CidrBlockInput() {
        return this._ipv6CidrBlock;
    }
    // ipv6_cidr_block_association_id - computed: true, optional: false, required: false
    get ipv6CidrBlockAssociationId() {
        return this.getStringAttribute('ipv6_cidr_block_association_id');
    }
    get ipv6Native() {
        return this.getBooleanAttribute('ipv6_native');
    }
    set ipv6Native(value) {
        this._ipv6Native = value;
    }
    resetIpv6Native() {
        this._ipv6Native = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv6NativeInput() {
        return this._ipv6Native;
    }
    get mapCustomerOwnedIpOnLaunch() {
        return this.getBooleanAttribute('map_customer_owned_ip_on_launch');
    }
    set mapCustomerOwnedIpOnLaunch(value) {
        this._mapCustomerOwnedIpOnLaunch = value;
    }
    resetMapCustomerOwnedIpOnLaunch() {
        this._mapCustomerOwnedIpOnLaunch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mapCustomerOwnedIpOnLaunchInput() {
        return this._mapCustomerOwnedIpOnLaunch;
    }
    get mapPublicIpOnLaunch() {
        return this.getBooleanAttribute('map_public_ip_on_launch');
    }
    set mapPublicIpOnLaunch(value) {
        this._mapPublicIpOnLaunch = value;
    }
    resetMapPublicIpOnLaunch() {
        this._mapPublicIpOnLaunch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mapPublicIpOnLaunchInput() {
        return this._mapPublicIpOnLaunch;
    }
    // outpost_arn - computed: true, optional: false, required: false
    get outpostArn() {
        return this.getStringAttribute('outpost_arn');
    }
    // owner_id - computed: true, optional: false, required: false
    get ownerId() {
        return this.getStringAttribute('owner_id');
    }
    get privateDnsHostnameTypeOnLaunch() {
        return this.getStringAttribute('private_dns_hostname_type_on_launch');
    }
    set privateDnsHostnameTypeOnLaunch(value) {
        this._privateDnsHostnameTypeOnLaunch = value;
    }
    resetPrivateDnsHostnameTypeOnLaunch() {
        this._privateDnsHostnameTypeOnLaunch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateDnsHostnameTypeOnLaunchInput() {
        return this._privateDnsHostnameTypeOnLaunch;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    // vpc_id - computed: true, optional: false, required: false
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            assign_ipv6_address_on_creation: cdktf.booleanToTerraform(this._assignIpv6AddressOnCreation),
            availability_zone: cdktf.stringToTerraform(this._availabilityZone),
            customer_owned_ipv4_pool: cdktf.stringToTerraform(this._customerOwnedIpv4Pool),
            enable_dns64: cdktf.booleanToTerraform(this._enableDns64),
            enable_resource_name_dns_a_record_on_launch: cdktf.booleanToTerraform(this._enableResourceNameDnsARecordOnLaunch),
            enable_resource_name_dns_aaaa_record_on_launch: cdktf.booleanToTerraform(this._enableResourceNameDnsAaaaRecordOnLaunch),
            force_destroy: cdktf.booleanToTerraform(this._forceDestroy),
            id: cdktf.stringToTerraform(this._id),
            ipv6_cidr_block: cdktf.stringToTerraform(this._ipv6CidrBlock),
            ipv6_native: cdktf.booleanToTerraform(this._ipv6Native),
            map_customer_owned_ip_on_launch: cdktf.booleanToTerraform(this._mapCustomerOwnedIpOnLaunch),
            map_public_ip_on_launch: cdktf.booleanToTerraform(this._mapPublicIpOnLaunch),
            private_dns_hostname_type_on_launch: cdktf.stringToTerraform(this._privateDnsHostnameTypeOnLaunch),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            timeouts: defaultSubnetTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.DefaultSubnet = DefaultSubnet;
_b = JSII_RTTI_SYMBOL_1;
DefaultSubnet[_b] = { fqn: "@cdktf/provider-aws.defaultSubnet.DefaultSubnet", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
DefaultSubnet.tfResourceType = "aws_default_subnet";
//# sourceMappingURL=data:application/json;base64,