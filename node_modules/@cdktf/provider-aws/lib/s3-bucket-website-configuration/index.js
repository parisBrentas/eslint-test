"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3BucketWebsiteConfiguration = exports.S3BucketWebsiteConfigurationRoutingRuleList = exports.S3BucketWebsiteConfigurationRoutingRuleOutputReference = exports.s3BucketWebsiteConfigurationRoutingRuleToTerraform = exports.S3BucketWebsiteConfigurationRoutingRuleRedirectOutputReference = exports.s3BucketWebsiteConfigurationRoutingRuleRedirectToTerraform = exports.S3BucketWebsiteConfigurationRoutingRuleConditionOutputReference = exports.s3BucketWebsiteConfigurationRoutingRuleConditionToTerraform = exports.S3BucketWebsiteConfigurationRedirectAllRequestsToOutputReference = exports.s3BucketWebsiteConfigurationRedirectAllRequestsToToTerraform = exports.S3BucketWebsiteConfigurationIndexDocumentOutputReference = exports.s3BucketWebsiteConfigurationIndexDocumentToTerraform = exports.S3BucketWebsiteConfigurationErrorDocumentOutputReference = exports.s3BucketWebsiteConfigurationErrorDocumentToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function s3BucketWebsiteConfigurationErrorDocumentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
    };
}
exports.s3BucketWebsiteConfigurationErrorDocumentToTerraform = s3BucketWebsiteConfigurationErrorDocumentToTerraform;
class S3BucketWebsiteConfigurationErrorDocumentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
}
exports.S3BucketWebsiteConfigurationErrorDocumentOutputReference = S3BucketWebsiteConfigurationErrorDocumentOutputReference;
_a = JSII_RTTI_SYMBOL_1;
S3BucketWebsiteConfigurationErrorDocumentOutputReference[_a] = { fqn: "@cdktf/provider-aws.s3BucketWebsiteConfiguration.S3BucketWebsiteConfigurationErrorDocumentOutputReference", version: "10.0.12" };
function s3BucketWebsiteConfigurationIndexDocumentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        suffix: cdktf.stringToTerraform(struct.suffix),
    };
}
exports.s3BucketWebsiteConfigurationIndexDocumentToTerraform = s3BucketWebsiteConfigurationIndexDocumentToTerraform;
class S3BucketWebsiteConfigurationIndexDocumentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._suffix !== undefined) {
            hasAnyValues = true;
            internalValueResult.suffix = this._suffix;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._suffix = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._suffix = value.suffix;
        }
    }
    get suffix() {
        return this.getStringAttribute('suffix');
    }
    set suffix(value) {
        this._suffix = value;
    }
    // Temporarily expose input value. Use with caution.
    get suffixInput() {
        return this._suffix;
    }
}
exports.S3BucketWebsiteConfigurationIndexDocumentOutputReference = S3BucketWebsiteConfigurationIndexDocumentOutputReference;
_b = JSII_RTTI_SYMBOL_1;
S3BucketWebsiteConfigurationIndexDocumentOutputReference[_b] = { fqn: "@cdktf/provider-aws.s3BucketWebsiteConfiguration.S3BucketWebsiteConfigurationIndexDocumentOutputReference", version: "10.0.12" };
function s3BucketWebsiteConfigurationRedirectAllRequestsToToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_name: cdktf.stringToTerraform(struct.hostName),
        protocol: cdktf.stringToTerraform(struct.protocol),
    };
}
exports.s3BucketWebsiteConfigurationRedirectAllRequestsToToTerraform = s3BucketWebsiteConfigurationRedirectAllRequestsToToTerraform;
class S3BucketWebsiteConfigurationRedirectAllRequestsToOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostName !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostName = this._hostName;
        }
        if (this._protocol !== undefined) {
            hasAnyValues = true;
            internalValueResult.protocol = this._protocol;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostName = undefined;
            this._protocol = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostName = value.hostName;
            this._protocol = value.protocol;
        }
    }
    get hostName() {
        return this.getStringAttribute('host_name');
    }
    set hostName(value) {
        this._hostName = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostNameInput() {
        return this._hostName;
    }
    get protocol() {
        return this.getStringAttribute('protocol');
    }
    set protocol(value) {
        this._protocol = value;
    }
    resetProtocol() {
        this._protocol = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get protocolInput() {
        return this._protocol;
    }
}
exports.S3BucketWebsiteConfigurationRedirectAllRequestsToOutputReference = S3BucketWebsiteConfigurationRedirectAllRequestsToOutputReference;
_c = JSII_RTTI_SYMBOL_1;
S3BucketWebsiteConfigurationRedirectAllRequestsToOutputReference[_c] = { fqn: "@cdktf/provider-aws.s3BucketWebsiteConfiguration.S3BucketWebsiteConfigurationRedirectAllRequestsToOutputReference", version: "10.0.12" };
function s3BucketWebsiteConfigurationRoutingRuleConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        http_error_code_returned_equals: cdktf.stringToTerraform(struct.httpErrorCodeReturnedEquals),
        key_prefix_equals: cdktf.stringToTerraform(struct.keyPrefixEquals),
    };
}
exports.s3BucketWebsiteConfigurationRoutingRuleConditionToTerraform = s3BucketWebsiteConfigurationRoutingRuleConditionToTerraform;
class S3BucketWebsiteConfigurationRoutingRuleConditionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._httpErrorCodeReturnedEquals !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpErrorCodeReturnedEquals = this._httpErrorCodeReturnedEquals;
        }
        if (this._keyPrefixEquals !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyPrefixEquals = this._keyPrefixEquals;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._httpErrorCodeReturnedEquals = undefined;
            this._keyPrefixEquals = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._httpErrorCodeReturnedEquals = value.httpErrorCodeReturnedEquals;
            this._keyPrefixEquals = value.keyPrefixEquals;
        }
    }
    get httpErrorCodeReturnedEquals() {
        return this.getStringAttribute('http_error_code_returned_equals');
    }
    set httpErrorCodeReturnedEquals(value) {
        this._httpErrorCodeReturnedEquals = value;
    }
    resetHttpErrorCodeReturnedEquals() {
        this._httpErrorCodeReturnedEquals = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpErrorCodeReturnedEqualsInput() {
        return this._httpErrorCodeReturnedEquals;
    }
    get keyPrefixEquals() {
        return this.getStringAttribute('key_prefix_equals');
    }
    set keyPrefixEquals(value) {
        this._keyPrefixEquals = value;
    }
    resetKeyPrefixEquals() {
        this._keyPrefixEquals = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyPrefixEqualsInput() {
        return this._keyPrefixEquals;
    }
}
exports.S3BucketWebsiteConfigurationRoutingRuleConditionOutputReference = S3BucketWebsiteConfigurationRoutingRuleConditionOutputReference;
_d = JSII_RTTI_SYMBOL_1;
S3BucketWebsiteConfigurationRoutingRuleConditionOutputReference[_d] = { fqn: "@cdktf/provider-aws.s3BucketWebsiteConfiguration.S3BucketWebsiteConfigurationRoutingRuleConditionOutputReference", version: "10.0.12" };
function s3BucketWebsiteConfigurationRoutingRuleRedirectToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_name: cdktf.stringToTerraform(struct.hostName),
        http_redirect_code: cdktf.stringToTerraform(struct.httpRedirectCode),
        protocol: cdktf.stringToTerraform(struct.protocol),
        replace_key_prefix_with: cdktf.stringToTerraform(struct.replaceKeyPrefixWith),
        replace_key_with: cdktf.stringToTerraform(struct.replaceKeyWith),
    };
}
exports.s3BucketWebsiteConfigurationRoutingRuleRedirectToTerraform = s3BucketWebsiteConfigurationRoutingRuleRedirectToTerraform;
class S3BucketWebsiteConfigurationRoutingRuleRedirectOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostName !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostName = this._hostName;
        }
        if (this._httpRedirectCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpRedirectCode = this._httpRedirectCode;
        }
        if (this._protocol !== undefined) {
            hasAnyValues = true;
            internalValueResult.protocol = this._protocol;
        }
        if (this._replaceKeyPrefixWith !== undefined) {
            hasAnyValues = true;
            internalValueResult.replaceKeyPrefixWith = this._replaceKeyPrefixWith;
        }
        if (this._replaceKeyWith !== undefined) {
            hasAnyValues = true;
            internalValueResult.replaceKeyWith = this._replaceKeyWith;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostName = undefined;
            this._httpRedirectCode = undefined;
            this._protocol = undefined;
            this._replaceKeyPrefixWith = undefined;
            this._replaceKeyWith = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostName = value.hostName;
            this._httpRedirectCode = value.httpRedirectCode;
            this._protocol = value.protocol;
            this._replaceKeyPrefixWith = value.replaceKeyPrefixWith;
            this._replaceKeyWith = value.replaceKeyWith;
        }
    }
    get hostName() {
        return this.getStringAttribute('host_name');
    }
    set hostName(value) {
        this._hostName = value;
    }
    resetHostName() {
        this._hostName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostNameInput() {
        return this._hostName;
    }
    get httpRedirectCode() {
        return this.getStringAttribute('http_redirect_code');
    }
    set httpRedirectCode(value) {
        this._httpRedirectCode = value;
    }
    resetHttpRedirectCode() {
        this._httpRedirectCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpRedirectCodeInput() {
        return this._httpRedirectCode;
    }
    get protocol() {
        return this.getStringAttribute('protocol');
    }
    set protocol(value) {
        this._protocol = value;
    }
    resetProtocol() {
        this._protocol = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get protocolInput() {
        return this._protocol;
    }
    get replaceKeyPrefixWith() {
        return this.getStringAttribute('replace_key_prefix_with');
    }
    set replaceKeyPrefixWith(value) {
        this._replaceKeyPrefixWith = value;
    }
    resetReplaceKeyPrefixWith() {
        this._replaceKeyPrefixWith = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replaceKeyPrefixWithInput() {
        return this._replaceKeyPrefixWith;
    }
    get replaceKeyWith() {
        return this.getStringAttribute('replace_key_with');
    }
    set replaceKeyWith(value) {
        this._replaceKeyWith = value;
    }
    resetReplaceKeyWith() {
        this._replaceKeyWith = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replaceKeyWithInput() {
        return this._replaceKeyWith;
    }
}
exports.S3BucketWebsiteConfigurationRoutingRuleRedirectOutputReference = S3BucketWebsiteConfigurationRoutingRuleRedirectOutputReference;
_e = JSII_RTTI_SYMBOL_1;
S3BucketWebsiteConfigurationRoutingRuleRedirectOutputReference[_e] = { fqn: "@cdktf/provider-aws.s3BucketWebsiteConfiguration.S3BucketWebsiteConfigurationRoutingRuleRedirectOutputReference", version: "10.0.12" };
function s3BucketWebsiteConfigurationRoutingRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        condition: s3BucketWebsiteConfigurationRoutingRuleConditionToTerraform(struct.condition),
        redirect: s3BucketWebsiteConfigurationRoutingRuleRedirectToTerraform(struct.redirect),
    };
}
exports.s3BucketWebsiteConfigurationRoutingRuleToTerraform = s3BucketWebsiteConfigurationRoutingRuleToTerraform;
class S3BucketWebsiteConfigurationRoutingRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // condition - computed: false, optional: true, required: false
        this._condition = new S3BucketWebsiteConfigurationRoutingRuleConditionOutputReference(this, "condition");
        // redirect - computed: false, optional: false, required: true
        this._redirect = new S3BucketWebsiteConfigurationRoutingRuleRedirectOutputReference(this, "redirect");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._condition?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.condition = this._condition?.internalValue;
        }
        if (this._redirect?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirect = this._redirect?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._condition.internalValue = undefined;
            this._redirect.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._condition.internalValue = value.condition;
            this._redirect.internalValue = value.redirect;
        }
    }
    get condition() {
        return this._condition;
    }
    putCondition(value) {
        this._condition.internalValue = value;
    }
    resetCondition() {
        this._condition.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionInput() {
        return this._condition.internalValue;
    }
    get redirect() {
        return this._redirect;
    }
    putRedirect(value) {
        this._redirect.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get redirectInput() {
        return this._redirect.internalValue;
    }
}
exports.S3BucketWebsiteConfigurationRoutingRuleOutputReference = S3BucketWebsiteConfigurationRoutingRuleOutputReference;
_f = JSII_RTTI_SYMBOL_1;
S3BucketWebsiteConfigurationRoutingRuleOutputReference[_f] = { fqn: "@cdktf/provider-aws.s3BucketWebsiteConfiguration.S3BucketWebsiteConfigurationRoutingRuleOutputReference", version: "10.0.12" };
class S3BucketWebsiteConfigurationRoutingRuleList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new S3BucketWebsiteConfigurationRoutingRuleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.S3BucketWebsiteConfigurationRoutingRuleList = S3BucketWebsiteConfigurationRoutingRuleList;
_g = JSII_RTTI_SYMBOL_1;
S3BucketWebsiteConfigurationRoutingRuleList[_g] = { fqn: "@cdktf/provider-aws.s3BucketWebsiteConfiguration.S3BucketWebsiteConfigurationRoutingRuleList", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/s3_bucket_website_configuration aws_s3_bucket_website_configuration}
*/
class S3BucketWebsiteConfiguration extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/s3_bucket_website_configuration aws_s3_bucket_website_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options S3BucketWebsiteConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_s3_bucket_website_configuration',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // error_document - computed: false, optional: true, required: false
        this._errorDocument = new S3BucketWebsiteConfigurationErrorDocumentOutputReference(this, "error_document");
        // index_document - computed: false, optional: true, required: false
        this._indexDocument = new S3BucketWebsiteConfigurationIndexDocumentOutputReference(this, "index_document");
        // redirect_all_requests_to - computed: false, optional: true, required: false
        this._redirectAllRequestsTo = new S3BucketWebsiteConfigurationRedirectAllRequestsToOutputReference(this, "redirect_all_requests_to");
        // routing_rule - computed: false, optional: true, required: false
        this._routingRule = new S3BucketWebsiteConfigurationRoutingRuleList(this, "routing_rule", false);
        this._bucket = config.bucket;
        this._expectedBucketOwner = config.expectedBucketOwner;
        this._id = config.id;
        this._routingRules = config.routingRules;
        this._errorDocument.internalValue = config.errorDocument;
        this._indexDocument.internalValue = config.indexDocument;
        this._redirectAllRequestsTo.internalValue = config.redirectAllRequestsTo;
        this._routingRule.internalValue = config.routingRule;
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    get expectedBucketOwner() {
        return this.getStringAttribute('expected_bucket_owner');
    }
    set expectedBucketOwner(value) {
        this._expectedBucketOwner = value;
    }
    resetExpectedBucketOwner() {
        this._expectedBucketOwner = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get expectedBucketOwnerInput() {
        return this._expectedBucketOwner;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get routingRules() {
        return this.getStringAttribute('routing_rules');
    }
    set routingRules(value) {
        this._routingRules = value;
    }
    resetRoutingRules() {
        this._routingRules = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get routingRulesInput() {
        return this._routingRules;
    }
    // website_domain - computed: true, optional: false, required: false
    get websiteDomain() {
        return this.getStringAttribute('website_domain');
    }
    // website_endpoint - computed: true, optional: false, required: false
    get websiteEndpoint() {
        return this.getStringAttribute('website_endpoint');
    }
    get errorDocument() {
        return this._errorDocument;
    }
    putErrorDocument(value) {
        this._errorDocument.internalValue = value;
    }
    resetErrorDocument() {
        this._errorDocument.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorDocumentInput() {
        return this._errorDocument.internalValue;
    }
    get indexDocument() {
        return this._indexDocument;
    }
    putIndexDocument(value) {
        this._indexDocument.internalValue = value;
    }
    resetIndexDocument() {
        this._indexDocument.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get indexDocumentInput() {
        return this._indexDocument.internalValue;
    }
    get redirectAllRequestsTo() {
        return this._redirectAllRequestsTo;
    }
    putRedirectAllRequestsTo(value) {
        this._redirectAllRequestsTo.internalValue = value;
    }
    resetRedirectAllRequestsTo() {
        this._redirectAllRequestsTo.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectAllRequestsToInput() {
        return this._redirectAllRequestsTo.internalValue;
    }
    get routingRule() {
        return this._routingRule;
    }
    putRoutingRule(value) {
        this._routingRule.internalValue = value;
    }
    resetRoutingRule() {
        this._routingRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get routingRuleInput() {
        return this._routingRule.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            bucket: cdktf.stringToTerraform(this._bucket),
            expected_bucket_owner: cdktf.stringToTerraform(this._expectedBucketOwner),
            id: cdktf.stringToTerraform(this._id),
            routing_rules: cdktf.stringToTerraform(this._routingRules),
            error_document: s3BucketWebsiteConfigurationErrorDocumentToTerraform(this._errorDocument.internalValue),
            index_document: s3BucketWebsiteConfigurationIndexDocumentToTerraform(this._indexDocument.internalValue),
            redirect_all_requests_to: s3BucketWebsiteConfigurationRedirectAllRequestsToToTerraform(this._redirectAllRequestsTo.internalValue),
            routing_rule: cdktf.listMapper(s3BucketWebsiteConfigurationRoutingRuleToTerraform, true)(this._routingRule.internalValue),
        };
    }
}
exports.S3BucketWebsiteConfiguration = S3BucketWebsiteConfiguration;
_h = JSII_RTTI_SYMBOL_1;
S3BucketWebsiteConfiguration[_h] = { fqn: "@cdktf/provider-aws.s3BucketWebsiteConfiguration.S3BucketWebsiteConfiguration", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
S3BucketWebsiteConfiguration.tfResourceType = "aws_s3_bucket_website_configuration";
//# sourceMappingURL=data:application/json;base64,