"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupRegionSettings = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/backup_region_settings aws_backup_region_settings}
*/
class BackupRegionSettings extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/backup_region_settings aws_backup_region_settings} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options BackupRegionSettingsConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_backup_region_settings',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._id = config.id;
        this._resourceTypeManagementPreference = config.resourceTypeManagementPreference;
        this._resourceTypeOptInPreference = config.resourceTypeOptInPreference;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get resourceTypeManagementPreference() {
        return this.getBooleanMapAttribute('resource_type_management_preference');
    }
    set resourceTypeManagementPreference(value) {
        this._resourceTypeManagementPreference = value;
    }
    resetResourceTypeManagementPreference() {
        this._resourceTypeManagementPreference = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTypeManagementPreferenceInput() {
        return this._resourceTypeManagementPreference;
    }
    get resourceTypeOptInPreference() {
        return this.getBooleanMapAttribute('resource_type_opt_in_preference');
    }
    set resourceTypeOptInPreference(value) {
        this._resourceTypeOptInPreference = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTypeOptInPreferenceInput() {
        return this._resourceTypeOptInPreference;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            resource_type_management_preference: cdktf.hashMapper(cdktf.booleanToTerraform)(this._resourceTypeManagementPreference),
            resource_type_opt_in_preference: cdktf.hashMapper(cdktf.booleanToTerraform)(this._resourceTypeOptInPreference),
        };
    }
}
exports.BackupRegionSettings = BackupRegionSettings;
_a = JSII_RTTI_SYMBOL_1;
BackupRegionSettings[_a] = { fqn: "@cdktf/provider-aws.backupRegionSettings.BackupRegionSettings", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
BackupRegionSettings.tfResourceType = "aws_backup_region_settings";
//# sourceMappingURL=data:application/json;base64,