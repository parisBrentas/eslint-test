"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectUser = exports.ConnectUserPhoneConfigOutputReference = exports.connectUserPhoneConfigToTerraform = exports.ConnectUserIdentityInfoOutputReference = exports.connectUserIdentityInfoToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function connectUserIdentityInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        email: cdktf.stringToTerraform(struct.email),
        first_name: cdktf.stringToTerraform(struct.firstName),
        last_name: cdktf.stringToTerraform(struct.lastName),
    };
}
exports.connectUserIdentityInfoToTerraform = connectUserIdentityInfoToTerraform;
class ConnectUserIdentityInfoOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._email !== undefined) {
            hasAnyValues = true;
            internalValueResult.email = this._email;
        }
        if (this._firstName !== undefined) {
            hasAnyValues = true;
            internalValueResult.firstName = this._firstName;
        }
        if (this._lastName !== undefined) {
            hasAnyValues = true;
            internalValueResult.lastName = this._lastName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._email = undefined;
            this._firstName = undefined;
            this._lastName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._email = value.email;
            this._firstName = value.firstName;
            this._lastName = value.lastName;
        }
    }
    get email() {
        return this.getStringAttribute('email');
    }
    set email(value) {
        this._email = value;
    }
    resetEmail() {
        this._email = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailInput() {
        return this._email;
    }
    get firstName() {
        return this.getStringAttribute('first_name');
    }
    set firstName(value) {
        this._firstName = value;
    }
    resetFirstName() {
        this._firstName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get firstNameInput() {
        return this._firstName;
    }
    get lastName() {
        return this.getStringAttribute('last_name');
    }
    set lastName(value) {
        this._lastName = value;
    }
    resetLastName() {
        this._lastName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lastNameInput() {
        return this._lastName;
    }
}
exports.ConnectUserIdentityInfoOutputReference = ConnectUserIdentityInfoOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ConnectUserIdentityInfoOutputReference[_a] = { fqn: "@cdktf/provider-aws.connectUser.ConnectUserIdentityInfoOutputReference", version: "10.0.12" };
function connectUserPhoneConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        after_contact_work_time_limit: cdktf.numberToTerraform(struct.afterContactWorkTimeLimit),
        auto_accept: cdktf.booleanToTerraform(struct.autoAccept),
        desk_phone_number: cdktf.stringToTerraform(struct.deskPhoneNumber),
        phone_type: cdktf.stringToTerraform(struct.phoneType),
    };
}
exports.connectUserPhoneConfigToTerraform = connectUserPhoneConfigToTerraform;
class ConnectUserPhoneConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._afterContactWorkTimeLimit !== undefined) {
            hasAnyValues = true;
            internalValueResult.afterContactWorkTimeLimit = this._afterContactWorkTimeLimit;
        }
        if (this._autoAccept !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoAccept = this._autoAccept;
        }
        if (this._deskPhoneNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.deskPhoneNumber = this._deskPhoneNumber;
        }
        if (this._phoneType !== undefined) {
            hasAnyValues = true;
            internalValueResult.phoneType = this._phoneType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._afterContactWorkTimeLimit = undefined;
            this._autoAccept = undefined;
            this._deskPhoneNumber = undefined;
            this._phoneType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._afterContactWorkTimeLimit = value.afterContactWorkTimeLimit;
            this._autoAccept = value.autoAccept;
            this._deskPhoneNumber = value.deskPhoneNumber;
            this._phoneType = value.phoneType;
        }
    }
    get afterContactWorkTimeLimit() {
        return this.getNumberAttribute('after_contact_work_time_limit');
    }
    set afterContactWorkTimeLimit(value) {
        this._afterContactWorkTimeLimit = value;
    }
    resetAfterContactWorkTimeLimit() {
        this._afterContactWorkTimeLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get afterContactWorkTimeLimitInput() {
        return this._afterContactWorkTimeLimit;
    }
    get autoAccept() {
        return this.getBooleanAttribute('auto_accept');
    }
    set autoAccept(value) {
        this._autoAccept = value;
    }
    resetAutoAccept() {
        this._autoAccept = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoAcceptInput() {
        return this._autoAccept;
    }
    get deskPhoneNumber() {
        return this.getStringAttribute('desk_phone_number');
    }
    set deskPhoneNumber(value) {
        this._deskPhoneNumber = value;
    }
    resetDeskPhoneNumber() {
        this._deskPhoneNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deskPhoneNumberInput() {
        return this._deskPhoneNumber;
    }
    get phoneType() {
        return this.getStringAttribute('phone_type');
    }
    set phoneType(value) {
        this._phoneType = value;
    }
    // Temporarily expose input value. Use with caution.
    get phoneTypeInput() {
        return this._phoneType;
    }
}
exports.ConnectUserPhoneConfigOutputReference = ConnectUserPhoneConfigOutputReference;
_b = JSII_RTTI_SYMBOL_1;
ConnectUserPhoneConfigOutputReference[_b] = { fqn: "@cdktf/provider-aws.connectUser.ConnectUserPhoneConfigOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/connect_user aws_connect_user}
*/
class ConnectUser extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/connect_user aws_connect_user} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ConnectUserConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_connect_user',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // identity_info - computed: false, optional: true, required: false
        this._identityInfo = new ConnectUserIdentityInfoOutputReference(this, "identity_info");
        // phone_config - computed: false, optional: false, required: true
        this._phoneConfig = new ConnectUserPhoneConfigOutputReference(this, "phone_config");
        this._directoryUserId = config.directoryUserId;
        this._hierarchyGroupId = config.hierarchyGroupId;
        this._id = config.id;
        this._instanceId = config.instanceId;
        this._name = config.name;
        this._password = config.password;
        this._routingProfileId = config.routingProfileId;
        this._securityProfileIds = config.securityProfileIds;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._identityInfo.internalValue = config.identityInfo;
        this._phoneConfig.internalValue = config.phoneConfig;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get directoryUserId() {
        return this.getStringAttribute('directory_user_id');
    }
    set directoryUserId(value) {
        this._directoryUserId = value;
    }
    resetDirectoryUserId() {
        this._directoryUserId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get directoryUserIdInput() {
        return this._directoryUserId;
    }
    get hierarchyGroupId() {
        return this.getStringAttribute('hierarchy_group_id');
    }
    set hierarchyGroupId(value) {
        this._hierarchyGroupId = value;
    }
    resetHierarchyGroupId() {
        this._hierarchyGroupId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hierarchyGroupIdInput() {
        return this._hierarchyGroupId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get instanceId() {
        return this.getStringAttribute('instance_id');
    }
    set instanceId(value) {
        this._instanceId = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceIdInput() {
        return this._instanceId;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    resetPassword() {
        this._password = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get routingProfileId() {
        return this.getStringAttribute('routing_profile_id');
    }
    set routingProfileId(value) {
        this._routingProfileId = value;
    }
    // Temporarily expose input value. Use with caution.
    get routingProfileIdInput() {
        return this._routingProfileId;
    }
    get securityProfileIds() {
        return cdktf.Fn.tolist(this.getListAttribute('security_profile_ids'));
    }
    set securityProfileIds(value) {
        this._securityProfileIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get securityProfileIdsInput() {
        return this._securityProfileIds;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    // user_id - computed: true, optional: false, required: false
    get userId() {
        return this.getStringAttribute('user_id');
    }
    get identityInfo() {
        return this._identityInfo;
    }
    putIdentityInfo(value) {
        this._identityInfo.internalValue = value;
    }
    resetIdentityInfo() {
        this._identityInfo.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityInfoInput() {
        return this._identityInfo.internalValue;
    }
    get phoneConfig() {
        return this._phoneConfig;
    }
    putPhoneConfig(value) {
        this._phoneConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get phoneConfigInput() {
        return this._phoneConfig.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            directory_user_id: cdktf.stringToTerraform(this._directoryUserId),
            hierarchy_group_id: cdktf.stringToTerraform(this._hierarchyGroupId),
            id: cdktf.stringToTerraform(this._id),
            instance_id: cdktf.stringToTerraform(this._instanceId),
            name: cdktf.stringToTerraform(this._name),
            password: cdktf.stringToTerraform(this._password),
            routing_profile_id: cdktf.stringToTerraform(this._routingProfileId),
            security_profile_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._securityProfileIds),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            identity_info: connectUserIdentityInfoToTerraform(this._identityInfo.internalValue),
            phone_config: connectUserPhoneConfigToTerraform(this._phoneConfig.internalValue),
        };
    }
}
exports.ConnectUser = ConnectUser;
_c = JSII_RTTI_SYMBOL_1;
ConnectUser[_c] = { fqn: "@cdktf/provider-aws.connectUser.ConnectUser", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
ConnectUser.tfResourceType = "aws_connect_user";
//# sourceMappingURL=data:application/json;base64,