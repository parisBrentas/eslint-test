"use strict";
var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlueMlTransform = exports.GlueMlTransformParametersOutputReference = exports.glueMlTransformParametersToTerraform = exports.GlueMlTransformParametersFindMatchesParametersOutputReference = exports.glueMlTransformParametersFindMatchesParametersToTerraform = exports.GlueMlTransformInputRecordTablesList = exports.GlueMlTransformInputRecordTablesOutputReference = exports.glueMlTransformInputRecordTablesToTerraform = exports.GlueMlTransformSchemaList = exports.GlueMlTransformSchemaOutputReference = exports.glueMlTransformSchemaToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function glueMlTransformSchemaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.glueMlTransformSchemaToTerraform = glueMlTransformSchemaToTerraform;
class GlueMlTransformSchemaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // data_type - computed: true, optional: false, required: false
    get dataType() {
        return this.getStringAttribute('data_type');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
}
exports.GlueMlTransformSchemaOutputReference = GlueMlTransformSchemaOutputReference;
_a = JSII_RTTI_SYMBOL_1;
GlueMlTransformSchemaOutputReference[_a] = { fqn: "@cdktf/provider-aws.glueMlTransform.GlueMlTransformSchemaOutputReference", version: "10.0.12" };
class GlueMlTransformSchemaList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GlueMlTransformSchemaOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GlueMlTransformSchemaList = GlueMlTransformSchemaList;
_b = JSII_RTTI_SYMBOL_1;
GlueMlTransformSchemaList[_b] = { fqn: "@cdktf/provider-aws.glueMlTransform.GlueMlTransformSchemaList", version: "10.0.12" };
function glueMlTransformInputRecordTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        catalog_id: cdktf.stringToTerraform(struct.catalogId),
        connection_name: cdktf.stringToTerraform(struct.connectionName),
        database_name: cdktf.stringToTerraform(struct.databaseName),
        table_name: cdktf.stringToTerraform(struct.tableName),
    };
}
exports.glueMlTransformInputRecordTablesToTerraform = glueMlTransformInputRecordTablesToTerraform;
class GlueMlTransformInputRecordTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._catalogId !== undefined) {
            hasAnyValues = true;
            internalValueResult.catalogId = this._catalogId;
        }
        if (this._connectionName !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionName = this._connectionName;
        }
        if (this._databaseName !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseName = this._databaseName;
        }
        if (this._tableName !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableName = this._tableName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._catalogId = undefined;
            this._connectionName = undefined;
            this._databaseName = undefined;
            this._tableName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._catalogId = value.catalogId;
            this._connectionName = value.connectionName;
            this._databaseName = value.databaseName;
            this._tableName = value.tableName;
        }
    }
    get catalogId() {
        return this.getStringAttribute('catalog_id');
    }
    set catalogId(value) {
        this._catalogId = value;
    }
    resetCatalogId() {
        this._catalogId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get catalogIdInput() {
        return this._catalogId;
    }
    get connectionName() {
        return this.getStringAttribute('connection_name');
    }
    set connectionName(value) {
        this._connectionName = value;
    }
    resetConnectionName() {
        this._connectionName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionNameInput() {
        return this._connectionName;
    }
    get databaseName() {
        return this.getStringAttribute('database_name');
    }
    set databaseName(value) {
        this._databaseName = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseNameInput() {
        return this._databaseName;
    }
    get tableName() {
        return this.getStringAttribute('table_name');
    }
    set tableName(value) {
        this._tableName = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableNameInput() {
        return this._tableName;
    }
}
exports.GlueMlTransformInputRecordTablesOutputReference = GlueMlTransformInputRecordTablesOutputReference;
_c = JSII_RTTI_SYMBOL_1;
GlueMlTransformInputRecordTablesOutputReference[_c] = { fqn: "@cdktf/provider-aws.glueMlTransform.GlueMlTransformInputRecordTablesOutputReference", version: "10.0.12" };
class GlueMlTransformInputRecordTablesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GlueMlTransformInputRecordTablesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GlueMlTransformInputRecordTablesList = GlueMlTransformInputRecordTablesList;
_d = JSII_RTTI_SYMBOL_1;
GlueMlTransformInputRecordTablesList[_d] = { fqn: "@cdktf/provider-aws.glueMlTransform.GlueMlTransformInputRecordTablesList", version: "10.0.12" };
function glueMlTransformParametersFindMatchesParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        accuracy_cost_trade_off: cdktf.numberToTerraform(struct.accuracyCostTradeOff),
        enforce_provided_labels: cdktf.booleanToTerraform(struct.enforceProvidedLabels),
        precision_recall_trade_off: cdktf.numberToTerraform(struct.precisionRecallTradeOff),
        primary_key_column_name: cdktf.stringToTerraform(struct.primaryKeyColumnName),
    };
}
exports.glueMlTransformParametersFindMatchesParametersToTerraform = glueMlTransformParametersFindMatchesParametersToTerraform;
class GlueMlTransformParametersFindMatchesParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accuracyCostTradeOff !== undefined) {
            hasAnyValues = true;
            internalValueResult.accuracyCostTradeOff = this._accuracyCostTradeOff;
        }
        if (this._enforceProvidedLabels !== undefined) {
            hasAnyValues = true;
            internalValueResult.enforceProvidedLabels = this._enforceProvidedLabels;
        }
        if (this._precisionRecallTradeOff !== undefined) {
            hasAnyValues = true;
            internalValueResult.precisionRecallTradeOff = this._precisionRecallTradeOff;
        }
        if (this._primaryKeyColumnName !== undefined) {
            hasAnyValues = true;
            internalValueResult.primaryKeyColumnName = this._primaryKeyColumnName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accuracyCostTradeOff = undefined;
            this._enforceProvidedLabels = undefined;
            this._precisionRecallTradeOff = undefined;
            this._primaryKeyColumnName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accuracyCostTradeOff = value.accuracyCostTradeOff;
            this._enforceProvidedLabels = value.enforceProvidedLabels;
            this._precisionRecallTradeOff = value.precisionRecallTradeOff;
            this._primaryKeyColumnName = value.primaryKeyColumnName;
        }
    }
    get accuracyCostTradeOff() {
        return this.getNumberAttribute('accuracy_cost_trade_off');
    }
    set accuracyCostTradeOff(value) {
        this._accuracyCostTradeOff = value;
    }
    resetAccuracyCostTradeOff() {
        this._accuracyCostTradeOff = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accuracyCostTradeOffInput() {
        return this._accuracyCostTradeOff;
    }
    get enforceProvidedLabels() {
        return this.getBooleanAttribute('enforce_provided_labels');
    }
    set enforceProvidedLabels(value) {
        this._enforceProvidedLabels = value;
    }
    resetEnforceProvidedLabels() {
        this._enforceProvidedLabels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enforceProvidedLabelsInput() {
        return this._enforceProvidedLabels;
    }
    get precisionRecallTradeOff() {
        return this.getNumberAttribute('precision_recall_trade_off');
    }
    set precisionRecallTradeOff(value) {
        this._precisionRecallTradeOff = value;
    }
    resetPrecisionRecallTradeOff() {
        this._precisionRecallTradeOff = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get precisionRecallTradeOffInput() {
        return this._precisionRecallTradeOff;
    }
    get primaryKeyColumnName() {
        return this.getStringAttribute('primary_key_column_name');
    }
    set primaryKeyColumnName(value) {
        this._primaryKeyColumnName = value;
    }
    resetPrimaryKeyColumnName() {
        this._primaryKeyColumnName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get primaryKeyColumnNameInput() {
        return this._primaryKeyColumnName;
    }
}
exports.GlueMlTransformParametersFindMatchesParametersOutputReference = GlueMlTransformParametersFindMatchesParametersOutputReference;
_e = JSII_RTTI_SYMBOL_1;
GlueMlTransformParametersFindMatchesParametersOutputReference[_e] = { fqn: "@cdktf/provider-aws.glueMlTransform.GlueMlTransformParametersFindMatchesParametersOutputReference", version: "10.0.12" };
function glueMlTransformParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        transform_type: cdktf.stringToTerraform(struct.transformType),
        find_matches_parameters: glueMlTransformParametersFindMatchesParametersToTerraform(struct.findMatchesParameters),
    };
}
exports.glueMlTransformParametersToTerraform = glueMlTransformParametersToTerraform;
class GlueMlTransformParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // find_matches_parameters - computed: false, optional: false, required: true
        this._findMatchesParameters = new GlueMlTransformParametersFindMatchesParametersOutputReference(this, "find_matches_parameters");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._transformType !== undefined) {
            hasAnyValues = true;
            internalValueResult.transformType = this._transformType;
        }
        if (this._findMatchesParameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.findMatchesParameters = this._findMatchesParameters?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._transformType = undefined;
            this._findMatchesParameters.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._transformType = value.transformType;
            this._findMatchesParameters.internalValue = value.findMatchesParameters;
        }
    }
    get transformType() {
        return this.getStringAttribute('transform_type');
    }
    set transformType(value) {
        this._transformType = value;
    }
    // Temporarily expose input value. Use with caution.
    get transformTypeInput() {
        return this._transformType;
    }
    get findMatchesParameters() {
        return this._findMatchesParameters;
    }
    putFindMatchesParameters(value) {
        this._findMatchesParameters.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get findMatchesParametersInput() {
        return this._findMatchesParameters.internalValue;
    }
}
exports.GlueMlTransformParametersOutputReference = GlueMlTransformParametersOutputReference;
_f = JSII_RTTI_SYMBOL_1;
GlueMlTransformParametersOutputReference[_f] = { fqn: "@cdktf/provider-aws.glueMlTransform.GlueMlTransformParametersOutputReference", version: "10.0.12" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/aws/r/glue_ml_transform aws_glue_ml_transform}
*/
class GlueMlTransform extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/aws/r/glue_ml_transform aws_glue_ml_transform} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options GlueMlTransformConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_glue_ml_transform',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '4.39.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // schema - computed: true, optional: false, required: false
        this._schema = new GlueMlTransformSchemaList(this, "schema", false);
        // input_record_tables - computed: false, optional: false, required: true
        this._inputRecordTables = new GlueMlTransformInputRecordTablesList(this, "input_record_tables", false);
        // parameters - computed: false, optional: false, required: true
        this._parameters = new GlueMlTransformParametersOutputReference(this, "parameters");
        this._description = config.description;
        this._glueVersion = config.glueVersion;
        this._id = config.id;
        this._maxCapacity = config.maxCapacity;
        this._maxRetries = config.maxRetries;
        this._name = config.name;
        this._numberOfWorkers = config.numberOfWorkers;
        this._roleArn = config.roleArn;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._timeout = config.timeout;
        this._workerType = config.workerType;
        this._inputRecordTables.internalValue = config.inputRecordTables;
        this._parameters.internalValue = config.parameters;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get glueVersion() {
        return this.getStringAttribute('glue_version');
    }
    set glueVersion(value) {
        this._glueVersion = value;
    }
    resetGlueVersion() {
        this._glueVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get glueVersionInput() {
        return this._glueVersion;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // label_count - computed: true, optional: false, required: false
    get labelCount() {
        return this.getNumberAttribute('label_count');
    }
    get maxCapacity() {
        return this.getNumberAttribute('max_capacity');
    }
    set maxCapacity(value) {
        this._maxCapacity = value;
    }
    resetMaxCapacity() {
        this._maxCapacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxCapacityInput() {
        return this._maxCapacity;
    }
    get maxRetries() {
        return this.getNumberAttribute('max_retries');
    }
    set maxRetries(value) {
        this._maxRetries = value;
    }
    resetMaxRetries() {
        this._maxRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxRetriesInput() {
        return this._maxRetries;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get numberOfWorkers() {
        return this.getNumberAttribute('number_of_workers');
    }
    set numberOfWorkers(value) {
        this._numberOfWorkers = value;
    }
    resetNumberOfWorkers() {
        this._numberOfWorkers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numberOfWorkersInput() {
        return this._numberOfWorkers;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get schema() {
        return this._schema;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get timeout() {
        return this.getNumberAttribute('timeout');
    }
    set timeout(value) {
        this._timeout = value;
    }
    resetTimeout() {
        this._timeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutInput() {
        return this._timeout;
    }
    get workerType() {
        return this.getStringAttribute('worker_type');
    }
    set workerType(value) {
        this._workerType = value;
    }
    resetWorkerType() {
        this._workerType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workerTypeInput() {
        return this._workerType;
    }
    get inputRecordTables() {
        return this._inputRecordTables;
    }
    putInputRecordTables(value) {
        this._inputRecordTables.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get inputRecordTablesInput() {
        return this._inputRecordTables.internalValue;
    }
    get parameters() {
        return this._parameters;
    }
    putParameters(value) {
        this._parameters.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            glue_version: cdktf.stringToTerraform(this._glueVersion),
            id: cdktf.stringToTerraform(this._id),
            max_capacity: cdktf.numberToTerraform(this._maxCapacity),
            max_retries: cdktf.numberToTerraform(this._maxRetries),
            name: cdktf.stringToTerraform(this._name),
            number_of_workers: cdktf.numberToTerraform(this._numberOfWorkers),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            timeout: cdktf.numberToTerraform(this._timeout),
            worker_type: cdktf.stringToTerraform(this._workerType),
            input_record_tables: cdktf.listMapper(glueMlTransformInputRecordTablesToTerraform, true)(this._inputRecordTables.internalValue),
            parameters: glueMlTransformParametersToTerraform(this._parameters.internalValue),
        };
    }
}
exports.GlueMlTransform = GlueMlTransform;
_g = JSII_RTTI_SYMBOL_1;
GlueMlTransform[_g] = { fqn: "@cdktf/provider-aws.glueMlTransform.GlueMlTransform", version: "10.0.12" };
// =================
// STATIC PROPERTIES
// =================
GlueMlTransform.tfResourceType = "aws_glue_ml_transform";
//# sourceMappingURL=data:application/json;base64,