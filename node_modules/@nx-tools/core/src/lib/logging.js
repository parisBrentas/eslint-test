"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startGroup = exports.GROUP_PREFIX = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = void 0;
const devkit_1 = require("@nrwl/devkit");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const chalk = require('chalk');
//-----------------------------------------------------------------------
// Logging Commands
//-----------------------------------------------------------------------
/**
 * Gets whether Actions Step Debug is on or not
 */
function isDebug() {
    return process.env['RUNNER_DEBUG'] === '1';
}
exports.isDebug = isDebug;
/**
 * Writes debug message to user log
 * @param message debug message
 */
function debug(message) {
    devkit_1.logger.debug(message);
}
exports.debug = debug;
/**
 * Writes error to log with console.log
 * @param message error issue message. Errors will be converted to string via toString()
 */
function error(message) {
    devkit_1.logger.error(message instanceof Error ? message.toString() : message);
}
exports.error = error;
/**
 * Writes warning to log with console.log
 * @param message warning issue message. Errors will be converted to string via toString()
 */
function warning(message) {
    devkit_1.logger.warn(message instanceof Error ? message.toString() : message);
}
exports.warning = warning;
/**
 * Writes notice to log with console.log
 * @param message notice issue message. Errors will be converted to string via toString()
 */
function notice(message) {
    devkit_1.logger.log(message instanceof Error ? message.toString() : message);
}
exports.notice = notice;
/**
 * Writes info to log with console.log.
 * @param message info message
 */
function info(message) {
    devkit_1.logger.info(message);
}
exports.info = info;
const GROUP_PREFIX = (prefix) => {
    const trimmed = prefix.trim();
    if (trimmed.length === 0) {
        return `${chalk.cyan('>')}`;
    }
    return `${chalk.cyan('>')} ${chalk.reset.inverse.bold.keyword('grey')(` ${trimmed} `)}`;
};
exports.GROUP_PREFIX = GROUP_PREFIX;
/**
 * Writes group header info to log with console.log.
 * @param message info message
 */
function startGroup(message, prefix = '') {
    console.info(`\n${(0, exports.GROUP_PREFIX)(prefix)} ${chalk.bold(message)}\n`);
}
exports.startGroup = startGroup;
//# sourceMappingURL=logging.js.map