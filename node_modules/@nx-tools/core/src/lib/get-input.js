"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.getPosixName = void 0;
const devkit_1 = require("@nrwl/devkit");
const getPosixName = (name) => (0, devkit_1.names)(`INPUT_${name}`).constantName;
exports.getPosixName = getPosixName;
/**
 * Gets the value of an input.
 * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
 * Returns an empty string if the value is not defined.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string
 */
function getInput(name, options) {
    let val = '';
    const prefix = options === null || options === void 0 ? void 0 : options.prefix;
    if (prefix) {
        val = process.env[(0, exports.getPosixName)(`${prefix}_${name}`)] || '';
    }
    if (!val) {
        val = process.env[(0, exports.getPosixName)(name)] || '';
    }
    if (!val && (options === null || options === void 0 ? void 0 : options.fallback)) {
        val = options.fallback;
    }
    if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
    }
    if (options && options.trimWhitespace === false) {
        return val;
    }
    return val.trim();
}
exports.getInput = getInput;
/**
 * Gets the values of an multiline input.  Each value is also trimmed.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string[]
 *
 */
function getMultilineInput(name, options) {
    const inputs = getInput(name, options)
        .split('\n')
        .filter((x) => x !== '');
    return inputs;
}
exports.getMultilineInput = getMultilineInput;
/**
 * Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
 * Support boolean input list: `true | True | TRUE | false | False | FALSE` .
 * The return value is also in boolean type.
 * ref: https://yaml.org/spec/1.2/spec.html#id2804923
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   boolean
 */
function getBooleanInput(name, options) {
    const trueValue = ['true', 'True', 'TRUE'];
    const falseValue = ['false', 'False', 'FALSE'];
    const val = getInput(name, options);
    if (trueValue.includes(val))
        return true;
    if (falseValue.includes(val))
        return false;
    throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}\n` +
        `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
}
exports.getBooleanInput = getBooleanInput;
//# sourceMappingURL=get-input.js.map