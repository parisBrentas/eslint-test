"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cypressComponentConfigGenerator = void 0;
const tslib_1 = require("tslib");
const cypress_1 = require("@nrwl/cypress");
const devkit_1 = require("@nrwl/devkit");
const ts = require("typescript");
const ast_utils_1 = require("../../utils/ast-utils");
const component_test_1 = require("../component-test/component-test");
const allowedFileExt = new RegExp(/\.[jt]sx?/g);
const isSpecFile = new RegExp(/(spec|test)\./g);
/**
 * This is for using cypresses own Component testing, if you want to use test
 * storybook components then use componentCypressGenerator instead.
 *
 */
function cypressComponentConfigGenerator(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.project);
        const installTask = yield (0, cypress_1.cypressComponentProject)(tree, {
            project: options.project,
            skipFormat: true,
        });
        addFiles(tree, projectConfig, options);
        updateTsConfig(tree, projectConfig);
        if (options.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
        return () => {
            installTask();
        };
    });
}
exports.cypressComponentConfigGenerator = cypressComponentConfigGenerator;
function addFiles(tree, projectConfig, options) {
    const cypressConfigPath = (0, devkit_1.joinPathFragments)(projectConfig.root, 'cypress.config.ts');
    if (tree.exists(cypressConfigPath)) {
        tree.delete(cypressConfigPath);
    }
    (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, 'files'), projectConfig.root, {
        tpl: '',
    });
    if (options.generateTests) {
        (0, devkit_1.visitNotIgnoredFiles)(tree, projectConfig.sourceRoot, (filePath) => {
            if (isComponent(tree, filePath)) {
                (0, component_test_1.default)(tree, {
                    project: options.project,
                    componentPath: filePath,
                });
            }
        });
    }
}
function updateTsConfig(tree, projectConfig) {
    const tsConfigPath = (0, devkit_1.joinPathFragments)(projectConfig.root, projectConfig.projectType === 'library'
        ? 'tsconfig.lib.json'
        : 'tsconfig.app.json');
    if (tree.exists(tsConfigPath)) {
        (0, devkit_1.updateJson)(tree, tsConfigPath, (json) => {
            const excluded = new Set([
                ...(json.exclude || []),
                'cypress/**/*',
                'cypress.config.ts',
                '**/*.cy.ts',
                '**/*.cy.js',
                '**/*.cy.tsx',
                '**/*.cy.jsx',
            ]);
            json.exclude = Array.from(excluded);
            return json;
        });
    }
    const projectBaseTsConfig = (0, devkit_1.joinPathFragments)(projectConfig.root, 'tsconfig.json');
    if (tree.exists(projectBaseTsConfig)) {
        (0, devkit_1.updateJson)(tree, projectBaseTsConfig, (json) => {
            if (json.references) {
                const hasCyTsConfig = json.references.some((r) => r.path === './tsconfig.cy.json');
                if (!hasCyTsConfig) {
                    json.references.push({ path: './tsconfig.cy.json' });
                }
            }
            else {
                const excluded = new Set([
                    ...(json.exclude || []),
                    'cypress/**/*',
                    'cypress.config.ts',
                    '**/*.cy.ts',
                    '**/*.cy.js',
                    '**/*.cy.tsx',
                    '**/*.cy.jsx',
                ]);
                json.exclude = Array.from(excluded);
            }
            return json;
        });
    }
}
function isComponent(tree, filePath) {
    if (isSpecFile.test(filePath) || !allowedFileExt.test(filePath)) {
        return false;
    }
    const content = tree.read(filePath, 'utf-8');
    const sourceFile = ts.createSourceFile(filePath, content, ts.ScriptTarget.Latest, true);
    const cmpDeclaration = (0, ast_utils_1.getComponentNode)(sourceFile);
    return !!cmpDeclaration;
}
exports.default = cypressComponentConfigGenerator;
//# sourceMappingURL=cypress-component-configuration.js.map