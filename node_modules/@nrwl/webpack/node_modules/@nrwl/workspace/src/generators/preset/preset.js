"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.presetGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const insert_statement_1 = require("../utils/insert-statement");
const presets_1 = require("../utils/presets");
function presetGenerator(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        options = normalizeOptions(options);
        yield createPreset(tree, options);
        yield (0, devkit_1.formatFiles)(tree);
        return () => {
            (0, devkit_1.installPackagesTask)(tree);
        };
    });
}
exports.presetGenerator = presetGenerator;
exports.default = presetGenerator;
function createPreset(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (options.preset === presets_1.Preset.Empty || options.preset === presets_1.Preset.Apps) {
            return;
        }
        else if (options.preset === presets_1.Preset.Angular) {
            const { applicationGenerator: angularApplicationGenerator, } = require('@nrwl' + '/angular/generators');
            yield angularApplicationGenerator(tree, {
                name: options.name,
                style: options.style,
                linter: options.linter,
                standaloneConfig: options.standaloneConfig,
            });
        }
        else if (options.preset === presets_1.Preset.React) {
            const { applicationGenerator: reactApplicationGenerator, } = require('@nrwl' + '/react');
            yield reactApplicationGenerator(tree, {
                name: options.name,
                style: options.style,
                linter: options.linter,
                standaloneConfig: options.standaloneConfig,
            });
        }
        else if (options.preset === presets_1.Preset.ReactExperimental) {
            const { applicationGenerator: reactApplicationGenerator, } = require('@nrwl' + '/react');
            yield reactApplicationGenerator(tree, {
                name: options.name,
                style: options.style,
                linter: 'none',
                unitTestRunner: 'none',
                standaloneConfig: options.standaloneConfig,
                rootProject: true,
            });
        }
        else if (options.preset === presets_1.Preset.NextJs) {
            const { applicationGenerator: nextApplicationGenerator } = require('@nrwl' +
                '/next');
            yield nextApplicationGenerator(tree, {
                name: options.name,
                style: options.style,
                linter: options.linter,
                standaloneConfig: options.standaloneConfig,
            });
        }
        else if (options.preset === presets_1.Preset.WebComponents) {
            const { applicationGenerator: webApplicationGenerator } = require('@nrwl' +
                '/web');
            yield webApplicationGenerator(tree, {
                name: options.name,
                style: options.style,
                linter: options.linter,
                standaloneConfig: options.standaloneConfig,
            });
            (0, devkit_1.addDependenciesToPackageJson)(tree, {}, {
                '@ungap/custom-elements': '0.1.6',
            });
            addPolyfills(tree, `apps/${(0, devkit_1.names)(options.name).fileName}/src/polyfills.ts`, ['@ungap/custom-elements']);
        }
        else if (options.preset === presets_1.Preset.Nest) {
            const { applicationGenerator: nestApplicationGenerator } = require('@nrwl' +
                '/nest');
            yield nestApplicationGenerator(tree, {
                name: options.name,
                linter: options.linter,
            });
        }
        else if (options.preset === presets_1.Preset.Express) {
            const { applicationGenerator: expressApplicationGenerator, } = require('@nrwl' + '/express');
            yield expressApplicationGenerator(tree, {
                name: options.name,
                linter: options.linter,
                standaloneConfig: options.standaloneConfig,
            });
        }
        else if (options.preset === presets_1.Preset.ReactNative) {
            const { reactNativeApplicationGenerator } = require('@nrwl' +
                '/react-native');
            yield reactNativeApplicationGenerator(tree, {
                name: options.name,
                linter: options.linter,
                standaloneConfig: options.standaloneConfig,
                e2eTestRunner: 'detox',
            });
        }
        else if (options.preset === presets_1.Preset.Expo) {
            const { expoApplicationGenerator } = require('@nrwl' + '/expo');
            yield expoApplicationGenerator(tree, {
                name: options.name,
                linter: options.linter,
                standaloneConfig: options.standaloneConfig,
                e2eTestRunner: 'detox',
            });
        }
        else if (options.preset === presets_1.Preset.TS) {
            const c = (0, devkit_1.readWorkspaceConfiguration)(tree);
            c.workspaceLayout = {
                appsDir: 'packages',
                libsDir: 'packages',
            };
            (0, devkit_1.updateWorkspaceConfiguration)(tree, c);
        }
        else {
            throw new Error(`Invalid preset ${options.preset}`);
        }
    });
}
function addPolyfills(host, polyfillsPath, polyfills) {
    for (const polyfill of polyfills) {
        (0, insert_statement_1.insertStatement)(host, polyfillsPath, `import '${polyfill}';\n`);
    }
}
function normalizeOptions(options) {
    options.name = (0, devkit_1.names)(options.name).fileName;
    return options;
}
//# sourceMappingURL=preset.js.map